
Relay_Ctrl-dy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fad4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800fda8  0800fda8  0001fda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801032c  0801032c  0002032c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010334  08010334  00020334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010338  08010338  00020338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0801033c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004560  240001e8  08010524  000301e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004748  08010524  00034748  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033c20  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004448  00000000  00000000  00063e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d88  00000000  00000000  00068280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c40  00000000  00000000  0006a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c3f  00000000  00000000  0006bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002350d  00000000  00000000  000a5887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017dc01  00000000  00000000  000c8d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00246995  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000966c  00000000  00000000  002469e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fd8c 	.word	0x0800fd8c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800fd8c 	.word	0x0800fd8c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a6 	b.w	8000a9c <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468c      	mov	ip, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8083 	bne.w	80008ee <__udivmoddi4+0x116>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d947      	bls.n	800087e <__udivmoddi4+0xa6>
 80007ee:	fab2 f282 	clz	r2, r2
 80007f2:	b142      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f4:	f1c2 0020 	rsb	r0, r2, #32
 80007f8:	fa24 f000 	lsr.w	r0, r4, r0
 80007fc:	4091      	lsls	r1, r2
 80007fe:	4097      	lsls	r7, r2
 8000800:	ea40 0c01 	orr.w	ip, r0, r1
 8000804:	4094      	lsls	r4, r2
 8000806:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fbbc f6f8 	udiv	r6, ip, r8
 8000810:	fa1f fe87 	uxth.w	lr, r7
 8000814:	fb08 c116 	mls	r1, r8, r6, ip
 8000818:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081c:	fb06 f10e 	mul.w	r1, r6, lr
 8000820:	4299      	cmp	r1, r3
 8000822:	d909      	bls.n	8000838 <__udivmoddi4+0x60>
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	f106 30ff 	add.w	r0, r6, #4294967295
 800082a:	f080 8119 	bcs.w	8000a60 <__udivmoddi4+0x288>
 800082e:	4299      	cmp	r1, r3
 8000830:	f240 8116 	bls.w	8000a60 <__udivmoddi4+0x288>
 8000834:	3e02      	subs	r6, #2
 8000836:	443b      	add	r3, r7
 8000838:	1a5b      	subs	r3, r3, r1
 800083a:	b2a4      	uxth	r4, r4
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000848:	fb00 fe0e 	mul.w	lr, r0, lr
 800084c:	45a6      	cmp	lr, r4
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x8c>
 8000850:	193c      	adds	r4, r7, r4
 8000852:	f100 33ff 	add.w	r3, r0, #4294967295
 8000856:	f080 8105 	bcs.w	8000a64 <__udivmoddi4+0x28c>
 800085a:	45a6      	cmp	lr, r4
 800085c:	f240 8102 	bls.w	8000a64 <__udivmoddi4+0x28c>
 8000860:	3802      	subs	r0, #2
 8000862:	443c      	add	r4, r7
 8000864:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000868:	eba4 040e 	sub.w	r4, r4, lr
 800086c:	2600      	movs	r6, #0
 800086e:	b11d      	cbz	r5, 8000878 <__udivmoddi4+0xa0>
 8000870:	40d4      	lsrs	r4, r2
 8000872:	2300      	movs	r3, #0
 8000874:	e9c5 4300 	strd	r4, r3, [r5]
 8000878:	4631      	mov	r1, r6
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	b902      	cbnz	r2, 8000882 <__udivmoddi4+0xaa>
 8000880:	deff      	udf	#255	; 0xff
 8000882:	fab2 f282 	clz	r2, r2
 8000886:	2a00      	cmp	r2, #0
 8000888:	d150      	bne.n	800092c <__udivmoddi4+0x154>
 800088a:	1bcb      	subs	r3, r1, r7
 800088c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000890:	fa1f f887 	uxth.w	r8, r7
 8000894:	2601      	movs	r6, #1
 8000896:	fbb3 fcfe 	udiv	ip, r3, lr
 800089a:	0c21      	lsrs	r1, r4, #16
 800089c:	fb0e 331c 	mls	r3, lr, ip, r3
 80008a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a4:	fb08 f30c 	mul.w	r3, r8, ip
 80008a8:	428b      	cmp	r3, r1
 80008aa:	d907      	bls.n	80008bc <__udivmoddi4+0xe4>
 80008ac:	1879      	adds	r1, r7, r1
 80008ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008b2:	d202      	bcs.n	80008ba <__udivmoddi4+0xe2>
 80008b4:	428b      	cmp	r3, r1
 80008b6:	f200 80e9 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008ba:	4684      	mov	ip, r0
 80008bc:	1ac9      	subs	r1, r1, r3
 80008be:	b2a3      	uxth	r3, r4
 80008c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008c4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008c8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008cc:	fb08 f800 	mul.w	r8, r8, r0
 80008d0:	45a0      	cmp	r8, r4
 80008d2:	d907      	bls.n	80008e4 <__udivmoddi4+0x10c>
 80008d4:	193c      	adds	r4, r7, r4
 80008d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x10a>
 80008dc:	45a0      	cmp	r8, r4
 80008de:	f200 80d9 	bhi.w	8000a94 <__udivmoddi4+0x2bc>
 80008e2:	4618      	mov	r0, r3
 80008e4:	eba4 0408 	sub.w	r4, r4, r8
 80008e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008ec:	e7bf      	b.n	800086e <__udivmoddi4+0x96>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d909      	bls.n	8000906 <__udivmoddi4+0x12e>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	f000 80b1 	beq.w	8000a5a <__udivmoddi4+0x282>
 80008f8:	2600      	movs	r6, #0
 80008fa:	e9c5 0100 	strd	r0, r1, [r5]
 80008fe:	4630      	mov	r0, r6
 8000900:	4631      	mov	r1, r6
 8000902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000906:	fab3 f683 	clz	r6, r3
 800090a:	2e00      	cmp	r6, #0
 800090c:	d14a      	bne.n	80009a4 <__udivmoddi4+0x1cc>
 800090e:	428b      	cmp	r3, r1
 8000910:	d302      	bcc.n	8000918 <__udivmoddi4+0x140>
 8000912:	4282      	cmp	r2, r0
 8000914:	f200 80b8 	bhi.w	8000a88 <__udivmoddi4+0x2b0>
 8000918:	1a84      	subs	r4, r0, r2
 800091a:	eb61 0103 	sbc.w	r1, r1, r3
 800091e:	2001      	movs	r0, #1
 8000920:	468c      	mov	ip, r1
 8000922:	2d00      	cmp	r5, #0
 8000924:	d0a8      	beq.n	8000878 <__udivmoddi4+0xa0>
 8000926:	e9c5 4c00 	strd	r4, ip, [r5]
 800092a:	e7a5      	b.n	8000878 <__udivmoddi4+0xa0>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f603 	lsr.w	r6, r0, r3
 8000934:	4097      	lsls	r7, r2
 8000936:	fa01 f002 	lsl.w	r0, r1, r2
 800093a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093e:	40d9      	lsrs	r1, r3
 8000940:	4330      	orrs	r0, r6
 8000942:	0c03      	lsrs	r3, r0, #16
 8000944:	fbb1 f6fe 	udiv	r6, r1, lr
 8000948:	fa1f f887 	uxth.w	r8, r7
 800094c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000950:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000954:	fb06 f108 	mul.w	r1, r6, r8
 8000958:	4299      	cmp	r1, r3
 800095a:	fa04 f402 	lsl.w	r4, r4, r2
 800095e:	d909      	bls.n	8000974 <__udivmoddi4+0x19c>
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	f106 3cff 	add.w	ip, r6, #4294967295
 8000966:	f080 808d 	bcs.w	8000a84 <__udivmoddi4+0x2ac>
 800096a:	4299      	cmp	r1, r3
 800096c:	f240 808a 	bls.w	8000a84 <__udivmoddi4+0x2ac>
 8000970:	3e02      	subs	r6, #2
 8000972:	443b      	add	r3, r7
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b281      	uxth	r1, r0
 8000978:	fbb3 f0fe 	udiv	r0, r3, lr
 800097c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000980:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000984:	fb00 f308 	mul.w	r3, r0, r8
 8000988:	428b      	cmp	r3, r1
 800098a:	d907      	bls.n	800099c <__udivmoddi4+0x1c4>
 800098c:	1879      	adds	r1, r7, r1
 800098e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000992:	d273      	bcs.n	8000a7c <__udivmoddi4+0x2a4>
 8000994:	428b      	cmp	r3, r1
 8000996:	d971      	bls.n	8000a7c <__udivmoddi4+0x2a4>
 8000998:	3802      	subs	r0, #2
 800099a:	4439      	add	r1, r7
 800099c:	1acb      	subs	r3, r1, r3
 800099e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009a2:	e778      	b.n	8000896 <__udivmoddi4+0xbe>
 80009a4:	f1c6 0c20 	rsb	ip, r6, #32
 80009a8:	fa03 f406 	lsl.w	r4, r3, r6
 80009ac:	fa22 f30c 	lsr.w	r3, r2, ip
 80009b0:	431c      	orrs	r4, r3
 80009b2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009b6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009be:	fa21 f10c 	lsr.w	r1, r1, ip
 80009c2:	431f      	orrs	r7, r3
 80009c4:	0c3b      	lsrs	r3, r7, #16
 80009c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ca:	fa1f f884 	uxth.w	r8, r4
 80009ce:	fb0e 1119 	mls	r1, lr, r9, r1
 80009d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009d6:	fb09 fa08 	mul.w	sl, r9, r8
 80009da:	458a      	cmp	sl, r1
 80009dc:	fa02 f206 	lsl.w	r2, r2, r6
 80009e0:	fa00 f306 	lsl.w	r3, r0, r6
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x220>
 80009e6:	1861      	adds	r1, r4, r1
 80009e8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009ec:	d248      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 80009ee:	458a      	cmp	sl, r1
 80009f0:	d946      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 80009f2:	f1a9 0902 	sub.w	r9, r9, #2
 80009f6:	4421      	add	r1, r4
 80009f8:	eba1 010a 	sub.w	r1, r1, sl
 80009fc:	b2bf      	uxth	r7, r7
 80009fe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a0a:	fb00 f808 	mul.w	r8, r0, r8
 8000a0e:	45b8      	cmp	r8, r7
 8000a10:	d907      	bls.n	8000a22 <__udivmoddi4+0x24a>
 8000a12:	19e7      	adds	r7, r4, r7
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d22e      	bcs.n	8000a78 <__udivmoddi4+0x2a0>
 8000a1a:	45b8      	cmp	r8, r7
 8000a1c:	d92c      	bls.n	8000a78 <__udivmoddi4+0x2a0>
 8000a1e:	3802      	subs	r0, #2
 8000a20:	4427      	add	r7, r4
 8000a22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a26:	eba7 0708 	sub.w	r7, r7, r8
 8000a2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a2e:	454f      	cmp	r7, r9
 8000a30:	46c6      	mov	lr, r8
 8000a32:	4649      	mov	r1, r9
 8000a34:	d31a      	bcc.n	8000a6c <__udivmoddi4+0x294>
 8000a36:	d017      	beq.n	8000a68 <__udivmoddi4+0x290>
 8000a38:	b15d      	cbz	r5, 8000a52 <__udivmoddi4+0x27a>
 8000a3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a46:	40f2      	lsrs	r2, r6
 8000a48:	ea4c 0202 	orr.w	r2, ip, r2
 8000a4c:	40f7      	lsrs	r7, r6
 8000a4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a52:	2600      	movs	r6, #0
 8000a54:	4631      	mov	r1, r6
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e70b      	b.n	8000878 <__udivmoddi4+0xa0>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e9      	b.n	8000838 <__udivmoddi4+0x60>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6fd      	b.n	8000864 <__udivmoddi4+0x8c>
 8000a68:	4543      	cmp	r3, r8
 8000a6a:	d2e5      	bcs.n	8000a38 <__udivmoddi4+0x260>
 8000a6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a70:	eb69 0104 	sbc.w	r1, r9, r4
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7df      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e7d2      	b.n	8000a22 <__udivmoddi4+0x24a>
 8000a7c:	4660      	mov	r0, ip
 8000a7e:	e78d      	b.n	800099c <__udivmoddi4+0x1c4>
 8000a80:	4681      	mov	r9, r0
 8000a82:	e7b9      	b.n	80009f8 <__udivmoddi4+0x220>
 8000a84:	4666      	mov	r6, ip
 8000a86:	e775      	b.n	8000974 <__udivmoddi4+0x19c>
 8000a88:	4630      	mov	r0, r6
 8000a8a:	e74a      	b.n	8000922 <__udivmoddi4+0x14a>
 8000a8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a90:	4439      	add	r1, r7
 8000a92:	e713      	b.n	80008bc <__udivmoddi4+0xe4>
 8000a94:	3802      	subs	r0, #2
 8000a96:	443c      	add	r4, r7
 8000a98:	e724      	b.n	80008e4 <__udivmoddi4+0x10c>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_idiv0>:
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__io_putchar>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <__io_putchar+0x20>)
 8000ab2:	f009 fbad 	bl	800a210 <HAL_UART_Transmit>

  return ch;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	240002cc 	.word	0x240002cc

08000ac4 <save_timestamp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// save current tim14 cnt with given sequence step(x)
void save_timestamp(int x){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	timestamp[id][0] = x;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <save_timestamp+0x44>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	490e      	ldr	r1, [pc, #56]	; (8000b0c <save_timestamp+0x48>)
 8000ad4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timestamp[id][1] = TIM14->CNT / 100;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <save_timestamp+0x4c>)
 8000ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <save_timestamp+0x44>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <save_timestamp+0x50>)
 8000ae2:	fba1 1202 	umull	r1, r2, r1, r2
 8000ae6:	0952      	lsrs	r2, r2, #5
 8000ae8:	4908      	ldr	r1, [pc, #32]	; (8000b0c <save_timestamp+0x48>)
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	605a      	str	r2, [r3, #4]
	//timestamp[id] = uwTick;
	id++;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <save_timestamp+0x44>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <save_timestamp+0x44>)
 8000af8:	6013      	str	r3, [r2, #0]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	24000204 	.word	0x24000204
 8000b0c:	2400035c 	.word	0x2400035c
 8000b10:	40002000 	.word	0x40002000
 8000b14:	51eb851f 	.word	0x51eb851f

08000b18 <print_timestamp>:

// print the timestamps saved before
void print_timestamp(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
	int i, tmp;
	int k = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
	i = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
	for (i=0; i<id; i++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e039      	b.n	8000ba0 <print_timestamp+0x88>
		// when cnt is overflowed
		if (timestamp[i][1] <= timestamp[i-1][1])
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <print_timestamp+0x9c>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4413      	add	r3, r2
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	491e      	ldr	r1, [pc, #120]	; (8000bb4 <print_timestamp+0x9c>)
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	440b      	add	r3, r1
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d810      	bhi.n	8000b68 <print_timestamp+0x50>
			tmp = 65535 + timestamp[i][1] - timestamp[i-1][1];
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <print_timestamp+0x9c>)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	4917      	ldr	r1, [pc, #92]	; (8000bb4 <print_timestamp+0x9c>)
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	1ad2      	subs	r2, r2, r3
 8000b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	e00c      	b.n	8000b82 <print_timestamp+0x6a>
		else
			tmp = timestamp[i][1] - timestamp[i-1][1];
 8000b68:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <print_timestamp+0x9c>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4413      	add	r3, r2
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	490f      	ldr	r1, [pc, #60]	; (8000bb4 <print_timestamp+0x9c>)
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	60bb      	str	r3, [r7, #8]
		printf("(%d) %ld ms ellapsed after prev timestamp. \r\n", timestamp[i][0], tmp);
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <print_timestamp+0x9c>)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <print_timestamp+0xa0>)
 8000b90:	f00b fb70 	bl	800c274 <iprintf>
		printf("--------------------\r\n");
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <print_timestamp+0xa4>)
 8000b96:	f00b fbf3 	bl	800c380 <puts>
	for (i=0; i<id; i++){
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <print_timestamp+0xa8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3c0      	bcc.n	8000b2c <print_timestamp+0x14>
	}

}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2400035c 	.word	0x2400035c
 8000bb8:	0800fda8 	.word	0x0800fda8
 8000bbc:	0800fdd8 	.word	0x0800fdd8
 8000bc0:	24000204 	.word	0x24000204

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
//	timing_counter += 1;
//}

// timers interrupt handler routine
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a46      	ldr	r2, [pc, #280]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d140      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x94>
		switch(tim7_status){
 8000bd6:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d022      	beq.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	dc3b      	bgt.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x96>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x28>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d00f      	beq.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x46>
 8000bea:	e036      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x96>
			case MN_ON: // mn relay on
				HAL_TIM_Base_Stop_IT(&htim7);
 8000bec:	4841      	ldr	r0, [pc, #260]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bee:	f008 fb07 	bl	8009200 <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bf8:	f004 fda8 	bl	800574c <HAL_GPIO_WritePin>
				save_timestamp(0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff ff61 	bl	8000ac4 <save_timestamp>
				tim7_status = MP_ON; // toggle timer status
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
				break;
 8000c08:	e027      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x96>
			case MP_ON: // mp relay on
				HAL_TIM_Base_Stop_IT(&htim7);
 8000c0a:	483a      	ldr	r0, [pc, #232]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c0c:	f008 faf8 	bl	8009200 <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(GPIOA, MP_Relay_Pin, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	4839      	ldr	r0, [pc, #228]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c18:	f004 fd98 	bl	800574c <HAL_GPIO_WritePin>
				save_timestamp(3);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f7ff ff51 	bl	8000ac4 <save_timestamp>
				break;
 8000c22:	e01a      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x96>
			case OFF: // mn, mp igbt off
				HAL_TIM_Base_Stop_IT(&htim7);
 8000c24:	4833      	ldr	r0, [pc, #204]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c26:	f008 faeb 	bl	8009200 <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4832      	ldr	r0, [pc, #200]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c30:	f004 fd8c 	bl	800574c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4831      	ldr	r0, [pc, #196]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c3c:	f004 fd86 	bl	800574c <HAL_GPIO_WritePin>
				save_timestamp(5);
 8000c40:	2005      	movs	r0, #5
 8000c42:	f7ff ff3f 	bl	8000ac4 <save_timestamp>
				HAL_TIM_Base_Stop(&htim14);
 8000c46:	482f      	ldr	r0, [pc, #188]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c48:	f008 fa2c 	bl	80090a4 <HAL_TIM_Base_Stop>
				print_timestamp();
 8000c4c:	f7ff ff64 	bl	8000b18 <print_timestamp>
				id = 0; // reset the timestamp id
 8000c50:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e000      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x96>
		}

	}
 8000c58:	bf00      	nop
	if (htim->Instance == TIM13){ // pc igbt on
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d10a      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0xb6>
		HAL_TIM_Base_Stop_IT(&htim13);
 8000c64:	482a      	ldr	r0, [pc, #168]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c66:	f008 facb 	bl	8009200 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	4829      	ldr	r0, [pc, #164]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c70:	f004 fd6c 	bl	800574c <HAL_GPIO_WritePin>
		save_timestamp(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ff25 	bl	8000ac4 <save_timestamp>
	}
	if (htim->Instance == TIM16){ // mp igbt on
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d116      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0xee>
		HAL_TIM_Base_Stop_IT(&htim16);
 8000c84:	4825      	ldr	r0, [pc, #148]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000c86:	f008 fabb 	bl	8009200 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c92:	f004 fd5b 	bl	800574c <HAL_GPIO_WritePin>
		save_timestamp(2);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f7ff ff14 	bl	8000ac4 <save_timestamp>
		TIM7->CNT = 0; // reset tim 7 for precise timing(50ms)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
		FIX_TIMER_TRIGGER(&htim7); // start timer mp relay on
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f06f 0201 	mvn.w	r2, #1
 8000caa:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim7);
 8000cac:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000cae:	f008 fa21 	bl	80090f4 <HAL_TIM_Base_Start_IT>
	}
	if (htim->Instance == TIM17){ // pc igbt off
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d112      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x11e>
		HAL_TIM_Base_Stop_IT(&htim17);
 8000cbc:	4819      	ldr	r0, [pc, #100]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000cbe:	f008 fa9f 	bl	8009200 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	4813      	ldr	r0, [pc, #76]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000cc8:	f004 fd40 	bl	800574c <HAL_GPIO_WritePin>
		save_timestamp(4);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f7ff fef9 	bl	8000ac4 <save_timestamp>
		HAL_TIM_Base_Stop(&htim14);
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cd4:	f008 f9e6 	bl	80090a4 <HAL_TIM_Base_Stop>
		print_timestamp();
 8000cd8:	f7ff ff1e 	bl	8000b18 <print_timestamp>
		id = 0; // reset the timestamp id
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001400 	.word	0x40001400
 8000cf0:	2400021c 	.word	0x2400021c
 8000cf4:	24004648 	.word	0x24004648
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	58020000 	.word	0x58020000
 8000d00:	58021800 	.word	0x58021800
 8000d04:	240045b0 	.word	0x240045b0
 8000d08:	24000204 	.word	0x24000204
 8000d0c:	40001c00 	.word	0x40001c00
 8000d10:	240043c4 	.word	0x240043c4
 8000d14:	58021400 	.word	0x58021400
 8000d18:	40014400 	.word	0x40014400
 8000d1c:	240045fc 	.word	0x240045fc
 8000d20:	40014800 	.word	0x40014800
 8000d24:	2400424c 	.word	0x2400424c

08000d28 <HAL_GPIO_EXTI_Callback>:

// interrupt routine for user button pushed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d38:	d158      	bne.n	8000dec <HAL_GPIO_EXTI_Callback+0xc4>
		// turn on the timer for checking timing
		TIM14->CNT = 0;
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim14);
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d42:	f008 f931 	bl	8008fa8 <HAL_TIM_Base_Start>
		// if cur signal == auto_start
		if (signal_status){
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d027      	beq.n	8000d9e <HAL_GPIO_EXTI_Callback+0x76>
			// turn on mn igbt
			HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2104      	movs	r1, #4
 8000d52:	482b      	ldr	r0, [pc, #172]	; (8000e00 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d54:	f004 fcfa 	bl	800574c <HAL_GPIO_WritePin>
			tim7_status = MN_ON;
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
			// turn on mn relay
			FIX_TIMER_TRIGGER(&htim7);
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f06f 0201 	mvn.w	r2, #1
 8000d66:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim7);
 8000d68:	4827      	ldr	r0, [pc, #156]	; (8000e08 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d6a:	f008 f9c3 	bl	80090f4 <HAL_TIM_Base_Start_IT>
			// turn on pc igbt
			FIX_TIMER_TRIGGER(&htim13);
 8000d6e:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f06f 0201 	mvn.w	r2, #1
 8000d76:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim13);
 8000d78:	4824      	ldr	r0, [pc, #144]	; (8000e0c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d7a:	f008 f9bb 	bl	80090f4 <HAL_TIM_Base_Start_IT>
			// turn on mp igbt
			FIX_TIMER_TRIGGER(&htim16);
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f06f 0201 	mvn.w	r2, #1
 8000d86:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim16);
 8000d88:	4821      	ldr	r0, [pc, #132]	; (8000e10 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d8a:	f008 f9b3 	bl	80090f4 <HAL_TIM_Base_Start_IT>
			// turn off pc relay
			FIX_TIMER_TRIGGER(&htim17);
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f06f 0201 	mvn.w	r2, #1
 8000d96:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim17);
 8000d98:	481e      	ldr	r0, [pc, #120]	; (8000e14 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d9a:	f008 f9ab 	bl	80090f4 <HAL_TIM_Base_Start_IT>
		}
		// if cur signal == stop
		if (!signal_status){
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d118      	bne.n	8000dd8 <HAL_GPIO_EXTI_Callback+0xb0>
			// turn off mn relay, mp relay
			HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2108      	movs	r1, #8
 8000daa:	4815      	ldr	r0, [pc, #84]	; (8000e00 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000dac:	f004 fcce 	bl	800574c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MP_Relay_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	4818      	ldr	r0, [pc, #96]	; (8000e18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000db8:	f004 fcc8 	bl	800574c <HAL_GPIO_WritePin>
			// turn off mn igbt, mp igbt
			tim7_status = OFF;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	601a      	str	r2, [r3, #0]
			TIM7->CNT = 0; // reset tim 7 for precise timing(50ms)
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
			FIX_TIMER_TRIGGER(&htim7);
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f06f 0201 	mvn.w	r2, #1
 8000dd0:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim7);
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000dd4:	f008 f98e 	bl	80090f4 <HAL_TIM_Base_Start_IT>
		}
		// toggle the signal_status (temporary)
		signal_status = !signal_status;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000dea:	601a      	str	r2, [r3, #0]
	}
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40002000 	.word	0x40002000
 8000df8:	240045b0 	.word	0x240045b0
 8000dfc:	24000000 	.word	0x24000000
 8000e00:	58020800 	.word	0x58020800
 8000e04:	2400021c 	.word	0x2400021c
 8000e08:	24004648 	.word	0x24004648
 8000e0c:	240043c4 	.word	0x240043c4
 8000e10:	240045fc 	.word	0x240045fc
 8000e14:	2400424c 	.word	0x2400424c
 8000e18:	58020000 	.word	0x58020000
 8000e1c:	40001400 	.word	0x40001400

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f002 f8e6 	bl	8002ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f83e 	bl	8000ea8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e2c:	f000 f8b6 	bl	8000f9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fe82 	bl	8001b38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e34:	f000 f8de 	bl	8000ff4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e38:	f000 f954 	bl	80010e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000e3c:	f000 f9b4 	bl	80011a8 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000e40:	f000 fa24 	bl	800128c <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000e44:	f000 fa54 	bl	80012f0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000e48:	f000 fab6 	bl	80013b8 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8000e4c:	f000 fb18 	bl	8001480 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000e50:	f000 fbb2 	bl	80015b8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e54:	f000 fc3e 	bl	80016d4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e58:	f000 fcac 	bl	80017b4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000e5c:	f000 fdd4 	bl	8001a08 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e60:	f000 fe1e 	bl	8001aa0 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8000e64:	f000 fd38 	bl	80018d8 <MX_TIM13_Init>
  MX_RTC_Init();
 8000e68:	f000 fb4a 	bl	8001500 <MX_RTC_Init>
  MX_TIM14_Init();
 8000e6c:	f000 fd58 	bl	8001920 <MX_TIM14_Init>
  MX_TIM7_Init();
 8000e70:	f000 fcfa 	bl	8001868 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000e74:	f000 fd78 	bl	8001968 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000e78:	f000 fd9e 	bl	80019b8 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2104      	movs	r1, #4
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <main+0x80>)
 8000e82:	f004 fc63 	bl	800574c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <main+0x80>)
 8000e8c:	f004 fc5e 	bl	800574c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <main+0x84>)
 8000e98:	f004 fc58 	bl	800574c <HAL_GPIO_WritePin>

  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x7c>
 8000e9e:	bf00      	nop
 8000ea0:	58020800 	.word	0x58020800
 8000ea4:	58021800 	.word	0x58021800

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09c      	sub	sp, #112	; 0x70
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	224c      	movs	r2, #76	; 0x4c
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f00a fb8e 	bl	800b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00a fb88 	bl	800b5d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f004 fd9b 	bl	8005a04 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <SystemClock_Config+0xec>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <SystemClock_Config+0xec>)
 8000ed8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <SystemClock_Config+0xec>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eea:	bf00      	nop
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <SystemClock_Config+0xec>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef8:	d1f8      	bne.n	8000eec <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0xf0>)
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f023 0303 	bic.w	r3, r3, #3
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <SystemClock_Config+0xf0>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f0a:	2309      	movs	r3, #9
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f20:	2305      	movs	r3, #5
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000f24:	236e      	movs	r3, #110	; 0x6e
 8000f26:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f34:	2308      	movs	r3, #8
 8000f36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fdb7 	bl	8005ab8 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f50:	f001 f980 	bl	8002254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	233f      	movs	r3, #63	; 0x3f
 8000f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f60:	2308      	movs	r3, #8
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f64:	2340      	movs	r3, #64	; 0x40
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f72:	2340      	movs	r3, #64	; 0x40
 8000f74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2103      	movs	r1, #3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 f948 	bl	8006210 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000f86:	f001 f965 	bl	8002254 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3770      	adds	r7, #112	; 0x70
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024800 	.word	0x58024800
 8000f98:	58024400 	.word	0x58024400

08000f9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ae      	sub	sp, #184	; 0xb8
 8000fa0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	22b4      	movs	r2, #180	; 0xb4
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f00a fb15 	bl	800b5d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fb2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000fb8:	2350      	movs	r3, #80	; 0x50
 8000fba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 fca3 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000fe8:	f001 f934 	bl	8002254 <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	37b8      	adds	r7, #184	; 0xb8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2224      	movs	r2, #36	; 0x24
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f00a fae3 	bl	800b5d8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001014:	4a31      	ldr	r2, [pc, #196]	; (80010dc <MX_ADC1_Init+0xe8>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800102c:	2204      	movs	r2, #4
 800102e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001032:	2200      	movs	r2, #0
 8001034:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001038:	2200      	movs	r2, #0
 800103a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800103e:	2201      	movs	r2, #1
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800104c:	2200      	movs	r2, #0
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001064:	2200      	movs	r2, #0
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	4819      	ldr	r0, [pc, #100]	; (80010d8 <MX_ADC1_Init+0xe4>)
 8001072:	f002 fad1 	bl	8003618 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800107c:	f001 f8ea 	bl	8002254 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_ADC1_Init+0xe4>)
 800108c:	f003 fb0a 	bl	80046a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001096:	f001 f8dd 	bl	8002254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0xec>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109e:	2306      	movs	r3, #6
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ac:	2304      	movs	r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <MX_ADC1_Init+0xe4>)
 80010c0:	f002 fcb2 	bl	8003a28 <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80010ca:	f001 f8c3 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	; 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	240042e4 	.word	0x240042e4
 80010dc:	40022000 	.word	0x40022000
 80010e0:	04300002 	.word	0x04300002

080010e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2224      	movs	r2, #36	; 0x24
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00a fa71 	bl	800b5d8 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_ADC2_Init+0xbc>)
 80010f8:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <MX_ADC2_Init+0xc0>)
 80010fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <MX_ADC2_Init+0xbc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001110:	2204      	movs	r2, #4
 8001112:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800111c:	2200      	movs	r2, #0
 800111e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001130:	2200      	movs	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001136:	2200      	movs	r2, #0
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800113c:	2200      	movs	r2, #0
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001142:	2200      	movs	r2, #0
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	4812      	ldr	r0, [pc, #72]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001156:	f002 fa5f 	bl	8003618 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001160:	f001 f878 	bl	8002254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2306      	movs	r3, #6
 800116a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001170:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001174:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001176:	2304      	movs	r3, #4
 8001178:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800118a:	f002 fc4d 	bl	8003a28 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001194:	f001 f85e 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	240041dc 	.word	0x240041dc
 80011a4:	40022100 	.word	0x40022100

080011a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2224      	movs	r2, #36	; 0x24
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a fa0f 	bl	800b5d8 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80011ba:	4b32      	ldr	r3, [pc, #200]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011bc:	4a32      	ldr	r2, [pc, #200]	; (8001288 <MX_ADC3_Init+0xe0>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011c8:	2208      	movs	r2, #8
 80011ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011da:	2204      	movs	r2, #4
 80011dc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_ADC3_Init+0xdc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_ADC3_Init+0xdc>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ADC3_Init+0xdc>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_ADC3_Init+0xdc>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_ADC3_Init+0xdc>)
 8001214:	2200      	movs	r2, #0
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ADC3_Init+0xdc>)
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_ADC3_Init+0xdc>)
 8001220:	2200      	movs	r2, #0
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_ADC3_Init+0xdc>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800122c:	4815      	ldr	r0, [pc, #84]	; (8001284 <MX_ADC3_Init+0xdc>)
 800122e:	f002 f9f3 	bl	8003618 <HAL_ADC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001238:	f001 f80c 	bl	8002254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800123c:	2301      	movs	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001240:	2306      	movs	r3, #6
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001248:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800124c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124e:	2304      	movs	r3, #4
 8001250:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_ADC3_Init+0xdc>)
 800126c:	f002 fbdc 	bl	8003a28 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8001276:	f000 ffed 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	24004354 	.word	0x24004354
 8001288:	58026000 	.word	0x58026000

0800128c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2224      	movs	r2, #36	; 0x24
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00a f99d 	bl	800b5d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_DAC1_Init+0x5c>)
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_DAC1_Init+0x60>)
 80012a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_DAC1_Init+0x5c>)
 80012a6:	f003 fbee 	bl	8004a86 <HAL_DAC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012b0:	f000 ffd0 	bl	8002254 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2210      	movs	r2, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_DAC1_Init+0x5c>)
 80012d0:	f003 fbfc 	bl	8004acc <HAL_DAC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 ffbb 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	240002b8 	.word	0x240002b8
 80012ec:	40007400 	.word	0x40007400

080012f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012f4:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <MX_FDCAN1_Init+0xc4>)
 80012f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001308:	2200      	movs	r2, #0
 800130a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800130e:	2200      	movs	r2, #0
 8001310:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800131a:	2201      	movs	r2, #1
 800131c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001320:	2201      	movs	r2, #1
 8001322:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001326:	2202      	movs	r2, #2
 8001328:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800132c:	2202      	movs	r2, #2
 800132e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001332:	2201      	movs	r2, #1
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001338:	2201      	movs	r2, #1
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800133e:	2201      	movs	r2, #1
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001344:	2201      	movs	r2, #1
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800134a:	2200      	movs	r2, #0
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001350:	2200      	movs	r2, #0
 8001352:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001356:	2200      	movs	r2, #0
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800135c:	2200      	movs	r2, #0
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001362:	2204      	movs	r2, #4
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800136e:	2204      	movs	r2, #4
 8001370:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001374:	2200      	movs	r2, #0
 8001376:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800137a:	2204      	movs	r2, #4
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001386:	2200      	movs	r2, #0
 8001388:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800138c:	2200      	movs	r2, #0
 800138e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001392:	2200      	movs	r2, #0
 8001394:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 8001398:	2204      	movs	r2, #4
 800139a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_FDCAN1_Init+0xc0>)
 800139e:	f003 fcc5 	bl	8004d2c <HAL_FDCAN_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80013a8:	f000 ff54 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	240044c4 	.word	0x240044c4
 80013b4:	4000a000 	.word	0x4000a000

080013b8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <MX_FDCAN2_Init+0xc4>)
 80013c0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001400:	2201      	movs	r2, #1
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001406:	2201      	movs	r2, #1
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 800140c:	2201      	movs	r2, #1
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001418:	2200      	movs	r2, #0
 800141a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 800141e:	2200      	movs	r2, #0
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001424:	2200      	movs	r2, #0
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 800142a:	2204      	movs	r2, #4
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001430:	2200      	movs	r2, #0
 8001432:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001436:	2204      	movs	r2, #4
 8001438:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 800143c:	2200      	movs	r2, #0
 800143e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001442:	2204      	movs	r2, #4
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001448:	2200      	movs	r2, #0
 800144a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 800144e:	2200      	movs	r2, #0
 8001450:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001454:	2200      	movs	r2, #0
 8001456:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 800145a:	2200      	movs	r2, #0
 800145c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001460:	2204      	movs	r2, #4
 8001462:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_FDCAN2_Init+0xc0>)
 8001466:	f003 fc61 	bl	8004d2c <HAL_FDCAN_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001470:	f000 fef0 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	24004694 	.word	0x24004694
 800147c:	4000a400 	.word	0x4000a400

08001480 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_I2C4_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_I2C4_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_I2C4_Init+0x74>)
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <MX_I2C4_Init+0x7c>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_I2C4_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_I2C4_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_I2C4_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014bc:	f004 f97a 	bl	80057b4 <HAL_I2C_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 fec5 	bl	8002254 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014ce:	f004 fa01 	bl	80058d4 <HAL_I2CEx_ConfigAnalogFilter>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 febc 	bl	8002254 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_I2C4_Init+0x74>)
 80014e0:	f004 fa43 	bl	800596a <HAL_I2CEx_ConfigDigitalFilter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 feb3 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	24000220 	.word	0x24000220
 80014f8:	58001c00 	.word	0x58001c00
 80014fc:	60404e72 	.word	0x60404e72

08001500 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <MX_RTC_Init+0xb0>)
 800151a:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <MX_RTC_Init+0xb4>)
 800151c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <MX_RTC_Init+0xb0>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <MX_RTC_Init+0xb0>)
 8001526:	227f      	movs	r2, #127	; 0x7f
 8001528:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_RTC_Init+0xb0>)
 800152c:	22ff      	movs	r2, #255	; 0xff
 800152e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_RTC_Init+0xb0>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <MX_RTC_Init+0xb0>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_RTC_Init+0xb0>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_RTC_Init+0xb0>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001548:	4819      	ldr	r0, [pc, #100]	; (80015b0 <MX_RTC_Init+0xb0>)
 800154a:	f007 fa7f 	bl	8008a4c <HAL_RTC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001554:	f000 fe7e 	bl	8002254 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8001558:	2322      	movs	r3, #34	; 0x22
 800155a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22;
 800155c:	2322      	movs	r3, #34	; 0x22
 800155e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x22;
 8001560:	2322      	movs	r3, #34	; 0x22
 8001562:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2201      	movs	r2, #1
 8001570:	4619      	mov	r1, r3
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <MX_RTC_Init+0xb0>)
 8001574:	f007 fae2 	bl	8008b3c <HAL_RTC_SetTime>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800157e:	f000 fe69 	bl	8002254 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001582:	2304      	movs	r3, #4
 8001584:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8001586:	2302      	movs	r3, #2
 8001588:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 800158a:	2310      	movs	r3, #16
 800158c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800158e:	2322      	movs	r3, #34	; 0x22
 8001590:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001592:	463b      	mov	r3, r7
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_RTC_Init+0xb0>)
 800159a:	f007 fb6d 	bl	8008c78 <HAL_RTC_SetDate>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80015a4:	f000 fe56 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	240044a0 	.word	0x240044a0
 80015b4:	58004000 	.word	0x58004000

080015b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b098      	sub	sp, #96	; 0x60
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2234      	movs	r2, #52	; 0x34
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f009 fff7 	bl	800b5d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <MX_TIM1_Init+0x114>)
 80015ec:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <MX_TIM1_Init+0x118>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <MX_TIM1_Init+0x114>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <MX_TIM1_Init+0x114>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015fc:	4b33      	ldr	r3, [pc, #204]	; (80016cc <MX_TIM1_Init+0x114>)
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <MX_TIM1_Init+0x114>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <MX_TIM1_Init+0x114>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <MX_TIM1_Init+0x114>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001616:	482d      	ldr	r0, [pc, #180]	; (80016cc <MX_TIM1_Init+0x114>)
 8001618:	f007 fe21 	bl	800925e <HAL_TIM_PWM_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 fe17 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001636:	4619      	mov	r1, r3
 8001638:	4824      	ldr	r0, [pc, #144]	; (80016cc <MX_TIM1_Init+0x114>)
 800163a:	f008 fc3f 	bl	8009ebc <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 fe06 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001664:	220c      	movs	r2, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <MX_TIM1_Init+0x114>)
 800166a:	f007 ff6f 	bl	800954c <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001674:	f000 fdee 	bl	8002254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800169a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <MX_TIM1_Init+0x114>)
 80016ae:	f008 fca1 	bl	8009ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80016b8:	f000 fdcc 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <MX_TIM1_Init+0x114>)
 80016be:	f001 f971 	bl	80029a4 <HAL_TIM_MspPostInit>

}
 80016c2:	bf00      	nop
 80016c4:	3760      	adds	r7, #96	; 0x60
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24004564 	.word	0x24004564
 80016d0:	40010000 	.word	0x40010000

080016d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <MX_TIM4_Init+0xd8>)
 80016fa:	4a2d      	ldr	r2, [pc, #180]	; (80017b0 <MX_TIM4_Init+0xdc>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <MX_TIM4_Init+0xd8>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_TIM4_Init+0xd8>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <MX_TIM4_Init+0xd8>)
 800170c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001710:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_TIM4_Init+0xd8>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <MX_TIM4_Init+0xd8>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800171e:	4823      	ldr	r0, [pc, #140]	; (80017ac <MX_TIM4_Init+0xd8>)
 8001720:	f007 fd9d 	bl	800925e <HAL_TIM_PWM_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800172a:	f000 fd93 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	481b      	ldr	r0, [pc, #108]	; (80017ac <MX_TIM4_Init+0xd8>)
 800173e:	f008 fbbd 	bl	8009ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001748:	f000 fd84 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174c:	2360      	movs	r3, #96	; 0x60
 800174e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_TIM4_Init+0xd8>)
 8001764:	f007 fef2 	bl	800954c <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800176e:	f000 fd71 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	2208      	movs	r2, #8
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_TIM4_Init+0xd8>)
 800177a:	f007 fee7 	bl	800954c <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001784:	f000 fd66 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	220c      	movs	r2, #12
 800178c:	4619      	mov	r1, r3
 800178e:	4807      	ldr	r0, [pc, #28]	; (80017ac <MX_TIM4_Init+0xd8>)
 8001790:	f007 fedc 	bl	800954c <HAL_TIM_PWM_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800179a:	f000 fd5b 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <MX_TIM4_Init+0xd8>)
 80017a0:	f001 f900 	bl	80029a4 <HAL_TIM_MspPostInit>

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2400026c 	.word	0x2400026c
 80017b0:	40000800 	.word	0x40000800

080017b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_TIM5_Init+0xac>)
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <MX_TIM5_Init+0xb0>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_TIM5_Init+0xac>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_TIM5_Init+0xac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM5_Init+0xac>)
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_TIM5_Init+0xac>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_TIM5_Init+0xac>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <MX_TIM5_Init+0xac>)
 8001800:	f007 fd2d 	bl	800925e <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800180a:	f000 fd23 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <MX_TIM5_Init+0xac>)
 800181e:	f008 fb4d 	bl	8009ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001828:	f000 fd14 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM5_Init+0xac>)
 8001844:	f007 fe82 	bl	800954c <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800184e:	f000 fd01 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM5_Init+0xac>)
 8001854:	f001 f8a6 	bl	80029a4 <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24004298 	.word	0x24004298
 8001864:	40000c00 	.word	0x40000c00

08001868 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM7_Init+0x68>)
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <MX_TIM7_Init+0x6c>)
 800187c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 27500-1;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_TIM7_Init+0x68>)
 8001880:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8001884:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_TIM7_Init+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500-1;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_TIM7_Init+0x68>)
 800188e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001892:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_TIM7_Init+0x68>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM7_Init+0x68>)
 800189c:	f007 fb2c 	bl	8008ef8 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80018a6:	f000 fcd5 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM7_Init+0x68>)
 80018b8:	f008 fb00 	bl	8009ebc <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80018c2:	f000 fcc7 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	24004648 	.word	0x24004648
 80018d4:	40001400 	.word	0x40001400

080018d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_TIM13_Init+0x40>)
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <MX_TIM13_Init+0x44>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 27500 -1;
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <MX_TIM13_Init+0x40>)
 80018e4:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80018e8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_TIM13_Init+0x40>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1500-1;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_TIM13_Init+0x40>)
 80018f2:	f240 52db 	movw	r2, #1499	; 0x5db
 80018f6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_TIM13_Init+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_TIM13_Init+0x40>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_TIM13_Init+0x40>)
 8001906:	f007 faf7 	bl	8008ef8 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001910:	f000 fca0 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  /* USER CODE END TIM13_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	240043c4 	.word	0x240043c4
 800191c:	40001c00 	.word	0x40001c00

08001920 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_TIM14_Init+0x40>)
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <MX_TIM14_Init+0x44>)
 8001928:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2750-1;
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <MX_TIM14_Init+0x40>)
 800192c:	f640 22bd 	movw	r2, #2749	; 0xabd
 8001930:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_TIM14_Init+0x40>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_TIM14_Init+0x40>)
 800193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_TIM14_Init+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_TIM14_Init+0x40>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_TIM14_Init+0x40>)
 800194e:	f007 fad3 	bl	8008ef8 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001958:	f000 fc7c 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	240045b0 	.word	0x240045b0
 8001964:	40002000 	.word	0x40002000

08001968 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_TIM16_Init+0x48>)
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <MX_TIM16_Init+0x4c>)
 8001970:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 27500-1;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_TIM16_Init+0x48>)
 8001974:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8001978:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_TIM16_Init+0x48>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3500-1;
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_TIM16_Init+0x48>)
 8001982:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001986:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_TIM16_Init+0x48>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_TIM16_Init+0x48>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_TIM16_Init+0x48>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM16_Init+0x48>)
 800199c:	f007 faac 	bl	8008ef8 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80019a6:	f000 fc55 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	240045fc 	.word	0x240045fc
 80019b4:	40014400 	.word	0x40014400

080019b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <MX_TIM17_Init+0x4c>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 27500-1;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019c4:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80019c8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80019d6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_TIM17_Init+0x48>)
 80019ec:	f007 fa84 	bl	8008ef8 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80019f6:	f000 fc2d 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2400424c 	.word	0x2400424c
 8001a04:	40014800 	.word	0x40014800

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a0e:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <MX_USART1_UART_Init+0x94>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a52:	f008 fb8d 	bl	800a170 <HAL_UART_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f000 fbfa 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a64:	f009 fcb6 	bl	800b3d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a6e:	f000 fbf1 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a76:	f009 fceb 	bl	800b450 <HAL_UARTEx_SetRxFifoThreshold>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f000 fbe8 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a86:	f009 fc6c 	bl	800b362 <HAL_UARTEx_DisableFifoMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f000 fbe0 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24004410 	.word	0x24004410
 8001a9c:	40011000 	.word	0x40011000

08001aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_USART3_UART_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aea:	f008 fb41 	bl	800a170 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001af4:	f000 fbae 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001afc:	f009 fc6a 	bl	800b3d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f000 fba5 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001b0e:	f009 fc9f 	bl	800b450 <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f000 fb9c 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001b1e:	f009 fc20 	bl	800b362 <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f000 fb94 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	240002cc 	.word	0x240002cc
 8001b34:	40004800 	.word	0x40004800

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4bbf      	ldr	r3, [pc, #764]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	4abd      	ldr	r2, [pc, #756]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5e:	4bbb      	ldr	r3, [pc, #748]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6c:	4bb7      	ldr	r3, [pc, #732]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	4ab6      	ldr	r2, [pc, #728]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7c:	4bb3      	ldr	r3, [pc, #716]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8a:	4bb0      	ldr	r3, [pc, #704]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	4aae      	ldr	r2, [pc, #696]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9a:	4bac      	ldr	r3, [pc, #688]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4ba8      	ldr	r3, [pc, #672]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	4aa7      	ldr	r2, [pc, #668]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb8:	4ba4      	ldr	r3, [pc, #656]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc6:	4ba1      	ldr	r3, [pc, #644]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	4a9f      	ldr	r2, [pc, #636]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd6:	4b9d      	ldr	r3, [pc, #628]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b99      	ldr	r3, [pc, #612]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	4a98      	ldr	r2, [pc, #608]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf4:	4b95      	ldr	r3, [pc, #596]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c02:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a90      	ldr	r2, [pc, #576]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c20:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a89      	ldr	r2, [pc, #548]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b86      	ldr	r3, [pc, #536]	; (8001e4c <MX_GPIO_Init+0x314>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f240 4102 	movw	r1, #1026	; 0x402
 8001c44:	4882      	ldr	r0, [pc, #520]	; (8001e50 <MX_GPIO_Init+0x318>)
 8001c46:	f003 fd81 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8001c50:	4880      	ldr	r0, [pc, #512]	; (8001e54 <MX_GPIO_Init+0x31c>)
 8001c52:	f003 fd7b 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 8001c56:	2200      	movs	r2, #0
 8001c58:	f24a 1138 	movw	r1, #41272	; 0xa138
 8001c5c:	487e      	ldr	r0, [pc, #504]	; (8001e58 <MX_GPIO_Init+0x320>)
 8001c5e:	f003 fd75 	bl	800574c <HAL_GPIO_WritePin>
                          |ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MP_Relay_GPIO_Port, MP_Relay_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	487c      	ldr	r0, [pc, #496]	; (8001e5c <MX_GPIO_Init+0x324>)
 8001c6a:	f003 fd6f 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8001c74:	487a      	ldr	r0, [pc, #488]	; (8001e60 <MX_GPIO_Init+0x328>)
 8001c76:	f003 fd69 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin|MN_Relay_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	210c      	movs	r1, #12
 8001c7e:	4879      	ldr	r0, [pc, #484]	; (8001e64 <MX_GPIO_Init+0x32c>)
 8001c80:	f003 fd64 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2160      	movs	r1, #96	; 0x60
 8001c88:	4877      	ldr	r0, [pc, #476]	; (8001e68 <MX_GPIO_Init+0x330>)
 8001c8a:	f003 fd5f 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001c8e:	f240 3303 	movw	r3, #771	; 0x303
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca0:	230e      	movs	r3, #14
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4870      	ldr	r0, [pc, #448]	; (8001e6c <MX_GPIO_Init+0x334>)
 8001cac:	f003 fba6 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001cb0:	f640 0303 	movw	r3, #2051	; 0x803
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4862      	ldr	r0, [pc, #392]	; (8001e58 <MX_GPIO_Init+0x320>)
 8001cce:	f003 fb95 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	485a      	ldr	r0, [pc, #360]	; (8001e58 <MX_GPIO_Init+0x320>)
 8001cf0:	f003 fb84 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001cf4:	2349      	movs	r3, #73	; 0x49
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d04:	230e      	movs	r3, #14
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4850      	ldr	r0, [pc, #320]	; (8001e50 <MX_GPIO_Init+0x318>)
 8001d10:	f003 fb74 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 8001d14:	f240 4302 	movw	r3, #1026	; 0x402
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4848      	ldr	r0, [pc, #288]	; (8001e50 <MX_GPIO_Init+0x318>)
 8001d2e:	f003 fb65 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001d32:	2330      	movs	r3, #48	; 0x30
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001d42:	230a      	movs	r3, #10
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4841      	ldr	r0, [pc, #260]	; (8001e54 <MX_GPIO_Init+0x31c>)
 8001d4e:	f003 fb55 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001d52:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	483a      	ldr	r0, [pc, #232]	; (8001e54 <MX_GPIO_Init+0x31c>)
 8001d6c:	f003 fb46 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001d70:	f64b 0303 	movw	r3, #47107	; 0xb803
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d82:	230e      	movs	r3, #14
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4831      	ldr	r0, [pc, #196]	; (8001e54 <MX_GPIO_Init+0x31c>)
 8001d8e:	f003 fb35 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : MP_IGBT_Pin LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 8001d92:	f24a 1338 	movw	r3, #41272	; 0xa138
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	482b      	ldr	r0, [pc, #172]	; (8001e58 <MX_GPIO_Init+0x320>)
 8001dac:	f003 fb26 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001db0:	23b0      	movs	r3, #176	; 0xb0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4821      	ldr	r0, [pc, #132]	; (8001e50 <MX_GPIO_Init+0x318>)
 8001dcc:	f003 fb16 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001de0:	230c      	movs	r3, #12
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <MX_GPIO_Init+0x318>)
 8001dec:	f003 fb06 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 8001df0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e02:	230c      	movs	r3, #12
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4815      	ldr	r0, [pc, #84]	; (8001e64 <MX_GPIO_Init+0x32c>)
 8001e0e:	f003 faf5 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001e24:	230d      	movs	r3, #13
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0x324>)
 8001e30:	f003 fae4 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 8001e34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	e011      	b.n	8001e70 <MX_GPIO_Init+0x338>
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58020c00 	.word	0x58020c00
 8001e54:	58021000 	.word	0x58021000
 8001e58:	58021800 	.word	0x58021800
 8001e5c:	58020000 	.word	0x58020000
 8001e60:	58021400 	.word	0x58021400
 8001e64:	58020800 	.word	0x58020800
 8001e68:	58021c00 	.word	0x58021c00
 8001e6c:	58020400 	.word	0x58020400
 8001e70:	4619      	mov	r1, r3
 8001e72:	48bc      	ldr	r0, [pc, #752]	; (8002164 <MX_GPIO_Init+0x62c>)
 8001e74:	f003 fac2 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	48b6      	ldr	r0, [pc, #728]	; (8002168 <MX_GPIO_Init+0x630>)
 8001e90:	f003 fab4 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8001e94:	2304      	movs	r3, #4
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001ea4:	2309      	movs	r3, #9
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	48af      	ldr	r0, [pc, #700]	; (800216c <MX_GPIO_Init+0x634>)
 8001eb0:	f003 faa4 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001eb4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec6:	230e      	movs	r3, #14
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	48a7      	ldr	r0, [pc, #668]	; (8002170 <MX_GPIO_Init+0x638>)
 8001ed2:	f003 fa93 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8001ed6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	489f      	ldr	r0, [pc, #636]	; (8002170 <MX_GPIO_Init+0x638>)
 8001ef4:	f003 fa82 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4893      	ldr	r0, [pc, #588]	; (8002164 <MX_GPIO_Init+0x62c>)
 8001f16:	f003 fa71 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001f1a:	f648 7308 	movw	r3, #36616	; 0x8f08
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	4619      	mov	r1, r3
 8001f36:	488f      	ldr	r0, [pc, #572]	; (8002174 <MX_GPIO_Init+0x63c>)
 8001f38:	f003 fa60 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MP_Relay_Pin */
  GPIO_InitStruct.Pin = MP_Relay_Pin;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MP_Relay_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4883      	ldr	r0, [pc, #524]	; (8002164 <MX_GPIO_Init+0x62c>)
 8001f56:	f003 fa51 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 8001f5a:	23c0      	movs	r3, #192	; 0xc0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f6a:	230e      	movs	r3, #14
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	4619      	mov	r1, r3
 8001f74:	487c      	ldr	r0, [pc, #496]	; (8002168 <MX_GPIO_Init+0x630>)
 8001f76:	f003 fa41 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 8001f7a:	2340      	movs	r3, #64	; 0x40
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	4875      	ldr	r0, [pc, #468]	; (800216c <MX_GPIO_Init+0x634>)
 8001f96:	f003 fa31 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 8001f9a:	f241 031f 	movw	r3, #4127	; 0x101f
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001fac:	2309      	movs	r3, #9
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4870      	ldr	r0, [pc, #448]	; (8002178 <MX_GPIO_Init+0x640>)
 8001fb8:	f003 fa20 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001fcc:	230a      	movs	r3, #10
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4866      	ldr	r0, [pc, #408]	; (8002170 <MX_GPIO_Init+0x638>)
 8001fd8:	f003 fa10 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	485f      	ldr	r0, [pc, #380]	; (8002170 <MX_GPIO_Init+0x638>)
 8001ff2:	f003 fa03 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_FS_B_Pin;
 8001ff6:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002008:	2306      	movs	r3, #6
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	4859      	ldr	r0, [pc, #356]	; (8002178 <MX_GPIO_Init+0x640>)
 8002014:	f003 f9f2 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002018:	2320      	movs	r3, #32
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	4852      	ldr	r0, [pc, #328]	; (8002178 <MX_GPIO_Init+0x640>)
 800202e:	f003 f9e5 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8002032:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002044:	2309      	movs	r3, #9
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	484b      	ldr	r0, [pc, #300]	; (800217c <MX_GPIO_Init+0x644>)
 8002050:	f003 f9d4 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_IGBT_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = PC_IGBT_Pin|STMOD_20_Pin;
 8002054:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	4842      	ldr	r0, [pc, #264]	; (8002178 <MX_GPIO_Init+0x640>)
 800206e:	f003 f9c5 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8002072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002084:	2309      	movs	r3, #9
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	483a      	ldr	r0, [pc, #232]	; (8002178 <MX_GPIO_Init+0x640>)
 8002090:	f003 f9b4 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8002094:	2332      	movs	r3, #50	; 0x32
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a4:	230b      	movs	r3, #11
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	482e      	ldr	r0, [pc, #184]	; (8002168 <MX_GPIO_Init+0x630>)
 80020b0:	f003 f9a4 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 80020b4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c6:	230b      	movs	r3, #11
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	482b      	ldr	r0, [pc, #172]	; (8002180 <MX_GPIO_Init+0x648>)
 80020d2:	f003 f993 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_IGBT_Pin MN_Relay_Pin */
  GPIO_InitStruct.Pin = MN_IGBT_Pin|MN_Relay_Pin;
 80020d6:	230c      	movs	r3, #12
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	481e      	ldr	r0, [pc, #120]	; (8002168 <MX_GPIO_Init+0x630>)
 80020ee:	f003 f985 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002102:	2305      	movs	r3, #5
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	4819      	ldr	r0, [pc, #100]	; (8002174 <MX_GPIO_Init+0x63c>)
 800210e:	f003 f975 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 8002112:	2318      	movs	r3, #24
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002122:	230e      	movs	r3, #14
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212a:	4619      	mov	r1, r3
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_GPIO_Init+0x62c>)
 800212e:	f003 f965 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8002132:	2386      	movs	r3, #134	; 0x86
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002142:	230b      	movs	r3, #11
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_GPIO_Init+0x62c>)
 800214e:	f003 f955 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8002152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002160:	e010      	b.n	8002184 <MX_GPIO_Init+0x64c>
 8002162:	bf00      	nop
 8002164:	58020000 	.word	0x58020000
 8002168:	58020800 	.word	0x58020800
 800216c:	58021000 	.word	0x58021000
 8002170:	58021800 	.word	0x58021800
 8002174:	58021c00 	.word	0x58021c00
 8002178:	58021400 	.word	0x58021400
 800217c:	58020c00 	.word	0x58020c00
 8002180:	58020400 	.word	0x58020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002188:	2305      	movs	r3, #5
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002190:	4619      	mov	r1, r3
 8002192:	482c      	ldr	r0, [pc, #176]	; (8002244 <MX_GPIO_Init+0x70c>)
 8002194:	f003 f932 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4826      	ldr	r0, [pc, #152]	; (8002248 <MX_GPIO_Init+0x710>)
 80021b0:	f003 f924 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4820      	ldr	r0, [pc, #128]	; (800224c <MX_GPIO_Init+0x714>)
 80021cc:	f003 f916 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 80021d0:	2310      	movs	r3, #16
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021e0:	2309      	movs	r3, #9
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	4818      	ldr	r0, [pc, #96]	; (800224c <MX_GPIO_Init+0x714>)
 80021ec:	f003 f906 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 80021f0:	2304      	movs	r3, #4
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002200:	230a      	movs	r3, #10
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4811      	ldr	r0, [pc, #68]	; (8002250 <MX_GPIO_Init+0x718>)
 800220c:	f003 f8f6 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8002210:	2360      	movs	r3, #96	; 0x60
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	4809      	ldr	r0, [pc, #36]	; (800224c <MX_GPIO_Init+0x714>)
 8002228:	f003 f8e8 	bl	80053fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2028      	movs	r0, #40	; 0x28
 8002232:	f002 fbf4 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002236:	2028      	movs	r0, #40	; 0x28
 8002238:	f002 fc0b 	bl	8004a52 <HAL_NVIC_EnableIRQ>

}
 800223c:	bf00      	nop
 800223e:	3738      	adds	r7, #56	; 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58021400 	.word	0x58021400
 8002248:	58021000 	.word	0x58021000
 800224c:	58021c00 	.word	0x58021c00
 8002250:	58020400 	.word	0x58020400

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225c:	e7fe      	b.n	800225c <Error_Handler+0x8>
	...

08002260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_MspInit+0x30>)
 8002268:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_MspInit+0x30>)
 800226e:	f043 0302 	orr.w	r3, r3, #2
 8002272:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_MspInit+0x30>)
 8002278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	58024400 	.word	0x58024400

08002294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b090      	sub	sp, #64	; 0x40
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6c      	ldr	r2, [pc, #432]	; (8002464 <HAL_ADC_MspInit+0x1d0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d14e      	bne.n	8002354 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_ADC_MspInit+0x1d4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a6a      	ldr	r2, [pc, #424]	; (8002468 <HAL_ADC_MspInit+0x1d4>)
 80022be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_ADC_MspInit+0x1d4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10e      	bne.n	80022e6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80022ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ce:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022d8:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80022da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002314:	4b55      	ldr	r3, [pc, #340]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002326:	2303      	movs	r3, #3
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002332:	4619      	mov	r1, r3
 8002334:	484e      	ldr	r0, [pc, #312]	; (8002470 <HAL_ADC_MspInit+0x1dc>)
 8002336:	f003 f861 	bl	80053fc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800233a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002342:	f000 ff0d 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8002346:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800234a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800234e:	f000 ff07 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002352:	e082      	b.n	800245a <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a46      	ldr	r2, [pc, #280]	; (8002474 <HAL_ADC_MspInit+0x1e0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <HAL_ADC_MspInit+0x1d4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a40      	ldr	r2, [pc, #256]	; (8002468 <HAL_ADC_MspInit+0x1d4>)
 8002366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002368:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_ADC_MspInit+0x1d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10e      	bne.n	800238e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002370:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002394:	4a35      	ldr	r2, [pc, #212]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239e:	4b33      	ldr	r3, [pc, #204]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80023ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80023b4:	f000 fed4 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80023b8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80023bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80023c0:	f000 fece 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80023c4:	e049      	b.n	800245a <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_ADC_MspInit+0x1e4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d144      	bne.n	800245a <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80023d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fe:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_ADC_MspInit+0x1d8>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800242a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800242e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002432:	f000 fe95 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002436:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800243a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800243e:	f000 fe8f 	bl	8003160 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8002442:	2304      	movs	r3, #4
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002446:	2303      	movs	r3, #3
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002452:	4619      	mov	r1, r3
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <HAL_ADC_MspInit+0x1e8>)
 8002456:	f002 ffd1 	bl	80053fc <HAL_GPIO_Init>
}
 800245a:	bf00      	nop
 800245c:	3740      	adds	r7, #64	; 0x40
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000
 8002468:	24000208 	.word	0x24000208
 800246c:	58024400 	.word	0x58024400
 8002470:	58020800 	.word	0x58020800
 8002474:	40022100 	.word	0x40022100
 8002478:	58026000 	.word	0x58026000
 800247c:	58021c00 	.word	0x58021c00

08002480 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <HAL_DAC_MspInit+0x80>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d129      	bne.n	80024f6 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_DAC_MspInit+0x84>)
 80024a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a8:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_DAC_MspInit+0x84>)
 80024aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_DAC_MspInit+0x84>)
 80024b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_DAC_MspInit+0x84>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_DAC_MspInit+0x84>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_DAC_MspInit+0x84>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 80024de:	2320      	movs	r3, #32
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e2:	2303      	movs	r3, #3
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <HAL_DAC_MspInit+0x88>)
 80024f2:	f002 ff83 	bl	80053fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40007400 	.word	0x40007400
 8002504:	58024400 	.word	0x58024400
 8002508:	58020000 	.word	0x58020000

0800250c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b0b8      	sub	sp, #224	; 0xe0
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002524:	f107 0318 	add.w	r3, r7, #24
 8002528:	22b4      	movs	r2, #180	; 0xb4
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f009 f853 	bl	800b5d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a54      	ldr	r2, [pc, #336]	; (8002688 <HAL_FDCAN_MspInit+0x17c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d14e      	bne.n	80025da <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800253c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002540:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254a:	f107 0318 	add.w	r3, r7, #24
 800254e:	4618      	mov	r0, r3
 8002550:	f004 f9ea 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800255a:	f7ff fe7b 	bl	8002254 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800255e:	4b4b      	ldr	r3, [pc, #300]	; (800268c <HAL_FDCAN_MspInit+0x180>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	4a49      	ldr	r2, [pc, #292]	; (800268c <HAL_FDCAN_MspInit+0x180>)
 8002566:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002568:	4b48      	ldr	r3, [pc, #288]	; (800268c <HAL_FDCAN_MspInit+0x180>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10e      	bne.n	800258e <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002570:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002572:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002582:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002594:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80025ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025c6:	2309      	movs	r3, #9
 80025c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025d0:	4619      	mov	r1, r3
 80025d2:	4830      	ldr	r0, [pc, #192]	; (8002694 <HAL_FDCAN_MspInit+0x188>)
 80025d4:	f002 ff12 	bl	80053fc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80025d8:	e051      	b.n	800267e <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <HAL_FDCAN_MspInit+0x18c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d14c      	bne.n	800267e <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f2:	f107 0318 	add.w	r3, r7, #24
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f996 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8002602:	f7ff fe27 	bl	8002254 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_FDCAN_MspInit+0x180>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_FDCAN_MspInit+0x180>)
 800260e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_FDCAN_MspInit+0x180>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10e      	bne.n	8002636 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 800261a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 800262a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_FDCAN_MspInit+0x184>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8002654:	2360      	movs	r3, #96	; 0x60
 8002656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800266c:	2309      	movs	r3, #9
 800266e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002676:	4619      	mov	r1, r3
 8002678:	4808      	ldr	r0, [pc, #32]	; (800269c <HAL_FDCAN_MspInit+0x190>)
 800267a:	f002 febf 	bl	80053fc <HAL_GPIO_Init>
}
 800267e:	bf00      	nop
 8002680:	37e0      	adds	r7, #224	; 0xe0
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	4000a000 	.word	0x4000a000
 800268c:	2400020c 	.word	0x2400020c
 8002690:	58024400 	.word	0x58024400
 8002694:	58021c00 	.word	0x58021c00
 8002698:	4000a400 	.word	0x4000a400
 800269c:	58020400 	.word	0x58020400

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0b6      	sub	sp, #216	; 0xd8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	22b4      	movs	r2, #180	; 0xb4
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f008 ff89 	bl	800b5d8 <memset>
  if(hi2c->Instance==I2C4)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a25      	ldr	r2, [pc, #148]	; (8002760 <HAL_I2C_MspInit+0xc0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d142      	bne.n	8002756 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80026d0:	2310      	movs	r3, #16
 80026d2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 f922 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026ea:	f7ff fdb3 	bl	8002254 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_I2C_MspInit+0xc4>)
 80026f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_I2C_MspInit+0xc4>)
 80026f6:	f043 0320 	orr.w	r3, r3, #32
 80026fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_I2C_MspInit+0xc4>)
 8002700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 800270c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002714:	2312      	movs	r3, #18
 8002716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800271a:	2301      	movs	r3, #1
 800271c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002726:	2304      	movs	r3, #4
 8002728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800272c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002730:	4619      	mov	r1, r3
 8002732:	480d      	ldr	r0, [pc, #52]	; (8002768 <HAL_I2C_MspInit+0xc8>)
 8002734:	f002 fe62 	bl	80053fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_I2C_MspInit+0xc4>)
 800273a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800273e:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_I2C_MspInit+0xc4>)
 8002740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002744:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_I2C_MspInit+0xc4>)
 800274a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	37d8      	adds	r7, #216	; 0xd8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	58001c00 	.word	0x58001c00
 8002764:	58024400 	.word	0x58024400
 8002768:	58021400 	.word	0x58021400

0800276c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0b0      	sub	sp, #192	; 0xc0
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	22b4      	movs	r2, #180	; 0xb4
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f008 ff2b 	bl	800b5d8 <memset>
  if(hrtc->Instance==RTC)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_RTC_MspInit+0x58>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d116      	bne.n	80027ba <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800278c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002790:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 f8c2 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80027aa:	f7ff fd53 	bl	8002254 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RTC_MspInit+0x5c>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_RTC_MspInit+0x5c>)
 80027b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027ba:	bf00      	nop
 80027bc:	37c0      	adds	r7, #192	; 0xc0
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	58004000 	.word	0x58004000
 80027c8:	58024400 	.word	0x58024400

080027cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_TIM_PWM_MspInit+0x90>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10f      	bne.n	80027fe <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 80027e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 80027f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027fc:	e028      	b.n	8002850 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_TIM_PWM_MspInit+0x98>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10f      	bne.n	8002828 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 800280a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 800281a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
}
 8002826:	e013      	b.n	8002850 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_TIM_PWM_MspInit+0x9c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 8002834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002838:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_TIM_PWM_MspInit+0x94>)
 8002844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40010000 	.word	0x40010000
 8002860:	58024400 	.word	0x58024400
 8002864:	40000800 	.word	0x40000800
 8002868:	40000c00 	.word	0x40000c00

0800286c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a44      	ldr	r2, [pc, #272]	; (800298c <HAL_TIM_Base_MspInit+0x120>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d117      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800287e:	4b44      	ldr	r3, [pc, #272]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002884:	4a42      	ldr	r2, [pc, #264]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002886:	f043 0320 	orr.w	r3, r3, #32
 800288a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800288e:	4b40      	ldr	r3, [pc, #256]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	69fb      	ldr	r3, [r7, #28]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2037      	movs	r0, #55	; 0x37
 80028a2:	f002 f8bc 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028a6:	2037      	movs	r0, #55	; 0x37
 80028a8:	f002 f8d3 	bl	8004a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80028ac:	e06a      	b.n	8002984 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM13)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a38      	ldr	r2, [pc, #224]	; (8002994 <HAL_TIM_Base_MspInit+0x128>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d117      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 80028c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	202c      	movs	r0, #44	; 0x2c
 80028dc:	f002 f89f 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80028e0:	202c      	movs	r0, #44	; 0x2c
 80028e2:	f002 f8b6 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 80028e6:	e04d      	b.n	8002984 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM14)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_TIM_Base_MspInit+0x12c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10f      	bne.n	8002912 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 80028f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
}
 8002910:	e038      	b.n	8002984 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM16)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_TIM_Base_MspInit+0x130>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d117      	bne.n	800294c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 800291e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002922:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 800292e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2075      	movs	r0, #117	; 0x75
 8002940:	f002 f86d 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002944:	2075      	movs	r0, #117	; 0x75
 8002946:	f002 f884 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 800294a:	e01b      	b.n	8002984 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM17)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_TIM_Base_MspInit+0x134>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d116      	bne.n	8002984 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 800295e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002962:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_TIM_Base_MspInit+0x124>)
 8002968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	2076      	movs	r0, #118	; 0x76
 800297a:	f002 f850 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800297e:	2076      	movs	r0, #118	; 0x76
 8002980:	f002 f867 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40001400 	.word	0x40001400
 8002990:	58024400 	.word	0x58024400
 8002994:	40001c00 	.word	0x40001c00
 8002998:	40002000 	.word	0x40002000
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800

080029a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a48      	ldr	r2, [pc, #288]	; (8002ae4 <HAL_TIM_MspPostInit+0x140>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d120      	bne.n	8002a08 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 80029ce:	f043 0310 	orr.w	r3, r3, #16
 80029d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 80029e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	483a      	ldr	r0, [pc, #232]	; (8002aec <HAL_TIM_MspPostInit+0x148>)
 8002a02:	f002 fcfb 	bl	80053fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a06:	e068      	b.n	8002ada <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_TIM_MspPostInit+0x14c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d13f      	bne.n	8002a92 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a18:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a30:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	4a2c      	ldr	r2, [pc, #176]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	4822      	ldr	r0, [pc, #136]	; (8002af4 <HAL_TIM_MspPostInit+0x150>)
 8002a6a:	f002 fcc7 	bl	80053fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8002a6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a80:	2302      	movs	r3, #2
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	481b      	ldr	r0, [pc, #108]	; (8002af8 <HAL_TIM_MspPostInit+0x154>)
 8002a8c:	f002 fcb6 	bl	80053fc <HAL_GPIO_Init>
}
 8002a90:	e023      	b.n	8002ada <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_TIM_MspPostInit+0x158>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d11e      	bne.n	8002ada <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa2:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_TIM_MspPostInit+0x144>)
 8002aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aca:	2302      	movs	r3, #2
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <HAL_TIM_MspPostInit+0x15c>)
 8002ad6:	f002 fc91 	bl	80053fc <HAL_GPIO_Init>
}
 8002ada:	bf00      	nop
 8002adc:	3730      	adds	r7, #48	; 0x30
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	58021000 	.word	0x58021000
 8002af0:	40000800 	.word	0x40000800
 8002af4:	58020400 	.word	0x58020400
 8002af8:	58020c00 	.word	0x58020c00
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	58020000 	.word	0x58020000

08002b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b0b8      	sub	sp, #224	; 0xe0
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	22b4      	movs	r2, #180	; 0xb4
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f008 fd57 	bl	800b5d8 <memset>
  if(huart->Instance==USART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <HAL_UART_MspInit+0x150>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d143      	bne.n	8002bbc <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3e:	f107 0318 	add.w	r3, r7, #24
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fef0 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b4e:	f7ff fb81 	bl	8002254 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b58:	4a3f      	ldr	r2, [pc, #252]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b76:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002b8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4829      	ldr	r0, [pc, #164]	; (8002c5c <HAL_UART_MspInit+0x158>)
 8002bb6:	f002 fc21 	bl	80053fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bba:	e047      	b.n	8002c4c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_UART_MspInit+0x15c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d142      	bne.n	8002c4c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd0:	f107 0318 	add.w	r3, r7, #24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fea7 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002be0:	f7ff fb38 	bl	8002254 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c08:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_UART_MspInit+0x154>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c44:	4619      	mov	r1, r3
 8002c46:	4807      	ldr	r0, [pc, #28]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002c48:	f002 fbd8 	bl	80053fc <HAL_GPIO_Init>
}
 8002c4c:	bf00      	nop
 8002c4e:	37e0      	adds	r7, #224	; 0xe0
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40011000 	.word	0x40011000
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	58020400 	.word	0x58020400
 8002c60:	40004800 	.word	0x40004800
 8002c64:	58020c00 	.word	0x58020c00

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 fa10 	bl	80030d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002cc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cc4:	f002 fd5b 	bl	800577e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ccc:	f002 fd57 	bl	800577e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002cda:	f006 fb17 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	240043c4 	.word	0x240043c4

08002ce8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM7_IRQHandler+0x10>)
 8002cee:	f006 fb0d 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	24004648 	.word	0x24004648

08002cfc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM16_IRQHandler+0x10>)
 8002d02:	f006 fb03 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	240045fc 	.word	0x240045fc

08002d10 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <TIM17_IRQHandler+0x10>)
 8002d16:	f006 faf9 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2400424c 	.word	0x2400424c

08002d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
	return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_kill>:

int _kill(int pid, int sig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d3e:	f008 fc13 	bl	800b568 <__errno>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2216      	movs	r2, #22
 8002d46:	601a      	str	r2, [r3, #0]
	return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_exit>:

void _exit (int status)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d66:	e7fe      	b.n	8002d66 <_exit+0x12>

08002d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00a      	b.n	8002d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d7a:	f3af 8000 	nop.w
 8002d7e:	4601      	mov	r1, r0
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	60ba      	str	r2, [r7, #8]
 8002d86:	b2ca      	uxtb	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbf0      	blt.n	8002d7a <_read+0x12>
	}

return len;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e009      	b.n	8002dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	60ba      	str	r2, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fe6f 	bl	8000aa0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dbf1      	blt.n	8002db4 <_write+0x12>
	}
	return len;
 8002dd0:	687b      	ldr	r3, [r7, #4]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_close>:

int _close(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	return -1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e02:	605a      	str	r2, [r3, #4]
	return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_isatty>:

int _isatty(int file)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
	return 1;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
	return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <_sbrk+0x5c>)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <_sbrk+0x60>)
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <_sbrk+0x64>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <_sbrk+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d207      	bcs.n	8002e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e74:	f008 fb78 	bl	800b568 <__errno>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e009      	b.n	8002e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <_sbrk+0x64>)
 8002e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	24050000 	.word	0x24050000
 8002ea4:	00000400 	.word	0x00000400
 8002ea8:	24000210 	.word	0x24000210
 8002eac:	24004748 	.word	0x24004748

08002eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <SystemInit+0xd0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <SystemInit+0xd0>)
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <SystemInit+0xd4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d807      	bhi.n	8002ee0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <SystemInit+0xd4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 030f 	bic.w	r3, r3, #15
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <SystemInit+0xd4>)
 8002eda:	f043 0307 	orr.w	r3, r3, #7
 8002ede:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <SystemInit+0xd8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <SystemInit+0xd8>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002eec:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <SystemInit+0xd8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <SystemInit+0xd8>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4924      	ldr	r1, [pc, #144]	; (8002f88 <SystemInit+0xd8>)
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <SystemInit+0xdc>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <SystemInit+0xd4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <SystemInit+0xd4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 030f 	bic.w	r3, r3, #15
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <SystemInit+0xd4>)
 8002f14:	f043 0307 	orr.w	r3, r3, #7
 8002f18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <SystemInit+0xd8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <SystemInit+0xd8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <SystemInit+0xd8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <SystemInit+0xd8>)
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <SystemInit+0xe0>)
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <SystemInit+0xd8>)
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <SystemInit+0xe4>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <SystemInit+0xd8>)
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <SystemInit+0xe8>)
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <SystemInit+0xd8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <SystemInit+0xd8>)
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <SystemInit+0xe8>)
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <SystemInit+0xd8>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <SystemInit+0xd8>)
 8002f52:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <SystemInit+0xe8>)
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <SystemInit+0xd8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <SystemInit+0xd8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <SystemInit+0xd8>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <SystemInit+0xd8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <SystemInit+0xec>)
 8002f70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f74:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00
 8002f84:	52002000 	.word	0x52002000
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f90:	02020200 	.word	0x02020200
 8002f94:	01ff0000 	.word	0x01ff0000
 8002f98:	01010280 	.word	0x01010280
 8002f9c:	52004000 	.word	0x52004000

08002fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fa4:	f7ff ff84 	bl	8002eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa8:	480c      	ldr	r0, [pc, #48]	; (8002fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002faa:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb0:	e002      	b.n	8002fb8 <LoopCopyDataInit>

08002fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb6:	3304      	adds	r3, #4

08002fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fbc:	d3f9      	bcc.n	8002fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fc0:	4c0a      	ldr	r4, [pc, #40]	; (8002fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc4:	e001      	b.n	8002fca <LoopFillZerobss>

08002fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc8:	3204      	adds	r2, #4

08002fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fcc:	d3fb      	bcc.n	8002fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fce:	f008 fad1 	bl	800b574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fd2:	f7fd ff25 	bl	8000e20 <main>
  bx  lr
 8002fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002fe0:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002fe4:	0801033c 	.word	0x0801033c
  ldr r2, =_sbss
 8002fe8:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002fec:	24004748 	.word	0x24004748

08002ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC3_IRQHandler>
	...

08002ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	f001 fd04 	bl	8004a08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003000:	f003 fabc 	bl	800657c <HAL_RCC_GetSysClockFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_Init+0x68>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	4913      	ldr	r1, [pc, #76]	; (8003060 <HAL_Init+0x6c>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_Init+0x68>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_Init+0x6c>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_Init+0x70>)
 8003036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003038:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <HAL_Init+0x74>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800303e:	2000      	movs	r0, #0
 8003040:	f000 f814 	bl	800306c <HAL_InitTick>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e002      	b.n	8003054 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800304e:	f7ff f907 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	58024400 	.word	0x58024400
 8003060:	0800fe3c 	.word	0x0800fe3c
 8003064:	24000008 	.word	0x24000008
 8003068:	24000004 	.word	0x24000004

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_InitTick+0x60>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e021      	b.n	80030c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_InitTick+0x64>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_InitTick+0x60>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f001 fce9 	bl	8004a6e <HAL_SYSTICK_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00e      	b.n	80030c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d80a      	bhi.n	80030c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f001 fcb3 	bl	8004a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b8:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <HAL_InitTick+0x68>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	24000010 	.word	0x24000010
 80030d0:	24000004 	.word	0x24000004
 80030d4:	2400000c 	.word	0x2400000c

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	24000010 	.word	0x24000010
 80030fc:	24004734 	.word	0x24004734

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	24004734 	.word	0x24004734

08003118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d005      	beq.n	800313e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_Delay+0x44>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800313e:	bf00      	nop
 8003140:	f7ff ffde 	bl	8003100 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d8f7      	bhi.n	8003140 <HAL_Delay+0x28>
  {
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	24000010 	.word	0x24000010

08003160 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	58000400 	.word	0x58000400

0800318c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3360      	adds	r3, #96	; 0x60
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <LL_ADC_SetOffset+0x60>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10b      	bne.n	8003230 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800322e:	e00b      	b.n	8003248 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	58026000 	.word	0x58026000

08003258 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3360      	adds	r3, #96	; 0x60
 8003266:	461a      	mov	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	611a      	str	r2, [r3, #16]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	601a      	str	r2, [r3, #0]
  }
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	58026000 	.word	0x58026000

080032fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <LL_ADC_SetOffsetSaturation+0x40>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d10e      	bne.n	800332e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3360      	adds	r3, #96	; 0x60
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	58026000 	.word	0x58026000

08003340 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <LL_ADC_SetOffsetSign+0x40>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10e      	bne.n	8003372 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3360      	adds	r3, #96	; 0x60
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	431a      	orrs	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	58026000 	.word	0x58026000

08003384 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3360      	adds	r3, #96	; 0x60
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <LL_ADC_SetOffsetState+0x50>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d108      	bne.n	80033b8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80033b6:	e007      	b.n	80033c8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	601a      	str	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	58026000 	.word	0x58026000

080033d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3330      	adds	r3, #48	; 0x30
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	4413      	add	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	211f      	movs	r1, #31
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	f003 011f 	and.w	r1, r3, #31
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	431a      	orrs	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3314      	adds	r3, #20
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	0e5b      	lsrs	r3, r3, #25
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	4413      	add	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	0d1b      	lsrs	r3, r3, #20
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2107      	movs	r1, #7
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	0d1b      	lsrs	r3, r3, #20
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	431a      	orrs	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d115      	bne.n	80034c8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a8:	43db      	mvns	r3, r3
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0318 	and.w	r3, r3, #24
 80034b2:	4914      	ldr	r1, [pc, #80]	; (8003504 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80034b4:	40d9      	lsrs	r1, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	400b      	ands	r3, r1
 80034ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034be:	431a      	orrs	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80034c6:	e014      	b.n	80034f2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0318 	and.w	r3, r3, #24
 80034de:	4909      	ldr	r1, [pc, #36]	; (8003504 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80034e0:	40d9      	lsrs	r1, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	400b      	ands	r3, r1
 80034e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	58026000 	.word	0x58026000
 8003504:	000fffff 	.word	0x000fffff

08003508 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003516:	4013      	ands	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6093      	str	r3, [r2, #8]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	5fffffc0 	.word	0x5fffffc0

0800352c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800353c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003540:	d101      	bne.n	8003546 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <LL_ADC_EnableInternalRegulator+0x24>)
 8003562:	4013      	ands	r3, r2
 8003564:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	6fffffc0 	.word	0x6fffffc0

0800357c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003590:	d101      	bne.n	8003596 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <LL_ADC_IsEnabled+0x18>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <LL_ADC_IsEnabled+0x1a>
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d101      	bne.n	80035e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d101      	bne.n	8003608 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1ee      	b.n	8003a10 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe fe27 	bl	8002294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff67 	bl	800352c <LL_ADC_IsDeepPowerDownEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff4d 	bl	8003508 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff82 	bl	800357c <LL_ADC_IsInternalRegulatorEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff66 	bl	8003554 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003688:	4b8e      	ldr	r3, [pc, #568]	; (80038c4 <HAL_ADC_Init+0x2ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	4a8e      	ldr	r2, [pc, #568]	; (80038c8 <HAL_ADC_Init+0x2b0>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	3301      	adds	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800369a:	e002      	b.n	80036a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3b01      	subs	r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f9      	bne.n	800369c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff65 	bl	800357c <LL_ADC_IsInternalRegulatorEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10d      	bne.n	80036d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f043 0210 	orr.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff76 	bl	80035ca <LL_ADC_REG_IsConversionOngoing>
 80036de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8188 	bne.w	80039fe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 8184 	bne.w	80039fe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff4a 	bl	80035a4 <LL_ADC_IsEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d136      	bne.n	8003784 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6c      	ldr	r2, [pc, #432]	; (80038cc <HAL_ADC_Init+0x2b4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_ADC_Init+0x112>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6a      	ldr	r2, [pc, #424]	; (80038d0 <HAL_ADC_Init+0x2b8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10e      	bne.n	8003748 <HAL_ADC_Init+0x130>
 800372a:	4868      	ldr	r0, [pc, #416]	; (80038cc <HAL_ADC_Init+0x2b4>)
 800372c:	f7ff ff3a 	bl	80035a4 <LL_ADC_IsEnabled>
 8003730:	4604      	mov	r4, r0
 8003732:	4867      	ldr	r0, [pc, #412]	; (80038d0 <HAL_ADC_Init+0x2b8>)
 8003734:	f7ff ff36 	bl	80035a4 <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	4323      	orrs	r3, r4
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e008      	b.n	800375a <HAL_ADC_Init+0x142>
 8003748:	4862      	ldr	r0, [pc, #392]	; (80038d4 <HAL_ADC_Init+0x2bc>)
 800374a:	f7ff ff2b 	bl	80035a4 <LL_ADC_IsEnabled>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_ADC_Init+0x2b4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_ADC_Init+0x15a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_ADC_Init+0x2b8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_ADC_Init+0x15e>
 8003772:	4a59      	ldr	r2, [pc, #356]	; (80038d8 <HAL_ADC_Init+0x2c0>)
 8003774:	e000      	b.n	8003778 <HAL_ADC_Init+0x160>
 8003776:	4a59      	ldr	r2, [pc, #356]	; (80038dc <HAL_ADC_Init+0x2c4>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7ff fd04 	bl	800318c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_ADC_Init+0x2bc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d129      	bne.n	80037e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7e5b      	ldrb	r3, [r3, #25]
 8003792:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003798:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800379e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d013      	beq.n	80037d0 <HAL_ADC_Init+0x1b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	d00d      	beq.n	80037cc <HAL_ADC_Init+0x1b4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b1c      	cmp	r3, #28
 80037b6:	d007      	beq.n	80037c8 <HAL_ADC_Init+0x1b0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b18      	cmp	r3, #24
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_Init+0x1ac>
 80037c0:	2318      	movs	r3, #24
 80037c2:	e006      	b.n	80037d2 <HAL_ADC_Init+0x1ba>
 80037c4:	2300      	movs	r3, #0
 80037c6:	e004      	b.n	80037d2 <HAL_ADC_Init+0x1ba>
 80037c8:	2310      	movs	r3, #16
 80037ca:	e002      	b.n	80037d2 <HAL_ADC_Init+0x1ba>
 80037cc:	2308      	movs	r3, #8
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_Init+0x1ba>
 80037d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80037d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e00e      	b.n	8003800 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7e5b      	ldrb	r3, [r3, #25]
 80037e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80037f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d106      	bne.n	8003818 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	3b01      	subs	r3, #1
 8003810:	045b      	lsls	r3, r3, #17
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_ADC_Init+0x2bc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d115      	bne.n	800386a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_ADC_Init+0x2c8>)
 8003846:	4013      	ands	r3, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	69b9      	ldr	r1, [r7, #24]
 800384e:	430b      	orrs	r3, r1
 8003850:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	611a      	str	r2, [r3, #16]
 8003868:	e009      	b.n	800387e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_ADC_Init+0x2cc>)
 8003872:	4013      	ands	r3, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	430b      	orrs	r3, r1
 800387c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fea1 	bl	80035ca <LL_ADC_REG_IsConversionOngoing>
 8003888:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff feae 	bl	80035f0 <LL_ADC_INJ_IsConversionOngoing>
 8003894:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 808e 	bne.w	80039ba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 808a 	bne.w	80039ba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_ADC_Init+0x2bc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d11b      	bne.n	80038e8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7e1b      	ldrb	r3, [r3, #24]
 80038b4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038bc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e018      	b.n	80038f6 <HAL_ADC_Init+0x2de>
 80038c4:	24000004 	.word	0x24000004
 80038c8:	053e2d63 	.word	0x053e2d63
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40022100 	.word	0x40022100
 80038d4:	58026000 	.word	0x58026000
 80038d8:	40022300 	.word	0x40022300
 80038dc:	58026300 	.word	0x58026300
 80038e0:	fff04007 	.word	0xfff04007
 80038e4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e1b      	ldrb	r3, [r3, #24]
 80038ec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_ADC_Init+0x400>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	430b      	orrs	r3, r1
 8003908:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003910:	2b01      	cmp	r3, #1
 8003912:	d137      	bne.n	8003984 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <HAL_ADC_Init+0x404>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d116      	bne.n	8003952 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	4b3d      	ldr	r3, [pc, #244]	; (8003a20 <HAL_ADC_Init+0x408>)
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003942:	430a      	orrs	r2, r1
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	611a      	str	r2, [r3, #16]
 8003950:	e020      	b.n	8003994 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <HAL_ADC_Init+0x40c>)
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003960:	3a01      	subs	r2, #1
 8003962:	0411      	lsls	r1, r2, #16
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003974:	430a      	orrs	r2, r1
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e007      	b.n	8003994 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_ADC_Init+0x404>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d002      	beq.n	80039ba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fd63 	bl	8004480 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d10c      	bne.n	80039dc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f023 010f 	bic.w	r1, r3, #15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
 80039da:	e007      	b.n	80039ec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 020f 	bic.w	r2, r2, #15
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	f023 0303 	bic.w	r3, r3, #3
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60
 80039fc:	e007      	b.n	8003a0e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3724      	adds	r7, #36	; 0x24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}
 8003a18:	ffffbffc 	.word	0xffffbffc
 8003a1c:	58026000 	.word	0x58026000
 8003a20:	fc00f81f 	.word	0xfc00f81f
 8003a24:	fc00f81e 	.word	0xfc00f81e

08003a28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b0b9      	sub	sp, #228	; 0xe4
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a42:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4ab3      	ldr	r2, [pc, #716]	; (8003d18 <HAL_ADC_ConfigChannel+0x2f0>)
 8003a4a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d102      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x34>
 8003a56:	2302      	movs	r3, #2
 8003a58:	f000 bcfa 	b.w	8004450 <HAL_ADC_ConfigChannel+0xa28>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fdae 	bl	80035ca <LL_ADC_REG_IsConversionOngoing>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 84de 	bne.w	8004432 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4aa8      	ldr	r2, [pc, #672]	; (8003d1c <HAL_ADC_ConfigChannel+0x2f4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d033      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d108      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x76>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0e9b      	lsrs	r3, r3, #26
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	e01d      	b.n	8003ada <HAL_ADC_ConfigChannel+0xb2>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e004      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	69d1      	ldr	r1, [r2, #28]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f7ff fc6f 	bl	80033d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fd63 	bl	80035ca <LL_ADC_REG_IsConversionOngoing>
 8003b04:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fd6f 	bl	80035f0 <LL_ADC_INJ_IsConversionOngoing>
 8003b12:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 8270 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 826b 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f7ff fc7a 	bl	8003430 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a76      	ldr	r2, [pc, #472]	; (8003d1c <HAL_ADC_ConfigChannel+0x2f4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b60:	e032      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b62:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <HAL_ADC_ConfigChannel+0x2f8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6e:	d10b      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x160>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	e01d      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x19c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x186>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	e00a      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x19c>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d048      	beq.n	8003c62 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6919      	ldr	r1, [r3, #16]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be0:	f7ff fb08 	bl	80031f4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <HAL_ADC_ConfigChannel+0x2f4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d119      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6919      	ldr	r1, [r3, #16]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7ff fba0 	bl	8003340 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6919      	ldr	r1, [r3, #16]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d102      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x1f0>
 8003c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c16:	e000      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x1f2>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7ff fb6e 	bl	80032fc <LL_ADC_SetOffsetSaturation>
 8003c20:	e1ee      	b.n	8004000 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6919      	ldr	r1, [r3, #16]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x212>
 8003c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c38:	e000      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x214>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f7ff fb3b 	bl	80032b8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6919      	ldr	r1, [r3, #16]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	7e1b      	ldrb	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x230>
 8003c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c56:	e000      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x232>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f7ff fb12 	bl	8003284 <LL_ADC_SetDataRightShift>
 8003c60:	e1ce      	b.n	8004000 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <HAL_ADC_ConfigChannel+0x2f4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	f040 8181 	bne.w	8003f70 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff faef 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x272>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fae4 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	e01e      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x2b0>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fad9 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003cb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	e004      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003ccc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x2c8>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	e01e      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x306>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	e00a      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x306>
 8003d18:	47ff0000 	.word	0x47ff0000
 8003d1c:	58026000 	.word	0x58026000
 8003d20:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d106      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fb22 	bl	8003384 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fa86 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x344>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fa7b 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	f003 021f 	and.w	r2, r3, #31
 8003d6a:	e01e      	b.n	8003daa <HAL_ADC_ConfigChannel+0x382>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fa70 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	e004      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x39a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	0e9b      	lsrs	r3, r3, #26
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	e018      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x3cc>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e004      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d106      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fabf 	bl	8003384 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fa23 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x40a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fa18 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	0e9b      	lsrs	r3, r3, #26
 8003e2c:	f003 021f 	and.w	r2, r3, #31
 8003e30:	e01e      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x448>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2102      	movs	r1, #2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fa0d 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e004      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x460>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	e014      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x48a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e004      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d106      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fa60 	bl	8003384 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2103      	movs	r1, #3
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff f9c4 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x4c8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2103      	movs	r1, #3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f9b9 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	f003 021f 	and.w	r2, r3, #31
 8003eee:	e017      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x4f8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff f9ae 	bl	8003258 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003f12:	2320      	movs	r3, #32
 8003f14:	e003      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x510>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	e011      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x534>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d14f      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2103      	movs	r1, #3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fa0b 	bl	8003384 <LL_ADC_SetOffsetState>
 8003f6e:	e047      	b.n	8004000 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f92:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d107      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	069b      	lsls	r3, r3, #26
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fda:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	069b      	lsls	r3, r3, #26
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d107      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ffe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff facd 	bl	80035a4 <LL_ADC_IsEnabled>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8219 	bne.w	8004444 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	461a      	mov	r2, r3
 8004020:	f7ff fa32 	bl	8003488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4aa1      	ldr	r2, [pc, #644]	; (80042b0 <HAL_ADC_ConfigChannel+0x888>)
 800402a:	4293      	cmp	r3, r2
 800402c:	f040 812e 	bne.w	800428c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x630>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	3301      	adds	r3, #1
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2b09      	cmp	r3, #9
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e019      	b.n	800408c <HAL_ADC_ConfigChannel+0x664>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800406a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e003      	b.n	800407c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2b09      	cmp	r3, #9
 8004084:	bf94      	ite	ls
 8004086:	2301      	movls	r3, #1
 8004088:	2300      	movhi	r3, #0
 800408a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800408c:	2b00      	cmp	r3, #0
 800408e:	d079      	beq.n	8004184 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x684>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	3301      	adds	r3, #1
 80040a4:	069b      	lsls	r3, r3, #26
 80040a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040aa:	e015      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x6b0>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80040be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80040c4:	2320      	movs	r3, #32
 80040c6:	e003      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	069b      	lsls	r3, r3, #26
 80040d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x6d0>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	3301      	adds	r3, #1
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	e017      	b.n	8004128 <HAL_ADC_ConfigChannel+0x700>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800410a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004110:	2320      	movs	r3, #32
 8004112:	e003      	b.n	800411c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3301      	adds	r3, #1
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	ea42 0103 	orr.w	r1, r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <HAL_ADC_ConfigChannel+0x726>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	3301      	adds	r3, #1
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	051b      	lsls	r3, r3, #20
 800414c:	e018      	b.n	8004180 <HAL_ADC_ConfigChannel+0x758>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004166:	2320      	movs	r3, #32
 8004168:	e003      	b.n	8004172 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	4613      	mov	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004180:	430b      	orrs	r3, r1
 8004182:	e07e      	b.n	8004282 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x778>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	3301      	adds	r3, #1
 8004198:	069b      	lsls	r3, r3, #26
 800419a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800419e:	e015      	b.n	80041cc <HAL_ADC_ConfigChannel+0x7a4>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80041b8:	2320      	movs	r3, #32
 80041ba:	e003      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	069b      	lsls	r3, r3, #26
 80041c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x7c4>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	e017      	b.n	800421c <HAL_ADC_ConfigChannel+0x7f4>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	61bb      	str	r3, [r7, #24]
  return result;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x820>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	3b1e      	subs	r3, #30
 8004240:	051b      	lsls	r3, r3, #20
 8004242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004246:	e01b      	b.n	8004280 <HAL_ADC_ConfigChannel+0x858>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	60fb      	str	r3, [r7, #12]
  return result;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f003 021f 	and.w	r2, r3, #31
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	3b1e      	subs	r3, #30
 800427a:	051b      	lsls	r3, r3, #20
 800427c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004280:	430b      	orrs	r3, r1
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	4619      	mov	r1, r3
 8004288:	f7ff f8d2 	bl	8003430 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f280 80d7 	bge.w	8004444 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <HAL_ADC_ConfigChannel+0x88c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_ADC_ConfigChannel+0x882>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_ADC_ConfigChannel+0x890>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10a      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x898>
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_ADC_ConfigChannel+0x894>)
 80042ac:	e009      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x89a>
 80042ae:	bf00      	nop
 80042b0:	47ff0000 	.word	0x47ff0000
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40022100 	.word	0x40022100
 80042bc:	40022300 	.word	0x40022300
 80042c0:	4b65      	ldr	r3, [pc, #404]	; (8004458 <HAL_ADC_ConfigChannel+0xa30>)
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe ff88 	bl	80031d8 <LL_ADC_GetCommonPathInternalCh>
 80042c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a62      	ldr	r2, [pc, #392]	; (800445c <HAL_ADC_ConfigChannel+0xa34>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0x8b8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a61      	ldr	r2, [pc, #388]	; (8004460 <HAL_ADC_ConfigChannel+0xa38>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10e      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x8d6>
 80042e0:	485e      	ldr	r0, [pc, #376]	; (800445c <HAL_ADC_ConfigChannel+0xa34>)
 80042e2:	f7ff f95f 	bl	80035a4 <LL_ADC_IsEnabled>
 80042e6:	4604      	mov	r4, r0
 80042e8:	485d      	ldr	r0, [pc, #372]	; (8004460 <HAL_ADC_ConfigChannel+0xa38>)
 80042ea:	f7ff f95b 	bl	80035a4 <LL_ADC_IsEnabled>
 80042ee:	4603      	mov	r3, r0
 80042f0:	4323      	orrs	r3, r4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e008      	b.n	8004310 <HAL_ADC_ConfigChannel+0x8e8>
 80042fe:	4859      	ldr	r0, [pc, #356]	; (8004464 <HAL_ADC_ConfigChannel+0xa3c>)
 8004300:	f7ff f950 	bl	80035a4 <LL_ADC_IsEnabled>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8084 	beq.w	800441e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a53      	ldr	r2, [pc, #332]	; (8004468 <HAL_ADC_ConfigChannel+0xa40>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d132      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x95e>
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d12c      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a4c      	ldr	r2, [pc, #304]	; (8004464 <HAL_ADC_ConfigChannel+0xa3c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f040 8086 	bne.w	8004444 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a47      	ldr	r2, [pc, #284]	; (800445c <HAL_ADC_ConfigChannel+0xa34>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_ADC_ConfigChannel+0x924>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a46      	ldr	r2, [pc, #280]	; (8004460 <HAL_ADC_ConfigChannel+0xa38>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x928>
 800434c:	4a47      	ldr	r2, [pc, #284]	; (800446c <HAL_ADC_ConfigChannel+0xa44>)
 800434e:	e000      	b.n	8004352 <HAL_ADC_ConfigChannel+0x92a>
 8004350:	4a41      	ldr	r2, [pc, #260]	; (8004458 <HAL_ADC_ConfigChannel+0xa30>)
 8004352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fe ff28 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_ADC_ConfigChannel+0xa48>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	4a42      	ldr	r2, [pc, #264]	; (8004474 <HAL_ADC_ConfigChannel+0xa4c>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	3301      	adds	r3, #1
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004376:	e002      	b.n	800437e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	3b01      	subs	r3, #1
 800437c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f9      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004384:	e05e      	b.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3b      	ldr	r2, [pc, #236]	; (8004478 <HAL_ADC_ConfigChannel+0xa50>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d120      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x9aa>
 8004390:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11a      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_ADC_ConfigChannel+0xa3c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d14e      	bne.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2c      	ldr	r2, [pc, #176]	; (800445c <HAL_ADC_ConfigChannel+0xa34>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x992>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <HAL_ADC_ConfigChannel+0xa38>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_ADC_ConfigChannel+0x996>
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <HAL_ADC_ConfigChannel+0xa44>)
 80043bc:	e000      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x998>
 80043be:	4a26      	ldr	r2, [pc, #152]	; (8004458 <HAL_ADC_ConfigChannel+0xa30>)
 80043c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7fe fef1 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d0:	e038      	b.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a29      	ldr	r2, [pc, #164]	; (800447c <HAL_ADC_ConfigChannel+0xa54>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d133      	bne.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
 80043dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d12d      	bne.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_ADC_ConfigChannel+0xa3c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d128      	bne.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_ADC_ConfigChannel+0xa34>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_ADC_ConfigChannel+0x9de>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_ADC_ConfigChannel+0xa38>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d101      	bne.n	800440a <HAL_ADC_ConfigChannel+0x9e2>
 8004406:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_ADC_ConfigChannel+0xa44>)
 8004408:	e000      	b.n	800440c <HAL_ADC_ConfigChannel+0x9e4>
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_ADC_ConfigChannel+0xa30>)
 800440c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7fe fecb 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
 800441c:	e012      	b.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004430:	e008      	b.n	8004444 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800444c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004450:	4618      	mov	r0, r3
 8004452:	37e4      	adds	r7, #228	; 0xe4
 8004454:	46bd      	mov	sp, r7
 8004456:	bd90      	pop	{r4, r7, pc}
 8004458:	58026300 	.word	0x58026300
 800445c:	40022000 	.word	0x40022000
 8004460:	40022100 	.word	0x40022100
 8004464:	58026000 	.word	0x58026000
 8004468:	c7520000 	.word	0xc7520000
 800446c:	40022300 	.word	0x40022300
 8004470:	24000004 	.word	0x24000004
 8004474:	053e2d63 	.word	0x053e2d63
 8004478:	c3210000 	.word	0xc3210000
 800447c:	cb840000 	.word	0xcb840000

08004480 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	; (800463c <ADC_ConfigureBoostMode+0x1bc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <ADC_ConfigureBoostMode+0x1c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6a      	ldr	r2, [pc, #424]	; (8004640 <ADC_ConfigureBoostMode+0x1c0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d109      	bne.n	80044b0 <ADC_ConfigureBoostMode+0x30>
 800449c:	4b69      	ldr	r3, [pc, #420]	; (8004644 <ADC_ConfigureBoostMode+0x1c4>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e008      	b.n	80044c2 <ADC_ConfigureBoostMode+0x42>
 80044b0:	4b65      	ldr	r3, [pc, #404]	; (8004648 <ADC_ConfigureBoostMode+0x1c8>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01c      	beq.n	8004500 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80044c6:	f002 f9d3 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 80044ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d4:	d010      	beq.n	80044f8 <ADC_ConfigureBoostMode+0x78>
 80044d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044da:	d871      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x140>
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e0:	d002      	beq.n	80044e8 <ADC_ConfigureBoostMode+0x68>
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d16b      	bne.n	80045c0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	60fb      	str	r3, [r7, #12]
        break;
 80044f6:	e066      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	60fb      	str	r3, [r7, #12]
        break;
 80044fe:	e062      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004500:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004504:	f003 f90a 	bl	800771c <HAL_RCCEx_GetPeriphCLKFreq>
 8004508:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004512:	d051      	beq.n	80045b8 <ADC_ConfigureBoostMode+0x138>
 8004514:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004518:	d854      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 800451a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800451e:	d047      	beq.n	80045b0 <ADC_ConfigureBoostMode+0x130>
 8004520:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004524:	d84e      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 8004526:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800452a:	d03d      	beq.n	80045a8 <ADC_ConfigureBoostMode+0x128>
 800452c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004530:	d848      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 8004532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004536:	d033      	beq.n	80045a0 <ADC_ConfigureBoostMode+0x120>
 8004538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800453c:	d842      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 800453e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004542:	d029      	beq.n	8004598 <ADC_ConfigureBoostMode+0x118>
 8004544:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004548:	d83c      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 800454a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800454e:	d01a      	beq.n	8004586 <ADC_ConfigureBoostMode+0x106>
 8004550:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004554:	d836      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 8004556:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800455a:	d014      	beq.n	8004586 <ADC_ConfigureBoostMode+0x106>
 800455c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004560:	d830      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 8004562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004566:	d00e      	beq.n	8004586 <ADC_ConfigureBoostMode+0x106>
 8004568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456c:	d82a      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 800456e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004572:	d008      	beq.n	8004586 <ADC_ConfigureBoostMode+0x106>
 8004574:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004578:	d824      	bhi.n	80045c4 <ADC_ConfigureBoostMode+0x144>
 800457a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800457e:	d002      	beq.n	8004586 <ADC_ConfigureBoostMode+0x106>
 8004580:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004584:	d11e      	bne.n	80045c4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	60fb      	str	r3, [r7, #12]
        break;
 8004596:	e016      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	60fb      	str	r3, [r7, #12]
        break;
 800459e:	e012      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	60fb      	str	r3, [r7, #12]
        break;
 80045a6:	e00e      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	099b      	lsrs	r3, r3, #6
 80045ac:	60fb      	str	r3, [r7, #12]
        break;
 80045ae:	e00a      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	09db      	lsrs	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
        break;
 80045b6:	e006      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	60fb      	str	r3, [r7, #12]
        break;
 80045be:	e002      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
        break;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80045c4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a1f      	ldr	r2, [pc, #124]	; (800464c <ADC_ConfigureBoostMode+0x1cc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d808      	bhi.n	80045e6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80045e4:	e025      	b.n	8004632 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <ADC_ConfigureBoostMode+0x1d0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d80a      	bhi.n	8004604 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004600:	609a      	str	r2, [r3, #8]
}
 8004602:	e016      	b.n	8004632 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <ADC_ConfigureBoostMode+0x1d4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d80a      	bhi.n	8004622 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	e007      	b.n	8004632 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004630:	609a      	str	r2, [r3, #8]
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40022000 	.word	0x40022000
 8004640:	40022100 	.word	0x40022100
 8004644:	40022300 	.word	0x40022300
 8004648:	58026300 	.word	0x58026300
 800464c:	005f5e10 	.word	0x005f5e10
 8004650:	00bebc20 	.word	0x00bebc20
 8004654:	017d7840 	.word	0x017d7840

08004658 <LL_ADC_IsEnabled>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <LL_ADC_IsEnabled+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_ADC_IsEnabled+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_ADC_REG_IsConversionOngoing>:
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d101      	bne.n	8004696 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b0a3      	sub	sp, #140	; 0x8c
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0c1      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a5e      	ldr	r2, [pc, #376]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d102      	bne.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046dc:	4b5d      	ldr	r3, [pc, #372]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e001      	b.n	80046e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0a0      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ffb9 	bl	800467e <LL_ADC_REG_IsConversionOngoing>
 800470c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ffb2 	bl	800467e <LL_ADC_REG_IsConversionOngoing>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8081 	bne.w	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d17c      	bne.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a48      	ldr	r2, [pc, #288]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a46      	ldr	r2, [pc, #280]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800473e:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004740:	e000      	b.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004744:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d039      	beq.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800474e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	431a      	orrs	r2, r3
 800475c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800475e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3a      	ldr	r2, [pc, #232]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a39      	ldr	r2, [pc, #228]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d10e      	bne.n	8004792 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004774:	4836      	ldr	r0, [pc, #216]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004776:	f7ff ff6f 	bl	8004658 <LL_ADC_IsEnabled>
 800477a:	4604      	mov	r4, r0
 800477c:	4835      	ldr	r0, [pc, #212]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800477e:	f7ff ff6b 	bl	8004658 <LL_ADC_IsEnabled>
 8004782:	4603      	mov	r3, r0
 8004784:	4323      	orrs	r3, r4
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e008      	b.n	80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004792:	4833      	ldr	r0, [pc, #204]	; (8004860 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004794:	f7ff ff60 	bl	8004658 <LL_ADC_IsEnabled>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d047      	beq.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	6811      	ldr	r1, [r2, #0]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	431a      	orrs	r2, r3
 80047bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c0:	e03a      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80047c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d10e      	bne.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80047e2:	481b      	ldr	r0, [pc, #108]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047e4:	f7ff ff38 	bl	8004658 <LL_ADC_IsEnabled>
 80047e8:	4604      	mov	r4, r0
 80047ea:	481a      	ldr	r0, [pc, #104]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047ec:	f7ff ff34 	bl	8004658 <LL_ADC_IsEnabled>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4323      	orrs	r3, r4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e008      	b.n	8004812 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004800:	4817      	ldr	r0, [pc, #92]	; (8004860 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004802:	f7ff ff29 	bl	8004658 <LL_ADC_IsEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800481c:	4013      	ands	r3, r2
 800481e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004820:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004822:	e009      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004836:	e000      	b.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004838:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004842:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004846:	4618      	mov	r0, r3
 8004848:	378c      	adds	r7, #140	; 0x8c
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	40022000 	.word	0x40022000
 8004854:	40022100 	.word	0x40022100
 8004858:	40022300 	.word	0x40022300
 800485c:	58026300 	.word	0x58026300
 8004860:	58026000 	.word	0x58026000
 8004864:	fffff0e0 	.word	0xfffff0e0

08004868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <__NVIC_SetPriorityGrouping+0x40>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004884:	4013      	ands	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <__NVIC_SetPriorityGrouping+0x44>)
 8004892:	4313      	orrs	r3, r2
 8004894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004896:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <__NVIC_SetPriorityGrouping+0x40>)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	60d3      	str	r3, [r2, #12]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000ed00 	.word	0xe000ed00
 80048ac:	05fa0000 	.word	0x05fa0000

080048b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <__NVIC_GetPriorityGrouping+0x18>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 0307 	and.w	r3, r3, #7
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	db0b      	blt.n	80048f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	f003 021f 	and.w	r2, r3, #31
 80048e4:	4907      	ldr	r1, [pc, #28]	; (8004904 <__NVIC_EnableIRQ+0x38>)
 80048e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2001      	movs	r0, #1
 80048ee:	fa00 f202 	lsl.w	r2, r0, r2
 80048f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0a      	blt.n	8004932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	490c      	ldr	r1, [pc, #48]	; (8004954 <__NVIC_SetPriority+0x4c>)
 8004922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	440b      	add	r3, r1
 800492c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004930:	e00a      	b.n	8004948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4908      	ldr	r1, [pc, #32]	; (8004958 <__NVIC_SetPriority+0x50>)
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3b04      	subs	r3, #4
 8004940:	0112      	lsls	r2, r2, #4
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	440b      	add	r3, r1
 8004946:	761a      	strb	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	; 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf28      	it	cs
 800497a:	2304      	movcs	r3, #4
 800497c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3304      	adds	r3, #4
 8004982:	2b06      	cmp	r3, #6
 8004984:	d902      	bls.n	800498c <NVIC_EncodePriority+0x30>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3b03      	subs	r3, #3
 800498a:	e000      	b.n	800498e <NVIC_EncodePriority+0x32>
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	401a      	ands	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a4:	f04f 31ff 	mov.w	r1, #4294967295
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43d9      	mvns	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	4313      	orrs	r3, r2
         );
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3724      	adds	r7, #36	; 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d4:	d301      	bcc.n	80049da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <SysTick_Config+0x40>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e2:	210f      	movs	r1, #15
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	f7ff ff8e 	bl	8004908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <SysTick_Config+0x40>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f2:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <SysTick_Config+0x40>)
 80049f4:	2207      	movs	r2, #7
 80049f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000e010 	.word	0xe000e010

08004a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff29 	bl	8004868 <__NVIC_SetPriorityGrouping>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	4603      	mov	r3, r0
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a2c:	f7ff ff40 	bl	80048b0 <__NVIC_GetPriorityGrouping>
 8004a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	6978      	ldr	r0, [r7, #20]
 8004a38:	f7ff ff90 	bl	800495c <NVIC_EncodePriority>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff ff5f 	bl	8004908 <__NVIC_SetPriority>
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ff33 	bl	80048cc <__NVIC_EnableIRQ>
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ffa4 	bl	80049c4 <SysTick_Config>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e014      	b.n	8004ac2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	791b      	ldrb	r3, [r3, #4]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fd fce9 	bl	8002480 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	795b      	ldrb	r3, [r3, #5]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_DAC_ConfigChannel+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e11d      	b.n	8004d20 <HAL_DAC_ConfigChannel+0x254>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2202      	movs	r2, #2
 8004aee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d174      	bne.n	8004be2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004af8:	f7fe fb02 	bl	8003100 <HAL_GetTick>
 8004afc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d134      	bne.n	8004b6e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b04:	e011      	b.n	8004b2a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b06:	f7fe fafb 	bl	8003100 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d90a      	bls.n	8004b2a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f043 0208 	orr.w	r2, r3, #8
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2203      	movs	r2, #3
 8004b24:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0fa      	b.n	8004d20 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b30:	4b7d      	ldr	r3, [pc, #500]	; (8004d28 <HAL_DAC_ConfigChannel+0x25c>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7fe faed 	bl	8003118 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	6992      	ldr	r2, [r2, #24]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
 8004b48:	e01e      	b.n	8004b88 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b4a:	f7fe fad9 	bl	8003100 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d90a      	bls.n	8004b6e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f043 0208 	orr.w	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2203      	movs	r2, #3
 8004b68:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0d8      	b.n	8004d20 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dbe8      	blt.n	8004b4a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7fe facd 	bl	8003118 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	6992      	ldr	r2, [r2, #24]
 8004b86:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b98:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	ea02 0103 	and.w	r1, r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	409a      	lsls	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	21ff      	movs	r1, #255	; 0xff
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	ea02 0103 	and.w	r1, r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11d      	bne.n	8004c26 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	221f      	movs	r2, #31
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4013      	ands	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2207      	movs	r2, #7
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e00f      	b.n	8004c70 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d102      	bne.n	8004c5e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e008      	b.n	8004c70 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e001      	b.n	8004c70 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	22c0      	movs	r2, #192	; 0xc0
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	43da      	mvns	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	400a      	ands	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20008000 	.word	0x20008000

08004d2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b098      	sub	sp, #96	; 0x60
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004d34:	4a84      	ldr	r2, [pc, #528]	; (8004f48 <HAL_FDCAN_Init+0x21c>)
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	224c      	movs	r2, #76	; 0x4c
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f006 fc3c 	bl	800b5bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e1ca      	b.n	80050e4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a7e      	ldr	r2, [pc, #504]	; (8004f4c <HAL_FDCAN_Init+0x220>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d106      	bne.n	8004d66 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d60:	461a      	mov	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fd fbc6 	bl	800250c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0210 	bic.w	r2, r2, #16
 8004d8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d90:	f7fe f9b6 	bl	8003100 <HAL_GetTick>
 8004d94:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d96:	e014      	b.n	8004dc2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d98:	f7fe f9b2 	bl	8003100 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b0a      	cmp	r3, #10
 8004da4:	d90d      	bls.n	8004dc2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2203      	movs	r2, #3
 8004dba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e190      	b.n	80050e4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d0e3      	beq.n	8004d98 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de0:	f7fe f98e 	bl	8003100 <HAL_GetTick>
 8004de4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004de6:	e014      	b.n	8004e12 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004de8:	f7fe f98a 	bl	8003100 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b0a      	cmp	r3, #10
 8004df4:	d90d      	bls.n	8004e12 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e168      	b.n	80050e4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0e3      	beq.n	8004de8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0202 	orr.w	r2, r2, #2
 8004e2e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7c1b      	ldrb	r3, [r3, #16]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d108      	bne.n	8004e4a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	619a      	str	r2, [r3, #24]
 8004e48:	e007      	b.n	8004e5a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e58:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7c5b      	ldrb	r3, [r3, #17]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d108      	bne.n	8004e74 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699a      	ldr	r2, [r3, #24]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e70:	619a      	str	r2, [r3, #24]
 8004e72:	e007      	b.n	8004e84 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e82:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7c9b      	ldrb	r3, [r3, #18]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d108      	bne.n	8004e9e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e9a:	619a      	str	r2, [r3, #24]
 8004e9c:	e007      	b.n	8004eae <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eac:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004ed2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0210 	bic.w	r2, r2, #16
 8004ee2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d108      	bne.n	8004efe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0204 	orr.w	r2, r2, #4
 8004efa:	619a      	str	r2, [r3, #24]
 8004efc:	e030      	b.n	8004f60 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02c      	beq.n	8004f60 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d020      	beq.n	8004f50 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f1c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0210 	orr.w	r2, r2, #16
 8004f2c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d114      	bne.n	8004f60 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0220 	orr.w	r2, r2, #32
 8004f44:	619a      	str	r2, [r3, #24]
 8004f46:	e00b      	b.n	8004f60 <HAL_FDCAN_Init+0x234>
 8004f48:	0800fdf0 	.word	0x0800fdf0
 8004f4c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0220 	orr.w	r2, r2, #32
 8004f5e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f70:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f78:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f88:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f8a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f94:	d115      	bne.n	8004fc2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fa4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	3b01      	subs	r3, #1
 8004fac:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004fae:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004fbe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fc0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe8:	4413      	add	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d012      	beq.n	8005014 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004ff6:	f023 0107 	bic.w	r1, r3, #7
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005004:	4413      	add	r3, r2
 8005006:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005024:	f023 0107 	bic.w	r1, r3, #7
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005032:	4413      	add	r3, r2
 8005034:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005052:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005060:	4413      	add	r3, r2
 8005062:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005066:	011a      	lsls	r2, r3, #4
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	2b00      	cmp	r3, #0
 8005078:	d013      	beq.n	80050a2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005082:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005090:	4413      	add	r3, r2
 8005092:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005096:	021a      	lsls	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a11      	ldr	r2, [pc, #68]	; (80050ec <HAL_FDCAN_Init+0x3c0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d107      	bne.n	80050bc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f022 0203 	bic.w	r2, r2, #3
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f80b 	bl	80050f0 <FDCAN_CalcultateRamBlockAddresses>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80050e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3760      	adds	r7, #96	; 0x60
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	4000a000 	.word	0x4000a000

080050f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005106:	4ba7      	ldr	r3, [pc, #668]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005108:	4013      	ands	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	0091      	lsls	r1, r2, #2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	430b      	orrs	r3, r1
 8005114:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005120:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	4413      	add	r3, r2
 800513c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005146:	4b97      	ldr	r3, [pc, #604]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005148:	4013      	ands	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	0091      	lsls	r1, r2, #2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	430b      	orrs	r3, r1
 8005154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005168:	041a      	lsls	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005188:	4b86      	ldr	r3, [pc, #536]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800518a:	4013      	ands	r3, r2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	0091      	lsls	r1, r2, #2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	430b      	orrs	r3, r1
 8005196:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	041a      	lsls	r2, r3, #16
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4413      	add	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80051d0:	4b74      	ldr	r3, [pc, #464]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	0091      	lsls	r1, r2, #2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	430b      	orrs	r3, r1
 80051de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	041a      	lsls	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4413      	add	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005218:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800521a:	4013      	ands	r3, r2
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	0091      	lsls	r1, r2, #2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	430b      	orrs	r3, r1
 8005226:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005244:	4b57      	ldr	r3, [pc, #348]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	0091      	lsls	r1, r2, #2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800525e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	041a      	lsls	r2, r3, #16
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4413      	add	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005286:	4b47      	ldr	r3, [pc, #284]	; (80053a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005288:	4013      	ands	r3, r2
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0091      	lsls	r1, r2, #2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	430b      	orrs	r3, r1
 8005294:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052a0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	041a      	lsls	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052bc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c4:	061a      	lsls	r2, r3, #24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d4:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80052d6:	4413      	add	r3, r2
 80052d8:	009a      	lsls	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800536a:	fb01 f303 	mul.w	r3, r1, r3
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	441a      	add	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	4a04      	ldr	r2, [pc, #16]	; (80053ac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d915      	bls.n	80053cc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80053a0:	e006      	b.n	80053b0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80053a2:	bf00      	nop
 80053a4:	ffff0003 	.word	0xffff0003
 80053a8:	10002b00 	.word	0x10002b00
 80053ac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2203      	movs	r2, #3
 80053c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e010      	b.n	80053ee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e005      	b.n	80053e0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3304      	adds	r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3f3      	bcc.n	80053d4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop

080053fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	; 0x24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800540a:	4b86      	ldr	r3, [pc, #536]	; (8005624 <HAL_GPIO_Init+0x228>)
 800540c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800540e:	e18c      	b.n	800572a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2101      	movs	r1, #1
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 817e 	beq.w	8005724 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d005      	beq.n	8005440 <HAL_GPIO_Init+0x44>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d130      	bne.n	80054a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	2203      	movs	r2, #3
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	4013      	ands	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4313      	orrs	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005476:	2201      	movs	r2, #1
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f003 0201 	and.w	r2, r3, #1
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d017      	beq.n	80054de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2203      	movs	r2, #3
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d123      	bne.n	8005532 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	08da      	lsrs	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3208      	adds	r2, #8
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	220f      	movs	r2, #15
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	08da      	lsrs	r2, r3, #3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3208      	adds	r2, #8
 800552c:	69b9      	ldr	r1, [r7, #24]
 800552e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	2203      	movs	r2, #3
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 0203 	and.w	r2, r3, #3
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80d8 	beq.w	8005724 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005574:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <HAL_GPIO_Init+0x22c>)
 8005576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800557a:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <HAL_GPIO_Init+0x22c>)
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005584:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_GPIO_Init+0x22c>)
 8005586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005592:	4a26      	ldr	r2, [pc, #152]	; (800562c <HAL_GPIO_Init+0x230>)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	3302      	adds	r3, #2
 800559a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	220f      	movs	r2, #15
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_GPIO_Init+0x234>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <HAL_GPIO_Init+0x258>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_GPIO_Init+0x238>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d02b      	beq.n	800561e <HAL_GPIO_Init+0x222>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <HAL_GPIO_Init+0x23c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d025      	beq.n	800561a <HAL_GPIO_Init+0x21e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1a      	ldr	r2, [pc, #104]	; (800563c <HAL_GPIO_Init+0x240>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <HAL_GPIO_Init+0x21a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a19      	ldr	r2, [pc, #100]	; (8005640 <HAL_GPIO_Init+0x244>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d019      	beq.n	8005612 <HAL_GPIO_Init+0x216>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_GPIO_Init+0x248>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_GPIO_Init+0x212>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a17      	ldr	r2, [pc, #92]	; (8005648 <HAL_GPIO_Init+0x24c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00d      	beq.n	800560a <HAL_GPIO_Init+0x20e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_GPIO_Init+0x250>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <HAL_GPIO_Init+0x20a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <HAL_GPIO_Init+0x254>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_GPIO_Init+0x206>
 80055fe:	2309      	movs	r3, #9
 8005600:	e029      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 8005602:	230a      	movs	r3, #10
 8005604:	e027      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 8005606:	2307      	movs	r3, #7
 8005608:	e025      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 800560a:	2306      	movs	r3, #6
 800560c:	e023      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 800560e:	2305      	movs	r3, #5
 8005610:	e021      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 8005612:	2304      	movs	r3, #4
 8005614:	e01f      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 8005616:	2303      	movs	r3, #3
 8005618:	e01d      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 800561a:	2302      	movs	r3, #2
 800561c:	e01b      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 800561e:	2301      	movs	r3, #1
 8005620:	e019      	b.n	8005656 <HAL_GPIO_Init+0x25a>
 8005622:	bf00      	nop
 8005624:	58000080 	.word	0x58000080
 8005628:	58024400 	.word	0x58024400
 800562c:	58000400 	.word	0x58000400
 8005630:	58020000 	.word	0x58020000
 8005634:	58020400 	.word	0x58020400
 8005638:	58020800 	.word	0x58020800
 800563c:	58020c00 	.word	0x58020c00
 8005640:	58021000 	.word	0x58021000
 8005644:	58021400 	.word	0x58021400
 8005648:	58021800 	.word	0x58021800
 800564c:	58021c00 	.word	0x58021c00
 8005650:	58022400 	.word	0x58022400
 8005654:	2300      	movs	r3, #0
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	f002 0203 	and.w	r2, r2, #3
 800565c:	0092      	lsls	r2, r2, #2
 800565e:	4093      	lsls	r3, r2
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005666:	4938      	ldr	r1, [pc, #224]	; (8005748 <HAL_GPIO_Init+0x34c>)
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	3302      	adds	r3, #2
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	3301      	adds	r3, #1
 8005728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	f47f ae6b 	bne.w	8005410 <HAL_GPIO_Init+0x14>
  }
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	3724      	adds	r7, #36	; 0x24
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	58000400 	.word	0x58000400

0800574c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
 8005758:	4613      	mov	r3, r2
 800575a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005768:	e003      	b.n	8005772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800576a:	887b      	ldrh	r3, [r7, #2]
 800576c:	041a      	lsls	r2, r3, #16
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	619a      	str	r2, [r3, #24]
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	4603      	mov	r3, r0
 8005786:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fb fabf 	bl	8000d28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e07f      	b.n	80058c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc ff60 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2224      	movs	r2, #36	; 0x24
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005804:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005814:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	e006      	b.n	800583c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800583a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d104      	bne.n	800584e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_I2C_Init+0x11c>)
 800585a:	430b      	orrs	r3, r1
 800585c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800586c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	02008000 	.word	0x02008000

080058d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d138      	bne.n	800595c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e032      	b.n	800595e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6819      	ldr	r1, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b20      	cmp	r3, #32
 800597e:	d139      	bne.n	80059f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800598a:	2302      	movs	r3, #2
 800598c:	e033      	b.n	80059f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2224      	movs	r2, #36	; 0x24
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a0c:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	d00a      	beq.n	8005a2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a18:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d001      	beq.n	8005a2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e03f      	b.n	8005aaa <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e03d      	b.n	8005aaa <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005a36:	491f      	ldr	r1, [pc, #124]	; (8005ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a3e:	f7fd fb5f 	bl	8003100 <HAL_GetTick>
 8005a42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a44:	e009      	b.n	8005a5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a46:	f7fd fb5b 	bl	8003100 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a54:	d901      	bls.n	8005a5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e027      	b.n	8005aaa <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a5a:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a66:	d1ee      	bne.n	8005a46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b1e      	cmp	r3, #30
 8005a6c:	d008      	beq.n	8005a80 <HAL_PWREx_ConfigSupply+0x7c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b2e      	cmp	r3, #46	; 0x2e
 8005a72:	d005      	beq.n	8005a80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b1d      	cmp	r3, #29
 8005a78:	d002      	beq.n	8005a80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8005a7e:	d113      	bne.n	8005aa8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005a80:	f7fd fb3e 	bl	8003100 <HAL_GetTick>
 8005a84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a86:	e009      	b.n	8005a9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a88:	f7fd fb3a 	bl	8003100 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a96:	d901      	bls.n	8005a9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e006      	b.n	8005aaa <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0311 	and.w	r3, r3, #17
 8005aa4:	2b11      	cmp	r3, #17
 8005aa6:	d1ef      	bne.n	8005a88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024800 	.word	0x58024800

08005ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e397      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8087 	beq.w	8005be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad8:	4b9e      	ldr	r3, [pc, #632]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae2:	4b9c      	ldr	r3, [pc, #624]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d007      	beq.n	8005afe <HAL_RCC_OscConfig+0x46>
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	2b18      	cmp	r3, #24
 8005af2:	d110      	bne.n	8005b16 <HAL_RCC_OscConfig+0x5e>
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d10b      	bne.n	8005b16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005afe:	4b95      	ldr	r3, [pc, #596]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d06c      	beq.n	8005be4 <HAL_RCC_OscConfig+0x12c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d168      	bne.n	8005be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e371      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1e:	d106      	bne.n	8005b2e <HAL_RCC_OscConfig+0x76>
 8005b20:	4b8c      	ldr	r3, [pc, #560]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a8b      	ldr	r2, [pc, #556]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	e02e      	b.n	8005b8c <HAL_RCC_OscConfig+0xd4>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10c      	bne.n	8005b50 <HAL_RCC_OscConfig+0x98>
 8005b36:	4b87      	ldr	r3, [pc, #540]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a86      	ldr	r2, [pc, #536]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	4b84      	ldr	r3, [pc, #528]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a83      	ldr	r2, [pc, #524]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e01d      	b.n	8005b8c <HAL_RCC_OscConfig+0xd4>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCC_OscConfig+0xbc>
 8005b5a:	4b7e      	ldr	r3, [pc, #504]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7d      	ldr	r2, [pc, #500]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	4b7b      	ldr	r3, [pc, #492]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a7a      	ldr	r2, [pc, #488]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e00b      	b.n	8005b8c <HAL_RCC_OscConfig+0xd4>
 8005b74:	4b77      	ldr	r3, [pc, #476]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a76      	ldr	r2, [pc, #472]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b74      	ldr	r3, [pc, #464]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a73      	ldr	r2, [pc, #460]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d013      	beq.n	8005bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fd fab4 	bl	8003100 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b9c:	f7fd fab0 	bl	8003100 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b64      	cmp	r3, #100	; 0x64
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e325      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bae:	4b69      	ldr	r3, [pc, #420]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0xe4>
 8005bba:	e014      	b.n	8005be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fd faa0 	bl	8003100 <HAL_GetTick>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc4:	f7fd fa9c 	bl	8003100 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	; 0x64
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e311      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bd6:	4b5f      	ldr	r3, [pc, #380]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x10c>
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 808a 	beq.w	8005d08 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf4:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bfe:	4b55      	ldr	r3, [pc, #340]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <HAL_RCC_OscConfig+0x162>
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2b18      	cmp	r3, #24
 8005c0e:	d137      	bne.n	8005c80 <HAL_RCC_OscConfig+0x1c8>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d132      	bne.n	8005c80 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c1a:	4b4e      	ldr	r3, [pc, #312]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_RCC_OscConfig+0x17a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e2e3      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c32:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 0219 	bic.w	r2, r3, #25
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4945      	ldr	r1, [pc, #276]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c44:	f7fd fa5c 	bl	8003100 <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fa58 	bl	8003100 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e2cd      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	061b      	lsls	r3, r3, #24
 8005c78:	4936      	ldr	r1, [pc, #216]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c7e:	e043      	b.n	8005d08 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d026      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c88:	4b32      	ldr	r3, [pc, #200]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f023 0219 	bic.w	r2, r3, #25
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	492f      	ldr	r1, [pc, #188]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fd fa31 	bl	8003100 <HAL_GetTick>
 8005c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fd fa2d 	bl	8003100 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e2a2      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cb4:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	4921      	ldr	r1, [pc, #132]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
 8005cd4:	e018      	b.n	8005d08 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce2:	f7fd fa0d 	bl	8003100 <HAL_GetTick>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cea:	f7fd fa09 	bl	8003100 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e27e      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cfc:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f0      	bne.n	8005cea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d06d      	beq.n	8005df0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d1c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d007      	beq.n	8005d3a <HAL_RCC_OscConfig+0x282>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b18      	cmp	r3, #24
 8005d2e:	d11e      	bne.n	8005d6e <HAL_RCC_OscConfig+0x2b6>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d119      	bne.n	8005d6e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <HAL_RCC_OscConfig+0x29c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_RCC_OscConfig+0x2a0>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d004      	beq.n	8005d58 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e253      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d58:	4ba3      	ldr	r3, [pc, #652]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	061b      	lsls	r3, r3, #24
 8005d66:	49a0      	ldr	r1, [pc, #640]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d6c:	e040      	b.n	8005df0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d023      	beq.n	8005dbe <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d76:	4b9c      	ldr	r3, [pc, #624]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a9b      	ldr	r2, [pc, #620]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d82:	f7fd f9bd 	bl	8003100 <HAL_GetTick>
 8005d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d8a:	f7fd f9b9 	bl	8003100 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e22e      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d9c:	4b92      	ldr	r3, [pc, #584]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005da8:	4b8f      	ldr	r3, [pc, #572]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	061b      	lsls	r3, r3, #24
 8005db6:	498c      	ldr	r1, [pc, #560]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60cb      	str	r3, [r1, #12]
 8005dbc:	e018      	b.n	8005df0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005dbe:	4b8a      	ldr	r3, [pc, #552]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a89      	ldr	r2, [pc, #548]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fd f999 	bl	8003100 <HAL_GetTick>
 8005dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005dd2:	f7fd f995 	bl	8003100 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e20a      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005de4:	4b80      	ldr	r3, [pc, #512]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d036      	beq.n	8005e6a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e04:	4b78      	ldr	r3, [pc, #480]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	4a77      	ldr	r2, [pc, #476]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e10:	f7fd f976 	bl	8003100 <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e18:	f7fd f972 	bl	8003100 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1e7      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e2a:	4b6f      	ldr	r3, [pc, #444]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0x360>
 8005e36:	e018      	b.n	8005e6a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e38:	4b6b      	ldr	r3, [pc, #428]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3c:	4a6a      	ldr	r2, [pc, #424]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e44:	f7fd f95c 	bl	8003100 <HAL_GetTick>
 8005e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e4c:	f7fd f958 	bl	8003100 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e1cd      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e5e:	4b62      	ldr	r3, [pc, #392]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d036      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d019      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e7e:	4b5a      	ldr	r3, [pc, #360]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a59      	ldr	r2, [pc, #356]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e8a:	f7fd f939 	bl	8003100 <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e92:	f7fd f935 	bl	8003100 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e1aa      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ea4:	4b50      	ldr	r3, [pc, #320]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x3da>
 8005eb0:	e018      	b.n	8005ee4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eb2:	4b4d      	ldr	r3, [pc, #308]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a4c      	ldr	r2, [pc, #304]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ebc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ebe:	f7fd f91f 	bl	8003100 <HAL_GetTick>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ec6:	f7fd f91b 	bl	8003100 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e190      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ed8:	4b43      	ldr	r3, [pc, #268]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8085 	beq.w	8005ffc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ef2:	4b3e      	ldr	r3, [pc, #248]	; (8005fec <HAL_RCC_OscConfig+0x534>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a3d      	ldr	r2, [pc, #244]	; (8005fec <HAL_RCC_OscConfig+0x534>)
 8005ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005efe:	f7fd f8ff 	bl	8003100 <HAL_GetTick>
 8005f02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f06:	f7fd f8fb 	bl	8003100 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b64      	cmp	r3, #100	; 0x64
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e170      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f18:	4b34      	ldr	r3, [pc, #208]	; (8005fec <HAL_RCC_OscConfig+0x534>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCC_OscConfig+0x482>
 8005f2c:	4b2e      	ldr	r3, [pc, #184]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70
 8005f38:	e02d      	b.n	8005f96 <HAL_RCC_OscConfig+0x4de>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x4a4>
 8005f42:	4b29      	ldr	r3, [pc, #164]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a28      	ldr	r2, [pc, #160]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5a:	e01c      	b.n	8005f96 <HAL_RCC_OscConfig+0x4de>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b05      	cmp	r3, #5
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCC_OscConfig+0x4c6>
 8005f64:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f6a:	f043 0304 	orr.w	r3, r3, #4
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f70:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7c:	e00b      	b.n	8005f96 <HAL_RCC_OscConfig+0x4de>
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8a:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d015      	beq.n	8005fca <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fd f8af 	bl	8003100 <HAL_GetTick>
 8005fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fd f8ab 	bl	8003100 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e11e      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCC_OscConfig+0x530>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0ee      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x4ee>
 8005fc8:	e018      	b.n	8005ffc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fca:	f7fd f899 	bl	8003100 <HAL_GetTick>
 8005fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fd0:	e00e      	b.n	8005ff0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fd f895 	bl	8003100 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d905      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e108      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ff0:	4b84      	ldr	r3, [pc, #528]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ea      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80f9 	beq.w	80061f8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006006:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800600e:	2b18      	cmp	r3, #24
 8006010:	f000 80b4 	beq.w	800617c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b02      	cmp	r3, #2
 800601a:	f040 8095 	bne.w	8006148 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601e:	4b79      	ldr	r3, [pc, #484]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a78      	ldr	r2, [pc, #480]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602a:	f7fd f869 	bl	8003100 <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006032:	f7fd f865 	bl	8003100 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0da      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006044:	4b6f      	ldr	r3, [pc, #444]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f0      	bne.n	8006032 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006050:	4b6c      	ldr	r3, [pc, #432]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006054:	4b6c      	ldr	r3, [pc, #432]	; (8006208 <HAL_RCC_OscConfig+0x750>)
 8006056:	4013      	ands	r3, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006060:	0112      	lsls	r2, r2, #4
 8006062:	430a      	orrs	r2, r1
 8006064:	4967      	ldr	r1, [pc, #412]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	628b      	str	r3, [r1, #40]	; 0x28
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	3b01      	subs	r3, #1
 8006070:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	3b01      	subs	r3, #1
 800607a:	025b      	lsls	r3, r3, #9
 800607c:	b29b      	uxth	r3, r3
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	3b01      	subs	r3, #1
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	3b01      	subs	r3, #1
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800609a:	495a      	ldr	r1, [pc, #360]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800609c:	4313      	orrs	r3, r2
 800609e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80060a0:	4b58      	ldr	r3, [pc, #352]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	4a57      	ldr	r2, [pc, #348]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060ac:	4b55      	ldr	r3, [pc, #340]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b0:	4b56      	ldr	r3, [pc, #344]	; (800620c <HAL_RCC_OscConfig+0x754>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060b8:	00d2      	lsls	r2, r2, #3
 80060ba:	4952      	ldr	r1, [pc, #328]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060c0:	4b50      	ldr	r3, [pc, #320]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f023 020c 	bic.w	r2, r3, #12
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	494d      	ldr	r1, [pc, #308]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060d2:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f023 0202 	bic.w	r2, r3, #2
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	4949      	ldr	r1, [pc, #292]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060e4:	4b47      	ldr	r3, [pc, #284]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a46      	ldr	r2, [pc, #280]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f0:	4b44      	ldr	r3, [pc, #272]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	4a43      	ldr	r2, [pc, #268]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060fc:	4b41      	ldr	r3, [pc, #260]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a40      	ldr	r2, [pc, #256]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006108:	4b3e      	ldr	r3, [pc, #248]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	4a3d      	ldr	r2, [pc, #244]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006114:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a3a      	ldr	r2, [pc, #232]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800611a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800611e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fc ffee 	bl	8003100 <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006128:	f7fc ffea 	bl	8003100 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e05f      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800613a:	4b32      	ldr	r3, [pc, #200]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x670>
 8006146:	e057      	b.n	80061f8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006148:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2d      	ldr	r2, [pc, #180]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006154:	f7fc ffd4 	bl	8003100 <HAL_GetTick>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615c:	f7fc ffd0 	bl	8003100 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e045      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800616e:	4b25      	ldr	r3, [pc, #148]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x6a4>
 800617a:	e03d      	b.n	80061f8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800617c:	4b21      	ldr	r3, [pc, #132]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_RCC_OscConfig+0x74c>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b01      	cmp	r3, #1
 800618e:	d031      	beq.n	80061f4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f003 0203 	and.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d12a      	bne.n	80061f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d122      	bne.n	80061f4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d11a      	bne.n	80061f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d111      	bne.n	80061f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061de:	429a      	cmp	r2, r3
 80061e0:	d108      	bne.n	80061f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	0e1b      	lsrs	r3, r3, #24
 80061e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3730      	adds	r7, #48	; 0x30
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	58024400 	.word	0x58024400
 8006208:	fffffc0c 	.word	0xfffffc0c
 800620c:	ffff0007 	.word	0xffff0007

08006210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e19c      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006224:	4b8a      	ldr	r3, [pc, #552]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d910      	bls.n	8006254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b87      	ldr	r3, [pc, #540]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 020f 	bic.w	r2, r3, #15
 800623a:	4985      	ldr	r1, [pc, #532]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b83      	ldr	r3, [pc, #524]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e184      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626c:	429a      	cmp	r2, r3
 800626e:	d908      	bls.n	8006282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006270:	4b78      	ldr	r3, [pc, #480]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4975      	ldr	r1, [pc, #468]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800627e:	4313      	orrs	r3, r2
 8006280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	4b70      	ldr	r3, [pc, #448]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800629a:	429a      	cmp	r2, r3
 800629c:	d908      	bls.n	80062b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800629e:	4b6d      	ldr	r3, [pc, #436]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	496a      	ldr	r1, [pc, #424]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d010      	beq.n	80062de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	4b64      	ldr	r3, [pc, #400]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d908      	bls.n	80062de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062cc:	4b61      	ldr	r3, [pc, #388]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	495e      	ldr	r1, [pc, #376]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d010      	beq.n	800630c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	4b59      	ldr	r3, [pc, #356]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d908      	bls.n	800630c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062fa:	4b56      	ldr	r3, [pc, #344]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4953      	ldr	r1, [pc, #332]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006308:	4313      	orrs	r3, r2
 800630a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d010      	beq.n	800633a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	429a      	cmp	r2, r3
 8006326:	d908      	bls.n	800633a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006328:	4b4a      	ldr	r3, [pc, #296]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f023 020f 	bic.w	r2, r3, #15
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4947      	ldr	r1, [pc, #284]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006336:	4313      	orrs	r3, r2
 8006338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d055      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006346:	4b43      	ldr	r3, [pc, #268]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4940      	ldr	r1, [pc, #256]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006354:	4313      	orrs	r3, r2
 8006356:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d107      	bne.n	8006370 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006360:	4b3c      	ldr	r3, [pc, #240]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d121      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0f6      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d107      	bne.n	8006388 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006378:	4b36      	ldr	r3, [pc, #216]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d115      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0ea      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006390:	4b30      	ldr	r3, [pc, #192]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0de      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a0:	4b2c      	ldr	r3, [pc, #176]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0d6      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063b0:	4b28      	ldr	r3, [pc, #160]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f023 0207 	bic.w	r2, r3, #7
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	4925      	ldr	r1, [pc, #148]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fc fe9d 	bl	8003100 <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c8:	e00a      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ca:	f7fc fe99 	bl	8003100 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e0be      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e0:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d1eb      	bne.n	80063ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d010      	beq.n	8006420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	4b14      	ldr	r3, [pc, #80]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	429a      	cmp	r2, r3
 800640c:	d208      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f023 020f 	bic.w	r2, r3, #15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	490e      	ldr	r1, [pc, #56]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800641c:	4313      	orrs	r3, r2
 800641e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d214      	bcs.n	8006458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 020f 	bic.w	r2, r3, #15
 8006436:	4906      	ldr	r1, [pc, #24]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4313      	orrs	r3, r2
 800643c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e086      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
 8006450:	52002000 	.word	0x52002000
 8006454:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006470:	429a      	cmp	r2, r3
 8006472:	d208      	bcs.n	8006486 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006474:	4b3c      	ldr	r3, [pc, #240]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4939      	ldr	r1, [pc, #228]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006482:	4313      	orrs	r3, r2
 8006484:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	4b34      	ldr	r3, [pc, #208]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800649e:	429a      	cmp	r2, r3
 80064a0:	d208      	bcs.n	80064b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064a2:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	492e      	ldr	r1, [pc, #184]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d010      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	4b28      	ldr	r3, [pc, #160]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d208      	bcs.n	80064e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	4922      	ldr	r1, [pc, #136]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d010      	beq.n	8006510 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d208      	bcs.n	8006510 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4917      	ldr	r1, [pc, #92]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 800650c:	4313      	orrs	r3, r2
 800650e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006510:	f000 f834 	bl	800657c <HAL_RCC_GetSysClockFreq>
 8006514:	4602      	mov	r2, r0
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	4912      	ldr	r1, [pc, #72]	; (800656c <HAL_RCC_ClockConfig+0x35c>)
 8006522:	5ccb      	ldrb	r3, [r1, r3]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
 800652c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	4a0d      	ldr	r2, [pc, #52]	; (800656c <HAL_RCC_ClockConfig+0x35c>)
 8006538:	5cd3      	ldrb	r3, [r2, r3]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <HAL_RCC_ClockConfig+0x360>)
 8006546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006548:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <HAL_RCC_ClockConfig+0x364>)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <HAL_RCC_ClockConfig+0x368>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7fc fd8a 	bl	800306c <HAL_InitTick>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	58024400 	.word	0x58024400
 800656c:	0800fe3c 	.word	0x0800fe3c
 8006570:	24000008 	.word	0x24000008
 8006574:	24000004 	.word	0x24000004
 8006578:	2400000c 	.word	0x2400000c

0800657c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006582:	4bb3      	ldr	r3, [pc, #716]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658a:	2b18      	cmp	r3, #24
 800658c:	f200 8155 	bhi.w	800683a <HAL_RCC_GetSysClockFreq+0x2be>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065fd 	.word	0x080065fd
 800659c:	0800683b 	.word	0x0800683b
 80065a0:	0800683b 	.word	0x0800683b
 80065a4:	0800683b 	.word	0x0800683b
 80065a8:	0800683b 	.word	0x0800683b
 80065ac:	0800683b 	.word	0x0800683b
 80065b0:	0800683b 	.word	0x0800683b
 80065b4:	0800683b 	.word	0x0800683b
 80065b8:	08006623 	.word	0x08006623
 80065bc:	0800683b 	.word	0x0800683b
 80065c0:	0800683b 	.word	0x0800683b
 80065c4:	0800683b 	.word	0x0800683b
 80065c8:	0800683b 	.word	0x0800683b
 80065cc:	0800683b 	.word	0x0800683b
 80065d0:	0800683b 	.word	0x0800683b
 80065d4:	0800683b 	.word	0x0800683b
 80065d8:	08006629 	.word	0x08006629
 80065dc:	0800683b 	.word	0x0800683b
 80065e0:	0800683b 	.word	0x0800683b
 80065e4:	0800683b 	.word	0x0800683b
 80065e8:	0800683b 	.word	0x0800683b
 80065ec:	0800683b 	.word	0x0800683b
 80065f0:	0800683b 	.word	0x0800683b
 80065f4:	0800683b 	.word	0x0800683b
 80065f8:	0800662f 	.word	0x0800662f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065fc:	4b94      	ldr	r3, [pc, #592]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006608:	4b91      	ldr	r3, [pc, #580]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	08db      	lsrs	r3, r3, #3
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	4a90      	ldr	r2, [pc, #576]	; (8006854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
 8006618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800661a:	e111      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800661c:	4b8d      	ldr	r3, [pc, #564]	; (8006854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800661e:	61bb      	str	r3, [r7, #24]
    break;
 8006620:	e10e      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006622:	4b8d      	ldr	r3, [pc, #564]	; (8006858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006624:	61bb      	str	r3, [r7, #24]
    break;
 8006626:	e10b      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006628:	4b8c      	ldr	r3, [pc, #560]	; (800685c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800662a:	61bb      	str	r3, [r7, #24]
    break;
 800662c:	e108      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800662e:	4b88      	ldr	r3, [pc, #544]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006638:	4b85      	ldr	r3, [pc, #532]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006644:	4b82      	ldr	r3, [pc, #520]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800664e:	4b80      	ldr	r3, [pc, #512]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80e1 	beq.w	8006834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b02      	cmp	r3, #2
 8006676:	f000 8083 	beq.w	8006780 <HAL_RCC_GetSysClockFreq+0x204>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b02      	cmp	r3, #2
 800667e:	f200 80a1 	bhi.w	80067c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_RCC_GetSysClockFreq+0x114>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d056      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x1c0>
 800668e:	e099      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006690:	4b6f      	ldr	r3, [pc, #444]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02d      	beq.n	80066f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800669c:	4b6c      	ldr	r3, [pc, #432]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	08db      	lsrs	r3, r3, #3
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	4a6b      	ldr	r2, [pc, #428]	; (8006854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c6:	4b62      	ldr	r3, [pc, #392]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80066f6:	e087      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b51      	ldr	r3, [pc, #324]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a02 	vldr	s12, [r7, #8]
 800671e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800673a:	e065      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b40      	ldr	r3, [pc, #256]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800677e:	e043      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800686c <HAL_RCC_GetSysClockFreq+0x2f0>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c2:	e021      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006806:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	0a5b      	lsrs	r3, r3, #9
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	3301      	adds	r3, #1
 8006814:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006820:	edd7 6a07 	vldr	s13, [r7, #28]
 8006824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800682c:	ee17 3a90 	vmov	r3, s15
 8006830:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006832:	e005      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
    break;
 8006838:	e002      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800683a:	4b07      	ldr	r3, [pc, #28]	; (8006858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800683c:	61bb      	str	r3, [r7, #24]
    break;
 800683e:	bf00      	nop
  }

  return sysclockfreq;
 8006840:	69bb      	ldr	r3, [r7, #24]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3724      	adds	r7, #36	; 0x24
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	58024400 	.word	0x58024400
 8006854:	03d09000 	.word	0x03d09000
 8006858:	003d0900 	.word	0x003d0900
 800685c:	017d7840 	.word	0x017d7840
 8006860:	46000000 	.word	0x46000000
 8006864:	4c742400 	.word	0x4c742400
 8006868:	4a742400 	.word	0x4a742400
 800686c:	4bbebc20 	.word	0x4bbebc20

08006870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006876:	f7ff fe81 	bl	800657c <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490f      	ldr	r1, [pc, #60]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	fa22 f303 	lsr.w	r3, r2, r3
 8006892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800689e:	5cd3      	ldrb	r3, [r2, r3]
 80068a0:	f003 031f 	and.w	r3, r3, #31
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	4a07      	ldr	r2, [pc, #28]	; (80068c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80068ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	58024400 	.word	0x58024400
 80068c4:	0800fe3c 	.word	0x0800fe3c
 80068c8:	24000008 	.word	0x24000008
 80068cc:	24000004 	.word	0x24000004

080068d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068d4:	f7ff ffcc 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	091b      	lsrs	r3, r3, #4
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	58024400 	.word	0x58024400
 80068f8:	0800fe3c 	.word	0x0800fe3c

080068fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006900:	f7ff ffb6 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4904      	ldr	r1, [pc, #16]	; (8006924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	58024400 	.word	0x58024400
 8006924:	0800fe3c 	.word	0x0800fe3c

08006928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006930:	2300      	movs	r3, #0
 8006932:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006934:	2300      	movs	r3, #0
 8006936:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d03f      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800694c:	d02a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800694e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006952:	d824      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006958:	d018      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800695a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800695e:	d81e      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006968:	d007      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800696a:	e018      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800696c:	4bab      	ldr	r3, [pc, #684]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4aaa      	ldr	r2, [pc, #680]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006978:	e015      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3304      	adds	r3, #4
 800697e:	2102      	movs	r1, #2
 8006980:	4618      	mov	r0, r3
 8006982:	f001 feff 	bl	8008784 <RCCEx_PLL2_Config>
 8006986:	4603      	mov	r3, r0
 8006988:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800698a:	e00c      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3324      	adds	r3, #36	; 0x24
 8006990:	2102      	movs	r1, #2
 8006992:	4618      	mov	r0, r3
 8006994:	f001 ffa8 	bl	80088e8 <RCCEx_PLL3_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800699c:	e003      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
      break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069ac:	4b9b      	ldr	r3, [pc, #620]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b8:	4998      	ldr	r1, [pc, #608]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	650b      	str	r3, [r1, #80]	; 0x50
 80069be:	e001      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d03d      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d826      	bhi.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	08006a03 	.word	0x08006a03
 80069e8:	08006a15 	.word	0x08006a15
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a2d 	.word	0x08006a2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f4:	4b89      	ldr	r3, [pc, #548]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a88      	ldr	r2, [pc, #544]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a00:	e015      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3304      	adds	r3, #4
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 febb 	bl	8008784 <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a12:	e00c      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3324      	adds	r3, #36	; 0x24
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 ff64 	bl	80088e8 <RCCEx_PLL3_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a24:	e003      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d109      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a34:	4b79      	ldr	r3, [pc, #484]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a38:	f023 0207 	bic.w	r2, r3, #7
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	4976      	ldr	r1, [pc, #472]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	650b      	str	r3, [r1, #80]	; 0x50
 8006a46:	e001      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d051      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a5e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006a62:	d036      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a64:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006a68:	d830      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a6e:	d032      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006a70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a74:	d82a      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006a76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a7a:	d02e      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006a7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a80:	d824      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a86:	d018      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a8c:	d81e      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a96:	d007      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006a98:	e018      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9a:	4b60      	ldr	r3, [pc, #384]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	4a5f      	ldr	r2, [pc, #380]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aa6:	e019      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fe68 	bl	8008784 <RCCEx_PLL2_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ab8:	e010      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3324      	adds	r3, #36	; 0x24
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f001 ff11 	bl	80088e8 <RCCEx_PLL3_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aca:	e007      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ae2:	4b4e      	ldr	r3, [pc, #312]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006af0:	494a      	ldr	r1, [pc, #296]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	658b      	str	r3, [r1, #88]	; 0x58
 8006af6:	e001      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d051      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b12:	d036      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006b14:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b18:	d830      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b1e:	d032      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b24:	d82a      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006b26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b2a:	d02e      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006b2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b30:	d824      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006b32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b36:	d018      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b3c:	d81e      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006b42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b46:	d007      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b48:	e018      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4a:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	4a33      	ldr	r2, [pc, #204]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b56:	e019      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 fe10 	bl	8008784 <RCCEx_PLL2_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b68:	e010      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3324      	adds	r3, #36	; 0x24
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 feb9 	bl	80088e8 <RCCEx_PLL3_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b7a:	e007      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b80:	e004      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ba0:	491e      	ldr	r1, [pc, #120]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ba6:	e001      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d035      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbc:	2b30      	cmp	r3, #48	; 0x30
 8006bbe:	d01c      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bc0:	2b30      	cmp	r3, #48	; 0x30
 8006bc2:	d817      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d00c      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d813      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d016      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd4:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006be0:	e00e      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3304      	adds	r3, #4
 8006be6:	2102      	movs	r1, #2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 fdcb 	bl	8008784 <RCCEx_PLL2_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006bf2:	e005      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf8:	e002      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006bfa:	bf00      	nop
 8006bfc:	e000      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	4902      	ldr	r1, [pc, #8]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c18:	e004      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d047      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c38:	d030      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c3e:	d82a      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c44:	d02c      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c4a:	d824      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c50:	d018      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c56:	d81e      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d007      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c62:	e018      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4bac      	ldr	r3, [pc, #688]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4aab      	ldr	r2, [pc, #684]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c70:	e017      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fd83 	bl	8008784 <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c82:	e00e      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fe2c 	bl	80088e8 <RCCEx_PLL3_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c94:	e005      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9a:	e002      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d109      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ca8:	4b9b      	ldr	r3, [pc, #620]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb4:	4998      	ldr	r1, [pc, #608]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	650b      	str	r3, [r1, #80]	; 0x50
 8006cba:	e001      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d049      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cd4:	d02e      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cda:	d828      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ce0:	d02a      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ce6:	d822      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ce8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cec:	d026      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006cee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cf2:	d81c      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf8:	d010      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cfe:	d816      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d08:	d111      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	2101      	movs	r1, #1
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fd37 	bl	8008784 <RCCEx_PLL2_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d1a:	e012      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3324      	adds	r3, #36	; 0x24
 8006d20:	2101      	movs	r1, #1
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fde0 	bl	80088e8 <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d2c:	e009      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
      break;
 8006d32:	e006      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006d34:	bf00      	nop
 8006d36:	e004      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d48:	4b73      	ldr	r3, [pc, #460]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	4970      	ldr	r1, [pc, #448]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	650b      	str	r3, [r1, #80]	; 0x50
 8006d5a:	e001      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d04b      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d76:	d02e      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d7c:	d828      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d82:	d02a      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d822      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d8e:	d026      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006d90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d94:	d81c      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da0:	d816      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01d      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006daa:	d111      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	2101      	movs	r1, #1
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fce6 	bl	8008784 <RCCEx_PLL2_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dbc:	e012      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3324      	adds	r3, #36	; 0x24
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fd8f 	bl	80088e8 <RCCEx_PLL3_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dce:	e009      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dea:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006df8:	4947      	ldr	r1, [pc, #284]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8006dfe:	e001      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02f      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e18:	d00e      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e1e:	d814      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d10f      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e2a:	4b3b      	ldr	r3, [pc, #236]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	4a3a      	ldr	r2, [pc, #232]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e36:	e00c      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 fca0 	bl	8008784 <RCCEx_PLL2_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e58:	4b2f      	ldr	r3, [pc, #188]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e64:	492c      	ldr	r1, [pc, #176]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	650b      	str	r3, [r1, #80]	; 0x50
 8006e6a:	e001      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d032      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d81b      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ec3 	.word	0x08006ec3
 8006e90:	08006e9d 	.word	0x08006e9d
 8006e94:	08006eab 	.word	0x08006eab
 8006e98:	08006ec3 	.word	0x08006ec3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9c:	4b1e      	ldr	r3, [pc, #120]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ea8:	e00c      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	2102      	movs	r1, #2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 fc67 	bl	8008784 <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006eba:	e003      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	e000      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	f023 0203 	bic.w	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	4910      	ldr	r1, [pc, #64]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006edc:	e001      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 808a 	beq.w	8007004 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006efc:	f7fc f900 	bl	8003100 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f02:	e00d      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f04:	f7fc f8fc 	bl	8003100 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b64      	cmp	r3, #100	; 0x64
 8006f10:	d906      	bls.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	75fb      	strb	r3, [r7, #23]
        break;
 8006f16:	e009      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f20:	4bb9      	ldr	r3, [pc, #740]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0eb      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d166      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f32:	4bb6      	ldr	r3, [pc, #728]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f3c:	4053      	eors	r3, r2
 8006f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d013      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f46:	4bb1      	ldr	r3, [pc, #708]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f50:	4bae      	ldr	r3, [pc, #696]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	4aad      	ldr	r2, [pc, #692]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f5c:	4bab      	ldr	r3, [pc, #684]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f60:	4aaa      	ldr	r2, [pc, #680]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f68:	4aa8      	ldr	r2, [pc, #672]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f78:	d115      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fc f8c1 	bl	8003100 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f80:	e00b      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f7fc f8bd 	bl	8003100 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d902      	bls.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
            break;
 8006f98:	e005      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f9a:	4b9c      	ldr	r3, [pc, #624]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0ed      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d126      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fba:	d10d      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006fbc:	4b93      	ldr	r3, [pc, #588]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fca:	0919      	lsrs	r1, r3, #4
 8006fcc:	4b90      	ldr	r3, [pc, #576]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006fce:	400b      	ands	r3, r1
 8006fd0:	498e      	ldr	r1, [pc, #568]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	610b      	str	r3, [r1, #16]
 8006fd6:	e005      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006fd8:	4b8c      	ldr	r3, [pc, #560]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	4a8b      	ldr	r2, [pc, #556]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fe2:	6113      	str	r3, [r2, #16]
 8006fe4:	4b89      	ldr	r3, [pc, #548]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff2:	4986      	ldr	r1, [pc, #536]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	670b      	str	r3, [r1, #112]	; 0x70
 8006ff8:	e004      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	75bb      	strb	r3, [r7, #22]
 8006ffe:	e001      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d07e      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007014:	2b28      	cmp	r3, #40	; 0x28
 8007016:	d867      	bhi.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	080070ef 	.word	0x080070ef
 8007024:	080070e9 	.word	0x080070e9
 8007028:	080070e9 	.word	0x080070e9
 800702c:	080070e9 	.word	0x080070e9
 8007030:	080070e9 	.word	0x080070e9
 8007034:	080070e9 	.word	0x080070e9
 8007038:	080070e9 	.word	0x080070e9
 800703c:	080070e9 	.word	0x080070e9
 8007040:	080070c5 	.word	0x080070c5
 8007044:	080070e9 	.word	0x080070e9
 8007048:	080070e9 	.word	0x080070e9
 800704c:	080070e9 	.word	0x080070e9
 8007050:	080070e9 	.word	0x080070e9
 8007054:	080070e9 	.word	0x080070e9
 8007058:	080070e9 	.word	0x080070e9
 800705c:	080070e9 	.word	0x080070e9
 8007060:	080070d7 	.word	0x080070d7
 8007064:	080070e9 	.word	0x080070e9
 8007068:	080070e9 	.word	0x080070e9
 800706c:	080070e9 	.word	0x080070e9
 8007070:	080070e9 	.word	0x080070e9
 8007074:	080070e9 	.word	0x080070e9
 8007078:	080070e9 	.word	0x080070e9
 800707c:	080070e9 	.word	0x080070e9
 8007080:	080070ef 	.word	0x080070ef
 8007084:	080070e9 	.word	0x080070e9
 8007088:	080070e9 	.word	0x080070e9
 800708c:	080070e9 	.word	0x080070e9
 8007090:	080070e9 	.word	0x080070e9
 8007094:	080070e9 	.word	0x080070e9
 8007098:	080070e9 	.word	0x080070e9
 800709c:	080070e9 	.word	0x080070e9
 80070a0:	080070ef 	.word	0x080070ef
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070e9 	.word	0x080070e9
 80070ac:	080070e9 	.word	0x080070e9
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	080070ef 	.word	0x080070ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3304      	adds	r3, #4
 80070c8:	2101      	movs	r1, #1
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 fb5a 	bl	8008784 <RCCEx_PLL2_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070d4:	e00c      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3324      	adds	r3, #36	; 0x24
 80070da:	2101      	movs	r1, #1
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 fc03 	bl	80088e8 <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
      break;
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80070ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070f6:	4b45      	ldr	r3, [pc, #276]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	4942      	ldr	r1, [pc, #264]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007104:	4313      	orrs	r3, r2
 8007106:	654b      	str	r3, [r1, #84]	; 0x54
 8007108:	e001      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d037      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	2b05      	cmp	r3, #5
 8007120:	d820      	bhi.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007122:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	0800716b 	.word	0x0800716b
 800712c:	08007141 	.word	0x08007141
 8007130:	08007153 	.word	0x08007153
 8007134:	0800716b 	.word	0x0800716b
 8007138:	0800716b 	.word	0x0800716b
 800713c:	0800716b 	.word	0x0800716b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	2101      	movs	r1, #1
 8007146:	4618      	mov	r0, r3
 8007148:	f001 fb1c 	bl	8008784 <RCCEx_PLL2_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007150:	e00c      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3324      	adds	r3, #36	; 0x24
 8007156:	2101      	movs	r1, #1
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fbc5 	bl	80088e8 <RCCEx_PLL3_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007162:	e003      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]
      break;
 8007168:	e000      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800716a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007172:	4b26      	ldr	r3, [pc, #152]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	f023 0207 	bic.w	r2, r3, #7
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717e:	4923      	ldr	r1, [pc, #140]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007180:	4313      	orrs	r3, r2
 8007182:	654b      	str	r3, [r1, #84]	; 0x54
 8007184:	e001      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	d040      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719c:	2b05      	cmp	r3, #5
 800719e:	d821      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071eb 	.word	0x080071eb
 80071ac:	080071c1 	.word	0x080071c1
 80071b0:	080071d3 	.word	0x080071d3
 80071b4:	080071eb 	.word	0x080071eb
 80071b8:	080071eb 	.word	0x080071eb
 80071bc:	080071eb 	.word	0x080071eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	2101      	movs	r1, #1
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fadc 	bl	8008784 <RCCEx_PLL2_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071d0:	e00c      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3324      	adds	r3, #36	; 0x24
 80071d6:	2101      	movs	r1, #1
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fb85 	bl	80088e8 <RCCEx_PLL3_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]
      break;
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80071ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d110      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071f2:	4b06      	ldr	r3, [pc, #24]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f023 0207 	bic.w	r2, r3, #7
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	4902      	ldr	r1, [pc, #8]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007202:	4313      	orrs	r3, r2
 8007204:	658b      	str	r3, [r1, #88]	; 0x58
 8007206:	e007      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007208:	58024800 	.word	0x58024800
 800720c:	58024400 	.word	0x58024400
 8007210:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d04b      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722e:	d02e      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007234:	d828      	bhi.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d02a      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007240:	d822      	bhi.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007246:	d026      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800724c:	d81c      	bhi.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800724e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007252:	d010      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007258:	d816      	bhi.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01d      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007262:	d111      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	2100      	movs	r1, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fa8a 	bl	8008784 <RCCEx_PLL2_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007274:	e012      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3324      	adds	r3, #36	; 0x24
 800727a:	2102      	movs	r1, #2
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fb33 	bl	80088e8 <RCCEx_PLL3_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007286:	e009      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	75fb      	strb	r3, [r7, #23]
      break;
 800728c:	e006      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800728e:	bf00      	nop
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007292:	bf00      	nop
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007296:	bf00      	nop
 8007298:	e000      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800729a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072a2:	4bb2      	ldr	r3, [pc, #712]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	49ae      	ldr	r1, [pc, #696]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	654b      	str	r3, [r1, #84]	; 0x54
 80072b6:	e001      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d04b      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072d2:	d02e      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80072d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072d8:	d828      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	d02a      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80072e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e4:	d822      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80072e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ea:	d026      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80072ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072f0:	d81c      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80072f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f6:	d010      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80072f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072fc:	d816      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01d      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007306:	d111      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3304      	adds	r3, #4
 800730c:	2100      	movs	r1, #0
 800730e:	4618      	mov	r0, r3
 8007310:	f001 fa38 	bl	8008784 <RCCEx_PLL2_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007318:	e012      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3324      	adds	r3, #36	; 0x24
 800731e:	2102      	movs	r1, #2
 8007320:	4618      	mov	r0, r3
 8007322:	f001 fae1 	bl	80088e8 <RCCEx_PLL3_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800732a:	e009      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	75fb      	strb	r3, [r7, #23]
      break;
 8007330:	e006      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007332:	bf00      	nop
 8007334:	e004      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007336:	bf00      	nop
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800733e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007346:	4b89      	ldr	r3, [pc, #548]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007354:	4985      	ldr	r1, [pc, #532]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007356:	4313      	orrs	r3, r2
 8007358:	658b      	str	r3, [r1, #88]	; 0x58
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	d04b      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007372:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007376:	d02e      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007378:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800737c:	d828      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800737e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007382:	d02a      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007388:	d822      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800738a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800738e:	d026      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007390:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007394:	d81c      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800739a:	d010      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800739c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a0:	d816      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01d      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	d111      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 f9e6 	bl	8008784 <RCCEx_PLL2_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073bc:	e012      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	2102      	movs	r1, #2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fa8f 	bl	80088e8 <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073ce:	e009      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
      break;
 80073d4:	e006      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80073d6:	bf00      	nop
 80073d8:	e004      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80073e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073ea:	4b60      	ldr	r3, [pc, #384]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80073ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073f8:	495c      	ldr	r1, [pc, #368]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	658b      	str	r3, [r1, #88]	; 0x58
 80073fe:	e001      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d018      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007418:	d10a      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3324      	adds	r3, #36	; 0x24
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f001 fa61 	bl	80088e8 <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007430:	4b4e      	ldr	r3, [pc, #312]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743c:	494b      	ldr	r1, [pc, #300]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800743e:	4313      	orrs	r3, r2
 8007440:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01a      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007458:	d10a      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3324      	adds	r3, #36	; 0x24
 800745e:	2102      	movs	r1, #2
 8007460:	4618      	mov	r0, r3
 8007462:	f001 fa41 	bl	80088e8 <RCCEx_PLL3_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007470:	4b3e      	ldr	r3, [pc, #248]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	493b      	ldr	r1, [pc, #236]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007480:	4313      	orrs	r3, r2
 8007482:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d034      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800749a:	d01d      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800749c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a0:	d817      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80074a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074aa:	d009      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80074ac:	e011      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 f965 	bl	8008784 <RCCEx_PLL2_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074be:	e00c      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3324      	adds	r3, #36	; 0x24
 80074c4:	2102      	movs	r1, #2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 fa0e 	bl	80088e8 <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074d0:	e003      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
      break;
 80074d6:	e000      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80074d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074e0:	4b22      	ldr	r3, [pc, #136]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ee:	491f      	ldr	r1, [pc, #124]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	658b      	str	r3, [r1, #88]	; 0x58
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d036      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007510:	d01c      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007516:	d816      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751c:	d003      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800751e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007522:	d007      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007524:	e00f      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800752c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007532:	e00c      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3324      	adds	r3, #36	; 0x24
 8007538:	2101      	movs	r1, #1
 800753a:	4618      	mov	r0, r3
 800753c:	f001 f9d4 	bl	80088e8 <RCCEx_PLL3_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007544:	e003      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	75fb      	strb	r3, [r7, #23]
      break;
 800754a:	e000      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800754c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10d      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007562:	4902      	ldr	r1, [pc, #8]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007564:	4313      	orrs	r3, r2
 8007566:	654b      	str	r3, [r1, #84]	; 0x54
 8007568:	e004      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800756a:	bf00      	nop
 800756c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d029      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758c:	d007      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800758e:	e00f      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b61      	ldr	r3, [pc, #388]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a60      	ldr	r2, [pc, #384]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800759c:	e00b      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2102      	movs	r1, #2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 f8ed 	bl	8008784 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075ae:	e002      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
      break;
 80075b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075bc:	4b56      	ldr	r3, [pc, #344]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c8:	4953      	ldr	r1, [pc, #332]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075ce:	e001      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3324      	adds	r3, #36	; 0x24
 80075e4:	2102      	movs	r1, #2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f97e 	bl	80088e8 <RCCEx_PLL3_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d030      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760a:	d017      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800760c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007610:	d811      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007616:	d013      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761c:	d80b      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007626:	d106      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007628:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	4a3a      	ldr	r2, [pc, #232]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800762e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007634:	e007      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
      break;
 800763a:	e004      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800763c:	bf00      	nop
 800763e:	e002      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007640:	bf00      	nop
 8007642:	e000      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800764c:	4b32      	ldr	r3, [pc, #200]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007658:	492f      	ldr	r1, [pc, #188]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800765a:	4313      	orrs	r3, r2
 800765c:	654b      	str	r3, [r1, #84]	; 0x54
 800765e:	e001      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007670:	4b29      	ldr	r3, [pc, #164]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800767c:	4926      	ldr	r1, [pc, #152]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800767e:	4313      	orrs	r3, r2
 8007680:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800768e:	4b22      	ldr	r3, [pc, #136]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800769a:	491f      	ldr	r1, [pc, #124]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800769c:	4313      	orrs	r3, r2
 800769e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076ac:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4a19      	ldr	r2, [pc, #100]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076b6:	6113      	str	r3, [r2, #16]
 80076b8:	4b17      	ldr	r3, [pc, #92]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076c2:	4915      	ldr	r1, [pc, #84]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	da08      	bge.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076d0:	4b11      	ldr	r3, [pc, #68]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	490e      	ldr	r1, [pc, #56]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fc:	4906      	ldr	r1, [pc, #24]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007702:	7dbb      	ldrb	r3, [r7, #22]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	58024400 	.word	0x58024400

0800771c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b090      	sub	sp, #64	; 0x40
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772a:	f040 8089 	bne.w	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800772e:	4b95      	ldr	r3, [pc, #596]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	633b      	str	r3, [r7, #48]	; 0x30
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	2b04      	cmp	r3, #4
 800773c:	d87d      	bhi.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007759 	.word	0x08007759
 8007748:	0800777d 	.word	0x0800777d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	08007835 	.word	0x08007835
 8007754:	080077c5 	.word	0x080077c5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007758:	4b8a      	ldr	r3, [pc, #552]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007764:	d107      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800776a:	4618      	mov	r0, r3
 800776c:	f000 feb8 	bl	80084e0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007774:	e3ed      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777a:	e3ea      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800777c:	4b81      	ldr	r3, [pc, #516]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007788:	d107      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800778a:	f107 0318 	add.w	r3, r7, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fbfe 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007798:	e3db      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800779e:	e3d8      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077a0:	4b78      	ldr	r3, [pc, #480]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ac:	d107      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ae:	f107 030c 	add.w	r3, r7, #12
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fd40 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077bc:	e3c9      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c2:	e3c6      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077c4:	4b6f      	ldr	r3, [pc, #444]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077ce:	4b6d      	ldr	r3, [pc, #436]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80077da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d109      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077e0:	4b68      	ldr	r3, [pc, #416]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	08db      	lsrs	r3, r3, #3
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	4a67      	ldr	r2, [pc, #412]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f2:	e01e      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077f4:	4b63      	ldr	r3, [pc, #396]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007800:	d106      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007808:	d102      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800780a:	4b60      	ldr	r3, [pc, #384]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800780e:	e010      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007810:	4b5c      	ldr	r3, [pc, #368]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800781c:	d106      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007824:	d102      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007826:	4b5a      	ldr	r3, [pc, #360]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800782a:	e002      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007830:	e38f      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007832:	e38e      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007834:	4b57      	ldr	r3, [pc, #348]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007838:	e38b      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800783e:	e388      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	f040 80a7 	bne.w	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800784a:	4b4e      	ldr	r3, [pc, #312]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007852:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800785a:	d054      	beq.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007862:	f200 808b 	bhi.w	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800786c:	f000 8083 	beq.w	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007876:	f200 8081 	bhi.w	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007880:	d02f      	beq.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007888:	d878      	bhi.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007896:	d012      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007898:	e070      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800789a:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078a6:	d107      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fe17 	bl	80084e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078b6:	e34c      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078bc:	e349      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078be:	4b31      	ldr	r3, [pc, #196]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ca:	d107      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078cc:	f107 0318 	add.w	r3, r7, #24
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fb5d 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078da:	e33a      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e0:	e337      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078e2:	4b28      	ldr	r3, [pc, #160]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ee:	d107      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fc9f 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078fe:	e328      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007904:	e325      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007906:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800790e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007910:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b04      	cmp	r3, #4
 800791a:	d10c      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	08db      	lsrs	r3, r3, #3
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	4a16      	ldr	r2, [pc, #88]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800792e:	fa22 f303 	lsr.w	r3, r2, r3
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007934:	e01e      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007942:	d106      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800794a:	d102      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007950:	e010      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007952:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800795e:	d106      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007966:	d102      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007972:	e2ee      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007974:	e2ed      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007976:	4b07      	ldr	r3, [pc, #28]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e2ea      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007980:	e2e7      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007982:	bf00      	nop
 8007984:	58024400 	.word	0x58024400
 8007988:	03d09000 	.word	0x03d09000
 800798c:	003d0900 	.word	0x003d0900
 8007990:	017d7840 	.word	0x017d7840
 8007994:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799e:	f040 809c 	bne.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80079a2:	4b9e      	ldr	r3, [pc, #632]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079b2:	d054      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079ba:	f200 808b 	bhi.w	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079c4:	f000 8083 	beq.w	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079ce:	f200 8081 	bhi.w	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079d8:	d02f      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e0:	d878      	bhi.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079ee:	d012      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80079f0:	e070      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079f2:	4b8a      	ldr	r3, [pc, #552]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079fe:	d107      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 fd6b 	bl	80084e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a0e:	e2a0      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a14:	e29d      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a16:	4b81      	ldr	r3, [pc, #516]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a22:	d107      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a24:	f107 0318 	add.w	r3, r7, #24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fab1 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007a32:	e28e      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a38:	e28b      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a3a:	4b78      	ldr	r3, [pc, #480]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a46:	d107      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a48:	f107 030c 	add.w	r3, r7, #12
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fbf3 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a56:	e27c      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a5c:	e279      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a5e:	4b6f      	ldr	r3, [pc, #444]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a68:	4b6c      	ldr	r3, [pc, #432]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d10c      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a7a:	4b68      	ldr	r3, [pc, #416]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	4a66      	ldr	r2, [pc, #408]	; (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a86:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a8c:	e01e      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a8e:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9a:	d106      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa2:	d102      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007aa4:	4b5f      	ldr	r3, [pc, #380]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa8:	e010      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aaa:	4b5c      	ldr	r3, [pc, #368]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab6:	d106      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007abe:	d102      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ac0:	4b59      	ldr	r3, [pc, #356]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007aca:	e242      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007acc:	e241      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ace:	4b57      	ldr	r3, [pc, #348]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ad2:	e23e      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ad8:	e23b      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae0:	f040 80a6 	bne.w	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ae4:	4b4d      	ldr	r3, [pc, #308]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007aec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007af4:	d054      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007afc:	f200 808b 	bhi.w	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b06:	f000 8083 	beq.w	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b10:	f200 8081 	bhi.w	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1a:	d02f      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b22:	d878      	bhi.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b30:	d012      	beq.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007b32:	e070      	b.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b34:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b40:	d107      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fcca 	bl	80084e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b50:	e1ff      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b56:	e1fc      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b58:	4b30      	ldr	r3, [pc, #192]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b64:	d107      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b66:	f107 0318 	add.w	r3, r7, #24
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fa10 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b74:	e1ed      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b7a:	e1ea      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b7c:	4b27      	ldr	r3, [pc, #156]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b88:	d107      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b8a:	f107 030c 	add.w	r3, r7, #12
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fb52 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b98:	e1db      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9e:	e1d8      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ba0:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007baa:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d10c      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d109      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bce:	e01e      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bd0:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	d106      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007be4:	d102      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007be6:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bea:	e010      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf8:	d106      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c00:	d102      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c06:	e002      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c0c:	e1a1      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c0e:	e1a0      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c14:	e19d      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1a:	e19a      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c1c:	58024400 	.word	0x58024400
 8007c20:	03d09000 	.word	0x03d09000
 8007c24:	003d0900 	.word	0x003d0900
 8007c28:	017d7840 	.word	0x017d7840
 8007c2c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c36:	d173      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007c38:	4b9a      	ldr	r3, [pc, #616]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c48:	d02f      	beq.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c50:	d863      	bhi.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5e:	d012      	beq.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007c60:	e05b      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c62:	4b90      	ldr	r3, [pc, #576]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c6e:	d107      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c70:	f107 0318 	add.w	r3, r7, #24
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f98b 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c7e:	e168      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c84:	e165      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c86:	4b87      	ldr	r3, [pc, #540]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 facd 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ca2:	e156      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca8:	e153      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007caa:	4b7e      	ldr	r3, [pc, #504]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cb2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cb4:	4b7b      	ldr	r3, [pc, #492]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d10c      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d109      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cc6:	4b77      	ldr	r3, [pc, #476]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	4a75      	ldr	r2, [pc, #468]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd8:	e01e      	b.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cda:	4b72      	ldr	r3, [pc, #456]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce6:	d106      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cee:	d102      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007cf0:	4b6e      	ldr	r3, [pc, #440]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf4:	e010      	b.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cf6:	4b6b      	ldr	r3, [pc, #428]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d02:	d106      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d0a:	d102      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d0c:	4b68      	ldr	r3, [pc, #416]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d10:	e002      	b.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d16:	e11c      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007d18:	e11b      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1e:	e118      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d133      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007d28:	4b5e      	ldr	r3, [pc, #376]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d3e:	d012      	beq.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007d40:	e023      	b.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d42:	4b58      	ldr	r3, [pc, #352]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d4e:	d107      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fbc3 	bl	80084e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d5e:	e0f8      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d64:	e0f5      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d66:	4b4f      	ldr	r3, [pc, #316]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d72:	d107      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d74:	f107 0318 	add.w	r3, r7, #24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 f909 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d82:	e0e6      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d88:	e0e3      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8e:	e0e0      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d96:	f040 808d 	bne.w	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007d9a:	4b42      	ldr	r3, [pc, #264]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007daa:	d06b      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db2:	d874      	bhi.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d056      	beq.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc2:	d86c      	bhi.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dca:	d03b      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dd2:	d864      	bhi.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dda:	d021      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de2:	d85c      	bhi.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df0:	d004      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007df2:	e054      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007df4:	f000 f8b6 	bl	8007f64 <HAL_RCCEx_GetD3PCLK1Freq>
 8007df8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007dfa:	e0aa      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e08:	d107      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e0a:	f107 0318 	add.w	r3, r7, #24
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 f8be 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e18:	e09b      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1e:	e098      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e20:	4b20      	ldr	r3, [pc, #128]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e2e:	f107 030c 	add.w	r3, r7, #12
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fa00 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e3c:	e089      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e42:	e086      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e44:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d109      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e50:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	08db      	lsrs	r3, r3, #3
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e62:	e076      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e68:	e073      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e76:	d102      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e7c:	e069      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e82:	e066      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e90:	d102      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e96:	e05c      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e9c:	e059      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea2:	e056      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	03d09000 	.word	0x03d09000
 8007eac:	003d0900 	.word	0x003d0900
 8007eb0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eba:	d148      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007ebc:	4b27      	ldr	r3, [pc, #156]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ec4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ecc:	d02a      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed4:	d838      	bhi.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee2:	d00d      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007ee4:	e030      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ef8:	e02b      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007efe:	e028      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f00:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f0c:	d107      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fae4 	bl	80084e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f1c:	e019      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f22:	e016      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f24:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f30:	d107      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f32:	f107 0318 	add.w	r3, r7, #24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f82a 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f40:	e007      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f46:	e004      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f4c:	e001      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3740      	adds	r7, #64	; 0x40
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	017d7840 	.word	0x017d7840

08007f64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f68:	f7fe fc82 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	091b      	lsrs	r3, r3, #4
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f7a:	5ccb      	ldrb	r3, [r1, r3]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	0800fe3c 	.word	0x0800fe3c

08007f90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b089      	sub	sp, #36	; 0x24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f98:	4ba1      	ldr	r3, [pc, #644]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fa2:	4b9f      	ldr	r3, [pc, #636]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	0b1b      	lsrs	r3, r3, #12
 8007fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fae:	4b9c      	ldr	r3, [pc, #624]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	091b      	lsrs	r3, r3, #4
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007fba:	4b99      	ldr	r3, [pc, #612]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8111 	beq.w	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	f000 8083 	beq.w	80080ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	f200 80a1 	bhi.w	8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d056      	beq.n	80080a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007ffa:	e099      	b.n	8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ffc:	4b88      	ldr	r3, [pc, #544]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d02d      	beq.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008008:	4b85      	ldr	r3, [pc, #532]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	08db      	lsrs	r3, r3, #3
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	4a84      	ldr	r2, [pc, #528]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008032:	4b7b      	ldr	r3, [pc, #492]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008042:	ed97 6a03 	vldr	s12, [r7, #12]
 8008046:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008062:	e087      	b.n	8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008076:	4b6a      	ldr	r3, [pc, #424]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	ed97 6a03 	vldr	s12, [r7, #12]
 800808a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800808e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080a6:	e065      	b.n	8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b59      	ldr	r3, [pc, #356]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ea:	e043      	b.n	8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fe:	4b48      	ldr	r3, [pc, #288]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008112:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800812e:	e021      	b.n	8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800813e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008142:	4b37      	ldr	r3, [pc, #220]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008152:	ed97 6a03 	vldr	s12, [r7, #12]
 8008156:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800815a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008172:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008174:	4b2a      	ldr	r3, [pc, #168]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	0a5b      	lsrs	r3, r3, #9
 800817a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800818a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800818e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800819a:	ee17 2a90 	vmov	r2, s15
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081a2:	4b1f      	ldr	r3, [pc, #124]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	0c1b      	lsrs	r3, r3, #16
 80081a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081c8:	ee17 2a90 	vmov	r2, s15
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081d0:	4b13      	ldr	r3, [pc, #76]	; (8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	0e1b      	lsrs	r3, r3, #24
 80081d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f6:	ee17 2a90 	vmov	r2, s15
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081fe:	e008      	b.n	8008212 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	609a      	str	r2, [r3, #8]
}
 8008212:	bf00      	nop
 8008214:	3724      	adds	r7, #36	; 0x24
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400
 8008224:	03d09000 	.word	0x03d09000
 8008228:	46000000 	.word	0x46000000
 800822c:	4c742400 	.word	0x4c742400
 8008230:	4a742400 	.word	0x4a742400
 8008234:	4bbebc20 	.word	0x4bbebc20

08008238 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008240:	4ba1      	ldr	r3, [pc, #644]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800824a:	4b9f      	ldr	r3, [pc, #636]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	0d1b      	lsrs	r3, r3, #20
 8008250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008254:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008256:	4b9c      	ldr	r3, [pc, #624]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008262:	4b99      	ldr	r3, [pc, #612]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	08db      	lsrs	r3, r3, #3
 8008268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	fb02 f303 	mul.w	r3, r2, r3
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8111 	beq.w	80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b02      	cmp	r3, #2
 800828a:	f000 8083 	beq.w	8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b02      	cmp	r3, #2
 8008292:	f200 80a1 	bhi.w	80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d056      	beq.n	8008350 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082a2:	e099      	b.n	80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a4:	4b88      	ldr	r3, [pc, #544]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d02d      	beq.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082b0:	4b85      	ldr	r3, [pc, #532]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	08db      	lsrs	r3, r3, #3
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	4a84      	ldr	r2, [pc, #528]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
 80082c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082da:	4b7b      	ldr	r3, [pc, #492]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008306:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800830a:	e087      	b.n	800841c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800831a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831e:	4b6a      	ldr	r3, [pc, #424]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008332:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800834e:	e065      	b.n	800841c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800835e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008362:	4b59      	ldr	r3, [pc, #356]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008372:	ed97 6a03 	vldr	s12, [r7, #12]
 8008376:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800837a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008392:	e043      	b.n	800841c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a6:	4b48      	ldr	r3, [pc, #288]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083d6:	e021      	b.n	800841c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ea:	4b37      	ldr	r3, [pc, #220]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80083fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800840e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800841a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800841c:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	0a5b      	lsrs	r3, r3, #9
 8008422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008436:	edd7 6a07 	vldr	s13, [r7, #28]
 800843a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008442:	ee17 2a90 	vmov	r2, s15
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800844a:	4b1f      	ldr	r3, [pc, #124]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	0c1b      	lsrs	r3, r3, #16
 8008450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008464:	edd7 6a07 	vldr	s13, [r7, #28]
 8008468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800846c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008470:	ee17 2a90 	vmov	r2, s15
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008478:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	0e1b      	lsrs	r3, r3, #24
 800847e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800848e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008492:	edd7 6a07 	vldr	s13, [r7, #28]
 8008496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800849e:	ee17 2a90 	vmov	r2, s15
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084a6:	e008      	b.n	80084ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	609a      	str	r2, [r3, #8]
}
 80084ba:	bf00      	nop
 80084bc:	3724      	adds	r7, #36	; 0x24
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	58024400 	.word	0x58024400
 80084cc:	03d09000 	.word	0x03d09000
 80084d0:	46000000 	.word	0x46000000
 80084d4:	4c742400 	.word	0x4c742400
 80084d8:	4a742400 	.word	0x4a742400
 80084dc:	4bbebc20 	.word	0x4bbebc20

080084e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b089      	sub	sp, #36	; 0x24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084e8:	4ba0      	ldr	r3, [pc, #640]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80084f2:	4b9e      	ldr	r3, [pc, #632]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	091b      	lsrs	r3, r3, #4
 80084f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084fe:	4b9b      	ldr	r3, [pc, #620]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008508:	4b98      	ldr	r3, [pc, #608]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008520:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8111 	beq.w	800874e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2b02      	cmp	r3, #2
 8008530:	f000 8083 	beq.w	800863a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b02      	cmp	r3, #2
 8008538:	f200 80a1 	bhi.w	800867e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d056      	beq.n	80085f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008548:	e099      	b.n	800867e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800854a:	4b88      	ldr	r3, [pc, #544]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d02d      	beq.n	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008556:	4b85      	ldr	r3, [pc, #532]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	4a83      	ldr	r2, [pc, #524]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008562:	fa22 f303 	lsr.w	r3, r2, r3
 8008566:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008580:	4b7a      	ldr	r3, [pc, #488]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008590:	ed97 6a03 	vldr	s12, [r7, #12]
 8008594:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008774 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085b0:	e087      	b.n	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c4:	4b69      	ldr	r3, [pc, #420]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008774 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f4:	e065      	b.n	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008600:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800877c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008608:	4b58      	ldr	r3, [pc, #352]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008610:	ee07 3a90 	vmov	s15, r3
 8008614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008618:	ed97 6a03 	vldr	s12, [r7, #12]
 800861c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008774 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008638:	e043      	b.n	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008644:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864c:	4b47      	ldr	r3, [pc, #284]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	ee07 3a90 	vmov	s15, r3
 8008658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008660:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008774 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800867c:	e021      	b.n	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	ee07 3a90 	vmov	s15, r3
 8008684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008688:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800868c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008690:	4b36      	ldr	r3, [pc, #216]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008774 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80086c2:	4b2a      	ldr	r3, [pc, #168]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	0a5b      	lsrs	r3, r3, #9
 80086c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e8:	ee17 2a90 	vmov	r2, s15
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80086f0:	4b1e      	ldr	r3, [pc, #120]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870a:	edd7 6a07 	vldr	s13, [r7, #28]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008716:	ee17 2a90 	vmov	r2, s15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	0e1b      	lsrs	r3, r3, #24
 8008724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008738:	edd7 6a07 	vldr	s13, [r7, #28]
 800873c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008744:	ee17 2a90 	vmov	r2, s15
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800874c:	e008      	b.n	8008760 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	609a      	str	r2, [r3, #8]
}
 8008760:	bf00      	nop
 8008762:	3724      	adds	r7, #36	; 0x24
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	58024400 	.word	0x58024400
 8008770:	03d09000 	.word	0x03d09000
 8008774:	46000000 	.word	0x46000000
 8008778:	4c742400 	.word	0x4c742400
 800877c:	4a742400 	.word	0x4a742400
 8008780:	4bbebc20 	.word	0x4bbebc20

08008784 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008792:	4b53      	ldr	r3, [pc, #332]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	2b03      	cmp	r3, #3
 800879c:	d101      	bne.n	80087a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e099      	b.n	80088d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087a2:	4b4f      	ldr	r3, [pc, #316]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a4e      	ldr	r2, [pc, #312]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80087a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ae:	f7fa fca7 	bl	8003100 <HAL_GetTick>
 80087b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087b4:	e008      	b.n	80087c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087b6:	f7fa fca3 	bl	8003100 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e086      	b.n	80088d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087c8:	4b45      	ldr	r3, [pc, #276]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f0      	bne.n	80087b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087d4:	4b42      	ldr	r3, [pc, #264]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	031b      	lsls	r3, r3, #12
 80087e2:	493f      	ldr	r1, [pc, #252]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	628b      	str	r3, [r1, #40]	; 0x28
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	025b      	lsls	r3, r3, #9
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	3b01      	subs	r3, #1
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	061b      	lsls	r3, r3, #24
 8008814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008818:	4931      	ldr	r1, [pc, #196]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800881a:	4313      	orrs	r3, r2
 800881c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800881e:	4b30      	ldr	r3, [pc, #192]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	492d      	ldr	r1, [pc, #180]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800882c:	4313      	orrs	r3, r2
 800882e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008830:	4b2b      	ldr	r3, [pc, #172]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	f023 0220 	bic.w	r2, r3, #32
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	4928      	ldr	r1, [pc, #160]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008842:	4b27      	ldr	r3, [pc, #156]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	4a26      	ldr	r2, [pc, #152]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008848:	f023 0310 	bic.w	r3, r3, #16
 800884c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <RCCEx_PLL2_Config+0x160>)
 8008854:	4013      	ands	r3, r2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	69d2      	ldr	r2, [r2, #28]
 800885a:	00d2      	lsls	r2, r2, #3
 800885c:	4920      	ldr	r1, [pc, #128]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800885e:	4313      	orrs	r3, r2
 8008860:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008862:	4b1f      	ldr	r3, [pc, #124]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	4a1e      	ldr	r2, [pc, #120]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008868:	f043 0310 	orr.w	r3, r3, #16
 800886c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008874:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	4a19      	ldr	r2, [pc, #100]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800887a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800887e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008880:	e00f      	b.n	80088a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d106      	bne.n	8008896 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	4a14      	ldr	r2, [pc, #80]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800888e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008894:	e005      	b.n	80088a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008896:	4b12      	ldr	r3, [pc, #72]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	4a11      	ldr	r2, [pc, #68]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 800889c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0e      	ldr	r2, [pc, #56]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ae:	f7fa fc27 	bl	8003100 <HAL_GetTick>
 80088b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088b4:	e008      	b.n	80088c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088b6:	f7fa fc23 	bl	8003100 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e006      	b.n	80088d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <RCCEx_PLL2_Config+0x15c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	58024400 	.word	0x58024400
 80088e4:	ffff0007 	.word	0xffff0007

080088e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088f6:	4b53      	ldr	r3, [pc, #332]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d101      	bne.n	8008906 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e099      	b.n	8008a3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008906:	4b4f      	ldr	r3, [pc, #316]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a4e      	ldr	r2, [pc, #312]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 800890c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008912:	f7fa fbf5 	bl	8003100 <HAL_GetTick>
 8008916:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008918:	e008      	b.n	800892c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800891a:	f7fa fbf1 	bl	8003100 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e086      	b.n	8008a3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800892c:	4b45      	ldr	r3, [pc, #276]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1f0      	bne.n	800891a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	051b      	lsls	r3, r3, #20
 8008946:	493f      	ldr	r1, [pc, #252]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008948:	4313      	orrs	r3, r2
 800894a:	628b      	str	r3, [r1, #40]	; 0x28
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	3b01      	subs	r3, #1
 8008952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	3b01      	subs	r3, #1
 800895c:	025b      	lsls	r3, r3, #9
 800895e:	b29b      	uxth	r3, r3
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	3b01      	subs	r3, #1
 8008968:	041b      	lsls	r3, r3, #16
 800896a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	3b01      	subs	r3, #1
 8008976:	061b      	lsls	r3, r3, #24
 8008978:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800897c:	4931      	ldr	r1, [pc, #196]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 800897e:	4313      	orrs	r3, r2
 8008980:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008982:	4b30      	ldr	r3, [pc, #192]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	492d      	ldr	r1, [pc, #180]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008990:	4313      	orrs	r3, r2
 8008992:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008994:	4b2b      	ldr	r3, [pc, #172]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	4928      	ldr	r1, [pc, #160]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089a6:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089b2:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b6:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <RCCEx_PLL3_Config+0x160>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	69d2      	ldr	r2, [r2, #28]
 80089be:	00d2      	lsls	r2, r2, #3
 80089c0:	4920      	ldr	r1, [pc, #128]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089c6:	4b1f      	ldr	r3, [pc, #124]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	4a1e      	ldr	r2, [pc, #120]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089d8:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	4a19      	ldr	r2, [pc, #100]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089e4:	e00f      	b.n	8008a06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d106      	bne.n	80089fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089ec:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	4a14      	ldr	r2, [pc, #80]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089f8:	e005      	b.n	8008a06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089fa:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	4a11      	ldr	r2, [pc, #68]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a0e      	ldr	r2, [pc, #56]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a12:	f7fa fb75 	bl	8003100 <HAL_GetTick>
 8008a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a18:	e008      	b.n	8008a2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a1a:	f7fa fb71 	bl	8003100 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d901      	bls.n	8008a2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e006      	b.n	8008a3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <RCCEx_PLL3_Config+0x15c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0f0      	beq.n	8008a1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	58024400 	.word	0x58024400
 8008a48:	ffff0007 	.word	0xffff0007

08008a4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d067      	beq.n	8008b2e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7f9 fe7a 	bl	800276c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	22ca      	movs	r2, #202	; 0xca
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2253      	movs	r2, #83	; 0x53
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f99f 	bl	8008dd4 <RTC_EnterInitMode>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d13b      	bne.n	8008b18 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6899      	ldr	r1, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <HAL_RTC_Init+0xec>)
 8008aac:	400b      	ands	r3, r1
 8008aae:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6899      	ldr	r1, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	0419      	lsls	r1, r3, #16
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f9ab 	bl	8008e3c <RTC_ExitInitMode>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d113      	bne.n	8008b18 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0203 	bic.w	r2, r2, #3
 8008afe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69da      	ldr	r2, [r3, #28]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	22ff      	movs	r2, #255	; 0xff
 8008b1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	ff8fffbf 	.word	0xff8fffbf

08008b3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_RTC_SetTime+0x1a>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e089      	b.n	8008c6a <HAL_RTC_SetTime+0x12e>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2202      	movs	r2, #2
 8008b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	22ca      	movs	r2, #202	; 0xca
 8008b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2253      	movs	r2, #83	; 0x53
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f92c 	bl	8008dd4 <RTC_EnterInitMode>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008b80:	7cfb      	ldrb	r3, [r7, #19]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d161      	bne.n	8008c4a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d126      	bne.n	8008bda <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f987 	bl	8008eb8 <RTC_ByteToBcd2>
 8008baa:	4603      	mov	r3, r0
 8008bac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f980 	bl	8008eb8 <RTC_ByteToBcd2>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bbc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	789b      	ldrb	r3, [r3, #2]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f978 	bl	8008eb8 <RTC_ByteToBcd2>
 8008bc8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008bca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	78db      	ldrb	r3, [r3, #3]
 8008bd2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e018      	b.n	8008c0c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d102      	bne.n	8008bee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2200      	movs	r2, #0
 8008bec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bfa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c00:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	6979      	ldr	r1, [r7, #20]
 8008c12:	4b18      	ldr	r3, [pc, #96]	; (8008c74 <HAL_RTC_SetTime+0x138>)
 8008c14:	400b      	ands	r3, r1
 8008c16:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6899      	ldr	r1, [r3, #8]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f8fb 	bl	8008e3c <RTC_ExitInitMode>
 8008c46:	4603      	mov	r3, r0
 8008c48:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	22ff      	movs	r2, #255	; 0xff
 8008c50:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008c52:	7cfb      	ldrb	r3, [r7, #19]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008c68:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd90      	pop	{r4, r7, pc}
 8008c72:	bf00      	nop
 8008c74:	007f7f7f 	.word	0x007f7f7f

08008c78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <HAL_RTC_SetDate+0x1a>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e073      	b.n	8008d7a <HAL_RTC_SetDate+0x102>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10e      	bne.n	8008cc6 <HAL_RTC_SetDate+0x4e>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d008      	beq.n	8008cc6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	f023 0310 	bic.w	r3, r3, #16
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	330a      	adds	r3, #10
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11c      	bne.n	8008d06 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 f8f1 	bl	8008eb8 <RTC_ByteToBcd2>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f8ea 	bl	8008eb8 <RTC_ByteToBcd2>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ce8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	789b      	ldrb	r3, [r3, #2]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f8e2 	bl	8008eb8 <RTC_ByteToBcd2>
 8008cf4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008cf6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e00e      	b.n	8008d24 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	78db      	ldrb	r3, [r3, #3]
 8008d0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d12:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d20:	4313      	orrs	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	22ca      	movs	r2, #202	; 0xca
 8008d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2253      	movs	r2, #83	; 0x53
 8008d32:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f84d 	bl	8008dd4 <RTC_EnterInitMode>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008d3e:	7cfb      	ldrb	r3, [r7, #19]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	6979      	ldr	r1, [r7, #20]
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <HAL_RTC_SetDate+0x10c>)
 8008d4c:	400b      	ands	r3, r1
 8008d4e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f873 	bl	8008e3c <RTC_ExitInitMode>
 8008d56:	4603      	mov	r3, r0
 8008d58:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	22ff      	movs	r2, #255	; 0xff
 8008d60:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008d62:	7cfb      	ldrb	r3, [r7, #19]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008d78:	7cfb      	ldrb	r3, [r7, #19]


}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd90      	pop	{r4, r7, pc}
 8008d82:	bf00      	nop
 8008d84:	00ffff3f 	.word	0x00ffff3f

08008d88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d9e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008da0:	f7fa f9ae 	bl	8003100 <HAL_GetTick>
 8008da4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008da6:	e009      	b.n	8008dbc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da8:	f7fa f9aa 	bl	8003100 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db6:	d901      	bls.n	8008dbc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e007      	b.n	8008dcc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0ee      	beq.n	8008da8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d120      	bne.n	8008e30 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f04f 32ff 	mov.w	r2, #4294967295
 8008df6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008df8:	f7fa f982 	bl	8003100 <HAL_GetTick>
 8008dfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008dfe:	e00d      	b.n	8008e1c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e00:	f7fa f97e 	bl	8003100 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e0e:	d905      	bls.n	8008e1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2203      	movs	r2, #3
 8008e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <RTC_EnterInitMode+0x5c>
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d1e7      	bne.n	8008e00 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	4a19      	ldr	r2, [pc, #100]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e52:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e54:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10c      	bne.n	8008e7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff ff91 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	73fb      	strb	r3, [r7, #15]
 8008e78:	e017      	b.n	8008eaa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e7a:	4b0e      	ldr	r3, [pc, #56]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	4a0d      	ldr	r2, [pc, #52]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e80:	f023 0320 	bic.w	r3, r3, #32
 8008e84:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ff7e 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2203      	movs	r2, #3
 8008e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	4a04      	ldr	r2, [pc, #16]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008ea4:	f043 0320 	orr.w	r3, r3, #32
 8008ea8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	58004000 	.word	0x58004000

08008eb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008eca:	e005      	b.n	8008ed8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	3b0a      	subs	r3, #10
 8008ed6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d8f6      	bhi.n	8008ecc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	7afb      	ldrb	r3, [r7, #11]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	b2db      	uxtb	r3, r3
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e049      	b.n	8008f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7f9 fca4 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	f000 fc44 	bl	80097c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d001      	beq.n	8008fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e056      	b.n	800906e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a2b      	ldr	r2, [pc, #172]	; (800907c <HAL_TIM_Base_Start+0xd4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d02c      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fda:	d027      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a27      	ldr	r2, [pc, #156]	; (8009080 <HAL_TIM_Base_Start+0xd8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d022      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a26      	ldr	r2, [pc, #152]	; (8009084 <HAL_TIM_Base_Start+0xdc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d01d      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a24      	ldr	r2, [pc, #144]	; (8009088 <HAL_TIM_Base_Start+0xe0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d018      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a23      	ldr	r2, [pc, #140]	; (800908c <HAL_TIM_Base_Start+0xe4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d013      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a21      	ldr	r2, [pc, #132]	; (8009090 <HAL_TIM_Base_Start+0xe8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d00e      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a20      	ldr	r2, [pc, #128]	; (8009094 <HAL_TIM_Base_Start+0xec>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d009      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1e      	ldr	r2, [pc, #120]	; (8009098 <HAL_TIM_Base_Start+0xf0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <HAL_TIM_Base_Start+0x84>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1d      	ldr	r2, [pc, #116]	; (800909c <HAL_TIM_Base_Start+0xf4>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d115      	bne.n	8009058 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <HAL_TIM_Base_Start+0xf8>)
 8009034:	4013      	ands	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b06      	cmp	r3, #6
 800903c:	d015      	beq.n	800906a <HAL_TIM_Base_Start+0xc2>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d011      	beq.n	800906a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0201 	orr.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009056:	e008      	b.n	800906a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e000      	b.n	800906c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	40010000 	.word	0x40010000
 8009080:	40000400 	.word	0x40000400
 8009084:	40000800 	.word	0x40000800
 8009088:	40000c00 	.word	0x40000c00
 800908c:	40010400 	.word	0x40010400
 8009090:	40001800 	.word	0x40001800
 8009094:	40014000 	.word	0x40014000
 8009098:	4000e000 	.word	0x4000e000
 800909c:	4000e400 	.word	0x4000e400
 80090a0:	00010007 	.word	0x00010007

080090a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10f      	bne.n	80090dc <HAL_TIM_Base_Stop+0x38>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a1a      	ldr	r2, [r3, #32]
 80090c2:	f240 4344 	movw	r3, #1092	; 0x444
 80090c6:	4013      	ands	r3, r2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d107      	bne.n	80090dc <HAL_TIM_Base_Stop+0x38>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d001      	beq.n	800910c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e05e      	b.n	80091ca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a2b      	ldr	r2, [pc, #172]	; (80091d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d02c      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009136:	d027      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a27      	ldr	r2, [pc, #156]	; (80091dc <HAL_TIM_Base_Start_IT+0xe8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d022      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <HAL_TIM_Base_Start_IT+0xec>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d01d      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a24      	ldr	r2, [pc, #144]	; (80091e4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d018      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a23      	ldr	r2, [pc, #140]	; (80091e8 <HAL_TIM_Base_Start_IT+0xf4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d013      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a21      	ldr	r2, [pc, #132]	; (80091ec <HAL_TIM_Base_Start_IT+0xf8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00e      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d009      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <HAL_TIM_Base_Start_IT+0x100>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d004      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x94>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <HAL_TIM_Base_Start_IT+0x104>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d115      	bne.n	80091b4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <HAL_TIM_Base_Start_IT+0x108>)
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b06      	cmp	r3, #6
 8009198:	d015      	beq.n	80091c6 <HAL_TIM_Base_Start_IT+0xd2>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a0:	d011      	beq.n	80091c6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f042 0201 	orr.w	r2, r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b2:	e008      	b.n	80091c6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0201 	orr.w	r2, r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e000      	b.n	80091c8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40010400 	.word	0x40010400
 80091ec:	40001800 	.word	0x40001800
 80091f0:	40014000 	.word	0x40014000
 80091f4:	4000e000 	.word	0x4000e000
 80091f8:	4000e400 	.word	0x4000e400
 80091fc:	00010007 	.word	0x00010007

08009200 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0201 	bic.w	r2, r2, #1
 8009216:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009222:	4013      	ands	r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10f      	bne.n	8009248 <HAL_TIM_Base_Stop_IT+0x48>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	f240 4344 	movw	r3, #1092	; 0x444
 8009232:	4013      	ands	r3, r2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <HAL_TIM_Base_Stop_IT+0x48>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e049      	b.n	8009304 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7f9 faa1 	bl	80027cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2202      	movs	r2, #2
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f000 fa91 	bl	80097c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b02      	cmp	r3, #2
 8009320:	d122      	bne.n	8009368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b02      	cmp	r3, #2
 800932e:	d11b      	bne.n	8009368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f06f 0202 	mvn.w	r2, #2
 8009338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa1a 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 8009354:	e005      	b.n	8009362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa0c 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fa1d 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b04      	cmp	r3, #4
 8009374:	d122      	bne.n	80093bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b04      	cmp	r3, #4
 8009382:	d11b      	bne.n	80093bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0204 	mvn.w	r2, #4
 800938c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f9f0 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 80093a8:	e005      	b.n	80093b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f9e2 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f9f3 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b08      	cmp	r3, #8
 80093c8:	d122      	bne.n	8009410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d11b      	bne.n	8009410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f06f 0208 	mvn.w	r2, #8
 80093e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2204      	movs	r2, #4
 80093e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9c6 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 80093fc:	e005      	b.n	800940a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9b8 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f9c9 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0310 	and.w	r3, r3, #16
 800941a:	2b10      	cmp	r3, #16
 800941c:	d122      	bne.n	8009464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b10      	cmp	r3, #16
 800942a:	d11b      	bne.n	8009464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0210 	mvn.w	r2, #16
 8009434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2208      	movs	r2, #8
 800943a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f99c 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 8009450:	e005      	b.n	800945e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f98e 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f99f 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b01      	cmp	r3, #1
 8009470:	d10e      	bne.n	8009490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b01      	cmp	r3, #1
 800947e:	d107      	bne.n	8009490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f06f 0201 	mvn.w	r2, #1
 8009488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7f7 fb9a 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949a:	2b80      	cmp	r3, #128	; 0x80
 800949c:	d10e      	bne.n	80094bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a8:	2b80      	cmp	r3, #128	; 0x80
 80094aa:	d107      	bne.n	80094bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fe46 	bl	800a148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ca:	d10e      	bne.n	80094ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d6:	2b80      	cmp	r3, #128	; 0x80
 80094d8:	d107      	bne.n	80094ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fe39 	bl	800a15c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f4:	2b40      	cmp	r3, #64	; 0x40
 80094f6:	d10e      	bne.n	8009516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d107      	bne.n	8009516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800950e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f94d 	bl	80097b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b20      	cmp	r3, #32
 8009522:	d10e      	bne.n	8009542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b20      	cmp	r3, #32
 8009530:	d107      	bne.n	8009542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f06f 0220 	mvn.w	r2, #32
 800953a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fdf9 	bl	800a134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009566:	2302      	movs	r3, #2
 8009568:	e0ff      	b.n	800976a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b14      	cmp	r3, #20
 8009576:	f200 80f0 	bhi.w	800975a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800957a:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	080095d5 	.word	0x080095d5
 8009584:	0800975b 	.word	0x0800975b
 8009588:	0800975b 	.word	0x0800975b
 800958c:	0800975b 	.word	0x0800975b
 8009590:	08009615 	.word	0x08009615
 8009594:	0800975b 	.word	0x0800975b
 8009598:	0800975b 	.word	0x0800975b
 800959c:	0800975b 	.word	0x0800975b
 80095a0:	08009657 	.word	0x08009657
 80095a4:	0800975b 	.word	0x0800975b
 80095a8:	0800975b 	.word	0x0800975b
 80095ac:	0800975b 	.word	0x0800975b
 80095b0:	08009697 	.word	0x08009697
 80095b4:	0800975b 	.word	0x0800975b
 80095b8:	0800975b 	.word	0x0800975b
 80095bc:	0800975b 	.word	0x0800975b
 80095c0:	080096d9 	.word	0x080096d9
 80095c4:	0800975b 	.word	0x0800975b
 80095c8:	0800975b 	.word	0x0800975b
 80095cc:	0800975b 	.word	0x0800975b
 80095d0:	08009719 	.word	0x08009719
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f998 	bl	8009910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699a      	ldr	r2, [r3, #24]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0208 	orr.w	r2, r2, #8
 80095ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0204 	bic.w	r2, r2, #4
 80095fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6999      	ldr	r1, [r3, #24]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	619a      	str	r2, [r3, #24]
      break;
 8009612:	e0a5      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fa08 	bl	8009a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699a      	ldr	r2, [r3, #24]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800962e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800963e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6999      	ldr	r1, [r3, #24]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	021a      	lsls	r2, r3, #8
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	619a      	str	r2, [r3, #24]
      break;
 8009654:	e084      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68b9      	ldr	r1, [r7, #8]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fa71 	bl	8009b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69da      	ldr	r2, [r3, #28]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0208 	orr.w	r2, r2, #8
 8009670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69da      	ldr	r2, [r3, #28]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0204 	bic.w	r2, r2, #4
 8009680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69d9      	ldr	r1, [r3, #28]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	691a      	ldr	r2, [r3, #16]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	61da      	str	r2, [r3, #28]
      break;
 8009694:	e064      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fad9 	bl	8009c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69da      	ldr	r2, [r3, #28]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69d9      	ldr	r1, [r3, #28]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	021a      	lsls	r2, r3, #8
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	61da      	str	r2, [r3, #28]
      break;
 80096d6:	e043      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fb22 	bl	8009d28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0208 	orr.w	r2, r2, #8
 80096f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0204 	bic.w	r2, r2, #4
 8009702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691a      	ldr	r2, [r3, #16]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009716:	e023      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fb66 	bl	8009df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	021a      	lsls	r2, r3, #8
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009758:	e002      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	75fb      	strb	r3, [r7, #23]
      break;
 800975e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009768:	7dfb      	ldrb	r3, [r7, #23]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop

08009774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a44      	ldr	r2, [pc, #272]	; (80098e8 <TIM_Base_SetConfig+0x124>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d013      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e2:	d00f      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a41      	ldr	r2, [pc, #260]	; (80098ec <TIM_Base_SetConfig+0x128>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00b      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a40      	ldr	r2, [pc, #256]	; (80098f0 <TIM_Base_SetConfig+0x12c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d007      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a3f      	ldr	r2, [pc, #252]	; (80098f4 <TIM_Base_SetConfig+0x130>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d003      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a3e      	ldr	r2, [pc, #248]	; (80098f8 <TIM_Base_SetConfig+0x134>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d108      	bne.n	8009816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a33      	ldr	r2, [pc, #204]	; (80098e8 <TIM_Base_SetConfig+0x124>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d027      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009824:	d023      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a30      	ldr	r2, [pc, #192]	; (80098ec <TIM_Base_SetConfig+0x128>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d01f      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a2f      	ldr	r2, [pc, #188]	; (80098f0 <TIM_Base_SetConfig+0x12c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d01b      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a2e      	ldr	r2, [pc, #184]	; (80098f4 <TIM_Base_SetConfig+0x130>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d017      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a2d      	ldr	r2, [pc, #180]	; (80098f8 <TIM_Base_SetConfig+0x134>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d013      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a2c      	ldr	r2, [pc, #176]	; (80098fc <TIM_Base_SetConfig+0x138>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00f      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a2b      	ldr	r2, [pc, #172]	; (8009900 <TIM_Base_SetConfig+0x13c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d00b      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a2a      	ldr	r2, [pc, #168]	; (8009904 <TIM_Base_SetConfig+0x140>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d007      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a29      	ldr	r2, [pc, #164]	; (8009908 <TIM_Base_SetConfig+0x144>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d003      	beq.n	800986e <TIM_Base_SetConfig+0xaa>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a28      	ldr	r2, [pc, #160]	; (800990c <TIM_Base_SetConfig+0x148>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d108      	bne.n	8009880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a10      	ldr	r2, [pc, #64]	; (80098e8 <TIM_Base_SetConfig+0x124>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00f      	beq.n	80098cc <TIM_Base_SetConfig+0x108>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a12      	ldr	r2, [pc, #72]	; (80098f8 <TIM_Base_SetConfig+0x134>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00b      	beq.n	80098cc <TIM_Base_SetConfig+0x108>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a11      	ldr	r2, [pc, #68]	; (80098fc <TIM_Base_SetConfig+0x138>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d007      	beq.n	80098cc <TIM_Base_SetConfig+0x108>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a10      	ldr	r2, [pc, #64]	; (8009900 <TIM_Base_SetConfig+0x13c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d003      	beq.n	80098cc <TIM_Base_SetConfig+0x108>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a0f      	ldr	r2, [pc, #60]	; (8009904 <TIM_Base_SetConfig+0x140>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d103      	bne.n	80098d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	691a      	ldr	r2, [r3, #16]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	615a      	str	r2, [r3, #20]
}
 80098da:	bf00      	nop
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40000400 	.word	0x40000400
 80098f0:	40000800 	.word	0x40000800
 80098f4:	40000c00 	.word	0x40000c00
 80098f8:	40010400 	.word	0x40010400
 80098fc:	40014000 	.word	0x40014000
 8009900:	40014400 	.word	0x40014400
 8009904:	40014800 	.word	0x40014800
 8009908:	4000e000 	.word	0x4000e000
 800990c:	4000e400 	.word	0x4000e400

08009910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	f023 0201 	bic.w	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4b37      	ldr	r3, [pc, #220]	; (8009a18 <TIM_OC1_SetConfig+0x108>)
 800993c:	4013      	ands	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0303 	bic.w	r3, r3, #3
 8009946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f023 0302 	bic.w	r3, r3, #2
 8009958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2d      	ldr	r2, [pc, #180]	; (8009a1c <TIM_OC1_SetConfig+0x10c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00f      	beq.n	800998c <TIM_OC1_SetConfig+0x7c>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a2c      	ldr	r2, [pc, #176]	; (8009a20 <TIM_OC1_SetConfig+0x110>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_OC1_SetConfig+0x7c>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a2b      	ldr	r2, [pc, #172]	; (8009a24 <TIM_OC1_SetConfig+0x114>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_OC1_SetConfig+0x7c>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <TIM_OC1_SetConfig+0x118>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_OC1_SetConfig+0x7c>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <TIM_OC1_SetConfig+0x11c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d10c      	bne.n	80099a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0308 	bic.w	r3, r3, #8
 8009992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 0304 	bic.w	r3, r3, #4
 80099a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <TIM_OC1_SetConfig+0x10c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d00f      	beq.n	80099ce <TIM_OC1_SetConfig+0xbe>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a1b      	ldr	r2, [pc, #108]	; (8009a20 <TIM_OC1_SetConfig+0x110>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00b      	beq.n	80099ce <TIM_OC1_SetConfig+0xbe>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a1a      	ldr	r2, [pc, #104]	; (8009a24 <TIM_OC1_SetConfig+0x114>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d007      	beq.n	80099ce <TIM_OC1_SetConfig+0xbe>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a19      	ldr	r2, [pc, #100]	; (8009a28 <TIM_OC1_SetConfig+0x118>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d003      	beq.n	80099ce <TIM_OC1_SetConfig+0xbe>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a18      	ldr	r2, [pc, #96]	; (8009a2c <TIM_OC1_SetConfig+0x11c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d111      	bne.n	80099f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	621a      	str	r2, [r3, #32]
}
 8009a0c:	bf00      	nop
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	fffeff8f 	.word	0xfffeff8f
 8009a1c:	40010000 	.word	0x40010000
 8009a20:	40010400 	.word	0x40010400
 8009a24:	40014000 	.word	0x40014000
 8009a28:	40014400 	.word	0x40014400
 8009a2c:	40014800 	.word	0x40014800

08009a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	f023 0210 	bic.w	r2, r3, #16
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4b34      	ldr	r3, [pc, #208]	; (8009b2c <TIM_OC2_SetConfig+0xfc>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f023 0320 	bic.w	r3, r3, #32
 8009a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a29      	ldr	r2, [pc, #164]	; (8009b30 <TIM_OC2_SetConfig+0x100>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d003      	beq.n	8009a98 <TIM_OC2_SetConfig+0x68>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a28      	ldr	r2, [pc, #160]	; (8009b34 <TIM_OC2_SetConfig+0x104>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d10d      	bne.n	8009ab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1e      	ldr	r2, [pc, #120]	; (8009b30 <TIM_OC2_SetConfig+0x100>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00f      	beq.n	8009adc <TIM_OC2_SetConfig+0xac>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <TIM_OC2_SetConfig+0x104>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00b      	beq.n	8009adc <TIM_OC2_SetConfig+0xac>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a1c      	ldr	r2, [pc, #112]	; (8009b38 <TIM_OC2_SetConfig+0x108>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_OC2_SetConfig+0xac>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a1b      	ldr	r2, [pc, #108]	; (8009b3c <TIM_OC2_SetConfig+0x10c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_OC2_SetConfig+0xac>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a1a      	ldr	r2, [pc, #104]	; (8009b40 <TIM_OC2_SetConfig+0x110>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d113      	bne.n	8009b04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	621a      	str	r2, [r3, #32]
}
 8009b1e:	bf00      	nop
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	feff8fff 	.word	0xfeff8fff
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40010400 	.word	0x40010400
 8009b38:	40014000 	.word	0x40014000
 8009b3c:	40014400 	.word	0x40014400
 8009b40:	40014800 	.word	0x40014800

08009b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4b33      	ldr	r3, [pc, #204]	; (8009c3c <TIM_OC3_SetConfig+0xf8>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0303 	bic.w	r3, r3, #3
 8009b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	697a      	ldr	r2, [r7, #20]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a28      	ldr	r2, [pc, #160]	; (8009c40 <TIM_OC3_SetConfig+0xfc>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d003      	beq.n	8009baa <TIM_OC3_SetConfig+0x66>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a27      	ldr	r2, [pc, #156]	; (8009c44 <TIM_OC3_SetConfig+0x100>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d10d      	bne.n	8009bc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	021b      	lsls	r3, r3, #8
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a1d      	ldr	r2, [pc, #116]	; (8009c40 <TIM_OC3_SetConfig+0xfc>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d00f      	beq.n	8009bee <TIM_OC3_SetConfig+0xaa>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <TIM_OC3_SetConfig+0x100>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00b      	beq.n	8009bee <TIM_OC3_SetConfig+0xaa>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a1b      	ldr	r2, [pc, #108]	; (8009c48 <TIM_OC3_SetConfig+0x104>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d007      	beq.n	8009bee <TIM_OC3_SetConfig+0xaa>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a1a      	ldr	r2, [pc, #104]	; (8009c4c <TIM_OC3_SetConfig+0x108>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d003      	beq.n	8009bee <TIM_OC3_SetConfig+0xaa>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a19      	ldr	r2, [pc, #100]	; (8009c50 <TIM_OC3_SetConfig+0x10c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d113      	bne.n	8009c16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	621a      	str	r2, [r3, #32]
}
 8009c30:	bf00      	nop
 8009c32:	371c      	adds	r7, #28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	fffeff8f 	.word	0xfffeff8f
 8009c40:	40010000 	.word	0x40010000
 8009c44:	40010400 	.word	0x40010400
 8009c48:	40014000 	.word	0x40014000
 8009c4c:	40014400 	.word	0x40014400
 8009c50:	40014800 	.word	0x40014800

08009c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <TIM_OC4_SetConfig+0xbc>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	031b      	lsls	r3, r3, #12
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a19      	ldr	r2, [pc, #100]	; (8009d14 <TIM_OC4_SetConfig+0xc0>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00f      	beq.n	8009cd4 <TIM_OC4_SetConfig+0x80>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a18      	ldr	r2, [pc, #96]	; (8009d18 <TIM_OC4_SetConfig+0xc4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d00b      	beq.n	8009cd4 <TIM_OC4_SetConfig+0x80>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <TIM_OC4_SetConfig+0xc8>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d007      	beq.n	8009cd4 <TIM_OC4_SetConfig+0x80>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <TIM_OC4_SetConfig+0xcc>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d003      	beq.n	8009cd4 <TIM_OC4_SetConfig+0x80>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a15      	ldr	r2, [pc, #84]	; (8009d24 <TIM_OC4_SetConfig+0xd0>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d109      	bne.n	8009ce8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	019b      	lsls	r3, r3, #6
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	feff8fff 	.word	0xfeff8fff
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40010400 	.word	0x40010400
 8009d1c:	40014000 	.word	0x40014000
 8009d20:	40014400 	.word	0x40014400
 8009d24:	40014800 	.word	0x40014800

08009d28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4b21      	ldr	r3, [pc, #132]	; (8009dd8 <TIM_OC5_SetConfig+0xb0>)
 8009d54:	4013      	ands	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	041b      	lsls	r3, r3, #16
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <TIM_OC5_SetConfig+0xb4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00f      	beq.n	8009d9e <TIM_OC5_SetConfig+0x76>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a17      	ldr	r2, [pc, #92]	; (8009de0 <TIM_OC5_SetConfig+0xb8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00b      	beq.n	8009d9e <TIM_OC5_SetConfig+0x76>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a16      	ldr	r2, [pc, #88]	; (8009de4 <TIM_OC5_SetConfig+0xbc>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d007      	beq.n	8009d9e <TIM_OC5_SetConfig+0x76>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <TIM_OC5_SetConfig+0xc0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d003      	beq.n	8009d9e <TIM_OC5_SetConfig+0x76>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a14      	ldr	r2, [pc, #80]	; (8009dec <TIM_OC5_SetConfig+0xc4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d109      	bne.n	8009db2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	021b      	lsls	r3, r3, #8
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	621a      	str	r2, [r3, #32]
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	fffeff8f 	.word	0xfffeff8f
 8009ddc:	40010000 	.word	0x40010000
 8009de0:	40010400 	.word	0x40010400
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40014400 	.word	0x40014400
 8009dec:	40014800 	.word	0x40014800

08009df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <TIM_OC6_SetConfig+0xb4>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	051b      	lsls	r3, r3, #20
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a19      	ldr	r2, [pc, #100]	; (8009ea8 <TIM_OC6_SetConfig+0xb8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00f      	beq.n	8009e68 <TIM_OC6_SetConfig+0x78>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a18      	ldr	r2, [pc, #96]	; (8009eac <TIM_OC6_SetConfig+0xbc>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00b      	beq.n	8009e68 <TIM_OC6_SetConfig+0x78>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a17      	ldr	r2, [pc, #92]	; (8009eb0 <TIM_OC6_SetConfig+0xc0>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d007      	beq.n	8009e68 <TIM_OC6_SetConfig+0x78>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <TIM_OC6_SetConfig+0xc4>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_OC6_SetConfig+0x78>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <TIM_OC6_SetConfig+0xc8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d109      	bne.n	8009e7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	029b      	lsls	r3, r3, #10
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	621a      	str	r2, [r3, #32]
}
 8009e96:	bf00      	nop
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	feff8fff 	.word	0xfeff8fff
 8009ea8:	40010000 	.word	0x40010000
 8009eac:	40010400 	.word	0x40010400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800

08009ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d101      	bne.n	8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	e077      	b.n	8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a35      	ldr	r2, [pc, #212]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d004      	beq.n	8009f08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a34      	ldr	r2, [pc, #208]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d108      	bne.n	8009f1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a25      	ldr	r2, [pc, #148]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d02c      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f46:	d027      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a22      	ldr	r2, [pc, #136]	; (8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d022      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a21      	ldr	r2, [pc, #132]	; (8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d01d      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a1f      	ldr	r2, [pc, #124]	; (8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d018      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a1a      	ldr	r2, [pc, #104]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d013      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1b      	ldr	r2, [pc, #108]	; (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00e      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a1a      	ldr	r2, [pc, #104]	; (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d009      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a18      	ldr	r2, [pc, #96]	; (8009fec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d004      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d10c      	bne.n	8009fb2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	40010000 	.word	0x40010000
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40000400 	.word	0x40000400
 8009fdc:	40000800 	.word	0x40000800
 8009fe0:	40000c00 	.word	0x40000c00
 8009fe4:	40001800 	.word	0x40001800
 8009fe8:	40014000 	.word	0x40014000
 8009fec:	4000e000 	.word	0x4000e000
 8009ff0:	4000e400 	.word	0x4000e400

08009ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e087      	b.n	800a120 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	041b      	lsls	r3, r3, #16
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a27      	ldr	r2, [pc, #156]	; (800a12c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d004      	beq.n	800a09e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a25      	ldr	r2, [pc, #148]	; (800a130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d106      	bne.n	800a0ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d004      	beq.n	800a0c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a1d      	ldr	r2, [pc, #116]	; (800a130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d126      	bne.n	800a10e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	051b      	lsls	r3, r3, #20
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a0e      	ldr	r2, [pc, #56]	; (800a12c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d004      	beq.n	800a100 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a0d      	ldr	r2, [pc, #52]	; (800a130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d106      	bne.n	800a10e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	40010000 	.word	0x40010000
 800a130:	40010400 	.word	0x40010400

0800a134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e042      	b.n	800a208 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7f8 fcb5 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2224      	movs	r2, #36	; 0x24
 800a19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 0201 	bic.w	r2, r2, #1
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f8c2 	bl	800a33c <UART_SetConfig>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d101      	bne.n	800a1c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e022      	b.n	800a208 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 ff14 	bl	800aff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0201 	orr.w	r2, r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 ff9b 	bl	800b13c <UART_CheckIdleState>
 800a206:	4603      	mov	r3, r0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08a      	sub	sp, #40	; 0x28
 800a214:	af02      	add	r7, sp, #8
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	4613      	mov	r3, r2
 800a21e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a226:	2b20      	cmp	r3, #32
 800a228:	f040 8083 	bne.w	800a332 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <HAL_UART_Transmit+0x28>
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e07b      	b.n	800a334 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_UART_Transmit+0x3a>
 800a246:	2302      	movs	r3, #2
 800a248:	e074      	b.n	800a334 <HAL_UART_Transmit+0x124>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2221      	movs	r2, #33	; 0x21
 800a25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a262:	f7f8 ff4d 	bl	8003100 <HAL_GetTick>
 800a266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	88fa      	ldrh	r2, [r7, #6]
 800a26c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a280:	d108      	bne.n	800a294 <HAL_UART_Transmit+0x84>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e003      	b.n	800a29c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a2a4:	e02c      	b.n	800a300 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2180      	movs	r1, #128	; 0x80
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 ff8e 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e039      	b.n	800a334 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	3302      	adds	r3, #2
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e007      	b.n	800a2ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a306:	b29b      	uxth	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1cc      	bne.n	800a2a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2200      	movs	r2, #0
 800a314:	2140      	movs	r1, #64	; 0x40
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 ff5b 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e006      	b.n	800a334 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	e000      	b.n	800a334 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a332:	2302      	movs	r3, #2
  }
}
 800a334:	4618      	mov	r0, r3
 800a336:	3720      	adds	r7, #32
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a33c:	b5b0      	push	{r4, r5, r7, lr}
 800a33e:	b08e      	sub	sp, #56	; 0x38
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689a      	ldr	r2, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	4313      	orrs	r3, r2
 800a360:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	4bbf      	ldr	r3, [pc, #764]	; (800a668 <UART_SetConfig+0x32c>)
 800a36a:	4013      	ands	r3, r2
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a372:	430b      	orrs	r3, r1
 800a374:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4ab5      	ldr	r2, [pc, #724]	; (800a66c <UART_SetConfig+0x330>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d004      	beq.n	800a3a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	4bb0      	ldr	r3, [pc, #704]	; (800a670 <UART_SetConfig+0x334>)
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6812      	ldr	r2, [r2, #0]
 800a3b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3b6:	430b      	orrs	r3, r1
 800a3b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	f023 010f 	bic.w	r1, r3, #15
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4aa7      	ldr	r2, [pc, #668]	; (800a674 <UART_SetConfig+0x338>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d176      	bne.n	800a4c8 <UART_SetConfig+0x18c>
 800a3da:	4ba7      	ldr	r3, [pc, #668]	; (800a678 <UART_SetConfig+0x33c>)
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e2:	2b28      	cmp	r3, #40	; 0x28
 800a3e4:	d86c      	bhi.n	800a4c0 <UART_SetConfig+0x184>
 800a3e6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <UART_SetConfig+0xb0>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a491 	.word	0x0800a491
 800a3f0:	0800a4c1 	.word	0x0800a4c1
 800a3f4:	0800a4c1 	.word	0x0800a4c1
 800a3f8:	0800a4c1 	.word	0x0800a4c1
 800a3fc:	0800a4c1 	.word	0x0800a4c1
 800a400:	0800a4c1 	.word	0x0800a4c1
 800a404:	0800a4c1 	.word	0x0800a4c1
 800a408:	0800a4c1 	.word	0x0800a4c1
 800a40c:	0800a499 	.word	0x0800a499
 800a410:	0800a4c1 	.word	0x0800a4c1
 800a414:	0800a4c1 	.word	0x0800a4c1
 800a418:	0800a4c1 	.word	0x0800a4c1
 800a41c:	0800a4c1 	.word	0x0800a4c1
 800a420:	0800a4c1 	.word	0x0800a4c1
 800a424:	0800a4c1 	.word	0x0800a4c1
 800a428:	0800a4c1 	.word	0x0800a4c1
 800a42c:	0800a4a1 	.word	0x0800a4a1
 800a430:	0800a4c1 	.word	0x0800a4c1
 800a434:	0800a4c1 	.word	0x0800a4c1
 800a438:	0800a4c1 	.word	0x0800a4c1
 800a43c:	0800a4c1 	.word	0x0800a4c1
 800a440:	0800a4c1 	.word	0x0800a4c1
 800a444:	0800a4c1 	.word	0x0800a4c1
 800a448:	0800a4c1 	.word	0x0800a4c1
 800a44c:	0800a4a9 	.word	0x0800a4a9
 800a450:	0800a4c1 	.word	0x0800a4c1
 800a454:	0800a4c1 	.word	0x0800a4c1
 800a458:	0800a4c1 	.word	0x0800a4c1
 800a45c:	0800a4c1 	.word	0x0800a4c1
 800a460:	0800a4c1 	.word	0x0800a4c1
 800a464:	0800a4c1 	.word	0x0800a4c1
 800a468:	0800a4c1 	.word	0x0800a4c1
 800a46c:	0800a4b1 	.word	0x0800a4b1
 800a470:	0800a4c1 	.word	0x0800a4c1
 800a474:	0800a4c1 	.word	0x0800a4c1
 800a478:	0800a4c1 	.word	0x0800a4c1
 800a47c:	0800a4c1 	.word	0x0800a4c1
 800a480:	0800a4c1 	.word	0x0800a4c1
 800a484:	0800a4c1 	.word	0x0800a4c1
 800a488:	0800a4c1 	.word	0x0800a4c1
 800a48c:	0800a4b9 	.word	0x0800a4b9
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e326      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e322      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	e31e      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e31a      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e316      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a4b8:	2340      	movs	r3, #64	; 0x40
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e312      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c6:	e30e      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a6b      	ldr	r2, [pc, #428]	; (800a67c <UART_SetConfig+0x340>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d130      	bne.n	800a534 <UART_SetConfig+0x1f8>
 800a4d2:	4b69      	ldr	r3, [pc, #420]	; (800a678 <UART_SetConfig+0x33c>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	d826      	bhi.n	800a52c <UART_SetConfig+0x1f0>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <UART_SetConfig+0x1a8>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a505 	.word	0x0800a505
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a51d 	.word	0x0800a51d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e2f0      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50a:	e2ec      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a512:	e2e8      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e2e4      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a51c:	2320      	movs	r3, #32
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	e2e0      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a524:	2340      	movs	r3, #64	; 0x40
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e2dc      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e2d8      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a51      	ldr	r2, [pc, #324]	; (800a680 <UART_SetConfig+0x344>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d130      	bne.n	800a5a0 <UART_SetConfig+0x264>
 800a53e:	4b4e      	ldr	r3, [pc, #312]	; (800a678 <UART_SetConfig+0x33c>)
 800a540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b05      	cmp	r3, #5
 800a548:	d826      	bhi.n	800a598 <UART_SetConfig+0x25c>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <UART_SetConfig+0x214>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a571 	.word	0x0800a571
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a589 	.word	0x0800a589
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2300      	movs	r3, #0
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e2ba      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e2b6      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57e:	e2b2      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	e2ae      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e2aa      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a590:	2340      	movs	r3, #64	; 0x40
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e2a6      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a598:	2380      	movs	r3, #128	; 0x80
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e2a2      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a37      	ldr	r2, [pc, #220]	; (800a684 <UART_SetConfig+0x348>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d130      	bne.n	800a60c <UART_SetConfig+0x2d0>
 800a5aa:	4b33      	ldr	r3, [pc, #204]	; (800a678 <UART_SetConfig+0x33c>)
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d826      	bhi.n	800a604 <UART_SetConfig+0x2c8>
 800a5b6:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <UART_SetConfig+0x280>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5d5 	.word	0x0800a5d5
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a5ed 	.word	0x0800a5ed
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5fd 	.word	0x0800a5fd
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5da:	e284      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e2:	e280      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ea:	e27c      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f2:	e278      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e274      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a5fc:	2340      	movs	r3, #64	; 0x40
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e270      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e26c      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a1d      	ldr	r2, [pc, #116]	; (800a688 <UART_SetConfig+0x34c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d142      	bne.n	800a69c <UART_SetConfig+0x360>
 800a616:	4b18      	ldr	r3, [pc, #96]	; (800a678 <UART_SetConfig+0x33c>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d838      	bhi.n	800a694 <UART_SetConfig+0x358>
 800a622:	a201      	add	r2, pc, #4	; (adr r2, 800a628 <UART_SetConfig+0x2ec>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	0800a651 	.word	0x0800a651
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a68d 	.word	0x0800a68d
 800a640:	2300      	movs	r3, #0
 800a642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a646:	e24e      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a648:	2304      	movs	r3, #4
 800a64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64e:	e24a      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a650:	2308      	movs	r3, #8
 800a652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a656:	e246      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a658:	2310      	movs	r3, #16
 800a65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65e:	e242      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a660:	2320      	movs	r3, #32
 800a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a666:	e23e      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a668:	cfff69f3 	.word	0xcfff69f3
 800a66c:	58000c00 	.word	0x58000c00
 800a670:	11fff4ff 	.word	0x11fff4ff
 800a674:	40011000 	.word	0x40011000
 800a678:	58024400 	.word	0x58024400
 800a67c:	40004400 	.word	0x40004400
 800a680:	40004800 	.word	0x40004800
 800a684:	40004c00 	.word	0x40004c00
 800a688:	40005000 	.word	0x40005000
 800a68c:	2340      	movs	r3, #64	; 0x40
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e228      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a694:	2380      	movs	r3, #128	; 0x80
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e224      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4ab1      	ldr	r2, [pc, #708]	; (800a968 <UART_SetConfig+0x62c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d176      	bne.n	800a794 <UART_SetConfig+0x458>
 800a6a6:	4bb1      	ldr	r3, [pc, #708]	; (800a96c <UART_SetConfig+0x630>)
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ae:	2b28      	cmp	r3, #40	; 0x28
 800a6b0:	d86c      	bhi.n	800a78c <UART_SetConfig+0x450>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <UART_SetConfig+0x37c>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a75d 	.word	0x0800a75d
 800a6bc:	0800a78d 	.word	0x0800a78d
 800a6c0:	0800a78d 	.word	0x0800a78d
 800a6c4:	0800a78d 	.word	0x0800a78d
 800a6c8:	0800a78d 	.word	0x0800a78d
 800a6cc:	0800a78d 	.word	0x0800a78d
 800a6d0:	0800a78d 	.word	0x0800a78d
 800a6d4:	0800a78d 	.word	0x0800a78d
 800a6d8:	0800a765 	.word	0x0800a765
 800a6dc:	0800a78d 	.word	0x0800a78d
 800a6e0:	0800a78d 	.word	0x0800a78d
 800a6e4:	0800a78d 	.word	0x0800a78d
 800a6e8:	0800a78d 	.word	0x0800a78d
 800a6ec:	0800a78d 	.word	0x0800a78d
 800a6f0:	0800a78d 	.word	0x0800a78d
 800a6f4:	0800a78d 	.word	0x0800a78d
 800a6f8:	0800a76d 	.word	0x0800a76d
 800a6fc:	0800a78d 	.word	0x0800a78d
 800a700:	0800a78d 	.word	0x0800a78d
 800a704:	0800a78d 	.word	0x0800a78d
 800a708:	0800a78d 	.word	0x0800a78d
 800a70c:	0800a78d 	.word	0x0800a78d
 800a710:	0800a78d 	.word	0x0800a78d
 800a714:	0800a78d 	.word	0x0800a78d
 800a718:	0800a775 	.word	0x0800a775
 800a71c:	0800a78d 	.word	0x0800a78d
 800a720:	0800a78d 	.word	0x0800a78d
 800a724:	0800a78d 	.word	0x0800a78d
 800a728:	0800a78d 	.word	0x0800a78d
 800a72c:	0800a78d 	.word	0x0800a78d
 800a730:	0800a78d 	.word	0x0800a78d
 800a734:	0800a78d 	.word	0x0800a78d
 800a738:	0800a77d 	.word	0x0800a77d
 800a73c:	0800a78d 	.word	0x0800a78d
 800a740:	0800a78d 	.word	0x0800a78d
 800a744:	0800a78d 	.word	0x0800a78d
 800a748:	0800a78d 	.word	0x0800a78d
 800a74c:	0800a78d 	.word	0x0800a78d
 800a750:	0800a78d 	.word	0x0800a78d
 800a754:	0800a78d 	.word	0x0800a78d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2301      	movs	r3, #1
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e1c0      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76a:	e1bc      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a772:	e1b8      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77a:	e1b4      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a782:	e1b0      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a784:	2340      	movs	r3, #64	; 0x40
 800a786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78a:	e1ac      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a78c:	2380      	movs	r3, #128	; 0x80
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	e1a8      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a75      	ldr	r2, [pc, #468]	; (800a970 <UART_SetConfig+0x634>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d130      	bne.n	800a800 <UART_SetConfig+0x4c4>
 800a79e:	4b73      	ldr	r3, [pc, #460]	; (800a96c <UART_SetConfig+0x630>)
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d826      	bhi.n	800a7f8 <UART_SetConfig+0x4bc>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <UART_SetConfig+0x474>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7c9 	.word	0x0800a7c9
 800a7b4:	0800a7d1 	.word	0x0800a7d1
 800a7b8:	0800a7d9 	.word	0x0800a7d9
 800a7bc:	0800a7e1 	.word	0x0800a7e1
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ce:	e18a      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d6:	e186      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a7d8:	2308      	movs	r3, #8
 800a7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7de:	e182      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e6:	e17e      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ee:	e17a      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a7f0:	2340      	movs	r3, #64	; 0x40
 800a7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f6:	e176      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a7f8:	2380      	movs	r3, #128	; 0x80
 800a7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7fe:	e172      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a5b      	ldr	r2, [pc, #364]	; (800a974 <UART_SetConfig+0x638>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d130      	bne.n	800a86c <UART_SetConfig+0x530>
 800a80a:	4b58      	ldr	r3, [pc, #352]	; (800a96c <UART_SetConfig+0x630>)
 800a80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b05      	cmp	r3, #5
 800a814:	d826      	bhi.n	800a864 <UART_SetConfig+0x528>
 800a816:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <UART_SetConfig+0x4e0>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a835 	.word	0x0800a835
 800a820:	0800a83d 	.word	0x0800a83d
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a84d 	.word	0x0800a84d
 800a82c:	0800a855 	.word	0x0800a855
 800a830:	0800a85d 	.word	0x0800a85d
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e154      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e150      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84a:	e14c      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a852:	e148      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a854:	2320      	movs	r3, #32
 800a856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85a:	e144      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a85c:	2340      	movs	r3, #64	; 0x40
 800a85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a862:	e140      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a864:	2380      	movs	r3, #128	; 0x80
 800a866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86a:	e13c      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a41      	ldr	r2, [pc, #260]	; (800a978 <UART_SetConfig+0x63c>)
 800a872:	4293      	cmp	r3, r2
 800a874:	f040 8082 	bne.w	800a97c <UART_SetConfig+0x640>
 800a878:	4b3c      	ldr	r3, [pc, #240]	; (800a96c <UART_SetConfig+0x630>)
 800a87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a880:	2b28      	cmp	r3, #40	; 0x28
 800a882:	d86d      	bhi.n	800a960 <UART_SetConfig+0x624>
 800a884:	a201      	add	r2, pc, #4	; (adr r2, 800a88c <UART_SetConfig+0x550>)
 800a886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88a:	bf00      	nop
 800a88c:	0800a931 	.word	0x0800a931
 800a890:	0800a961 	.word	0x0800a961
 800a894:	0800a961 	.word	0x0800a961
 800a898:	0800a961 	.word	0x0800a961
 800a89c:	0800a961 	.word	0x0800a961
 800a8a0:	0800a961 	.word	0x0800a961
 800a8a4:	0800a961 	.word	0x0800a961
 800a8a8:	0800a961 	.word	0x0800a961
 800a8ac:	0800a939 	.word	0x0800a939
 800a8b0:	0800a961 	.word	0x0800a961
 800a8b4:	0800a961 	.word	0x0800a961
 800a8b8:	0800a961 	.word	0x0800a961
 800a8bc:	0800a961 	.word	0x0800a961
 800a8c0:	0800a961 	.word	0x0800a961
 800a8c4:	0800a961 	.word	0x0800a961
 800a8c8:	0800a961 	.word	0x0800a961
 800a8cc:	0800a941 	.word	0x0800a941
 800a8d0:	0800a961 	.word	0x0800a961
 800a8d4:	0800a961 	.word	0x0800a961
 800a8d8:	0800a961 	.word	0x0800a961
 800a8dc:	0800a961 	.word	0x0800a961
 800a8e0:	0800a961 	.word	0x0800a961
 800a8e4:	0800a961 	.word	0x0800a961
 800a8e8:	0800a961 	.word	0x0800a961
 800a8ec:	0800a949 	.word	0x0800a949
 800a8f0:	0800a961 	.word	0x0800a961
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a961 	.word	0x0800a961
 800a900:	0800a961 	.word	0x0800a961
 800a904:	0800a961 	.word	0x0800a961
 800a908:	0800a961 	.word	0x0800a961
 800a90c:	0800a951 	.word	0x0800a951
 800a910:	0800a961 	.word	0x0800a961
 800a914:	0800a961 	.word	0x0800a961
 800a918:	0800a961 	.word	0x0800a961
 800a91c:	0800a961 	.word	0x0800a961
 800a920:	0800a961 	.word	0x0800a961
 800a924:	0800a961 	.word	0x0800a961
 800a928:	0800a961 	.word	0x0800a961
 800a92c:	0800a959 	.word	0x0800a959
 800a930:	2301      	movs	r3, #1
 800a932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a936:	e0d6      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a938:	2304      	movs	r3, #4
 800a93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93e:	e0d2      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a940:	2308      	movs	r3, #8
 800a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a946:	e0ce      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a948:	2310      	movs	r3, #16
 800a94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94e:	e0ca      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a950:	2320      	movs	r3, #32
 800a952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a956:	e0c6      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a958:	2340      	movs	r3, #64	; 0x40
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e0c2      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a960:	2380      	movs	r3, #128	; 0x80
 800a962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a966:	e0be      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800a968:	40011400 	.word	0x40011400
 800a96c:	58024400 	.word	0x58024400
 800a970:	40007800 	.word	0x40007800
 800a974:	40007c00 	.word	0x40007c00
 800a978:	40011800 	.word	0x40011800
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4aad      	ldr	r2, [pc, #692]	; (800ac38 <UART_SetConfig+0x8fc>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d176      	bne.n	800aa74 <UART_SetConfig+0x738>
 800a986:	4bad      	ldr	r3, [pc, #692]	; (800ac3c <UART_SetConfig+0x900>)
 800a988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a98e:	2b28      	cmp	r3, #40	; 0x28
 800a990:	d86c      	bhi.n	800aa6c <UART_SetConfig+0x730>
 800a992:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <UART_SetConfig+0x65c>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800aa3d 	.word	0x0800aa3d
 800a99c:	0800aa6d 	.word	0x0800aa6d
 800a9a0:	0800aa6d 	.word	0x0800aa6d
 800a9a4:	0800aa6d 	.word	0x0800aa6d
 800a9a8:	0800aa6d 	.word	0x0800aa6d
 800a9ac:	0800aa6d 	.word	0x0800aa6d
 800a9b0:	0800aa6d 	.word	0x0800aa6d
 800a9b4:	0800aa6d 	.word	0x0800aa6d
 800a9b8:	0800aa45 	.word	0x0800aa45
 800a9bc:	0800aa6d 	.word	0x0800aa6d
 800a9c0:	0800aa6d 	.word	0x0800aa6d
 800a9c4:	0800aa6d 	.word	0x0800aa6d
 800a9c8:	0800aa6d 	.word	0x0800aa6d
 800a9cc:	0800aa6d 	.word	0x0800aa6d
 800a9d0:	0800aa6d 	.word	0x0800aa6d
 800a9d4:	0800aa6d 	.word	0x0800aa6d
 800a9d8:	0800aa4d 	.word	0x0800aa4d
 800a9dc:	0800aa6d 	.word	0x0800aa6d
 800a9e0:	0800aa6d 	.word	0x0800aa6d
 800a9e4:	0800aa6d 	.word	0x0800aa6d
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800aa6d 	.word	0x0800aa6d
 800a9f0:	0800aa6d 	.word	0x0800aa6d
 800a9f4:	0800aa6d 	.word	0x0800aa6d
 800a9f8:	0800aa55 	.word	0x0800aa55
 800a9fc:	0800aa6d 	.word	0x0800aa6d
 800aa00:	0800aa6d 	.word	0x0800aa6d
 800aa04:	0800aa6d 	.word	0x0800aa6d
 800aa08:	0800aa6d 	.word	0x0800aa6d
 800aa0c:	0800aa6d 	.word	0x0800aa6d
 800aa10:	0800aa6d 	.word	0x0800aa6d
 800aa14:	0800aa6d 	.word	0x0800aa6d
 800aa18:	0800aa5d 	.word	0x0800aa5d
 800aa1c:	0800aa6d 	.word	0x0800aa6d
 800aa20:	0800aa6d 	.word	0x0800aa6d
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aa6d 	.word	0x0800aa6d
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aa6d 	.word	0x0800aa6d
 800aa34:	0800aa6d 	.word	0x0800aa6d
 800aa38:	0800aa65 	.word	0x0800aa65
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa42:	e050      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa44:	2304      	movs	r3, #4
 800aa46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4a:	e04c      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa52:	e048      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa54:	2310      	movs	r3, #16
 800aa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5a:	e044      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa62:	e040      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa64:	2340      	movs	r3, #64	; 0x40
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6a:	e03c      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e038      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a71      	ldr	r2, [pc, #452]	; (800ac40 <UART_SetConfig+0x904>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d130      	bne.n	800aae0 <UART_SetConfig+0x7a4>
 800aa7e:	4b6f      	ldr	r3, [pc, #444]	; (800ac3c <UART_SetConfig+0x900>)
 800aa80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	2b05      	cmp	r3, #5
 800aa88:	d826      	bhi.n	800aad8 <UART_SetConfig+0x79c>
 800aa8a:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <UART_SetConfig+0x754>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aab1 	.word	0x0800aab1
 800aa98:	0800aab9 	.word	0x0800aab9
 800aa9c:	0800aac1 	.word	0x0800aac1
 800aaa0:	0800aac9 	.word	0x0800aac9
 800aaa4:	0800aad1 	.word	0x0800aad1
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaae:	e01a      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aab0:	2304      	movs	r3, #4
 800aab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab6:	e016      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aab8:	2308      	movs	r3, #8
 800aaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aabe:	e012      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aac0:	2310      	movs	r3, #16
 800aac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aac6:	e00e      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aac8:	2320      	movs	r3, #32
 800aaca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aace:	e00a      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aad0:	2340      	movs	r3, #64	; 0x40
 800aad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aad6:	e006      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aad8:	2380      	movs	r3, #128	; 0x80
 800aada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aade:	e002      	b.n	800aae6 <UART_SetConfig+0x7aa>
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a55      	ldr	r2, [pc, #340]	; (800ac40 <UART_SetConfig+0x904>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	f040 80f0 	bne.w	800acd2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aaf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	dc46      	bgt.n	800ab88 <UART_SetConfig+0x84c>
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	db75      	blt.n	800abea <UART_SetConfig+0x8ae>
 800aafe:	3b02      	subs	r3, #2
 800ab00:	2b1e      	cmp	r3, #30
 800ab02:	d872      	bhi.n	800abea <UART_SetConfig+0x8ae>
 800ab04:	a201      	add	r2, pc, #4	; (adr r2, 800ab0c <UART_SetConfig+0x7d0>)
 800ab06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0a:	bf00      	nop
 800ab0c:	0800ab8f 	.word	0x0800ab8f
 800ab10:	0800abeb 	.word	0x0800abeb
 800ab14:	0800ab97 	.word	0x0800ab97
 800ab18:	0800abeb 	.word	0x0800abeb
 800ab1c:	0800abeb 	.word	0x0800abeb
 800ab20:	0800abeb 	.word	0x0800abeb
 800ab24:	0800aba7 	.word	0x0800aba7
 800ab28:	0800abeb 	.word	0x0800abeb
 800ab2c:	0800abeb 	.word	0x0800abeb
 800ab30:	0800abeb 	.word	0x0800abeb
 800ab34:	0800abeb 	.word	0x0800abeb
 800ab38:	0800abeb 	.word	0x0800abeb
 800ab3c:	0800abeb 	.word	0x0800abeb
 800ab40:	0800abeb 	.word	0x0800abeb
 800ab44:	0800abb7 	.word	0x0800abb7
 800ab48:	0800abeb 	.word	0x0800abeb
 800ab4c:	0800abeb 	.word	0x0800abeb
 800ab50:	0800abeb 	.word	0x0800abeb
 800ab54:	0800abeb 	.word	0x0800abeb
 800ab58:	0800abeb 	.word	0x0800abeb
 800ab5c:	0800abeb 	.word	0x0800abeb
 800ab60:	0800abeb 	.word	0x0800abeb
 800ab64:	0800abeb 	.word	0x0800abeb
 800ab68:	0800abeb 	.word	0x0800abeb
 800ab6c:	0800abeb 	.word	0x0800abeb
 800ab70:	0800abeb 	.word	0x0800abeb
 800ab74:	0800abeb 	.word	0x0800abeb
 800ab78:	0800abeb 	.word	0x0800abeb
 800ab7c:	0800abeb 	.word	0x0800abeb
 800ab80:	0800abeb 	.word	0x0800abeb
 800ab84:	0800abdd 	.word	0x0800abdd
 800ab88:	2b40      	cmp	r3, #64	; 0x40
 800ab8a:	d02a      	beq.n	800abe2 <UART_SetConfig+0x8a6>
 800ab8c:	e02d      	b.n	800abea <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab8e:	f7fd f9e9 	bl	8007f64 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab94:	e02f      	b.n	800abf6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab96:	f107 0314 	add.w	r3, r7, #20
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fd f9f8 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aba4:	e027      	b.n	800abf6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fd fb44 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abb4:	e01f      	b.n	800abf6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb6:	4b21      	ldr	r3, [pc, #132]	; (800ac3c <UART_SetConfig+0x900>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0320 	and.w	r3, r3, #32
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d009      	beq.n	800abd6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abc2:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <UART_SetConfig+0x900>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	08db      	lsrs	r3, r3, #3
 800abc8:	f003 0303 	and.w	r3, r3, #3
 800abcc:	4a1d      	ldr	r2, [pc, #116]	; (800ac44 <UART_SetConfig+0x908>)
 800abce:	fa22 f303 	lsr.w	r3, r2, r3
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abd4:	e00f      	b.n	800abf6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800abd6:	4b1b      	ldr	r3, [pc, #108]	; (800ac44 <UART_SetConfig+0x908>)
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abda:	e00c      	b.n	800abf6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abdc:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <UART_SetConfig+0x90c>)
 800abde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abe0:	e009      	b.n	800abf6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abe8:	e005      	b.n	800abf6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800abf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 81e6 	beq.w	800afca <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac02:	4a12      	ldr	r2, [pc, #72]	; (800ac4c <UART_SetConfig+0x910>)
 800ac04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac10:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	4613      	mov	r3, r2
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	4413      	add	r3, r2
 800ac1c:	6a3a      	ldr	r2, [r7, #32]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d305      	bcc.n	800ac2e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac28:	6a3a      	ldr	r2, [r7, #32]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d910      	bls.n	800ac50 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac34:	e1c9      	b.n	800afca <UART_SetConfig+0xc8e>
 800ac36:	bf00      	nop
 800ac38:	40011c00 	.word	0x40011c00
 800ac3c:	58024400 	.word	0x58024400
 800ac40:	58000c00 	.word	0x58000c00
 800ac44:	03d09000 	.word	0x03d09000
 800ac48:	003d0900 	.word	0x003d0900
 800ac4c:	0800fe4c 	.word	0x0800fe4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	4618      	mov	r0, r3
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	4ac1      	ldr	r2, [pc, #772]	; (800af64 <UART_SetConfig+0xc28>)
 800ac5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	f04f 0300 	mov.w	r3, #0
 800ac68:	f7f5 fd66 	bl	8000738 <__aeabi_uldivmod>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4610      	mov	r0, r2
 800ac72:	4619      	mov	r1, r3
 800ac74:	f04f 0200 	mov.w	r2, #0
 800ac78:	f04f 0300 	mov.w	r3, #0
 800ac7c:	020b      	lsls	r3, r1, #8
 800ac7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac82:	0202      	lsls	r2, r0, #8
 800ac84:	6879      	ldr	r1, [r7, #4]
 800ac86:	6849      	ldr	r1, [r1, #4]
 800ac88:	0849      	lsrs	r1, r1, #1
 800ac8a:	4608      	mov	r0, r1
 800ac8c:	f04f 0100 	mov.w	r1, #0
 800ac90:	1814      	adds	r4, r2, r0
 800ac92:	eb43 0501 	adc.w	r5, r3, r1
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f04f 0300 	mov.w	r3, #0
 800aca0:	4620      	mov	r0, r4
 800aca2:	4629      	mov	r1, r5
 800aca4:	f7f5 fd48 	bl	8000738 <__aeabi_uldivmod>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4613      	mov	r3, r2
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acb6:	d308      	bcc.n	800acca <UART_SetConfig+0x98e>
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acbe:	d204      	bcs.n	800acca <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acc6:	60da      	str	r2, [r3, #12]
 800acc8:	e17f      	b.n	800afca <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800acd0:	e17b      	b.n	800afca <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acda:	f040 80bd 	bne.w	800ae58 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800acde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ace2:	2b20      	cmp	r3, #32
 800ace4:	dc48      	bgt.n	800ad78 <UART_SetConfig+0xa3c>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	db7b      	blt.n	800ade2 <UART_SetConfig+0xaa6>
 800acea:	2b20      	cmp	r3, #32
 800acec:	d879      	bhi.n	800ade2 <UART_SetConfig+0xaa6>
 800acee:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <UART_SetConfig+0x9b8>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad7f 	.word	0x0800ad7f
 800acf8:	0800ad87 	.word	0x0800ad87
 800acfc:	0800ade3 	.word	0x0800ade3
 800ad00:	0800ade3 	.word	0x0800ade3
 800ad04:	0800ad8f 	.word	0x0800ad8f
 800ad08:	0800ade3 	.word	0x0800ade3
 800ad0c:	0800ade3 	.word	0x0800ade3
 800ad10:	0800ade3 	.word	0x0800ade3
 800ad14:	0800ad9f 	.word	0x0800ad9f
 800ad18:	0800ade3 	.word	0x0800ade3
 800ad1c:	0800ade3 	.word	0x0800ade3
 800ad20:	0800ade3 	.word	0x0800ade3
 800ad24:	0800ade3 	.word	0x0800ade3
 800ad28:	0800ade3 	.word	0x0800ade3
 800ad2c:	0800ade3 	.word	0x0800ade3
 800ad30:	0800ade3 	.word	0x0800ade3
 800ad34:	0800adaf 	.word	0x0800adaf
 800ad38:	0800ade3 	.word	0x0800ade3
 800ad3c:	0800ade3 	.word	0x0800ade3
 800ad40:	0800ade3 	.word	0x0800ade3
 800ad44:	0800ade3 	.word	0x0800ade3
 800ad48:	0800ade3 	.word	0x0800ade3
 800ad4c:	0800ade3 	.word	0x0800ade3
 800ad50:	0800ade3 	.word	0x0800ade3
 800ad54:	0800ade3 	.word	0x0800ade3
 800ad58:	0800ade3 	.word	0x0800ade3
 800ad5c:	0800ade3 	.word	0x0800ade3
 800ad60:	0800ade3 	.word	0x0800ade3
 800ad64:	0800ade3 	.word	0x0800ade3
 800ad68:	0800ade3 	.word	0x0800ade3
 800ad6c:	0800ade3 	.word	0x0800ade3
 800ad70:	0800ade3 	.word	0x0800ade3
 800ad74:	0800add5 	.word	0x0800add5
 800ad78:	2b40      	cmp	r3, #64	; 0x40
 800ad7a:	d02e      	beq.n	800adda <UART_SetConfig+0xa9e>
 800ad7c:	e031      	b.n	800ade2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7e:	f7fb fda7 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 800ad82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad84:	e033      	b.n	800adee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad86:	f7fb fdb9 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 800ad8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad8c:	e02f      	b.n	800adee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8e:	f107 0314 	add.w	r3, r7, #20
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fd f8fc 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad9c:	e027      	b.n	800adee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad9e:	f107 0308 	add.w	r3, r7, #8
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fd fa48 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adac:	e01f      	b.n	800adee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adae:	4b6e      	ldr	r3, [pc, #440]	; (800af68 <UART_SetConfig+0xc2c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adba:	4b6b      	ldr	r3, [pc, #428]	; (800af68 <UART_SetConfig+0xc2c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	08db      	lsrs	r3, r3, #3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	4a69      	ldr	r2, [pc, #420]	; (800af6c <UART_SetConfig+0xc30>)
 800adc6:	fa22 f303 	lsr.w	r3, r2, r3
 800adca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adcc:	e00f      	b.n	800adee <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800adce:	4b67      	ldr	r3, [pc, #412]	; (800af6c <UART_SetConfig+0xc30>)
 800add0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800add2:	e00c      	b.n	800adee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800add4:	4b66      	ldr	r3, [pc, #408]	; (800af70 <UART_SetConfig+0xc34>)
 800add6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800add8:	e009      	b.n	800adee <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ade0:	e005      	b.n	800adee <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800adec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80ea 	beq.w	800afca <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	4a5a      	ldr	r2, [pc, #360]	; (800af64 <UART_SetConfig+0xc28>)
 800adfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae00:	461a      	mov	r2, r3
 800ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae08:	005a      	lsls	r2, r3, #1
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	441a      	add	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	2b0f      	cmp	r3, #15
 800ae20:	d916      	bls.n	800ae50 <UART_SetConfig+0xb14>
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae28:	d212      	bcs.n	800ae50 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	f023 030f 	bic.w	r3, r3, #15
 800ae32:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae36:	085b      	lsrs	r3, r3, #1
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae42:	4313      	orrs	r3, r2
 800ae44:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae4c:	60da      	str	r2, [r3, #12]
 800ae4e:	e0bc      	b.n	800afca <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae56:	e0b8      	b.n	800afca <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae5c:	2b20      	cmp	r3, #32
 800ae5e:	dc4b      	bgt.n	800aef8 <UART_SetConfig+0xbbc>
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f2c0 8087 	blt.w	800af74 <UART_SetConfig+0xc38>
 800ae66:	2b20      	cmp	r3, #32
 800ae68:	f200 8084 	bhi.w	800af74 <UART_SetConfig+0xc38>
 800ae6c:	a201      	add	r2, pc, #4	; (adr r2, 800ae74 <UART_SetConfig+0xb38>)
 800ae6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae72:	bf00      	nop
 800ae74:	0800aeff 	.word	0x0800aeff
 800ae78:	0800af07 	.word	0x0800af07
 800ae7c:	0800af75 	.word	0x0800af75
 800ae80:	0800af75 	.word	0x0800af75
 800ae84:	0800af0f 	.word	0x0800af0f
 800ae88:	0800af75 	.word	0x0800af75
 800ae8c:	0800af75 	.word	0x0800af75
 800ae90:	0800af75 	.word	0x0800af75
 800ae94:	0800af1f 	.word	0x0800af1f
 800ae98:	0800af75 	.word	0x0800af75
 800ae9c:	0800af75 	.word	0x0800af75
 800aea0:	0800af75 	.word	0x0800af75
 800aea4:	0800af75 	.word	0x0800af75
 800aea8:	0800af75 	.word	0x0800af75
 800aeac:	0800af75 	.word	0x0800af75
 800aeb0:	0800af75 	.word	0x0800af75
 800aeb4:	0800af2f 	.word	0x0800af2f
 800aeb8:	0800af75 	.word	0x0800af75
 800aebc:	0800af75 	.word	0x0800af75
 800aec0:	0800af75 	.word	0x0800af75
 800aec4:	0800af75 	.word	0x0800af75
 800aec8:	0800af75 	.word	0x0800af75
 800aecc:	0800af75 	.word	0x0800af75
 800aed0:	0800af75 	.word	0x0800af75
 800aed4:	0800af75 	.word	0x0800af75
 800aed8:	0800af75 	.word	0x0800af75
 800aedc:	0800af75 	.word	0x0800af75
 800aee0:	0800af75 	.word	0x0800af75
 800aee4:	0800af75 	.word	0x0800af75
 800aee8:	0800af75 	.word	0x0800af75
 800aeec:	0800af75 	.word	0x0800af75
 800aef0:	0800af75 	.word	0x0800af75
 800aef4:	0800af55 	.word	0x0800af55
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d02e      	beq.n	800af5a <UART_SetConfig+0xc1e>
 800aefc:	e03a      	b.n	800af74 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aefe:	f7fb fce7 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 800af02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af04:	e03c      	b.n	800af80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af06:	f7fb fcf9 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 800af0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af0c:	e038      	b.n	800af80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af0e:	f107 0314 	add.w	r3, r7, #20
 800af12:	4618      	mov	r0, r3
 800af14:	f7fd f83c 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af1c:	e030      	b.n	800af80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4618      	mov	r0, r3
 800af24:	f7fd f988 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af2c:	e028      	b.n	800af80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af2e:	4b0e      	ldr	r3, [pc, #56]	; (800af68 <UART_SetConfig+0xc2c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0320 	and.w	r3, r3, #32
 800af36:	2b00      	cmp	r3, #0
 800af38:	d009      	beq.n	800af4e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af3a:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <UART_SetConfig+0xc2c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	08db      	lsrs	r3, r3, #3
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <UART_SetConfig+0xc30>)
 800af46:	fa22 f303 	lsr.w	r3, r2, r3
 800af4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af4c:	e018      	b.n	800af80 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800af4e:	4b07      	ldr	r3, [pc, #28]	; (800af6c <UART_SetConfig+0xc30>)
 800af50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af52:	e015      	b.n	800af80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af54:	4b06      	ldr	r3, [pc, #24]	; (800af70 <UART_SetConfig+0xc34>)
 800af56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af58:	e012      	b.n	800af80 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af60:	e00e      	b.n	800af80 <UART_SetConfig+0xc44>
 800af62:	bf00      	nop
 800af64:	0800fe4c 	.word	0x0800fe4c
 800af68:	58024400 	.word	0x58024400
 800af6c:	03d09000 	.word	0x03d09000
 800af70:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800af7e:	bf00      	nop
    }

    if (pclk != 0U)
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d021      	beq.n	800afca <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	4a1a      	ldr	r2, [pc, #104]	; (800aff4 <UART_SetConfig+0xcb8>)
 800af8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af90:	461a      	mov	r2, r3
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	fbb3 f2f2 	udiv	r2, r3, r2
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	441a      	add	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	2b0f      	cmp	r3, #15
 800afae:	d909      	bls.n	800afc4 <UART_SetConfig+0xc88>
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb6:	d205      	bcs.n	800afc4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	b29a      	uxth	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	60da      	str	r2, [r3, #12]
 800afc2:	e002      	b.n	800afca <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800afe6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800afea:	4618      	mov	r0, r3
 800afec:	3738      	adds	r7, #56	; 0x38
 800afee:	46bd      	mov	sp, r7
 800aff0:	bdb0      	pop	{r4, r5, r7, pc}
 800aff2:	bf00      	nop
 800aff4:	0800fe4c 	.word	0x0800fe4c

0800aff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00a      	beq.n	800b022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	430a      	orrs	r2, r1
 800b042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00a      	beq.n	800b066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00a      	beq.n	800b088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	f003 0310 	and.w	r3, r3, #16
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00a      	beq.n	800b0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01a      	beq.n	800b10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f6:	d10a      	bne.n	800b10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	430a      	orrs	r2, r1
 800b12e:	605a      	str	r2, [r3, #4]
  }
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af02      	add	r7, sp, #8
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b14c:	f7f7 ffd8 	bl	8003100 <HAL_GetTick>
 800b150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0308 	and.w	r3, r3, #8
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d10e      	bne.n	800b17e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f82f 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e025      	b.n	800b1ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d10e      	bne.n	800b1aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b18c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f819 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e00f      	b.n	800b1ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b09c      	sub	sp, #112	; 0x70
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	603b      	str	r3, [r7, #0]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e2:	e0a9      	b.n	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ea:	f000 80a5 	beq.w	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ee:	f7f7 ff87 	bl	8003100 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d302      	bcc.n	800b204 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b200:	2b00      	cmp	r3, #0
 800b202:	d140      	bne.n	800b286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b218:	667b      	str	r3, [r7, #100]	; 0x64
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b224:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e6      	bne.n	800b204 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3308      	adds	r3, #8
 800b23c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b248:	f023 0301 	bic.w	r3, r3, #1
 800b24c:	663b      	str	r3, [r7, #96]	; 0x60
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b256:	64ba      	str	r2, [r7, #72]	; 0x48
 800b258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b25c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e5      	bne.n	800b236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e069      	b.n	800b35a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b00      	cmp	r3, #0
 800b292:	d051      	beq.n	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b29e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2a2:	d149      	bne.n	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e6      	bne.n	800b2ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f023 0301 	bic.w	r3, r3, #1
 800b2f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b300:	623a      	str	r2, [r7, #32]
 800b302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69f9      	ldr	r1, [r7, #28]
 800b306:	6a3a      	ldr	r2, [r7, #32]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e5      	bne.n	800b2e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2220      	movs	r2, #32
 800b318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2220      	movs	r2, #32
 800b320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2220      	movs	r2, #32
 800b328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e010      	b.n	800b35a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69da      	ldr	r2, [r3, #28]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4013      	ands	r3, r2
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	429a      	cmp	r2, r3
 800b346:	bf0c      	ite	eq
 800b348:	2301      	moveq	r3, #1
 800b34a:	2300      	movne	r3, #0
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	461a      	mov	r2, r3
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	429a      	cmp	r2, r3
 800b354:	f43f af46 	beq.w	800b1e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3770      	adds	r7, #112	; 0x70
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b362:	b480      	push	{r7}
 800b364:	b085      	sub	sp, #20
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_UARTEx_DisableFifoMode+0x16>
 800b374:	2302      	movs	r3, #2
 800b376:	e027      	b.n	800b3c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2224      	movs	r2, #36	; 0x24
 800b384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f022 0201 	bic.w	r2, r2, #1
 800b39e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2220      	movs	r2, #32
 800b3ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d101      	bne.n	800b3ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	e02d      	b.n	800b448 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2224      	movs	r2, #36	; 0x24
 800b3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0201 	bic.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f84f 	bl	800b4cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2220      	movs	r2, #32
 800b43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b464:	2302      	movs	r3, #2
 800b466:	e02d      	b.n	800b4c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2224      	movs	r2, #36	; 0x24
 800b474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0201 	bic.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f811 	bl	800b4cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d108      	bne.n	800b4ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4ec:	e031      	b.n	800b552 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ee:	2310      	movs	r3, #16
 800b4f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4f2:	2310      	movs	r3, #16
 800b4f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	0e5b      	lsrs	r3, r3, #25
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	f003 0307 	and.w	r3, r3, #7
 800b504:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	0f5b      	lsrs	r3, r3, #29
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	f003 0307 	and.w	r3, r3, #7
 800b514:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	7b3a      	ldrb	r2, [r7, #12]
 800b51a:	4911      	ldr	r1, [pc, #68]	; (800b560 <UARTEx_SetNbDataToProcess+0x94>)
 800b51c:	5c8a      	ldrb	r2, [r1, r2]
 800b51e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b522:	7b3a      	ldrb	r2, [r7, #12]
 800b524:	490f      	ldr	r1, [pc, #60]	; (800b564 <UARTEx_SetNbDataToProcess+0x98>)
 800b526:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b528:	fb93 f3f2 	sdiv	r3, r3, r2
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	7b7a      	ldrb	r2, [r7, #13]
 800b538:	4909      	ldr	r1, [pc, #36]	; (800b560 <UARTEx_SetNbDataToProcess+0x94>)
 800b53a:	5c8a      	ldrb	r2, [r1, r2]
 800b53c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b540:	7b7a      	ldrb	r2, [r7, #13]
 800b542:	4908      	ldr	r1, [pc, #32]	; (800b564 <UARTEx_SetNbDataToProcess+0x98>)
 800b544:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b546:	fb93 f3f2 	sdiv	r3, r3, r2
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b552:	bf00      	nop
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	0800fe64 	.word	0x0800fe64
 800b564:	0800fe6c 	.word	0x0800fe6c

0800b568 <__errno>:
 800b568:	4b01      	ldr	r3, [pc, #4]	; (800b570 <__errno+0x8>)
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	24000014 	.word	0x24000014

0800b574 <__libc_init_array>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	4d0d      	ldr	r5, [pc, #52]	; (800b5ac <__libc_init_array+0x38>)
 800b578:	4c0d      	ldr	r4, [pc, #52]	; (800b5b0 <__libc_init_array+0x3c>)
 800b57a:	1b64      	subs	r4, r4, r5
 800b57c:	10a4      	asrs	r4, r4, #2
 800b57e:	2600      	movs	r6, #0
 800b580:	42a6      	cmp	r6, r4
 800b582:	d109      	bne.n	800b598 <__libc_init_array+0x24>
 800b584:	4d0b      	ldr	r5, [pc, #44]	; (800b5b4 <__libc_init_array+0x40>)
 800b586:	4c0c      	ldr	r4, [pc, #48]	; (800b5b8 <__libc_init_array+0x44>)
 800b588:	f004 fc00 	bl	800fd8c <_init>
 800b58c:	1b64      	subs	r4, r4, r5
 800b58e:	10a4      	asrs	r4, r4, #2
 800b590:	2600      	movs	r6, #0
 800b592:	42a6      	cmp	r6, r4
 800b594:	d105      	bne.n	800b5a2 <__libc_init_array+0x2e>
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59c:	4798      	blx	r3
 800b59e:	3601      	adds	r6, #1
 800b5a0:	e7ee      	b.n	800b580 <__libc_init_array+0xc>
 800b5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a6:	4798      	blx	r3
 800b5a8:	3601      	adds	r6, #1
 800b5aa:	e7f2      	b.n	800b592 <__libc_init_array+0x1e>
 800b5ac:	08010334 	.word	0x08010334
 800b5b0:	08010334 	.word	0x08010334
 800b5b4:	08010334 	.word	0x08010334
 800b5b8:	08010338 	.word	0x08010338

0800b5bc <memcpy>:
 800b5bc:	440a      	add	r2, r1
 800b5be:	4291      	cmp	r1, r2
 800b5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5c4:	d100      	bne.n	800b5c8 <memcpy+0xc>
 800b5c6:	4770      	bx	lr
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	d1f9      	bne.n	800b5ca <memcpy+0xe>
 800b5d6:	bd10      	pop	{r4, pc}

0800b5d8 <memset>:
 800b5d8:	4402      	add	r2, r0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d100      	bne.n	800b5e2 <memset+0xa>
 800b5e0:	4770      	bx	lr
 800b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e6:	e7f9      	b.n	800b5dc <memset+0x4>

0800b5e8 <__cvt>:
 800b5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ea:	ed2d 8b02 	vpush	{d8}
 800b5ee:	eeb0 8b40 	vmov.f64	d8, d0
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	4617      	mov	r7, r2
 800b5f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b5f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b5fa:	ee18 2a90 	vmov	r2, s17
 800b5fe:	f025 0520 	bic.w	r5, r5, #32
 800b602:	2a00      	cmp	r2, #0
 800b604:	bfb6      	itet	lt
 800b606:	222d      	movlt	r2, #45	; 0x2d
 800b608:	2200      	movge	r2, #0
 800b60a:	eeb1 8b40 	vneglt.f64	d8, d0
 800b60e:	2d46      	cmp	r5, #70	; 0x46
 800b610:	460c      	mov	r4, r1
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	d004      	beq.n	800b620 <__cvt+0x38>
 800b616:	2d45      	cmp	r5, #69	; 0x45
 800b618:	d100      	bne.n	800b61c <__cvt+0x34>
 800b61a:	3401      	adds	r4, #1
 800b61c:	2102      	movs	r1, #2
 800b61e:	e000      	b.n	800b622 <__cvt+0x3a>
 800b620:	2103      	movs	r1, #3
 800b622:	ab03      	add	r3, sp, #12
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	ab02      	add	r3, sp, #8
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	4622      	mov	r2, r4
 800b62c:	4633      	mov	r3, r6
 800b62e:	eeb0 0b48 	vmov.f64	d0, d8
 800b632:	f001 fe9d 	bl	800d370 <_dtoa_r>
 800b636:	2d47      	cmp	r5, #71	; 0x47
 800b638:	d109      	bne.n	800b64e <__cvt+0x66>
 800b63a:	07fb      	lsls	r3, r7, #31
 800b63c:	d407      	bmi.n	800b64e <__cvt+0x66>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b642:	1a1b      	subs	r3, r3, r0
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	b005      	add	sp, #20
 800b648:	ecbd 8b02 	vpop	{d8}
 800b64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64e:	2d46      	cmp	r5, #70	; 0x46
 800b650:	eb00 0204 	add.w	r2, r0, r4
 800b654:	d10c      	bne.n	800b670 <__cvt+0x88>
 800b656:	7803      	ldrb	r3, [r0, #0]
 800b658:	2b30      	cmp	r3, #48	; 0x30
 800b65a:	d107      	bne.n	800b66c <__cvt+0x84>
 800b65c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b664:	bf1c      	itt	ne
 800b666:	f1c4 0401 	rsbne	r4, r4, #1
 800b66a:	6034      	strne	r4, [r6, #0]
 800b66c:	6833      	ldr	r3, [r6, #0]
 800b66e:	441a      	add	r2, r3
 800b670:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b678:	bf08      	it	eq
 800b67a:	9203      	streq	r2, [sp, #12]
 800b67c:	2130      	movs	r1, #48	; 0x30
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	4293      	cmp	r3, r2
 800b682:	d2dc      	bcs.n	800b63e <__cvt+0x56>
 800b684:	1c5c      	adds	r4, r3, #1
 800b686:	9403      	str	r4, [sp, #12]
 800b688:	7019      	strb	r1, [r3, #0]
 800b68a:	e7f8      	b.n	800b67e <__cvt+0x96>

0800b68c <__exponent>:
 800b68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b68e:	4603      	mov	r3, r0
 800b690:	2900      	cmp	r1, #0
 800b692:	bfb8      	it	lt
 800b694:	4249      	neglt	r1, r1
 800b696:	f803 2b02 	strb.w	r2, [r3], #2
 800b69a:	bfb4      	ite	lt
 800b69c:	222d      	movlt	r2, #45	; 0x2d
 800b69e:	222b      	movge	r2, #43	; 0x2b
 800b6a0:	2909      	cmp	r1, #9
 800b6a2:	7042      	strb	r2, [r0, #1]
 800b6a4:	dd2a      	ble.n	800b6fc <__exponent+0x70>
 800b6a6:	f10d 0407 	add.w	r4, sp, #7
 800b6aa:	46a4      	mov	ip, r4
 800b6ac:	270a      	movs	r7, #10
 800b6ae:	46a6      	mov	lr, r4
 800b6b0:	460a      	mov	r2, r1
 800b6b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b6b6:	fb07 1516 	mls	r5, r7, r6, r1
 800b6ba:	3530      	adds	r5, #48	; 0x30
 800b6bc:	2a63      	cmp	r2, #99	; 0x63
 800b6be:	f104 34ff 	add.w	r4, r4, #4294967295
 800b6c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	dcf1      	bgt.n	800b6ae <__exponent+0x22>
 800b6ca:	3130      	adds	r1, #48	; 0x30
 800b6cc:	f1ae 0502 	sub.w	r5, lr, #2
 800b6d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b6d4:	1c44      	adds	r4, r0, #1
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4561      	cmp	r1, ip
 800b6da:	d30a      	bcc.n	800b6f2 <__exponent+0x66>
 800b6dc:	f10d 0209 	add.w	r2, sp, #9
 800b6e0:	eba2 020e 	sub.w	r2, r2, lr
 800b6e4:	4565      	cmp	r5, ip
 800b6e6:	bf88      	it	hi
 800b6e8:	2200      	movhi	r2, #0
 800b6ea:	4413      	add	r3, r2
 800b6ec:	1a18      	subs	r0, r3, r0
 800b6ee:	b003      	add	sp, #12
 800b6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b6fa:	e7ed      	b.n	800b6d8 <__exponent+0x4c>
 800b6fc:	2330      	movs	r3, #48	; 0x30
 800b6fe:	3130      	adds	r1, #48	; 0x30
 800b700:	7083      	strb	r3, [r0, #2]
 800b702:	70c1      	strb	r1, [r0, #3]
 800b704:	1d03      	adds	r3, r0, #4
 800b706:	e7f1      	b.n	800b6ec <__exponent+0x60>

0800b708 <_printf_float>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	b08b      	sub	sp, #44	; 0x2c
 800b70e:	460c      	mov	r4, r1
 800b710:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b714:	4616      	mov	r6, r2
 800b716:	461f      	mov	r7, r3
 800b718:	4605      	mov	r5, r0
 800b71a:	f003 f8d1 	bl	800e8c0 <_localeconv_r>
 800b71e:	f8d0 b000 	ldr.w	fp, [r0]
 800b722:	4658      	mov	r0, fp
 800b724:	f7f4 fdf4 	bl	8000310 <strlen>
 800b728:	2300      	movs	r3, #0
 800b72a:	9308      	str	r3, [sp, #32]
 800b72c:	f8d8 3000 	ldr.w	r3, [r8]
 800b730:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b734:	6822      	ldr	r2, [r4, #0]
 800b736:	3307      	adds	r3, #7
 800b738:	f023 0307 	bic.w	r3, r3, #7
 800b73c:	f103 0108 	add.w	r1, r3, #8
 800b740:	f8c8 1000 	str.w	r1, [r8]
 800b744:	4682      	mov	sl, r0
 800b746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b74a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b74e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b9b0 <_printf_float+0x2a8>
 800b752:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b756:	eeb0 6bc0 	vabs.f64	d6, d0
 800b75a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b762:	dd24      	ble.n	800b7ae <_printf_float+0xa6>
 800b764:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76c:	d502      	bpl.n	800b774 <_printf_float+0x6c>
 800b76e:	232d      	movs	r3, #45	; 0x2d
 800b770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b774:	4b90      	ldr	r3, [pc, #576]	; (800b9b8 <_printf_float+0x2b0>)
 800b776:	4891      	ldr	r0, [pc, #580]	; (800b9bc <_printf_float+0x2b4>)
 800b778:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b77c:	bf94      	ite	ls
 800b77e:	4698      	movls	r8, r3
 800b780:	4680      	movhi	r8, r0
 800b782:	2303      	movs	r3, #3
 800b784:	6123      	str	r3, [r4, #16]
 800b786:	f022 0204 	bic.w	r2, r2, #4
 800b78a:	2300      	movs	r3, #0
 800b78c:	6022      	str	r2, [r4, #0]
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	9700      	str	r7, [sp, #0]
 800b792:	4633      	mov	r3, r6
 800b794:	aa09      	add	r2, sp, #36	; 0x24
 800b796:	4621      	mov	r1, r4
 800b798:	4628      	mov	r0, r5
 800b79a:	f000 f9d3 	bl	800bb44 <_printf_common>
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f040 808a 	bne.w	800b8b8 <_printf_float+0x1b0>
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	b00b      	add	sp, #44	; 0x2c
 800b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ae:	eeb4 0b40 	vcmp.f64	d0, d0
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	d709      	bvc.n	800b7cc <_printf_float+0xc4>
 800b7b8:	ee10 3a90 	vmov	r3, s1
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	bfbc      	itt	lt
 800b7c0:	232d      	movlt	r3, #45	; 0x2d
 800b7c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b7c6:	487e      	ldr	r0, [pc, #504]	; (800b9c0 <_printf_float+0x2b8>)
 800b7c8:	4b7e      	ldr	r3, [pc, #504]	; (800b9c4 <_printf_float+0x2bc>)
 800b7ca:	e7d5      	b.n	800b778 <_printf_float+0x70>
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b7d2:	9104      	str	r1, [sp, #16]
 800b7d4:	1c59      	adds	r1, r3, #1
 800b7d6:	d13c      	bne.n	800b852 <_printf_float+0x14a>
 800b7d8:	2306      	movs	r3, #6
 800b7da:	6063      	str	r3, [r4, #4]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9303      	str	r3, [sp, #12]
 800b7e0:	ab08      	add	r3, sp, #32
 800b7e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b7e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7ea:	ab07      	add	r3, sp, #28
 800b7ec:	6861      	ldr	r1, [r4, #4]
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	6022      	str	r2, [r4, #0]
 800b7f2:	f10d 031b 	add.w	r3, sp, #27
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f7ff fef6 	bl	800b5e8 <__cvt>
 800b7fc:	9b04      	ldr	r3, [sp, #16]
 800b7fe:	9907      	ldr	r1, [sp, #28]
 800b800:	2b47      	cmp	r3, #71	; 0x47
 800b802:	4680      	mov	r8, r0
 800b804:	d108      	bne.n	800b818 <_printf_float+0x110>
 800b806:	1cc8      	adds	r0, r1, #3
 800b808:	db02      	blt.n	800b810 <_printf_float+0x108>
 800b80a:	6863      	ldr	r3, [r4, #4]
 800b80c:	4299      	cmp	r1, r3
 800b80e:	dd41      	ble.n	800b894 <_printf_float+0x18c>
 800b810:	f1a9 0902 	sub.w	r9, r9, #2
 800b814:	fa5f f989 	uxtb.w	r9, r9
 800b818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b81c:	d820      	bhi.n	800b860 <_printf_float+0x158>
 800b81e:	3901      	subs	r1, #1
 800b820:	464a      	mov	r2, r9
 800b822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b826:	9107      	str	r1, [sp, #28]
 800b828:	f7ff ff30 	bl	800b68c <__exponent>
 800b82c:	9a08      	ldr	r2, [sp, #32]
 800b82e:	9004      	str	r0, [sp, #16]
 800b830:	1813      	adds	r3, r2, r0
 800b832:	2a01      	cmp	r2, #1
 800b834:	6123      	str	r3, [r4, #16]
 800b836:	dc02      	bgt.n	800b83e <_printf_float+0x136>
 800b838:	6822      	ldr	r2, [r4, #0]
 800b83a:	07d2      	lsls	r2, r2, #31
 800b83c:	d501      	bpl.n	800b842 <_printf_float+0x13a>
 800b83e:	3301      	adds	r3, #1
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0a2      	beq.n	800b790 <_printf_float+0x88>
 800b84a:	232d      	movs	r3, #45	; 0x2d
 800b84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b850:	e79e      	b.n	800b790 <_printf_float+0x88>
 800b852:	9904      	ldr	r1, [sp, #16]
 800b854:	2947      	cmp	r1, #71	; 0x47
 800b856:	d1c1      	bne.n	800b7dc <_printf_float+0xd4>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1bf      	bne.n	800b7dc <_printf_float+0xd4>
 800b85c:	2301      	movs	r3, #1
 800b85e:	e7bc      	b.n	800b7da <_printf_float+0xd2>
 800b860:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b864:	d118      	bne.n	800b898 <_printf_float+0x190>
 800b866:	2900      	cmp	r1, #0
 800b868:	6863      	ldr	r3, [r4, #4]
 800b86a:	dd0b      	ble.n	800b884 <_printf_float+0x17c>
 800b86c:	6121      	str	r1, [r4, #16]
 800b86e:	b913      	cbnz	r3, 800b876 <_printf_float+0x16e>
 800b870:	6822      	ldr	r2, [r4, #0]
 800b872:	07d0      	lsls	r0, r2, #31
 800b874:	d502      	bpl.n	800b87c <_printf_float+0x174>
 800b876:	3301      	adds	r3, #1
 800b878:	440b      	add	r3, r1
 800b87a:	6123      	str	r3, [r4, #16]
 800b87c:	2300      	movs	r3, #0
 800b87e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b880:	9304      	str	r3, [sp, #16]
 800b882:	e7de      	b.n	800b842 <_printf_float+0x13a>
 800b884:	b913      	cbnz	r3, 800b88c <_printf_float+0x184>
 800b886:	6822      	ldr	r2, [r4, #0]
 800b888:	07d2      	lsls	r2, r2, #31
 800b88a:	d501      	bpl.n	800b890 <_printf_float+0x188>
 800b88c:	3302      	adds	r3, #2
 800b88e:	e7f4      	b.n	800b87a <_printf_float+0x172>
 800b890:	2301      	movs	r3, #1
 800b892:	e7f2      	b.n	800b87a <_printf_float+0x172>
 800b894:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b898:	9b08      	ldr	r3, [sp, #32]
 800b89a:	4299      	cmp	r1, r3
 800b89c:	db05      	blt.n	800b8aa <_printf_float+0x1a2>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	6121      	str	r1, [r4, #16]
 800b8a2:	07d8      	lsls	r0, r3, #31
 800b8a4:	d5ea      	bpl.n	800b87c <_printf_float+0x174>
 800b8a6:	1c4b      	adds	r3, r1, #1
 800b8a8:	e7e7      	b.n	800b87a <_printf_float+0x172>
 800b8aa:	2900      	cmp	r1, #0
 800b8ac:	bfd4      	ite	le
 800b8ae:	f1c1 0202 	rsble	r2, r1, #2
 800b8b2:	2201      	movgt	r2, #1
 800b8b4:	4413      	add	r3, r2
 800b8b6:	e7e0      	b.n	800b87a <_printf_float+0x172>
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	055a      	lsls	r2, r3, #21
 800b8bc:	d407      	bmi.n	800b8ce <_printf_float+0x1c6>
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	47b8      	blx	r7
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	d12a      	bne.n	800b922 <_printf_float+0x21a>
 800b8cc:	e76a      	b.n	800b7a4 <_printf_float+0x9c>
 800b8ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b8d2:	f240 80e2 	bls.w	800ba9a <_printf_float+0x392>
 800b8d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b8da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e2:	d133      	bne.n	800b94c <_printf_float+0x244>
 800b8e4:	4a38      	ldr	r2, [pc, #224]	; (800b9c8 <_printf_float+0x2c0>)
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b8      	blx	r7
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f43f af58 	beq.w	800b7a4 <_printf_float+0x9c>
 800b8f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	db02      	blt.n	800b902 <_printf_float+0x1fa>
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	07d8      	lsls	r0, r3, #31
 800b900:	d50f      	bpl.n	800b922 <_printf_float+0x21a>
 800b902:	4653      	mov	r3, sl
 800b904:	465a      	mov	r2, fp
 800b906:	4631      	mov	r1, r6
 800b908:	4628      	mov	r0, r5
 800b90a:	47b8      	blx	r7
 800b90c:	3001      	adds	r0, #1
 800b90e:	f43f af49 	beq.w	800b7a4 <_printf_float+0x9c>
 800b912:	f04f 0800 	mov.w	r8, #0
 800b916:	f104 091a 	add.w	r9, r4, #26
 800b91a:	9b08      	ldr	r3, [sp, #32]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4543      	cmp	r3, r8
 800b920:	dc09      	bgt.n	800b936 <_printf_float+0x22e>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	079b      	lsls	r3, r3, #30
 800b926:	f100 8108 	bmi.w	800bb3a <_printf_float+0x432>
 800b92a:	68e0      	ldr	r0, [r4, #12]
 800b92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b92e:	4298      	cmp	r0, r3
 800b930:	bfb8      	it	lt
 800b932:	4618      	movlt	r0, r3
 800b934:	e738      	b.n	800b7a8 <_printf_float+0xa0>
 800b936:	2301      	movs	r3, #1
 800b938:	464a      	mov	r2, r9
 800b93a:	4631      	mov	r1, r6
 800b93c:	4628      	mov	r0, r5
 800b93e:	47b8      	blx	r7
 800b940:	3001      	adds	r0, #1
 800b942:	f43f af2f 	beq.w	800b7a4 <_printf_float+0x9c>
 800b946:	f108 0801 	add.w	r8, r8, #1
 800b94a:	e7e6      	b.n	800b91a <_printf_float+0x212>
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dc3c      	bgt.n	800b9cc <_printf_float+0x2c4>
 800b952:	4a1d      	ldr	r2, [pc, #116]	; (800b9c8 <_printf_float+0x2c0>)
 800b954:	2301      	movs	r3, #1
 800b956:	4631      	mov	r1, r6
 800b958:	4628      	mov	r0, r5
 800b95a:	47b8      	blx	r7
 800b95c:	3001      	adds	r0, #1
 800b95e:	f43f af21 	beq.w	800b7a4 <_printf_float+0x9c>
 800b962:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b966:	4313      	orrs	r3, r2
 800b968:	d102      	bne.n	800b970 <_printf_float+0x268>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	07d9      	lsls	r1, r3, #31
 800b96e:	d5d8      	bpl.n	800b922 <_printf_float+0x21a>
 800b970:	4653      	mov	r3, sl
 800b972:	465a      	mov	r2, fp
 800b974:	4631      	mov	r1, r6
 800b976:	4628      	mov	r0, r5
 800b978:	47b8      	blx	r7
 800b97a:	3001      	adds	r0, #1
 800b97c:	f43f af12 	beq.w	800b7a4 <_printf_float+0x9c>
 800b980:	f04f 0900 	mov.w	r9, #0
 800b984:	f104 0a1a 	add.w	sl, r4, #26
 800b988:	9b07      	ldr	r3, [sp, #28]
 800b98a:	425b      	negs	r3, r3
 800b98c:	454b      	cmp	r3, r9
 800b98e:	dc01      	bgt.n	800b994 <_printf_float+0x28c>
 800b990:	9b08      	ldr	r3, [sp, #32]
 800b992:	e795      	b.n	800b8c0 <_printf_float+0x1b8>
 800b994:	2301      	movs	r3, #1
 800b996:	4652      	mov	r2, sl
 800b998:	4631      	mov	r1, r6
 800b99a:	4628      	mov	r0, r5
 800b99c:	47b8      	blx	r7
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f af00 	beq.w	800b7a4 <_printf_float+0x9c>
 800b9a4:	f109 0901 	add.w	r9, r9, #1
 800b9a8:	e7ee      	b.n	800b988 <_printf_float+0x280>
 800b9aa:	bf00      	nop
 800b9ac:	f3af 8000 	nop.w
 800b9b0:	ffffffff 	.word	0xffffffff
 800b9b4:	7fefffff 	.word	0x7fefffff
 800b9b8:	0800fe78 	.word	0x0800fe78
 800b9bc:	0800fe7c 	.word	0x0800fe7c
 800b9c0:	0800fe84 	.word	0x0800fe84
 800b9c4:	0800fe80 	.word	0x0800fe80
 800b9c8:	0800fe88 	.word	0x0800fe88
 800b9cc:	9a08      	ldr	r2, [sp, #32]
 800b9ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	bfa8      	it	ge
 800b9d4:	461a      	movge	r2, r3
 800b9d6:	2a00      	cmp	r2, #0
 800b9d8:	4691      	mov	r9, r2
 800b9da:	dc38      	bgt.n	800ba4e <_printf_float+0x346>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9305      	str	r3, [sp, #20]
 800b9e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9e4:	f104 021a 	add.w	r2, r4, #26
 800b9e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9ea:	9905      	ldr	r1, [sp, #20]
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	eba3 0309 	sub.w	r3, r3, r9
 800b9f2:	428b      	cmp	r3, r1
 800b9f4:	dc33      	bgt.n	800ba5e <_printf_float+0x356>
 800b9f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	db3c      	blt.n	800ba78 <_printf_float+0x370>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	07da      	lsls	r2, r3, #31
 800ba02:	d439      	bmi.n	800ba78 <_printf_float+0x370>
 800ba04:	9a08      	ldr	r2, [sp, #32]
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	9907      	ldr	r1, [sp, #28]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	eba2 0901 	sub.w	r9, r2, r1
 800ba10:	4599      	cmp	r9, r3
 800ba12:	bfa8      	it	ge
 800ba14:	4699      	movge	r9, r3
 800ba16:	f1b9 0f00 	cmp.w	r9, #0
 800ba1a:	dc35      	bgt.n	800ba88 <_printf_float+0x380>
 800ba1c:	f04f 0800 	mov.w	r8, #0
 800ba20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba24:	f104 0a1a 	add.w	sl, r4, #26
 800ba28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	eba3 0309 	sub.w	r3, r3, r9
 800ba32:	4543      	cmp	r3, r8
 800ba34:	f77f af75 	ble.w	800b922 <_printf_float+0x21a>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47b8      	blx	r7
 800ba42:	3001      	adds	r0, #1
 800ba44:	f43f aeae 	beq.w	800b7a4 <_printf_float+0x9c>
 800ba48:	f108 0801 	add.w	r8, r8, #1
 800ba4c:	e7ec      	b.n	800ba28 <_printf_float+0x320>
 800ba4e:	4613      	mov	r3, r2
 800ba50:	4631      	mov	r1, r6
 800ba52:	4642      	mov	r2, r8
 800ba54:	4628      	mov	r0, r5
 800ba56:	47b8      	blx	r7
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d1bf      	bne.n	800b9dc <_printf_float+0x2d4>
 800ba5c:	e6a2      	b.n	800b7a4 <_printf_float+0x9c>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	4631      	mov	r1, r6
 800ba62:	4628      	mov	r0, r5
 800ba64:	9204      	str	r2, [sp, #16]
 800ba66:	47b8      	blx	r7
 800ba68:	3001      	adds	r0, #1
 800ba6a:	f43f ae9b 	beq.w	800b7a4 <_printf_float+0x9c>
 800ba6e:	9b05      	ldr	r3, [sp, #20]
 800ba70:	9a04      	ldr	r2, [sp, #16]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	e7b7      	b.n	800b9e8 <_printf_float+0x2e0>
 800ba78:	4653      	mov	r3, sl
 800ba7a:	465a      	mov	r2, fp
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	d1be      	bne.n	800ba04 <_printf_float+0x2fc>
 800ba86:	e68d      	b.n	800b7a4 <_printf_float+0x9c>
 800ba88:	9a04      	ldr	r2, [sp, #16]
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	4442      	add	r2, r8
 800ba8e:	4631      	mov	r1, r6
 800ba90:	4628      	mov	r0, r5
 800ba92:	47b8      	blx	r7
 800ba94:	3001      	adds	r0, #1
 800ba96:	d1c1      	bne.n	800ba1c <_printf_float+0x314>
 800ba98:	e684      	b.n	800b7a4 <_printf_float+0x9c>
 800ba9a:	9a08      	ldr	r2, [sp, #32]
 800ba9c:	2a01      	cmp	r2, #1
 800ba9e:	dc01      	bgt.n	800baa4 <_printf_float+0x39c>
 800baa0:	07db      	lsls	r3, r3, #31
 800baa2:	d537      	bpl.n	800bb14 <_printf_float+0x40c>
 800baa4:	2301      	movs	r3, #1
 800baa6:	4642      	mov	r2, r8
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	f43f ae78 	beq.w	800b7a4 <_printf_float+0x9c>
 800bab4:	4653      	mov	r3, sl
 800bab6:	465a      	mov	r2, fp
 800bab8:	4631      	mov	r1, r6
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	f43f ae70 	beq.w	800b7a4 <_printf_float+0x9c>
 800bac4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bac8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad0:	d01b      	beq.n	800bb0a <_printf_float+0x402>
 800bad2:	9b08      	ldr	r3, [sp, #32]
 800bad4:	f108 0201 	add.w	r2, r8, #1
 800bad8:	3b01      	subs	r3, #1
 800bada:	4631      	mov	r1, r6
 800badc:	4628      	mov	r0, r5
 800bade:	47b8      	blx	r7
 800bae0:	3001      	adds	r0, #1
 800bae2:	d10e      	bne.n	800bb02 <_printf_float+0x3fa>
 800bae4:	e65e      	b.n	800b7a4 <_printf_float+0x9c>
 800bae6:	2301      	movs	r3, #1
 800bae8:	464a      	mov	r2, r9
 800baea:	4631      	mov	r1, r6
 800baec:	4628      	mov	r0, r5
 800baee:	47b8      	blx	r7
 800baf0:	3001      	adds	r0, #1
 800baf2:	f43f ae57 	beq.w	800b7a4 <_printf_float+0x9c>
 800baf6:	f108 0801 	add.w	r8, r8, #1
 800bafa:	9b08      	ldr	r3, [sp, #32]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	4543      	cmp	r3, r8
 800bb00:	dcf1      	bgt.n	800bae6 <_printf_float+0x3de>
 800bb02:	9b04      	ldr	r3, [sp, #16]
 800bb04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb08:	e6db      	b.n	800b8c2 <_printf_float+0x1ba>
 800bb0a:	f04f 0800 	mov.w	r8, #0
 800bb0e:	f104 091a 	add.w	r9, r4, #26
 800bb12:	e7f2      	b.n	800bafa <_printf_float+0x3f2>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4642      	mov	r2, r8
 800bb18:	e7df      	b.n	800bada <_printf_float+0x3d2>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	464a      	mov	r2, r9
 800bb1e:	4631      	mov	r1, r6
 800bb20:	4628      	mov	r0, r5
 800bb22:	47b8      	blx	r7
 800bb24:	3001      	adds	r0, #1
 800bb26:	f43f ae3d 	beq.w	800b7a4 <_printf_float+0x9c>
 800bb2a:	f108 0801 	add.w	r8, r8, #1
 800bb2e:	68e3      	ldr	r3, [r4, #12]
 800bb30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb32:	1a5b      	subs	r3, r3, r1
 800bb34:	4543      	cmp	r3, r8
 800bb36:	dcf0      	bgt.n	800bb1a <_printf_float+0x412>
 800bb38:	e6f7      	b.n	800b92a <_printf_float+0x222>
 800bb3a:	f04f 0800 	mov.w	r8, #0
 800bb3e:	f104 0919 	add.w	r9, r4, #25
 800bb42:	e7f4      	b.n	800bb2e <_printf_float+0x426>

0800bb44 <_printf_common>:
 800bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	4616      	mov	r6, r2
 800bb4a:	4699      	mov	r9, r3
 800bb4c:	688a      	ldr	r2, [r1, #8]
 800bb4e:	690b      	ldr	r3, [r1, #16]
 800bb50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb54:	4293      	cmp	r3, r2
 800bb56:	bfb8      	it	lt
 800bb58:	4613      	movlt	r3, r2
 800bb5a:	6033      	str	r3, [r6, #0]
 800bb5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb60:	4607      	mov	r7, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	b10a      	cbz	r2, 800bb6a <_printf_common+0x26>
 800bb66:	3301      	adds	r3, #1
 800bb68:	6033      	str	r3, [r6, #0]
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	0699      	lsls	r1, r3, #26
 800bb6e:	bf42      	ittt	mi
 800bb70:	6833      	ldrmi	r3, [r6, #0]
 800bb72:	3302      	addmi	r3, #2
 800bb74:	6033      	strmi	r3, [r6, #0]
 800bb76:	6825      	ldr	r5, [r4, #0]
 800bb78:	f015 0506 	ands.w	r5, r5, #6
 800bb7c:	d106      	bne.n	800bb8c <_printf_common+0x48>
 800bb7e:	f104 0a19 	add.w	sl, r4, #25
 800bb82:	68e3      	ldr	r3, [r4, #12]
 800bb84:	6832      	ldr	r2, [r6, #0]
 800bb86:	1a9b      	subs	r3, r3, r2
 800bb88:	42ab      	cmp	r3, r5
 800bb8a:	dc26      	bgt.n	800bbda <_printf_common+0x96>
 800bb8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb90:	1e13      	subs	r3, r2, #0
 800bb92:	6822      	ldr	r2, [r4, #0]
 800bb94:	bf18      	it	ne
 800bb96:	2301      	movne	r3, #1
 800bb98:	0692      	lsls	r2, r2, #26
 800bb9a:	d42b      	bmi.n	800bbf4 <_printf_common+0xb0>
 800bb9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bba0:	4649      	mov	r1, r9
 800bba2:	4638      	mov	r0, r7
 800bba4:	47c0      	blx	r8
 800bba6:	3001      	adds	r0, #1
 800bba8:	d01e      	beq.n	800bbe8 <_printf_common+0xa4>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	68e5      	ldr	r5, [r4, #12]
 800bbae:	6832      	ldr	r2, [r6, #0]
 800bbb0:	f003 0306 	and.w	r3, r3, #6
 800bbb4:	2b04      	cmp	r3, #4
 800bbb6:	bf08      	it	eq
 800bbb8:	1aad      	subeq	r5, r5, r2
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	6922      	ldr	r2, [r4, #16]
 800bbbe:	bf0c      	ite	eq
 800bbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbc4:	2500      	movne	r5, #0
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	bfc4      	itt	gt
 800bbca:	1a9b      	subgt	r3, r3, r2
 800bbcc:	18ed      	addgt	r5, r5, r3
 800bbce:	2600      	movs	r6, #0
 800bbd0:	341a      	adds	r4, #26
 800bbd2:	42b5      	cmp	r5, r6
 800bbd4:	d11a      	bne.n	800bc0c <_printf_common+0xc8>
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	e008      	b.n	800bbec <_printf_common+0xa8>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4652      	mov	r2, sl
 800bbde:	4649      	mov	r1, r9
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	47c0      	blx	r8
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d103      	bne.n	800bbf0 <_printf_common+0xac>
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf0:	3501      	adds	r5, #1
 800bbf2:	e7c6      	b.n	800bb82 <_printf_common+0x3e>
 800bbf4:	18e1      	adds	r1, r4, r3
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	2030      	movs	r0, #48	; 0x30
 800bbfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbfe:	4422      	add	r2, r4
 800bc00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc08:	3302      	adds	r3, #2
 800bc0a:	e7c7      	b.n	800bb9c <_printf_common+0x58>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	4622      	mov	r2, r4
 800bc10:	4649      	mov	r1, r9
 800bc12:	4638      	mov	r0, r7
 800bc14:	47c0      	blx	r8
 800bc16:	3001      	adds	r0, #1
 800bc18:	d0e6      	beq.n	800bbe8 <_printf_common+0xa4>
 800bc1a:	3601      	adds	r6, #1
 800bc1c:	e7d9      	b.n	800bbd2 <_printf_common+0x8e>
	...

0800bc20 <_printf_i>:
 800bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	460c      	mov	r4, r1
 800bc26:	4691      	mov	r9, r2
 800bc28:	7e27      	ldrb	r7, [r4, #24]
 800bc2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc2c:	2f78      	cmp	r7, #120	; 0x78
 800bc2e:	4680      	mov	r8, r0
 800bc30:	469a      	mov	sl, r3
 800bc32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc36:	d807      	bhi.n	800bc48 <_printf_i+0x28>
 800bc38:	2f62      	cmp	r7, #98	; 0x62
 800bc3a:	d80a      	bhi.n	800bc52 <_printf_i+0x32>
 800bc3c:	2f00      	cmp	r7, #0
 800bc3e:	f000 80d8 	beq.w	800bdf2 <_printf_i+0x1d2>
 800bc42:	2f58      	cmp	r7, #88	; 0x58
 800bc44:	f000 80a3 	beq.w	800bd8e <_printf_i+0x16e>
 800bc48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc50:	e03a      	b.n	800bcc8 <_printf_i+0xa8>
 800bc52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc56:	2b15      	cmp	r3, #21
 800bc58:	d8f6      	bhi.n	800bc48 <_printf_i+0x28>
 800bc5a:	a001      	add	r0, pc, #4	; (adr r0, 800bc60 <_printf_i+0x40>)
 800bc5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc60:	0800bcb9 	.word	0x0800bcb9
 800bc64:	0800bccd 	.word	0x0800bccd
 800bc68:	0800bc49 	.word	0x0800bc49
 800bc6c:	0800bc49 	.word	0x0800bc49
 800bc70:	0800bc49 	.word	0x0800bc49
 800bc74:	0800bc49 	.word	0x0800bc49
 800bc78:	0800bccd 	.word	0x0800bccd
 800bc7c:	0800bc49 	.word	0x0800bc49
 800bc80:	0800bc49 	.word	0x0800bc49
 800bc84:	0800bc49 	.word	0x0800bc49
 800bc88:	0800bc49 	.word	0x0800bc49
 800bc8c:	0800bdd9 	.word	0x0800bdd9
 800bc90:	0800bcfd 	.word	0x0800bcfd
 800bc94:	0800bdbb 	.word	0x0800bdbb
 800bc98:	0800bc49 	.word	0x0800bc49
 800bc9c:	0800bc49 	.word	0x0800bc49
 800bca0:	0800bdfb 	.word	0x0800bdfb
 800bca4:	0800bc49 	.word	0x0800bc49
 800bca8:	0800bcfd 	.word	0x0800bcfd
 800bcac:	0800bc49 	.word	0x0800bc49
 800bcb0:	0800bc49 	.word	0x0800bc49
 800bcb4:	0800bdc3 	.word	0x0800bdc3
 800bcb8:	680b      	ldr	r3, [r1, #0]
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	600a      	str	r2, [r1, #0]
 800bcc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bcc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e0a3      	b.n	800be14 <_printf_i+0x1f4>
 800bccc:	6825      	ldr	r5, [r4, #0]
 800bcce:	6808      	ldr	r0, [r1, #0]
 800bcd0:	062e      	lsls	r6, r5, #24
 800bcd2:	f100 0304 	add.w	r3, r0, #4
 800bcd6:	d50a      	bpl.n	800bcee <_printf_i+0xce>
 800bcd8:	6805      	ldr	r5, [r0, #0]
 800bcda:	600b      	str	r3, [r1, #0]
 800bcdc:	2d00      	cmp	r5, #0
 800bcde:	da03      	bge.n	800bce8 <_printf_i+0xc8>
 800bce0:	232d      	movs	r3, #45	; 0x2d
 800bce2:	426d      	negs	r5, r5
 800bce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bce8:	485e      	ldr	r0, [pc, #376]	; (800be64 <_printf_i+0x244>)
 800bcea:	230a      	movs	r3, #10
 800bcec:	e019      	b.n	800bd22 <_printf_i+0x102>
 800bcee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bcf2:	6805      	ldr	r5, [r0, #0]
 800bcf4:	600b      	str	r3, [r1, #0]
 800bcf6:	bf18      	it	ne
 800bcf8:	b22d      	sxthne	r5, r5
 800bcfa:	e7ef      	b.n	800bcdc <_printf_i+0xbc>
 800bcfc:	680b      	ldr	r3, [r1, #0]
 800bcfe:	6825      	ldr	r5, [r4, #0]
 800bd00:	1d18      	adds	r0, r3, #4
 800bd02:	6008      	str	r0, [r1, #0]
 800bd04:	0628      	lsls	r0, r5, #24
 800bd06:	d501      	bpl.n	800bd0c <_printf_i+0xec>
 800bd08:	681d      	ldr	r5, [r3, #0]
 800bd0a:	e002      	b.n	800bd12 <_printf_i+0xf2>
 800bd0c:	0669      	lsls	r1, r5, #25
 800bd0e:	d5fb      	bpl.n	800bd08 <_printf_i+0xe8>
 800bd10:	881d      	ldrh	r5, [r3, #0]
 800bd12:	4854      	ldr	r0, [pc, #336]	; (800be64 <_printf_i+0x244>)
 800bd14:	2f6f      	cmp	r7, #111	; 0x6f
 800bd16:	bf0c      	ite	eq
 800bd18:	2308      	moveq	r3, #8
 800bd1a:	230a      	movne	r3, #10
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd22:	6866      	ldr	r6, [r4, #4]
 800bd24:	60a6      	str	r6, [r4, #8]
 800bd26:	2e00      	cmp	r6, #0
 800bd28:	bfa2      	ittt	ge
 800bd2a:	6821      	ldrge	r1, [r4, #0]
 800bd2c:	f021 0104 	bicge.w	r1, r1, #4
 800bd30:	6021      	strge	r1, [r4, #0]
 800bd32:	b90d      	cbnz	r5, 800bd38 <_printf_i+0x118>
 800bd34:	2e00      	cmp	r6, #0
 800bd36:	d04d      	beq.n	800bdd4 <_printf_i+0x1b4>
 800bd38:	4616      	mov	r6, r2
 800bd3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd3e:	fb03 5711 	mls	r7, r3, r1, r5
 800bd42:	5dc7      	ldrb	r7, [r0, r7]
 800bd44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd48:	462f      	mov	r7, r5
 800bd4a:	42bb      	cmp	r3, r7
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	d9f4      	bls.n	800bd3a <_printf_i+0x11a>
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d10b      	bne.n	800bd6c <_printf_i+0x14c>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	07df      	lsls	r7, r3, #31
 800bd58:	d508      	bpl.n	800bd6c <_printf_i+0x14c>
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	6861      	ldr	r1, [r4, #4]
 800bd5e:	4299      	cmp	r1, r3
 800bd60:	bfde      	ittt	le
 800bd62:	2330      	movle	r3, #48	; 0x30
 800bd64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd6c:	1b92      	subs	r2, r2, r6
 800bd6e:	6122      	str	r2, [r4, #16]
 800bd70:	f8cd a000 	str.w	sl, [sp]
 800bd74:	464b      	mov	r3, r9
 800bd76:	aa03      	add	r2, sp, #12
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	f7ff fee2 	bl	800bb44 <_printf_common>
 800bd80:	3001      	adds	r0, #1
 800bd82:	d14c      	bne.n	800be1e <_printf_i+0x1fe>
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	b004      	add	sp, #16
 800bd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8e:	4835      	ldr	r0, [pc, #212]	; (800be64 <_printf_i+0x244>)
 800bd90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	680e      	ldr	r6, [r1, #0]
 800bd98:	061f      	lsls	r7, r3, #24
 800bd9a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd9e:	600e      	str	r6, [r1, #0]
 800bda0:	d514      	bpl.n	800bdcc <_printf_i+0x1ac>
 800bda2:	07d9      	lsls	r1, r3, #31
 800bda4:	bf44      	itt	mi
 800bda6:	f043 0320 	orrmi.w	r3, r3, #32
 800bdaa:	6023      	strmi	r3, [r4, #0]
 800bdac:	b91d      	cbnz	r5, 800bdb6 <_printf_i+0x196>
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	f023 0320 	bic.w	r3, r3, #32
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	2310      	movs	r3, #16
 800bdb8:	e7b0      	b.n	800bd1c <_printf_i+0xfc>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	f043 0320 	orr.w	r3, r3, #32
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	2378      	movs	r3, #120	; 0x78
 800bdc4:	4828      	ldr	r0, [pc, #160]	; (800be68 <_printf_i+0x248>)
 800bdc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdca:	e7e3      	b.n	800bd94 <_printf_i+0x174>
 800bdcc:	065e      	lsls	r6, r3, #25
 800bdce:	bf48      	it	mi
 800bdd0:	b2ad      	uxthmi	r5, r5
 800bdd2:	e7e6      	b.n	800bda2 <_printf_i+0x182>
 800bdd4:	4616      	mov	r6, r2
 800bdd6:	e7bb      	b.n	800bd50 <_printf_i+0x130>
 800bdd8:	680b      	ldr	r3, [r1, #0]
 800bdda:	6826      	ldr	r6, [r4, #0]
 800bddc:	6960      	ldr	r0, [r4, #20]
 800bdde:	1d1d      	adds	r5, r3, #4
 800bde0:	600d      	str	r5, [r1, #0]
 800bde2:	0635      	lsls	r5, r6, #24
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	d501      	bpl.n	800bdec <_printf_i+0x1cc>
 800bde8:	6018      	str	r0, [r3, #0]
 800bdea:	e002      	b.n	800bdf2 <_printf_i+0x1d2>
 800bdec:	0671      	lsls	r1, r6, #25
 800bdee:	d5fb      	bpl.n	800bde8 <_printf_i+0x1c8>
 800bdf0:	8018      	strh	r0, [r3, #0]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	4616      	mov	r6, r2
 800bdf8:	e7ba      	b.n	800bd70 <_printf_i+0x150>
 800bdfa:	680b      	ldr	r3, [r1, #0]
 800bdfc:	1d1a      	adds	r2, r3, #4
 800bdfe:	600a      	str	r2, [r1, #0]
 800be00:	681e      	ldr	r6, [r3, #0]
 800be02:	6862      	ldr	r2, [r4, #4]
 800be04:	2100      	movs	r1, #0
 800be06:	4630      	mov	r0, r6
 800be08:	f7f4 fa8a 	bl	8000320 <memchr>
 800be0c:	b108      	cbz	r0, 800be12 <_printf_i+0x1f2>
 800be0e:	1b80      	subs	r0, r0, r6
 800be10:	6060      	str	r0, [r4, #4]
 800be12:	6863      	ldr	r3, [r4, #4]
 800be14:	6123      	str	r3, [r4, #16]
 800be16:	2300      	movs	r3, #0
 800be18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be1c:	e7a8      	b.n	800bd70 <_printf_i+0x150>
 800be1e:	6923      	ldr	r3, [r4, #16]
 800be20:	4632      	mov	r2, r6
 800be22:	4649      	mov	r1, r9
 800be24:	4640      	mov	r0, r8
 800be26:	47d0      	blx	sl
 800be28:	3001      	adds	r0, #1
 800be2a:	d0ab      	beq.n	800bd84 <_printf_i+0x164>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	079b      	lsls	r3, r3, #30
 800be30:	d413      	bmi.n	800be5a <_printf_i+0x23a>
 800be32:	68e0      	ldr	r0, [r4, #12]
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	4298      	cmp	r0, r3
 800be38:	bfb8      	it	lt
 800be3a:	4618      	movlt	r0, r3
 800be3c:	e7a4      	b.n	800bd88 <_printf_i+0x168>
 800be3e:	2301      	movs	r3, #1
 800be40:	4632      	mov	r2, r6
 800be42:	4649      	mov	r1, r9
 800be44:	4640      	mov	r0, r8
 800be46:	47d0      	blx	sl
 800be48:	3001      	adds	r0, #1
 800be4a:	d09b      	beq.n	800bd84 <_printf_i+0x164>
 800be4c:	3501      	adds	r5, #1
 800be4e:	68e3      	ldr	r3, [r4, #12]
 800be50:	9903      	ldr	r1, [sp, #12]
 800be52:	1a5b      	subs	r3, r3, r1
 800be54:	42ab      	cmp	r3, r5
 800be56:	dcf2      	bgt.n	800be3e <_printf_i+0x21e>
 800be58:	e7eb      	b.n	800be32 <_printf_i+0x212>
 800be5a:	2500      	movs	r5, #0
 800be5c:	f104 0619 	add.w	r6, r4, #25
 800be60:	e7f5      	b.n	800be4e <_printf_i+0x22e>
 800be62:	bf00      	nop
 800be64:	0800fe8a 	.word	0x0800fe8a
 800be68:	0800fe9b 	.word	0x0800fe9b

0800be6c <_scanf_float>:
 800be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be70:	b087      	sub	sp, #28
 800be72:	4617      	mov	r7, r2
 800be74:	9303      	str	r3, [sp, #12]
 800be76:	688b      	ldr	r3, [r1, #8]
 800be78:	1e5a      	subs	r2, r3, #1
 800be7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be7e:	bf83      	ittte	hi
 800be80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be84:	195b      	addhi	r3, r3, r5
 800be86:	9302      	strhi	r3, [sp, #8]
 800be88:	2300      	movls	r3, #0
 800be8a:	bf86      	itte	hi
 800be8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be90:	608b      	strhi	r3, [r1, #8]
 800be92:	9302      	strls	r3, [sp, #8]
 800be94:	680b      	ldr	r3, [r1, #0]
 800be96:	468b      	mov	fp, r1
 800be98:	2500      	movs	r5, #0
 800be9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800be9e:	f84b 3b1c 	str.w	r3, [fp], #28
 800bea2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bea6:	4680      	mov	r8, r0
 800bea8:	460c      	mov	r4, r1
 800beaa:	465e      	mov	r6, fp
 800beac:	46aa      	mov	sl, r5
 800beae:	46a9      	mov	r9, r5
 800beb0:	9501      	str	r5, [sp, #4]
 800beb2:	68a2      	ldr	r2, [r4, #8]
 800beb4:	b152      	cbz	r2, 800becc <_scanf_float+0x60>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b4e      	cmp	r3, #78	; 0x4e
 800bebc:	d864      	bhi.n	800bf88 <_scanf_float+0x11c>
 800bebe:	2b40      	cmp	r3, #64	; 0x40
 800bec0:	d83c      	bhi.n	800bf3c <_scanf_float+0xd0>
 800bec2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bec6:	b2c8      	uxtb	r0, r1
 800bec8:	280e      	cmp	r0, #14
 800beca:	d93a      	bls.n	800bf42 <_scanf_float+0xd6>
 800becc:	f1b9 0f00 	cmp.w	r9, #0
 800bed0:	d003      	beq.n	800beda <_scanf_float+0x6e>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bede:	f1ba 0f01 	cmp.w	sl, #1
 800bee2:	f200 8113 	bhi.w	800c10c <_scanf_float+0x2a0>
 800bee6:	455e      	cmp	r6, fp
 800bee8:	f200 8105 	bhi.w	800c0f6 <_scanf_float+0x28a>
 800beec:	2501      	movs	r5, #1
 800beee:	4628      	mov	r0, r5
 800bef0:	b007      	add	sp, #28
 800bef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800befa:	2a0d      	cmp	r2, #13
 800befc:	d8e6      	bhi.n	800becc <_scanf_float+0x60>
 800befe:	a101      	add	r1, pc, #4	; (adr r1, 800bf04 <_scanf_float+0x98>)
 800bf00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf04:	0800c043 	.word	0x0800c043
 800bf08:	0800becd 	.word	0x0800becd
 800bf0c:	0800becd 	.word	0x0800becd
 800bf10:	0800becd 	.word	0x0800becd
 800bf14:	0800c0a3 	.word	0x0800c0a3
 800bf18:	0800c07b 	.word	0x0800c07b
 800bf1c:	0800becd 	.word	0x0800becd
 800bf20:	0800becd 	.word	0x0800becd
 800bf24:	0800c051 	.word	0x0800c051
 800bf28:	0800becd 	.word	0x0800becd
 800bf2c:	0800becd 	.word	0x0800becd
 800bf30:	0800becd 	.word	0x0800becd
 800bf34:	0800becd 	.word	0x0800becd
 800bf38:	0800c009 	.word	0x0800c009
 800bf3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bf40:	e7db      	b.n	800befa <_scanf_float+0x8e>
 800bf42:	290e      	cmp	r1, #14
 800bf44:	d8c2      	bhi.n	800becc <_scanf_float+0x60>
 800bf46:	a001      	add	r0, pc, #4	; (adr r0, 800bf4c <_scanf_float+0xe0>)
 800bf48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bf4c:	0800bffb 	.word	0x0800bffb
 800bf50:	0800becd 	.word	0x0800becd
 800bf54:	0800bffb 	.word	0x0800bffb
 800bf58:	0800c08f 	.word	0x0800c08f
 800bf5c:	0800becd 	.word	0x0800becd
 800bf60:	0800bfa9 	.word	0x0800bfa9
 800bf64:	0800bfe5 	.word	0x0800bfe5
 800bf68:	0800bfe5 	.word	0x0800bfe5
 800bf6c:	0800bfe5 	.word	0x0800bfe5
 800bf70:	0800bfe5 	.word	0x0800bfe5
 800bf74:	0800bfe5 	.word	0x0800bfe5
 800bf78:	0800bfe5 	.word	0x0800bfe5
 800bf7c:	0800bfe5 	.word	0x0800bfe5
 800bf80:	0800bfe5 	.word	0x0800bfe5
 800bf84:	0800bfe5 	.word	0x0800bfe5
 800bf88:	2b6e      	cmp	r3, #110	; 0x6e
 800bf8a:	d809      	bhi.n	800bfa0 <_scanf_float+0x134>
 800bf8c:	2b60      	cmp	r3, #96	; 0x60
 800bf8e:	d8b2      	bhi.n	800bef6 <_scanf_float+0x8a>
 800bf90:	2b54      	cmp	r3, #84	; 0x54
 800bf92:	d077      	beq.n	800c084 <_scanf_float+0x218>
 800bf94:	2b59      	cmp	r3, #89	; 0x59
 800bf96:	d199      	bne.n	800becc <_scanf_float+0x60>
 800bf98:	2d07      	cmp	r5, #7
 800bf9a:	d197      	bne.n	800becc <_scanf_float+0x60>
 800bf9c:	2508      	movs	r5, #8
 800bf9e:	e029      	b.n	800bff4 <_scanf_float+0x188>
 800bfa0:	2b74      	cmp	r3, #116	; 0x74
 800bfa2:	d06f      	beq.n	800c084 <_scanf_float+0x218>
 800bfa4:	2b79      	cmp	r3, #121	; 0x79
 800bfa6:	e7f6      	b.n	800bf96 <_scanf_float+0x12a>
 800bfa8:	6821      	ldr	r1, [r4, #0]
 800bfaa:	05c8      	lsls	r0, r1, #23
 800bfac:	d51a      	bpl.n	800bfe4 <_scanf_float+0x178>
 800bfae:	9b02      	ldr	r3, [sp, #8]
 800bfb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bfb4:	6021      	str	r1, [r4, #0]
 800bfb6:	f109 0901 	add.w	r9, r9, #1
 800bfba:	b11b      	cbz	r3, 800bfc4 <_scanf_float+0x158>
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	60a2      	str	r2, [r4, #8]
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	60a3      	str	r3, [r4, #8]
 800bfca:	6923      	ldr	r3, [r4, #16]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	6123      	str	r3, [r4, #16]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	607b      	str	r3, [r7, #4]
 800bfd8:	f340 8084 	ble.w	800c0e4 <_scanf_float+0x278>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	603b      	str	r3, [r7, #0]
 800bfe2:	e766      	b.n	800beb2 <_scanf_float+0x46>
 800bfe4:	eb1a 0f05 	cmn.w	sl, r5
 800bfe8:	f47f af70 	bne.w	800becc <_scanf_float+0x60>
 800bfec:	6822      	ldr	r2, [r4, #0]
 800bfee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bff2:	6022      	str	r2, [r4, #0]
 800bff4:	f806 3b01 	strb.w	r3, [r6], #1
 800bff8:	e7e4      	b.n	800bfc4 <_scanf_float+0x158>
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	0610      	lsls	r0, r2, #24
 800bffe:	f57f af65 	bpl.w	800becc <_scanf_float+0x60>
 800c002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c006:	e7f4      	b.n	800bff2 <_scanf_float+0x186>
 800c008:	f1ba 0f00 	cmp.w	sl, #0
 800c00c:	d10e      	bne.n	800c02c <_scanf_float+0x1c0>
 800c00e:	f1b9 0f00 	cmp.w	r9, #0
 800c012:	d10e      	bne.n	800c032 <_scanf_float+0x1c6>
 800c014:	6822      	ldr	r2, [r4, #0]
 800c016:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c01a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c01e:	d108      	bne.n	800c032 <_scanf_float+0x1c6>
 800c020:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c024:	6022      	str	r2, [r4, #0]
 800c026:	f04f 0a01 	mov.w	sl, #1
 800c02a:	e7e3      	b.n	800bff4 <_scanf_float+0x188>
 800c02c:	f1ba 0f02 	cmp.w	sl, #2
 800c030:	d055      	beq.n	800c0de <_scanf_float+0x272>
 800c032:	2d01      	cmp	r5, #1
 800c034:	d002      	beq.n	800c03c <_scanf_float+0x1d0>
 800c036:	2d04      	cmp	r5, #4
 800c038:	f47f af48 	bne.w	800becc <_scanf_float+0x60>
 800c03c:	3501      	adds	r5, #1
 800c03e:	b2ed      	uxtb	r5, r5
 800c040:	e7d8      	b.n	800bff4 <_scanf_float+0x188>
 800c042:	f1ba 0f01 	cmp.w	sl, #1
 800c046:	f47f af41 	bne.w	800becc <_scanf_float+0x60>
 800c04a:	f04f 0a02 	mov.w	sl, #2
 800c04e:	e7d1      	b.n	800bff4 <_scanf_float+0x188>
 800c050:	b97d      	cbnz	r5, 800c072 <_scanf_float+0x206>
 800c052:	f1b9 0f00 	cmp.w	r9, #0
 800c056:	f47f af3c 	bne.w	800bed2 <_scanf_float+0x66>
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c060:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c064:	f47f af39 	bne.w	800beda <_scanf_float+0x6e>
 800c068:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c06c:	6022      	str	r2, [r4, #0]
 800c06e:	2501      	movs	r5, #1
 800c070:	e7c0      	b.n	800bff4 <_scanf_float+0x188>
 800c072:	2d03      	cmp	r5, #3
 800c074:	d0e2      	beq.n	800c03c <_scanf_float+0x1d0>
 800c076:	2d05      	cmp	r5, #5
 800c078:	e7de      	b.n	800c038 <_scanf_float+0x1cc>
 800c07a:	2d02      	cmp	r5, #2
 800c07c:	f47f af26 	bne.w	800becc <_scanf_float+0x60>
 800c080:	2503      	movs	r5, #3
 800c082:	e7b7      	b.n	800bff4 <_scanf_float+0x188>
 800c084:	2d06      	cmp	r5, #6
 800c086:	f47f af21 	bne.w	800becc <_scanf_float+0x60>
 800c08a:	2507      	movs	r5, #7
 800c08c:	e7b2      	b.n	800bff4 <_scanf_float+0x188>
 800c08e:	6822      	ldr	r2, [r4, #0]
 800c090:	0591      	lsls	r1, r2, #22
 800c092:	f57f af1b 	bpl.w	800becc <_scanf_float+0x60>
 800c096:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c09a:	6022      	str	r2, [r4, #0]
 800c09c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0a0:	e7a8      	b.n	800bff4 <_scanf_float+0x188>
 800c0a2:	6822      	ldr	r2, [r4, #0]
 800c0a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c0a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c0ac:	d006      	beq.n	800c0bc <_scanf_float+0x250>
 800c0ae:	0550      	lsls	r0, r2, #21
 800c0b0:	f57f af0c 	bpl.w	800becc <_scanf_float+0x60>
 800c0b4:	f1b9 0f00 	cmp.w	r9, #0
 800c0b8:	f43f af0f 	beq.w	800beda <_scanf_float+0x6e>
 800c0bc:	0591      	lsls	r1, r2, #22
 800c0be:	bf58      	it	pl
 800c0c0:	9901      	ldrpl	r1, [sp, #4]
 800c0c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c0c6:	bf58      	it	pl
 800c0c8:	eba9 0101 	subpl.w	r1, r9, r1
 800c0cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c0d0:	bf58      	it	pl
 800c0d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	f04f 0900 	mov.w	r9, #0
 800c0dc:	e78a      	b.n	800bff4 <_scanf_float+0x188>
 800c0de:	f04f 0a03 	mov.w	sl, #3
 800c0e2:	e787      	b.n	800bff4 <_scanf_float+0x188>
 800c0e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4798      	blx	r3
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f aedf 	beq.w	800beb2 <_scanf_float+0x46>
 800c0f4:	e6ea      	b.n	800becc <_scanf_float+0x60>
 800c0f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0fe:	463a      	mov	r2, r7
 800c100:	4640      	mov	r0, r8
 800c102:	4798      	blx	r3
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	3b01      	subs	r3, #1
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	e6ec      	b.n	800bee6 <_scanf_float+0x7a>
 800c10c:	1e6b      	subs	r3, r5, #1
 800c10e:	2b06      	cmp	r3, #6
 800c110:	d825      	bhi.n	800c15e <_scanf_float+0x2f2>
 800c112:	2d02      	cmp	r5, #2
 800c114:	d836      	bhi.n	800c184 <_scanf_float+0x318>
 800c116:	455e      	cmp	r6, fp
 800c118:	f67f aee8 	bls.w	800beec <_scanf_float+0x80>
 800c11c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c120:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c124:	463a      	mov	r2, r7
 800c126:	4640      	mov	r0, r8
 800c128:	4798      	blx	r3
 800c12a:	6923      	ldr	r3, [r4, #16]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	6123      	str	r3, [r4, #16]
 800c130:	e7f1      	b.n	800c116 <_scanf_float+0x2aa>
 800c132:	9802      	ldr	r0, [sp, #8]
 800c134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c138:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c13c:	9002      	str	r0, [sp, #8]
 800c13e:	463a      	mov	r2, r7
 800c140:	4640      	mov	r0, r8
 800c142:	4798      	blx	r3
 800c144:	6923      	ldr	r3, [r4, #16]
 800c146:	3b01      	subs	r3, #1
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c14e:	fa5f fa8a 	uxtb.w	sl, sl
 800c152:	f1ba 0f02 	cmp.w	sl, #2
 800c156:	d1ec      	bne.n	800c132 <_scanf_float+0x2c6>
 800c158:	3d03      	subs	r5, #3
 800c15a:	b2ed      	uxtb	r5, r5
 800c15c:	1b76      	subs	r6, r6, r5
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	05da      	lsls	r2, r3, #23
 800c162:	d52f      	bpl.n	800c1c4 <_scanf_float+0x358>
 800c164:	055b      	lsls	r3, r3, #21
 800c166:	d510      	bpl.n	800c18a <_scanf_float+0x31e>
 800c168:	455e      	cmp	r6, fp
 800c16a:	f67f aebf 	bls.w	800beec <_scanf_float+0x80>
 800c16e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c176:	463a      	mov	r2, r7
 800c178:	4640      	mov	r0, r8
 800c17a:	4798      	blx	r3
 800c17c:	6923      	ldr	r3, [r4, #16]
 800c17e:	3b01      	subs	r3, #1
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	e7f1      	b.n	800c168 <_scanf_float+0x2fc>
 800c184:	46aa      	mov	sl, r5
 800c186:	9602      	str	r6, [sp, #8]
 800c188:	e7df      	b.n	800c14a <_scanf_float+0x2de>
 800c18a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	2965      	cmp	r1, #101	; 0x65
 800c192:	f103 33ff 	add.w	r3, r3, #4294967295
 800c196:	f106 35ff 	add.w	r5, r6, #4294967295
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	d00c      	beq.n	800c1b8 <_scanf_float+0x34c>
 800c19e:	2945      	cmp	r1, #69	; 0x45
 800c1a0:	d00a      	beq.n	800c1b8 <_scanf_float+0x34c>
 800c1a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1a6:	463a      	mov	r2, r7
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	4798      	blx	r3
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	1eb5      	subs	r5, r6, #2
 800c1b6:	6123      	str	r3, [r4, #16]
 800c1b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1bc:	463a      	mov	r2, r7
 800c1be:	4640      	mov	r0, r8
 800c1c0:	4798      	blx	r3
 800c1c2:	462e      	mov	r6, r5
 800c1c4:	6825      	ldr	r5, [r4, #0]
 800c1c6:	f015 0510 	ands.w	r5, r5, #16
 800c1ca:	d14d      	bne.n	800c268 <_scanf_float+0x3fc>
 800c1cc:	7035      	strb	r5, [r6, #0]
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d8:	d11a      	bne.n	800c210 <_scanf_float+0x3a4>
 800c1da:	9b01      	ldr	r3, [sp, #4]
 800c1dc:	454b      	cmp	r3, r9
 800c1de:	eba3 0209 	sub.w	r2, r3, r9
 800c1e2:	d122      	bne.n	800c22a <_scanf_float+0x3be>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4659      	mov	r1, fp
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	f000 fee7 	bl	800cfbc <_strtod_r>
 800c1ee:	9b03      	ldr	r3, [sp, #12]
 800c1f0:	6821      	ldr	r1, [r4, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f011 0f02 	tst.w	r1, #2
 800c1f8:	f103 0204 	add.w	r2, r3, #4
 800c1fc:	d020      	beq.n	800c240 <_scanf_float+0x3d4>
 800c1fe:	9903      	ldr	r1, [sp, #12]
 800c200:	600a      	str	r2, [r1, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	ed83 0b00 	vstr	d0, [r3]
 800c208:	68e3      	ldr	r3, [r4, #12]
 800c20a:	3301      	adds	r3, #1
 800c20c:	60e3      	str	r3, [r4, #12]
 800c20e:	e66e      	b.n	800beee <_scanf_float+0x82>
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0e6      	beq.n	800c1e4 <_scanf_float+0x378>
 800c216:	9905      	ldr	r1, [sp, #20]
 800c218:	230a      	movs	r3, #10
 800c21a:	462a      	mov	r2, r5
 800c21c:	3101      	adds	r1, #1
 800c21e:	4640      	mov	r0, r8
 800c220:	f000 ff56 	bl	800d0d0 <_strtol_r>
 800c224:	9b04      	ldr	r3, [sp, #16]
 800c226:	9e05      	ldr	r6, [sp, #20]
 800c228:	1ac2      	subs	r2, r0, r3
 800c22a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c22e:	429e      	cmp	r6, r3
 800c230:	bf28      	it	cs
 800c232:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c236:	490d      	ldr	r1, [pc, #52]	; (800c26c <_scanf_float+0x400>)
 800c238:	4630      	mov	r0, r6
 800c23a:	f000 f8af 	bl	800c39c <siprintf>
 800c23e:	e7d1      	b.n	800c1e4 <_scanf_float+0x378>
 800c240:	f011 0f04 	tst.w	r1, #4
 800c244:	9903      	ldr	r1, [sp, #12]
 800c246:	600a      	str	r2, [r1, #0]
 800c248:	d1db      	bne.n	800c202 <_scanf_float+0x396>
 800c24a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c252:	681e      	ldr	r6, [r3, #0]
 800c254:	d705      	bvc.n	800c262 <_scanf_float+0x3f6>
 800c256:	4806      	ldr	r0, [pc, #24]	; (800c270 <_scanf_float+0x404>)
 800c258:	f000 f89a 	bl	800c390 <nanf>
 800c25c:	ed86 0a00 	vstr	s0, [r6]
 800c260:	e7d2      	b.n	800c208 <_scanf_float+0x39c>
 800c262:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c266:	e7f9      	b.n	800c25c <_scanf_float+0x3f0>
 800c268:	2500      	movs	r5, #0
 800c26a:	e640      	b.n	800beee <_scanf_float+0x82>
 800c26c:	0800feac 	.word	0x0800feac
 800c270:	08010328 	.word	0x08010328

0800c274 <iprintf>:
 800c274:	b40f      	push	{r0, r1, r2, r3}
 800c276:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <iprintf+0x2c>)
 800c278:	b513      	push	{r0, r1, r4, lr}
 800c27a:	681c      	ldr	r4, [r3, #0]
 800c27c:	b124      	cbz	r4, 800c288 <iprintf+0x14>
 800c27e:	69a3      	ldr	r3, [r4, #24]
 800c280:	b913      	cbnz	r3, 800c288 <iprintf+0x14>
 800c282:	4620      	mov	r0, r4
 800c284:	f001 ff10 	bl	800e0a8 <__sinit>
 800c288:	ab05      	add	r3, sp, #20
 800c28a:	9a04      	ldr	r2, [sp, #16]
 800c28c:	68a1      	ldr	r1, [r4, #8]
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	4620      	mov	r0, r4
 800c292:	f003 fa97 	bl	800f7c4 <_vfiprintf_r>
 800c296:	b002      	add	sp, #8
 800c298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c29c:	b004      	add	sp, #16
 800c29e:	4770      	bx	lr
 800c2a0:	24000014 	.word	0x24000014

0800c2a4 <_puts_r>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	460e      	mov	r6, r1
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	b118      	cbz	r0, 800c2b4 <_puts_r+0x10>
 800c2ac:	6983      	ldr	r3, [r0, #24]
 800c2ae:	b90b      	cbnz	r3, 800c2b4 <_puts_r+0x10>
 800c2b0:	f001 fefa 	bl	800e0a8 <__sinit>
 800c2b4:	69ab      	ldr	r3, [r5, #24]
 800c2b6:	68ac      	ldr	r4, [r5, #8]
 800c2b8:	b913      	cbnz	r3, 800c2c0 <_puts_r+0x1c>
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f001 fef4 	bl	800e0a8 <__sinit>
 800c2c0:	4b2c      	ldr	r3, [pc, #176]	; (800c374 <_puts_r+0xd0>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	d120      	bne.n	800c308 <_puts_r+0x64>
 800c2c6:	686c      	ldr	r4, [r5, #4]
 800c2c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ca:	07db      	lsls	r3, r3, #31
 800c2cc:	d405      	bmi.n	800c2da <_puts_r+0x36>
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	0598      	lsls	r0, r3, #22
 800c2d2:	d402      	bmi.n	800c2da <_puts_r+0x36>
 800c2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2d6:	f002 faf8 	bl	800e8ca <__retarget_lock_acquire_recursive>
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	0719      	lsls	r1, r3, #28
 800c2de:	d51d      	bpl.n	800c31c <_puts_r+0x78>
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	b1db      	cbz	r3, 800c31c <_puts_r+0x78>
 800c2e4:	3e01      	subs	r6, #1
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	60a3      	str	r3, [r4, #8]
 800c2f0:	bb39      	cbnz	r1, 800c342 <_puts_r+0x9e>
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	da38      	bge.n	800c368 <_puts_r+0xc4>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	210a      	movs	r1, #10
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f000 feea 	bl	800d0d4 <__swbuf_r>
 800c300:	3001      	adds	r0, #1
 800c302:	d011      	beq.n	800c328 <_puts_r+0x84>
 800c304:	250a      	movs	r5, #10
 800c306:	e011      	b.n	800c32c <_puts_r+0x88>
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <_puts_r+0xd4>)
 800c30a:	429c      	cmp	r4, r3
 800c30c:	d101      	bne.n	800c312 <_puts_r+0x6e>
 800c30e:	68ac      	ldr	r4, [r5, #8]
 800c310:	e7da      	b.n	800c2c8 <_puts_r+0x24>
 800c312:	4b1a      	ldr	r3, [pc, #104]	; (800c37c <_puts_r+0xd8>)
 800c314:	429c      	cmp	r4, r3
 800c316:	bf08      	it	eq
 800c318:	68ec      	ldreq	r4, [r5, #12]
 800c31a:	e7d5      	b.n	800c2c8 <_puts_r+0x24>
 800c31c:	4621      	mov	r1, r4
 800c31e:	4628      	mov	r0, r5
 800c320:	f000 ff2a 	bl	800d178 <__swsetup_r>
 800c324:	2800      	cmp	r0, #0
 800c326:	d0dd      	beq.n	800c2e4 <_puts_r+0x40>
 800c328:	f04f 35ff 	mov.w	r5, #4294967295
 800c32c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c32e:	07da      	lsls	r2, r3, #31
 800c330:	d405      	bmi.n	800c33e <_puts_r+0x9a>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	059b      	lsls	r3, r3, #22
 800c336:	d402      	bmi.n	800c33e <_puts_r+0x9a>
 800c338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c33a:	f002 fac7 	bl	800e8cc <__retarget_lock_release_recursive>
 800c33e:	4628      	mov	r0, r5
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	2b00      	cmp	r3, #0
 800c344:	da04      	bge.n	800c350 <_puts_r+0xac>
 800c346:	69a2      	ldr	r2, [r4, #24]
 800c348:	429a      	cmp	r2, r3
 800c34a:	dc06      	bgt.n	800c35a <_puts_r+0xb6>
 800c34c:	290a      	cmp	r1, #10
 800c34e:	d004      	beq.n	800c35a <_puts_r+0xb6>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	6022      	str	r2, [r4, #0]
 800c356:	7019      	strb	r1, [r3, #0]
 800c358:	e7c5      	b.n	800c2e6 <_puts_r+0x42>
 800c35a:	4622      	mov	r2, r4
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 feb9 	bl	800d0d4 <__swbuf_r>
 800c362:	3001      	adds	r0, #1
 800c364:	d1bf      	bne.n	800c2e6 <_puts_r+0x42>
 800c366:	e7df      	b.n	800c328 <_puts_r+0x84>
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	250a      	movs	r5, #10
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	6022      	str	r2, [r4, #0]
 800c370:	701d      	strb	r5, [r3, #0]
 800c372:	e7db      	b.n	800c32c <_puts_r+0x88>
 800c374:	080100c0 	.word	0x080100c0
 800c378:	080100e0 	.word	0x080100e0
 800c37c:	080100a0 	.word	0x080100a0

0800c380 <puts>:
 800c380:	4b02      	ldr	r3, [pc, #8]	; (800c38c <puts+0xc>)
 800c382:	4601      	mov	r1, r0
 800c384:	6818      	ldr	r0, [r3, #0]
 800c386:	f7ff bf8d 	b.w	800c2a4 <_puts_r>
 800c38a:	bf00      	nop
 800c38c:	24000014 	.word	0x24000014

0800c390 <nanf>:
 800c390:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c398 <nanf+0x8>
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	7fc00000 	.word	0x7fc00000

0800c39c <siprintf>:
 800c39c:	b40e      	push	{r1, r2, r3}
 800c39e:	b500      	push	{lr}
 800c3a0:	b09c      	sub	sp, #112	; 0x70
 800c3a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c3a4:	9002      	str	r0, [sp, #8]
 800c3a6:	9006      	str	r0, [sp, #24]
 800c3a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3ac:	4809      	ldr	r0, [pc, #36]	; (800c3d4 <siprintf+0x38>)
 800c3ae:	9107      	str	r1, [sp, #28]
 800c3b0:	9104      	str	r1, [sp, #16]
 800c3b2:	4909      	ldr	r1, [pc, #36]	; (800c3d8 <siprintf+0x3c>)
 800c3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b8:	9105      	str	r1, [sp, #20]
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	a902      	add	r1, sp, #8
 800c3c0:	f003 f8d6 	bl	800f570 <_svfiprintf_r>
 800c3c4:	9b02      	ldr	r3, [sp, #8]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
 800c3ca:	b01c      	add	sp, #112	; 0x70
 800c3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3d0:	b003      	add	sp, #12
 800c3d2:	4770      	bx	lr
 800c3d4:	24000014 	.word	0x24000014
 800c3d8:	ffff0208 	.word	0xffff0208

0800c3dc <sulp>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	4616      	mov	r6, r2
 800c3e4:	ec45 4b10 	vmov	d0, r4, r5
 800c3e8:	f002 fe5c 	bl	800f0a4 <__ulp>
 800c3ec:	b17e      	cbz	r6, 800c40e <sulp+0x32>
 800c3ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c3f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dd09      	ble.n	800c40e <sulp+0x32>
 800c3fa:	051b      	lsls	r3, r3, #20
 800c3fc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c400:	2000      	movs	r0, #0
 800c402:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c406:	ec41 0b17 	vmov	d7, r0, r1
 800c40a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c40e:	bd70      	pop	{r4, r5, r6, pc}

0800c410 <_strtod_l>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	ed2d 8b0c 	vpush	{d8-d13}
 800c418:	b09d      	sub	sp, #116	; 0x74
 800c41a:	461f      	mov	r7, r3
 800c41c:	2300      	movs	r3, #0
 800c41e:	9318      	str	r3, [sp, #96]	; 0x60
 800c420:	4ba6      	ldr	r3, [pc, #664]	; (800c6bc <_strtod_l+0x2ac>)
 800c422:	9213      	str	r2, [sp, #76]	; 0x4c
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	9308      	str	r3, [sp, #32]
 800c428:	4604      	mov	r4, r0
 800c42a:	4618      	mov	r0, r3
 800c42c:	468a      	mov	sl, r1
 800c42e:	f7f3 ff6f 	bl	8000310 <strlen>
 800c432:	f04f 0800 	mov.w	r8, #0
 800c436:	4605      	mov	r5, r0
 800c438:	f04f 0900 	mov.w	r9, #0
 800c43c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	2a2b      	cmp	r2, #43	; 0x2b
 800c446:	d04d      	beq.n	800c4e4 <_strtod_l+0xd4>
 800c448:	d83a      	bhi.n	800c4c0 <_strtod_l+0xb0>
 800c44a:	2a0d      	cmp	r2, #13
 800c44c:	d833      	bhi.n	800c4b6 <_strtod_l+0xa6>
 800c44e:	2a08      	cmp	r2, #8
 800c450:	d833      	bhi.n	800c4ba <_strtod_l+0xaa>
 800c452:	2a00      	cmp	r2, #0
 800c454:	d03d      	beq.n	800c4d2 <_strtod_l+0xc2>
 800c456:	2300      	movs	r3, #0
 800c458:	930b      	str	r3, [sp, #44]	; 0x2c
 800c45a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c45c:	7833      	ldrb	r3, [r6, #0]
 800c45e:	2b30      	cmp	r3, #48	; 0x30
 800c460:	f040 80b6 	bne.w	800c5d0 <_strtod_l+0x1c0>
 800c464:	7873      	ldrb	r3, [r6, #1]
 800c466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c46a:	2b58      	cmp	r3, #88	; 0x58
 800c46c:	d16d      	bne.n	800c54a <_strtod_l+0x13a>
 800c46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	ab18      	add	r3, sp, #96	; 0x60
 800c474:	9702      	str	r7, [sp, #8]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	4a91      	ldr	r2, [pc, #580]	; (800c6c0 <_strtod_l+0x2b0>)
 800c47a:	ab19      	add	r3, sp, #100	; 0x64
 800c47c:	a917      	add	r1, sp, #92	; 0x5c
 800c47e:	4620      	mov	r0, r4
 800c480:	f001 ff16 	bl	800e2b0 <__gethex>
 800c484:	f010 0507 	ands.w	r5, r0, #7
 800c488:	4607      	mov	r7, r0
 800c48a:	d005      	beq.n	800c498 <_strtod_l+0x88>
 800c48c:	2d06      	cmp	r5, #6
 800c48e:	d12b      	bne.n	800c4e8 <_strtod_l+0xd8>
 800c490:	3601      	adds	r6, #1
 800c492:	2300      	movs	r3, #0
 800c494:	9617      	str	r6, [sp, #92]	; 0x5c
 800c496:	930b      	str	r3, [sp, #44]	; 0x2c
 800c498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f040 856e 	bne.w	800cf7c <_strtod_l+0xb6c>
 800c4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4a2:	b1e3      	cbz	r3, 800c4de <_strtod_l+0xce>
 800c4a4:	ec49 8b17 	vmov	d7, r8, r9
 800c4a8:	eeb1 0b47 	vneg.f64	d0, d7
 800c4ac:	b01d      	add	sp, #116	; 0x74
 800c4ae:	ecbd 8b0c 	vpop	{d8-d13}
 800c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b6:	2a20      	cmp	r2, #32
 800c4b8:	d1cd      	bne.n	800c456 <_strtod_l+0x46>
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4be:	e7bf      	b.n	800c440 <_strtod_l+0x30>
 800c4c0:	2a2d      	cmp	r2, #45	; 0x2d
 800c4c2:	d1c8      	bne.n	800c456 <_strtod_l+0x46>
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4c8:	1c5a      	adds	r2, r3, #1
 800c4ca:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4cc:	785b      	ldrb	r3, [r3, #1]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1c3      	bne.n	800c45a <_strtod_l+0x4a>
 800c4d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f040 854d 	bne.w	800cf78 <_strtod_l+0xb68>
 800c4de:	ec49 8b10 	vmov	d0, r8, r9
 800c4e2:	e7e3      	b.n	800c4ac <_strtod_l+0x9c>
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	e7ee      	b.n	800c4c6 <_strtod_l+0xb6>
 800c4e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c4ea:	b13a      	cbz	r2, 800c4fc <_strtod_l+0xec>
 800c4ec:	2135      	movs	r1, #53	; 0x35
 800c4ee:	a81a      	add	r0, sp, #104	; 0x68
 800c4f0:	f002 fee4 	bl	800f2bc <__copybits>
 800c4f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f002 faa8 	bl	800ea4c <_Bfree>
 800c4fc:	3d01      	subs	r5, #1
 800c4fe:	2d05      	cmp	r5, #5
 800c500:	d807      	bhi.n	800c512 <_strtod_l+0x102>
 800c502:	e8df f005 	tbb	[pc, r5]
 800c506:	0b0e      	.short	0x0b0e
 800c508:	030e1d18 	.word	0x030e1d18
 800c50c:	f04f 0900 	mov.w	r9, #0
 800c510:	46c8      	mov	r8, r9
 800c512:	073b      	lsls	r3, r7, #28
 800c514:	d5c0      	bpl.n	800c498 <_strtod_l+0x88>
 800c516:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c51a:	e7bd      	b.n	800c498 <_strtod_l+0x88>
 800c51c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800c520:	e7f7      	b.n	800c512 <_strtod_l+0x102>
 800c522:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800c526:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c528:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c52c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c530:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c534:	e7ed      	b.n	800c512 <_strtod_l+0x102>
 800c536:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800c6c4 <_strtod_l+0x2b4>
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	e7e8      	b.n	800c512 <_strtod_l+0x102>
 800c540:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c544:	f04f 38ff 	mov.w	r8, #4294967295
 800c548:	e7e3      	b.n	800c512 <_strtod_l+0x102>
 800c54a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c54c:	1c5a      	adds	r2, r3, #1
 800c54e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c550:	785b      	ldrb	r3, [r3, #1]
 800c552:	2b30      	cmp	r3, #48	; 0x30
 800c554:	d0f9      	beq.n	800c54a <_strtod_l+0x13a>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d09e      	beq.n	800c498 <_strtod_l+0x88>
 800c55a:	2301      	movs	r3, #1
 800c55c:	9306      	str	r3, [sp, #24]
 800c55e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c560:	930c      	str	r3, [sp, #48]	; 0x30
 800c562:	2300      	movs	r3, #0
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	930a      	str	r3, [sp, #40]	; 0x28
 800c568:	461e      	mov	r6, r3
 800c56a:	220a      	movs	r2, #10
 800c56c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c56e:	f890 b000 	ldrb.w	fp, [r0]
 800c572:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800c576:	b2d9      	uxtb	r1, r3
 800c578:	2909      	cmp	r1, #9
 800c57a:	d92b      	bls.n	800c5d4 <_strtod_l+0x1c4>
 800c57c:	9908      	ldr	r1, [sp, #32]
 800c57e:	462a      	mov	r2, r5
 800c580:	f003 faad 	bl	800fade <strncmp>
 800c584:	2800      	cmp	r0, #0
 800c586:	d035      	beq.n	800c5f4 <_strtod_l+0x1e4>
 800c588:	2000      	movs	r0, #0
 800c58a:	465a      	mov	r2, fp
 800c58c:	4633      	mov	r3, r6
 800c58e:	4683      	mov	fp, r0
 800c590:	4601      	mov	r1, r0
 800c592:	2a65      	cmp	r2, #101	; 0x65
 800c594:	d001      	beq.n	800c59a <_strtod_l+0x18a>
 800c596:	2a45      	cmp	r2, #69	; 0x45
 800c598:	d118      	bne.n	800c5cc <_strtod_l+0x1bc>
 800c59a:	b91b      	cbnz	r3, 800c5a4 <_strtod_l+0x194>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	4303      	orrs	r3, r0
 800c5a0:	d097      	beq.n	800c4d2 <_strtod_l+0xc2>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800c5a8:	f10a 0201 	add.w	r2, sl, #1
 800c5ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c5b2:	2a2b      	cmp	r2, #43	; 0x2b
 800c5b4:	d077      	beq.n	800c6a6 <_strtod_l+0x296>
 800c5b6:	2a2d      	cmp	r2, #45	; 0x2d
 800c5b8:	d07d      	beq.n	800c6b6 <_strtod_l+0x2a6>
 800c5ba:	f04f 0e00 	mov.w	lr, #0
 800c5be:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c5c2:	2d09      	cmp	r5, #9
 800c5c4:	f240 8084 	bls.w	800c6d0 <_strtod_l+0x2c0>
 800c5c8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c5cc:	2500      	movs	r5, #0
 800c5ce:	e09f      	b.n	800c710 <_strtod_l+0x300>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e7c3      	b.n	800c55c <_strtod_l+0x14c>
 800c5d4:	2e08      	cmp	r6, #8
 800c5d6:	bfd5      	itete	le
 800c5d8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c5da:	9904      	ldrgt	r1, [sp, #16]
 800c5dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c5e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c5e4:	f100 0001 	add.w	r0, r0, #1
 800c5e8:	bfd4      	ite	le
 800c5ea:	930a      	strle	r3, [sp, #40]	; 0x28
 800c5ec:	9304      	strgt	r3, [sp, #16]
 800c5ee:	3601      	adds	r6, #1
 800c5f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c5f2:	e7bb      	b.n	800c56c <_strtod_l+0x15c>
 800c5f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5f6:	195a      	adds	r2, r3, r5
 800c5f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5fa:	5d5a      	ldrb	r2, [r3, r5]
 800c5fc:	b3ae      	cbz	r6, 800c66a <_strtod_l+0x25a>
 800c5fe:	4683      	mov	fp, r0
 800c600:	4633      	mov	r3, r6
 800c602:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c606:	2909      	cmp	r1, #9
 800c608:	d912      	bls.n	800c630 <_strtod_l+0x220>
 800c60a:	2101      	movs	r1, #1
 800c60c:	e7c1      	b.n	800c592 <_strtod_l+0x182>
 800c60e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	9217      	str	r2, [sp, #92]	; 0x5c
 800c614:	785a      	ldrb	r2, [r3, #1]
 800c616:	3001      	adds	r0, #1
 800c618:	2a30      	cmp	r2, #48	; 0x30
 800c61a:	d0f8      	beq.n	800c60e <_strtod_l+0x1fe>
 800c61c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c620:	2b08      	cmp	r3, #8
 800c622:	f200 84b0 	bhi.w	800cf86 <_strtod_l+0xb76>
 800c626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c628:	930c      	str	r3, [sp, #48]	; 0x30
 800c62a:	4683      	mov	fp, r0
 800c62c:	2000      	movs	r0, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	3a30      	subs	r2, #48	; 0x30
 800c632:	f100 0101 	add.w	r1, r0, #1
 800c636:	d012      	beq.n	800c65e <_strtod_l+0x24e>
 800c638:	448b      	add	fp, r1
 800c63a:	eb00 0c03 	add.w	ip, r0, r3
 800c63e:	4619      	mov	r1, r3
 800c640:	250a      	movs	r5, #10
 800c642:	4561      	cmp	r1, ip
 800c644:	d113      	bne.n	800c66e <_strtod_l+0x25e>
 800c646:	1819      	adds	r1, r3, r0
 800c648:	2908      	cmp	r1, #8
 800c64a:	f103 0301 	add.w	r3, r3, #1
 800c64e:	4403      	add	r3, r0
 800c650:	dc1d      	bgt.n	800c68e <_strtod_l+0x27e>
 800c652:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c654:	210a      	movs	r1, #10
 800c656:	fb01 2200 	mla	r2, r1, r0, r2
 800c65a:	920a      	str	r2, [sp, #40]	; 0x28
 800c65c:	2100      	movs	r1, #0
 800c65e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c660:	1c50      	adds	r0, r2, #1
 800c662:	9017      	str	r0, [sp, #92]	; 0x5c
 800c664:	7852      	ldrb	r2, [r2, #1]
 800c666:	4608      	mov	r0, r1
 800c668:	e7cb      	b.n	800c602 <_strtod_l+0x1f2>
 800c66a:	4630      	mov	r0, r6
 800c66c:	e7d4      	b.n	800c618 <_strtod_l+0x208>
 800c66e:	2908      	cmp	r1, #8
 800c670:	dc04      	bgt.n	800c67c <_strtod_l+0x26c>
 800c672:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c674:	436f      	muls	r7, r5
 800c676:	970a      	str	r7, [sp, #40]	; 0x28
 800c678:	3101      	adds	r1, #1
 800c67a:	e7e2      	b.n	800c642 <_strtod_l+0x232>
 800c67c:	f101 0e01 	add.w	lr, r1, #1
 800c680:	f1be 0f10 	cmp.w	lr, #16
 800c684:	bfde      	ittt	le
 800c686:	9f04      	ldrle	r7, [sp, #16]
 800c688:	436f      	mulle	r7, r5
 800c68a:	9704      	strle	r7, [sp, #16]
 800c68c:	e7f4      	b.n	800c678 <_strtod_l+0x268>
 800c68e:	2b10      	cmp	r3, #16
 800c690:	bfdf      	itttt	le
 800c692:	9804      	ldrle	r0, [sp, #16]
 800c694:	210a      	movle	r1, #10
 800c696:	fb01 2200 	mlale	r2, r1, r0, r2
 800c69a:	9204      	strle	r2, [sp, #16]
 800c69c:	e7de      	b.n	800c65c <_strtod_l+0x24c>
 800c69e:	f04f 0b00 	mov.w	fp, #0
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	e77a      	b.n	800c59c <_strtod_l+0x18c>
 800c6a6:	f04f 0e00 	mov.w	lr, #0
 800c6aa:	f10a 0202 	add.w	r2, sl, #2
 800c6ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6b0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c6b4:	e783      	b.n	800c5be <_strtod_l+0x1ae>
 800c6b6:	f04f 0e01 	mov.w	lr, #1
 800c6ba:	e7f6      	b.n	800c6aa <_strtod_l+0x29a>
 800c6bc:	0801016c 	.word	0x0801016c
 800c6c0:	0800feb4 	.word	0x0800feb4
 800c6c4:	7ff00000 	.word	0x7ff00000
 800c6c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6ca:	1c55      	adds	r5, r2, #1
 800c6cc:	9517      	str	r5, [sp, #92]	; 0x5c
 800c6ce:	7852      	ldrb	r2, [r2, #1]
 800c6d0:	2a30      	cmp	r2, #48	; 0x30
 800c6d2:	d0f9      	beq.n	800c6c8 <_strtod_l+0x2b8>
 800c6d4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c6d8:	2d08      	cmp	r5, #8
 800c6da:	f63f af77 	bhi.w	800c5cc <_strtod_l+0x1bc>
 800c6de:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c6e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6e4:	9208      	str	r2, [sp, #32]
 800c6e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6e8:	1c55      	adds	r5, r2, #1
 800c6ea:	9517      	str	r5, [sp, #92]	; 0x5c
 800c6ec:	7852      	ldrb	r2, [r2, #1]
 800c6ee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c6f2:	2f09      	cmp	r7, #9
 800c6f4:	d937      	bls.n	800c766 <_strtod_l+0x356>
 800c6f6:	9f08      	ldr	r7, [sp, #32]
 800c6f8:	1bed      	subs	r5, r5, r7
 800c6fa:	2d08      	cmp	r5, #8
 800c6fc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c700:	dc02      	bgt.n	800c708 <_strtod_l+0x2f8>
 800c702:	4565      	cmp	r5, ip
 800c704:	bfa8      	it	ge
 800c706:	4665      	movge	r5, ip
 800c708:	f1be 0f00 	cmp.w	lr, #0
 800c70c:	d000      	beq.n	800c710 <_strtod_l+0x300>
 800c70e:	426d      	negs	r5, r5
 800c710:	2b00      	cmp	r3, #0
 800c712:	d14f      	bne.n	800c7b4 <_strtod_l+0x3a4>
 800c714:	9b06      	ldr	r3, [sp, #24]
 800c716:	4303      	orrs	r3, r0
 800c718:	f47f aebe 	bne.w	800c498 <_strtod_l+0x88>
 800c71c:	2900      	cmp	r1, #0
 800c71e:	f47f aed8 	bne.w	800c4d2 <_strtod_l+0xc2>
 800c722:	2a69      	cmp	r2, #105	; 0x69
 800c724:	d027      	beq.n	800c776 <_strtod_l+0x366>
 800c726:	dc24      	bgt.n	800c772 <_strtod_l+0x362>
 800c728:	2a49      	cmp	r2, #73	; 0x49
 800c72a:	d024      	beq.n	800c776 <_strtod_l+0x366>
 800c72c:	2a4e      	cmp	r2, #78	; 0x4e
 800c72e:	f47f aed0 	bne.w	800c4d2 <_strtod_l+0xc2>
 800c732:	499b      	ldr	r1, [pc, #620]	; (800c9a0 <_strtod_l+0x590>)
 800c734:	a817      	add	r0, sp, #92	; 0x5c
 800c736:	f002 f813 	bl	800e760 <__match>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	f43f aec9 	beq.w	800c4d2 <_strtod_l+0xc2>
 800c740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	2b28      	cmp	r3, #40	; 0x28
 800c746:	d12d      	bne.n	800c7a4 <_strtod_l+0x394>
 800c748:	4996      	ldr	r1, [pc, #600]	; (800c9a4 <_strtod_l+0x594>)
 800c74a:	aa1a      	add	r2, sp, #104	; 0x68
 800c74c:	a817      	add	r0, sp, #92	; 0x5c
 800c74e:	f002 f81b 	bl	800e788 <__hexnan>
 800c752:	2805      	cmp	r0, #5
 800c754:	d126      	bne.n	800c7a4 <_strtod_l+0x394>
 800c756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c758:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c75c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c760:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c764:	e698      	b.n	800c498 <_strtod_l+0x88>
 800c766:	250a      	movs	r5, #10
 800c768:	fb05 250c 	mla	r5, r5, ip, r2
 800c76c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c770:	e7b9      	b.n	800c6e6 <_strtod_l+0x2d6>
 800c772:	2a6e      	cmp	r2, #110	; 0x6e
 800c774:	e7db      	b.n	800c72e <_strtod_l+0x31e>
 800c776:	498c      	ldr	r1, [pc, #560]	; (800c9a8 <_strtod_l+0x598>)
 800c778:	a817      	add	r0, sp, #92	; 0x5c
 800c77a:	f001 fff1 	bl	800e760 <__match>
 800c77e:	2800      	cmp	r0, #0
 800c780:	f43f aea7 	beq.w	800c4d2 <_strtod_l+0xc2>
 800c784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c786:	4989      	ldr	r1, [pc, #548]	; (800c9ac <_strtod_l+0x59c>)
 800c788:	3b01      	subs	r3, #1
 800c78a:	a817      	add	r0, sp, #92	; 0x5c
 800c78c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c78e:	f001 ffe7 	bl	800e760 <__match>
 800c792:	b910      	cbnz	r0, 800c79a <_strtod_l+0x38a>
 800c794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c796:	3301      	adds	r3, #1
 800c798:	9317      	str	r3, [sp, #92]	; 0x5c
 800c79a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800c9c0 <_strtod_l+0x5b0>
 800c79e:	f04f 0800 	mov.w	r8, #0
 800c7a2:	e679      	b.n	800c498 <_strtod_l+0x88>
 800c7a4:	4882      	ldr	r0, [pc, #520]	; (800c9b0 <_strtod_l+0x5a0>)
 800c7a6:	f003 f93f 	bl	800fa28 <nan>
 800c7aa:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c7ae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c7b2:	e671      	b.n	800c498 <_strtod_l+0x88>
 800c7b4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800c7b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c7bc:	eba5 020b 	sub.w	r2, r5, fp
 800c7c0:	2e00      	cmp	r6, #0
 800c7c2:	bf08      	it	eq
 800c7c4:	461e      	moveq	r6, r3
 800c7c6:	2b10      	cmp	r3, #16
 800c7c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c7cc:	9206      	str	r2, [sp, #24]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	bfa8      	it	ge
 800c7d2:	2210      	movge	r2, #16
 800c7d4:	2b09      	cmp	r3, #9
 800c7d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800c7da:	dd0e      	ble.n	800c7fa <_strtod_l+0x3ea>
 800c7dc:	4975      	ldr	r1, [pc, #468]	; (800c9b4 <_strtod_l+0x5a4>)
 800c7de:	eddd 7a04 	vldr	s15, [sp, #16]
 800c7e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c7e6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800c7ea:	ed9d 5b08 	vldr	d5, [sp, #32]
 800c7ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c7f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c7f6:	ec59 8b17 	vmov	r8, r9, d7
 800c7fa:	2b0f      	cmp	r3, #15
 800c7fc:	dc37      	bgt.n	800c86e <_strtod_l+0x45e>
 800c7fe:	9906      	ldr	r1, [sp, #24]
 800c800:	2900      	cmp	r1, #0
 800c802:	f43f ae49 	beq.w	800c498 <_strtod_l+0x88>
 800c806:	dd23      	ble.n	800c850 <_strtod_l+0x440>
 800c808:	2916      	cmp	r1, #22
 800c80a:	dc0b      	bgt.n	800c824 <_strtod_l+0x414>
 800c80c:	4b69      	ldr	r3, [pc, #420]	; (800c9b4 <_strtod_l+0x5a4>)
 800c80e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c812:	ed93 7b00 	vldr	d7, [r3]
 800c816:	ec49 8b16 	vmov	d6, r8, r9
 800c81a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c81e:	ec59 8b17 	vmov	r8, r9, d7
 800c822:	e639      	b.n	800c498 <_strtod_l+0x88>
 800c824:	9806      	ldr	r0, [sp, #24]
 800c826:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c82a:	4281      	cmp	r1, r0
 800c82c:	db1f      	blt.n	800c86e <_strtod_l+0x45e>
 800c82e:	4a61      	ldr	r2, [pc, #388]	; (800c9b4 <_strtod_l+0x5a4>)
 800c830:	f1c3 030f 	rsb	r3, r3, #15
 800c834:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c838:	ed91 7b00 	vldr	d7, [r1]
 800c83c:	ec49 8b16 	vmov	d6, r8, r9
 800c840:	1ac3      	subs	r3, r0, r3
 800c842:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c846:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c84a:	ed92 6b00 	vldr	d6, [r2]
 800c84e:	e7e4      	b.n	800c81a <_strtod_l+0x40a>
 800c850:	9906      	ldr	r1, [sp, #24]
 800c852:	3116      	adds	r1, #22
 800c854:	db0b      	blt.n	800c86e <_strtod_l+0x45e>
 800c856:	4b57      	ldr	r3, [pc, #348]	; (800c9b4 <_strtod_l+0x5a4>)
 800c858:	ebab 0505 	sub.w	r5, fp, r5
 800c85c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c860:	ed95 7b00 	vldr	d7, [r5]
 800c864:	ec49 8b16 	vmov	d6, r8, r9
 800c868:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c86c:	e7d7      	b.n	800c81e <_strtod_l+0x40e>
 800c86e:	9906      	ldr	r1, [sp, #24]
 800c870:	1a9a      	subs	r2, r3, r2
 800c872:	440a      	add	r2, r1
 800c874:	2a00      	cmp	r2, #0
 800c876:	dd74      	ble.n	800c962 <_strtod_l+0x552>
 800c878:	f012 000f 	ands.w	r0, r2, #15
 800c87c:	d00a      	beq.n	800c894 <_strtod_l+0x484>
 800c87e:	494d      	ldr	r1, [pc, #308]	; (800c9b4 <_strtod_l+0x5a4>)
 800c880:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c884:	ed91 7b00 	vldr	d7, [r1]
 800c888:	ec49 8b16 	vmov	d6, r8, r9
 800c88c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c890:	ec59 8b17 	vmov	r8, r9, d7
 800c894:	f032 020f 	bics.w	r2, r2, #15
 800c898:	d04f      	beq.n	800c93a <_strtod_l+0x52a>
 800c89a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c89e:	dd22      	ble.n	800c8e6 <_strtod_l+0x4d6>
 800c8a0:	2500      	movs	r5, #0
 800c8a2:	462e      	mov	r6, r5
 800c8a4:	950a      	str	r5, [sp, #40]	; 0x28
 800c8a6:	462f      	mov	r7, r5
 800c8a8:	2322      	movs	r3, #34	; 0x22
 800c8aa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800c9c0 <_strtod_l+0x5b0>
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	f04f 0800 	mov.w	r8, #0
 800c8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f43f adee 	beq.w	800c498 <_strtod_l+0x88>
 800c8bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f002 f8c4 	bl	800ea4c <_Bfree>
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f002 f8c0 	bl	800ea4c <_Bfree>
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f002 f8bc 	bl	800ea4c <_Bfree>
 800c8d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f002 f8b8 	bl	800ea4c <_Bfree>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f002 f8b4 	bl	800ea4c <_Bfree>
 800c8e4:	e5d8      	b.n	800c498 <_strtod_l+0x88>
 800c8e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	4f32      	ldr	r7, [pc, #200]	; (800c9b8 <_strtod_l+0x5a8>)
 800c8ee:	1112      	asrs	r2, r2, #4
 800c8f0:	4601      	mov	r1, r0
 800c8f2:	2a01      	cmp	r2, #1
 800c8f4:	dc24      	bgt.n	800c940 <_strtod_l+0x530>
 800c8f6:	b108      	cbz	r0, 800c8fc <_strtod_l+0x4ec>
 800c8f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c8fc:	4a2e      	ldr	r2, [pc, #184]	; (800c9b8 <_strtod_l+0x5a8>)
 800c8fe:	482f      	ldr	r0, [pc, #188]	; (800c9bc <_strtod_l+0x5ac>)
 800c900:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c904:	ed91 7b00 	vldr	d7, [r1]
 800c908:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c90c:	ec49 8b16 	vmov	d6, r8, r9
 800c910:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c914:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c918:	9905      	ldr	r1, [sp, #20]
 800c91a:	4a29      	ldr	r2, [pc, #164]	; (800c9c0 <_strtod_l+0x5b0>)
 800c91c:	400a      	ands	r2, r1
 800c91e:	4282      	cmp	r2, r0
 800c920:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c924:	d8bc      	bhi.n	800c8a0 <_strtod_l+0x490>
 800c926:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c92a:	4282      	cmp	r2, r0
 800c92c:	bf86      	itte	hi
 800c92e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c9c4 <_strtod_l+0x5b4>
 800c932:	f04f 38ff 	movhi.w	r8, #4294967295
 800c936:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c93a:	2200      	movs	r2, #0
 800c93c:	9204      	str	r2, [sp, #16]
 800c93e:	e07f      	b.n	800ca40 <_strtod_l+0x630>
 800c940:	f012 0f01 	tst.w	r2, #1
 800c944:	d00a      	beq.n	800c95c <_strtod_l+0x54c>
 800c946:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800c94a:	ed90 7b00 	vldr	d7, [r0]
 800c94e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800c952:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c956:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c95a:	2001      	movs	r0, #1
 800c95c:	3101      	adds	r1, #1
 800c95e:	1052      	asrs	r2, r2, #1
 800c960:	e7c7      	b.n	800c8f2 <_strtod_l+0x4e2>
 800c962:	d0ea      	beq.n	800c93a <_strtod_l+0x52a>
 800c964:	4252      	negs	r2, r2
 800c966:	f012 000f 	ands.w	r0, r2, #15
 800c96a:	d00a      	beq.n	800c982 <_strtod_l+0x572>
 800c96c:	4911      	ldr	r1, [pc, #68]	; (800c9b4 <_strtod_l+0x5a4>)
 800c96e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c972:	ed91 7b00 	vldr	d7, [r1]
 800c976:	ec49 8b16 	vmov	d6, r8, r9
 800c97a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c97e:	ec59 8b17 	vmov	r8, r9, d7
 800c982:	1112      	asrs	r2, r2, #4
 800c984:	d0d9      	beq.n	800c93a <_strtod_l+0x52a>
 800c986:	2a1f      	cmp	r2, #31
 800c988:	dd1e      	ble.n	800c9c8 <_strtod_l+0x5b8>
 800c98a:	2500      	movs	r5, #0
 800c98c:	462e      	mov	r6, r5
 800c98e:	950a      	str	r5, [sp, #40]	; 0x28
 800c990:	462f      	mov	r7, r5
 800c992:	2322      	movs	r3, #34	; 0x22
 800c994:	f04f 0800 	mov.w	r8, #0
 800c998:	f04f 0900 	mov.w	r9, #0
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	e789      	b.n	800c8b4 <_strtod_l+0x4a4>
 800c9a0:	0800fe85 	.word	0x0800fe85
 800c9a4:	0800fec8 	.word	0x0800fec8
 800c9a8:	0800fe7d 	.word	0x0800fe7d
 800c9ac:	0801000c 	.word	0x0801000c
 800c9b0:	08010328 	.word	0x08010328
 800c9b4:	08010208 	.word	0x08010208
 800c9b8:	080101e0 	.word	0x080101e0
 800c9bc:	7ca00000 	.word	0x7ca00000
 800c9c0:	7ff00000 	.word	0x7ff00000
 800c9c4:	7fefffff 	.word	0x7fefffff
 800c9c8:	f012 0110 	ands.w	r1, r2, #16
 800c9cc:	bf18      	it	ne
 800c9ce:	216a      	movne	r1, #106	; 0x6a
 800c9d0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800c9d4:	9104      	str	r1, [sp, #16]
 800c9d6:	49c0      	ldr	r1, [pc, #768]	; (800ccd8 <_strtod_l+0x8c8>)
 800c9d8:	2000      	movs	r0, #0
 800c9da:	07d7      	lsls	r7, r2, #31
 800c9dc:	d508      	bpl.n	800c9f0 <_strtod_l+0x5e0>
 800c9de:	ed9d 6b08 	vldr	d6, [sp, #32]
 800c9e2:	ed91 7b00 	vldr	d7, [r1]
 800c9e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c9ea:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	1052      	asrs	r2, r2, #1
 800c9f2:	f101 0108 	add.w	r1, r1, #8
 800c9f6:	d1f0      	bne.n	800c9da <_strtod_l+0x5ca>
 800c9f8:	b108      	cbz	r0, 800c9fe <_strtod_l+0x5ee>
 800c9fa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800c9fe:	9a04      	ldr	r2, [sp, #16]
 800ca00:	b1ba      	cbz	r2, 800ca32 <_strtod_l+0x622>
 800ca02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ca06:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800ca0a:	2a00      	cmp	r2, #0
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	dd10      	ble.n	800ca32 <_strtod_l+0x622>
 800ca10:	2a1f      	cmp	r2, #31
 800ca12:	f340 8132 	ble.w	800cc7a <_strtod_l+0x86a>
 800ca16:	2a34      	cmp	r2, #52	; 0x34
 800ca18:	bfde      	ittt	le
 800ca1a:	3a20      	suble	r2, #32
 800ca1c:	f04f 30ff 	movle.w	r0, #4294967295
 800ca20:	fa00 f202 	lslle.w	r2, r0, r2
 800ca24:	f04f 0800 	mov.w	r8, #0
 800ca28:	bfcc      	ite	gt
 800ca2a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ca2e:	ea02 0901 	andle.w	r9, r2, r1
 800ca32:	ec49 8b17 	vmov	d7, r8, r9
 800ca36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca3e:	d0a4      	beq.n	800c98a <_strtod_l+0x57a>
 800ca40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca42:	9200      	str	r2, [sp, #0]
 800ca44:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca46:	4632      	mov	r2, r6
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f002 f86b 	bl	800eb24 <__s2b>
 800ca4e:	900a      	str	r0, [sp, #40]	; 0x28
 800ca50:	2800      	cmp	r0, #0
 800ca52:	f43f af25 	beq.w	800c8a0 <_strtod_l+0x490>
 800ca56:	9b06      	ldr	r3, [sp, #24]
 800ca58:	ebab 0505 	sub.w	r5, fp, r5
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfb4      	ite	lt
 800ca60:	462b      	movlt	r3, r5
 800ca62:	2300      	movge	r3, #0
 800ca64:	930c      	str	r3, [sp, #48]	; 0x30
 800ca66:	9b06      	ldr	r3, [sp, #24]
 800ca68:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800ccc0 <_strtod_l+0x8b0>
 800ca6c:	ed9f ab96 	vldr	d10, [pc, #600]	; 800ccc8 <_strtod_l+0x8b8>
 800ca70:	ed9f bb97 	vldr	d11, [pc, #604]	; 800ccd0 <_strtod_l+0x8c0>
 800ca74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ca78:	2500      	movs	r5, #0
 800ca7a:	9312      	str	r3, [sp, #72]	; 0x48
 800ca7c:	462e      	mov	r6, r5
 800ca7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca80:	4620      	mov	r0, r4
 800ca82:	6859      	ldr	r1, [r3, #4]
 800ca84:	f001 ffa2 	bl	800e9cc <_Balloc>
 800ca88:	4607      	mov	r7, r0
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	f43f af0c 	beq.w	800c8a8 <_strtod_l+0x498>
 800ca90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca92:	691a      	ldr	r2, [r3, #16]
 800ca94:	3202      	adds	r2, #2
 800ca96:	f103 010c 	add.w	r1, r3, #12
 800ca9a:	0092      	lsls	r2, r2, #2
 800ca9c:	300c      	adds	r0, #12
 800ca9e:	f7fe fd8d 	bl	800b5bc <memcpy>
 800caa2:	ec49 8b10 	vmov	d0, r8, r9
 800caa6:	aa1a      	add	r2, sp, #104	; 0x68
 800caa8:	a919      	add	r1, sp, #100	; 0x64
 800caaa:	4620      	mov	r0, r4
 800caac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800cab0:	f002 fb74 	bl	800f19c <__d2b>
 800cab4:	9018      	str	r0, [sp, #96]	; 0x60
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f43f aef6 	beq.w	800c8a8 <_strtod_l+0x498>
 800cabc:	2101      	movs	r1, #1
 800cabe:	4620      	mov	r0, r4
 800cac0:	f002 f8ca 	bl	800ec58 <__i2b>
 800cac4:	4606      	mov	r6, r0
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f aeee 	beq.w	800c8a8 <_strtod_l+0x498>
 800cacc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cace:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	bfab      	itete	ge
 800cad4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cad6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cad8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800cadc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800cae0:	bfac      	ite	ge
 800cae2:	eb03 0b02 	addge.w	fp, r3, r2
 800cae6:	eba2 0a03 	sublt.w	sl, r2, r3
 800caea:	9a04      	ldr	r2, [sp, #16]
 800caec:	1a9b      	subs	r3, r3, r2
 800caee:	440b      	add	r3, r1
 800caf0:	4a7a      	ldr	r2, [pc, #488]	; (800ccdc <_strtod_l+0x8cc>)
 800caf2:	3b01      	subs	r3, #1
 800caf4:	4293      	cmp	r3, r2
 800caf6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800cafa:	f280 80d1 	bge.w	800cca0 <_strtod_l+0x890>
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	2a1f      	cmp	r2, #31
 800cb02:	eba1 0102 	sub.w	r1, r1, r2
 800cb06:	f04f 0001 	mov.w	r0, #1
 800cb0a:	f300 80bd 	bgt.w	800cc88 <_strtod_l+0x878>
 800cb0e:	fa00 f302 	lsl.w	r3, r0, r2
 800cb12:	930e      	str	r3, [sp, #56]	; 0x38
 800cb14:	2300      	movs	r3, #0
 800cb16:	930d      	str	r3, [sp, #52]	; 0x34
 800cb18:	eb0b 0301 	add.w	r3, fp, r1
 800cb1c:	9a04      	ldr	r2, [sp, #16]
 800cb1e:	459b      	cmp	fp, r3
 800cb20:	448a      	add	sl, r1
 800cb22:	4492      	add	sl, r2
 800cb24:	465a      	mov	r2, fp
 800cb26:	bfa8      	it	ge
 800cb28:	461a      	movge	r2, r3
 800cb2a:	4552      	cmp	r2, sl
 800cb2c:	bfa8      	it	ge
 800cb2e:	4652      	movge	r2, sl
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	bfc2      	ittt	gt
 800cb34:	1a9b      	subgt	r3, r3, r2
 800cb36:	ebaa 0a02 	subgt.w	sl, sl, r2
 800cb3a:	ebab 0b02 	subgt.w	fp, fp, r2
 800cb3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	dd18      	ble.n	800cb76 <_strtod_l+0x766>
 800cb44:	4631      	mov	r1, r6
 800cb46:	4620      	mov	r0, r4
 800cb48:	9315      	str	r3, [sp, #84]	; 0x54
 800cb4a:	f002 f941 	bl	800edd0 <__pow5mult>
 800cb4e:	4606      	mov	r6, r0
 800cb50:	2800      	cmp	r0, #0
 800cb52:	f43f aea9 	beq.w	800c8a8 <_strtod_l+0x498>
 800cb56:	4601      	mov	r1, r0
 800cb58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f002 f892 	bl	800ec84 <__multiply>
 800cb60:	9014      	str	r0, [sp, #80]	; 0x50
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f43f aea0 	beq.w	800c8a8 <_strtod_l+0x498>
 800cb68:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f001 ff6e 	bl	800ea4c <_Bfree>
 800cb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb74:	9218      	str	r2, [sp, #96]	; 0x60
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f300 8097 	bgt.w	800ccaa <_strtod_l+0x89a>
 800cb7c:	9b06      	ldr	r3, [sp, #24]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	dd08      	ble.n	800cb94 <_strtod_l+0x784>
 800cb82:	4639      	mov	r1, r7
 800cb84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb86:	4620      	mov	r0, r4
 800cb88:	f002 f922 	bl	800edd0 <__pow5mult>
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f43f ae8a 	beq.w	800c8a8 <_strtod_l+0x498>
 800cb94:	f1ba 0f00 	cmp.w	sl, #0
 800cb98:	dd08      	ble.n	800cbac <_strtod_l+0x79c>
 800cb9a:	4639      	mov	r1, r7
 800cb9c:	4652      	mov	r2, sl
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f002 f970 	bl	800ee84 <__lshift>
 800cba4:	4607      	mov	r7, r0
 800cba6:	2800      	cmp	r0, #0
 800cba8:	f43f ae7e 	beq.w	800c8a8 <_strtod_l+0x498>
 800cbac:	f1bb 0f00 	cmp.w	fp, #0
 800cbb0:	dd08      	ble.n	800cbc4 <_strtod_l+0x7b4>
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	465a      	mov	r2, fp
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f002 f964 	bl	800ee84 <__lshift>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f43f ae72 	beq.w	800c8a8 <_strtod_l+0x498>
 800cbc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbc6:	463a      	mov	r2, r7
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f002 f9e3 	bl	800ef94 <__mdiff>
 800cbce:	4605      	mov	r5, r0
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	f43f ae69 	beq.w	800c8a8 <_strtod_l+0x498>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800cbdc:	60c3      	str	r3, [r0, #12]
 800cbde:	4631      	mov	r1, r6
 800cbe0:	f002 f9bc 	bl	800ef5c <__mcmp>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	da7f      	bge.n	800cce8 <_strtod_l+0x8d8>
 800cbe8:	ea5a 0308 	orrs.w	r3, sl, r8
 800cbec:	f040 80a5 	bne.w	800cd3a <_strtod_l+0x92a>
 800cbf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f040 80a0 	bne.w	800cd3a <_strtod_l+0x92a>
 800cbfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbfe:	0d1b      	lsrs	r3, r3, #20
 800cc00:	051b      	lsls	r3, r3, #20
 800cc02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cc06:	f240 8098 	bls.w	800cd3a <_strtod_l+0x92a>
 800cc0a:	696b      	ldr	r3, [r5, #20]
 800cc0c:	b91b      	cbnz	r3, 800cc16 <_strtod_l+0x806>
 800cc0e:	692b      	ldr	r3, [r5, #16]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	f340 8092 	ble.w	800cd3a <_strtod_l+0x92a>
 800cc16:	4629      	mov	r1, r5
 800cc18:	2201      	movs	r2, #1
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f002 f932 	bl	800ee84 <__lshift>
 800cc20:	4631      	mov	r1, r6
 800cc22:	4605      	mov	r5, r0
 800cc24:	f002 f99a 	bl	800ef5c <__mcmp>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f340 8086 	ble.w	800cd3a <_strtod_l+0x92a>
 800cc2e:	9904      	ldr	r1, [sp, #16]
 800cc30:	4a2b      	ldr	r2, [pc, #172]	; (800cce0 <_strtod_l+0x8d0>)
 800cc32:	464b      	mov	r3, r9
 800cc34:	2900      	cmp	r1, #0
 800cc36:	f000 80a1 	beq.w	800cd7c <_strtod_l+0x96c>
 800cc3a:	ea02 0109 	and.w	r1, r2, r9
 800cc3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cc42:	f300 809b 	bgt.w	800cd7c <_strtod_l+0x96c>
 800cc46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cc4a:	f77f aea2 	ble.w	800c992 <_strtod_l+0x582>
 800cc4e:	4a25      	ldr	r2, [pc, #148]	; (800cce4 <_strtod_l+0x8d4>)
 800cc50:	2300      	movs	r3, #0
 800cc52:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800cc56:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800cc5a:	ec49 8b17 	vmov	d7, r8, r9
 800cc5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc62:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc66:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	bf08      	it	eq
 800cc6e:	2322      	moveq	r3, #34	; 0x22
 800cc70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cc74:	bf08      	it	eq
 800cc76:	6023      	streq	r3, [r4, #0]
 800cc78:	e620      	b.n	800c8bc <_strtod_l+0x4ac>
 800cc7a:	f04f 31ff 	mov.w	r1, #4294967295
 800cc7e:	fa01 f202 	lsl.w	r2, r1, r2
 800cc82:	ea02 0808 	and.w	r8, r2, r8
 800cc86:	e6d4      	b.n	800ca32 <_strtod_l+0x622>
 800cc88:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cc8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cc90:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cc94:	33e2      	adds	r3, #226	; 0xe2
 800cc96:	fa00 f303 	lsl.w	r3, r0, r3
 800cc9a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800cc9e:	e73b      	b.n	800cb18 <_strtod_l+0x708>
 800cca0:	2000      	movs	r0, #0
 800cca2:	2301      	movs	r3, #1
 800cca4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800cca8:	e736      	b.n	800cb18 <_strtod_l+0x708>
 800ccaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ccac:	461a      	mov	r2, r3
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f002 f8e8 	bl	800ee84 <__lshift>
 800ccb4:	9018      	str	r0, [sp, #96]	; 0x60
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f47f af60 	bne.w	800cb7c <_strtod_l+0x76c>
 800ccbc:	e5f4      	b.n	800c8a8 <_strtod_l+0x498>
 800ccbe:	bf00      	nop
 800ccc0:	94a03595 	.word	0x94a03595
 800ccc4:	3fcfffff 	.word	0x3fcfffff
 800ccc8:	94a03595 	.word	0x94a03595
 800cccc:	3fdfffff 	.word	0x3fdfffff
 800ccd0:	35afe535 	.word	0x35afe535
 800ccd4:	3fe00000 	.word	0x3fe00000
 800ccd8:	0800fee0 	.word	0x0800fee0
 800ccdc:	fffffc02 	.word	0xfffffc02
 800cce0:	7ff00000 	.word	0x7ff00000
 800cce4:	39500000 	.word	0x39500000
 800cce8:	46cb      	mov	fp, r9
 800ccea:	d165      	bne.n	800cdb8 <_strtod_l+0x9a8>
 800ccec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccf0:	f1ba 0f00 	cmp.w	sl, #0
 800ccf4:	d02a      	beq.n	800cd4c <_strtod_l+0x93c>
 800ccf6:	4aaa      	ldr	r2, [pc, #680]	; (800cfa0 <_strtod_l+0xb90>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d12b      	bne.n	800cd54 <_strtod_l+0x944>
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	4641      	mov	r1, r8
 800cd00:	b1fb      	cbz	r3, 800cd42 <_strtod_l+0x932>
 800cd02:	4aa8      	ldr	r2, [pc, #672]	; (800cfa4 <_strtod_l+0xb94>)
 800cd04:	ea09 0202 	and.w	r2, r9, r2
 800cd08:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	d81a      	bhi.n	800cd48 <_strtod_l+0x938>
 800cd12:	0d12      	lsrs	r2, r2, #20
 800cd14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cd18:	fa00 f303 	lsl.w	r3, r0, r3
 800cd1c:	4299      	cmp	r1, r3
 800cd1e:	d119      	bne.n	800cd54 <_strtod_l+0x944>
 800cd20:	4ba1      	ldr	r3, [pc, #644]	; (800cfa8 <_strtod_l+0xb98>)
 800cd22:	459b      	cmp	fp, r3
 800cd24:	d102      	bne.n	800cd2c <_strtod_l+0x91c>
 800cd26:	3101      	adds	r1, #1
 800cd28:	f43f adbe 	beq.w	800c8a8 <_strtod_l+0x498>
 800cd2c:	4b9d      	ldr	r3, [pc, #628]	; (800cfa4 <_strtod_l+0xb94>)
 800cd2e:	ea0b 0303 	and.w	r3, fp, r3
 800cd32:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cd36:	f04f 0800 	mov.w	r8, #0
 800cd3a:	9b04      	ldr	r3, [sp, #16]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d186      	bne.n	800cc4e <_strtod_l+0x83e>
 800cd40:	e5bc      	b.n	800c8bc <_strtod_l+0x4ac>
 800cd42:	f04f 33ff 	mov.w	r3, #4294967295
 800cd46:	e7e9      	b.n	800cd1c <_strtod_l+0x90c>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	e7e7      	b.n	800cd1c <_strtod_l+0x90c>
 800cd4c:	ea53 0308 	orrs.w	r3, r3, r8
 800cd50:	f43f af6d 	beq.w	800cc2e <_strtod_l+0x81e>
 800cd54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd56:	b1db      	cbz	r3, 800cd90 <_strtod_l+0x980>
 800cd58:	ea13 0f0b 	tst.w	r3, fp
 800cd5c:	d0ed      	beq.n	800cd3a <_strtod_l+0x92a>
 800cd5e:	9a04      	ldr	r2, [sp, #16]
 800cd60:	4640      	mov	r0, r8
 800cd62:	4649      	mov	r1, r9
 800cd64:	f1ba 0f00 	cmp.w	sl, #0
 800cd68:	d016      	beq.n	800cd98 <_strtod_l+0x988>
 800cd6a:	f7ff fb37 	bl	800c3dc <sulp>
 800cd6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cd72:	ee37 7b00 	vadd.f64	d7, d7, d0
 800cd76:	ec59 8b17 	vmov	r8, r9, d7
 800cd7a:	e7de      	b.n	800cd3a <_strtod_l+0x92a>
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cd86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cd8a:	f04f 38ff 	mov.w	r8, #4294967295
 800cd8e:	e7d4      	b.n	800cd3a <_strtod_l+0x92a>
 800cd90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd92:	ea13 0f08 	tst.w	r3, r8
 800cd96:	e7e1      	b.n	800cd5c <_strtod_l+0x94c>
 800cd98:	f7ff fb20 	bl	800c3dc <sulp>
 800cd9c:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cda0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800cda4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cda8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800cdb4:	d1c1      	bne.n	800cd3a <_strtod_l+0x92a>
 800cdb6:	e5ec      	b.n	800c992 <_strtod_l+0x582>
 800cdb8:	4631      	mov	r1, r6
 800cdba:	4628      	mov	r0, r5
 800cdbc:	f002 fa4a 	bl	800f254 <__ratio>
 800cdc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cdc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdcc:	d867      	bhi.n	800ce9e <_strtod_l+0xa8e>
 800cdce:	f1ba 0f00 	cmp.w	sl, #0
 800cdd2:	d044      	beq.n	800ce5e <_strtod_l+0xa4e>
 800cdd4:	4b75      	ldr	r3, [pc, #468]	; (800cfac <_strtod_l+0xb9c>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800cddc:	4971      	ldr	r1, [pc, #452]	; (800cfa4 <_strtod_l+0xb94>)
 800cdde:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800cfb8 <_strtod_l+0xba8>
 800cde2:	ea0b 0001 	and.w	r0, fp, r1
 800cde6:	4560      	cmp	r0, ip
 800cde8:	900d      	str	r0, [sp, #52]	; 0x34
 800cdea:	f040 808b 	bne.w	800cf04 <_strtod_l+0xaf4>
 800cdee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdf2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cdf6:	ec49 8b10 	vmov	d0, r8, r9
 800cdfa:	ec43 2b1c 	vmov	d12, r2, r3
 800cdfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ce02:	f002 f94f 	bl	800f0a4 <__ulp>
 800ce06:	ec49 8b1d 	vmov	d13, r8, r9
 800ce0a:	eeac db00 	vfma.f64	d13, d12, d0
 800ce0e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800ce12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce14:	4963      	ldr	r1, [pc, #396]	; (800cfa4 <_strtod_l+0xb94>)
 800ce16:	4a66      	ldr	r2, [pc, #408]	; (800cfb0 <_strtod_l+0xba0>)
 800ce18:	4019      	ands	r1, r3
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800ce20:	d947      	bls.n	800ceb2 <_strtod_l+0xaa2>
 800ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d103      	bne.n	800ce34 <_strtod_l+0xa24>
 800ce2c:	9b08      	ldr	r3, [sp, #32]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	f43f ad3a 	beq.w	800c8a8 <_strtod_l+0x498>
 800ce34:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800cfa8 <_strtod_l+0xb98>
 800ce38:	f04f 38ff 	mov.w	r8, #4294967295
 800ce3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f001 fe04 	bl	800ea4c <_Bfree>
 800ce44:	4639      	mov	r1, r7
 800ce46:	4620      	mov	r0, r4
 800ce48:	f001 fe00 	bl	800ea4c <_Bfree>
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f001 fdfc 	bl	800ea4c <_Bfree>
 800ce54:	4629      	mov	r1, r5
 800ce56:	4620      	mov	r0, r4
 800ce58:	f001 fdf8 	bl	800ea4c <_Bfree>
 800ce5c:	e60f      	b.n	800ca7e <_strtod_l+0x66e>
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	d112      	bne.n	800ce8a <_strtod_l+0xa7a>
 800ce64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce68:	b9b3      	cbnz	r3, 800ce98 <_strtod_l+0xa88>
 800ce6a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ce6e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce76:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800ce7a:	d401      	bmi.n	800ce80 <_strtod_l+0xa70>
 800ce7c:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ce80:	eeb1 7b48 	vneg.f64	d7, d8
 800ce84:	ec53 2b17 	vmov	r2, r3, d7
 800ce88:	e7a8      	b.n	800cddc <_strtod_l+0x9cc>
 800ce8a:	f1b8 0f01 	cmp.w	r8, #1
 800ce8e:	d103      	bne.n	800ce98 <_strtod_l+0xa88>
 800ce90:	f1b9 0f00 	cmp.w	r9, #0
 800ce94:	f43f ad7d 	beq.w	800c992 <_strtod_l+0x582>
 800ce98:	4b46      	ldr	r3, [pc, #280]	; (800cfb4 <_strtod_l+0xba4>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	e79c      	b.n	800cdd8 <_strtod_l+0x9c8>
 800ce9e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cea2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cea6:	f1ba 0f00 	cmp.w	sl, #0
 800ceaa:	d0e9      	beq.n	800ce80 <_strtod_l+0xa70>
 800ceac:	ec53 2b18 	vmov	r2, r3, d8
 800ceb0:	e794      	b.n	800cddc <_strtod_l+0x9cc>
 800ceb2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ceb6:	9b04      	ldr	r3, [sp, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1bf      	bne.n	800ce3c <_strtod_l+0xa2c>
 800cebc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cec2:	0d1b      	lsrs	r3, r3, #20
 800cec4:	051b      	lsls	r3, r3, #20
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d1b8      	bne.n	800ce3c <_strtod_l+0xa2c>
 800ceca:	ec51 0b18 	vmov	r0, r1, d8
 800cece:	f7f3 fc4b 	bl	8000768 <__aeabi_d2lz>
 800ced2:	f7f3 fc03 	bl	80006dc <__aeabi_l2d>
 800ced6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceda:	ec41 0b17 	vmov	d7, r0, r1
 800cede:	ea43 0308 	orr.w	r3, r3, r8
 800cee2:	ea53 030a 	orrs.w	r3, r3, sl
 800cee6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ceea:	d03e      	beq.n	800cf6a <_strtod_l+0xb5a>
 800ceec:	eeb4 8bca 	vcmpe.f64	d8, d10
 800cef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef4:	f53f ace2 	bmi.w	800c8bc <_strtod_l+0x4ac>
 800cef8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf00:	dd9c      	ble.n	800ce3c <_strtod_l+0xa2c>
 800cf02:	e4db      	b.n	800c8bc <_strtod_l+0x4ac>
 800cf04:	9904      	ldr	r1, [sp, #16]
 800cf06:	b301      	cbz	r1, 800cf4a <_strtod_l+0xb3a>
 800cf08:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cf0a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800cf0e:	d81c      	bhi.n	800cf4a <_strtod_l+0xb3a>
 800cf10:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cf98 <_strtod_l+0xb88>
 800cf14:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1c:	d811      	bhi.n	800cf42 <_strtod_l+0xb32>
 800cf1e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cf22:	ee18 3a10 	vmov	r3, s16
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	bf38      	it	cc
 800cf2a:	2301      	movcc	r3, #1
 800cf2c:	ee08 3a10 	vmov	s16, r3
 800cf30:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cf34:	f1ba 0f00 	cmp.w	sl, #0
 800cf38:	d114      	bne.n	800cf64 <_strtod_l+0xb54>
 800cf3a:	eeb1 7b48 	vneg.f64	d7, d8
 800cf3e:	ec53 2b17 	vmov	r2, r3, d7
 800cf42:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cf44:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800cf48:	1a0b      	subs	r3, r1, r0
 800cf4a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cf4e:	ec43 2b1c 	vmov	d12, r2, r3
 800cf52:	f002 f8a7 	bl	800f0a4 <__ulp>
 800cf56:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cf5a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800cf5e:	ec59 8b17 	vmov	r8, r9, d7
 800cf62:	e7a8      	b.n	800ceb6 <_strtod_l+0xaa6>
 800cf64:	ec53 2b18 	vmov	r2, r3, d8
 800cf68:	e7eb      	b.n	800cf42 <_strtod_l+0xb32>
 800cf6a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf72:	f57f af63 	bpl.w	800ce3c <_strtod_l+0xa2c>
 800cf76:	e4a1      	b.n	800c8bc <_strtod_l+0x4ac>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	f7ff ba8d 	b.w	800c4a0 <_strtod_l+0x90>
 800cf86:	2a65      	cmp	r2, #101	; 0x65
 800cf88:	f43f ab89 	beq.w	800c69e <_strtod_l+0x28e>
 800cf8c:	2a45      	cmp	r2, #69	; 0x45
 800cf8e:	f43f ab86 	beq.w	800c69e <_strtod_l+0x28e>
 800cf92:	2101      	movs	r1, #1
 800cf94:	f7ff bbbe 	b.w	800c714 <_strtod_l+0x304>
 800cf98:	ffc00000 	.word	0xffc00000
 800cf9c:	41dfffff 	.word	0x41dfffff
 800cfa0:	000fffff 	.word	0x000fffff
 800cfa4:	7ff00000 	.word	0x7ff00000
 800cfa8:	7fefffff 	.word	0x7fefffff
 800cfac:	3ff00000 	.word	0x3ff00000
 800cfb0:	7c9fffff 	.word	0x7c9fffff
 800cfb4:	bff00000 	.word	0xbff00000
 800cfb8:	7fe00000 	.word	0x7fe00000

0800cfbc <_strtod_r>:
 800cfbc:	4b01      	ldr	r3, [pc, #4]	; (800cfc4 <_strtod_r+0x8>)
 800cfbe:	f7ff ba27 	b.w	800c410 <_strtod_l>
 800cfc2:	bf00      	nop
 800cfc4:	2400007c 	.word	0x2400007c

0800cfc8 <_strtol_l.isra.0>:
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfce:	d001      	beq.n	800cfd4 <_strtol_l.isra.0+0xc>
 800cfd0:	2b24      	cmp	r3, #36	; 0x24
 800cfd2:	d906      	bls.n	800cfe2 <_strtol_l.isra.0+0x1a>
 800cfd4:	f7fe fac8 	bl	800b568 <__errno>
 800cfd8:	2316      	movs	r3, #22
 800cfda:	6003      	str	r3, [r0, #0]
 800cfdc:	2000      	movs	r0, #0
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe2:	4f3a      	ldr	r7, [pc, #232]	; (800d0cc <_strtol_l.isra.0+0x104>)
 800cfe4:	468e      	mov	lr, r1
 800cfe6:	4676      	mov	r6, lr
 800cfe8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800cfec:	5de5      	ldrb	r5, [r4, r7]
 800cfee:	f015 0508 	ands.w	r5, r5, #8
 800cff2:	d1f8      	bne.n	800cfe6 <_strtol_l.isra.0+0x1e>
 800cff4:	2c2d      	cmp	r4, #45	; 0x2d
 800cff6:	d134      	bne.n	800d062 <_strtol_l.isra.0+0x9a>
 800cff8:	f89e 4000 	ldrb.w	r4, [lr]
 800cffc:	f04f 0801 	mov.w	r8, #1
 800d000:	f106 0e02 	add.w	lr, r6, #2
 800d004:	2b00      	cmp	r3, #0
 800d006:	d05c      	beq.n	800d0c2 <_strtol_l.isra.0+0xfa>
 800d008:	2b10      	cmp	r3, #16
 800d00a:	d10c      	bne.n	800d026 <_strtol_l.isra.0+0x5e>
 800d00c:	2c30      	cmp	r4, #48	; 0x30
 800d00e:	d10a      	bne.n	800d026 <_strtol_l.isra.0+0x5e>
 800d010:	f89e 4000 	ldrb.w	r4, [lr]
 800d014:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d018:	2c58      	cmp	r4, #88	; 0x58
 800d01a:	d14d      	bne.n	800d0b8 <_strtol_l.isra.0+0xf0>
 800d01c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d020:	2310      	movs	r3, #16
 800d022:	f10e 0e02 	add.w	lr, lr, #2
 800d026:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d02a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d02e:	2600      	movs	r6, #0
 800d030:	fbbc f9f3 	udiv	r9, ip, r3
 800d034:	4635      	mov	r5, r6
 800d036:	fb03 ca19 	mls	sl, r3, r9, ip
 800d03a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d03e:	2f09      	cmp	r7, #9
 800d040:	d818      	bhi.n	800d074 <_strtol_l.isra.0+0xac>
 800d042:	463c      	mov	r4, r7
 800d044:	42a3      	cmp	r3, r4
 800d046:	dd24      	ble.n	800d092 <_strtol_l.isra.0+0xca>
 800d048:	2e00      	cmp	r6, #0
 800d04a:	db1f      	blt.n	800d08c <_strtol_l.isra.0+0xc4>
 800d04c:	45a9      	cmp	r9, r5
 800d04e:	d31d      	bcc.n	800d08c <_strtol_l.isra.0+0xc4>
 800d050:	d101      	bne.n	800d056 <_strtol_l.isra.0+0x8e>
 800d052:	45a2      	cmp	sl, r4
 800d054:	db1a      	blt.n	800d08c <_strtol_l.isra.0+0xc4>
 800d056:	fb05 4503 	mla	r5, r5, r3, r4
 800d05a:	2601      	movs	r6, #1
 800d05c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d060:	e7eb      	b.n	800d03a <_strtol_l.isra.0+0x72>
 800d062:	2c2b      	cmp	r4, #43	; 0x2b
 800d064:	bf08      	it	eq
 800d066:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d06a:	46a8      	mov	r8, r5
 800d06c:	bf08      	it	eq
 800d06e:	f106 0e02 	addeq.w	lr, r6, #2
 800d072:	e7c7      	b.n	800d004 <_strtol_l.isra.0+0x3c>
 800d074:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d078:	2f19      	cmp	r7, #25
 800d07a:	d801      	bhi.n	800d080 <_strtol_l.isra.0+0xb8>
 800d07c:	3c37      	subs	r4, #55	; 0x37
 800d07e:	e7e1      	b.n	800d044 <_strtol_l.isra.0+0x7c>
 800d080:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d084:	2f19      	cmp	r7, #25
 800d086:	d804      	bhi.n	800d092 <_strtol_l.isra.0+0xca>
 800d088:	3c57      	subs	r4, #87	; 0x57
 800d08a:	e7db      	b.n	800d044 <_strtol_l.isra.0+0x7c>
 800d08c:	f04f 36ff 	mov.w	r6, #4294967295
 800d090:	e7e4      	b.n	800d05c <_strtol_l.isra.0+0x94>
 800d092:	2e00      	cmp	r6, #0
 800d094:	da05      	bge.n	800d0a2 <_strtol_l.isra.0+0xda>
 800d096:	2322      	movs	r3, #34	; 0x22
 800d098:	6003      	str	r3, [r0, #0]
 800d09a:	4665      	mov	r5, ip
 800d09c:	b942      	cbnz	r2, 800d0b0 <_strtol_l.isra.0+0xe8>
 800d09e:	4628      	mov	r0, r5
 800d0a0:	e79d      	b.n	800cfde <_strtol_l.isra.0+0x16>
 800d0a2:	f1b8 0f00 	cmp.w	r8, #0
 800d0a6:	d000      	beq.n	800d0aa <_strtol_l.isra.0+0xe2>
 800d0a8:	426d      	negs	r5, r5
 800d0aa:	2a00      	cmp	r2, #0
 800d0ac:	d0f7      	beq.n	800d09e <_strtol_l.isra.0+0xd6>
 800d0ae:	b10e      	cbz	r6, 800d0b4 <_strtol_l.isra.0+0xec>
 800d0b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d0b4:	6011      	str	r1, [r2, #0]
 800d0b6:	e7f2      	b.n	800d09e <_strtol_l.isra.0+0xd6>
 800d0b8:	2430      	movs	r4, #48	; 0x30
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1b3      	bne.n	800d026 <_strtol_l.isra.0+0x5e>
 800d0be:	2308      	movs	r3, #8
 800d0c0:	e7b1      	b.n	800d026 <_strtol_l.isra.0+0x5e>
 800d0c2:	2c30      	cmp	r4, #48	; 0x30
 800d0c4:	d0a4      	beq.n	800d010 <_strtol_l.isra.0+0x48>
 800d0c6:	230a      	movs	r3, #10
 800d0c8:	e7ad      	b.n	800d026 <_strtol_l.isra.0+0x5e>
 800d0ca:	bf00      	nop
 800d0cc:	0800ff09 	.word	0x0800ff09

0800d0d0 <_strtol_r>:
 800d0d0:	f7ff bf7a 	b.w	800cfc8 <_strtol_l.isra.0>

0800d0d4 <__swbuf_r>:
 800d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d6:	460e      	mov	r6, r1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	4605      	mov	r5, r0
 800d0dc:	b118      	cbz	r0, 800d0e6 <__swbuf_r+0x12>
 800d0de:	6983      	ldr	r3, [r0, #24]
 800d0e0:	b90b      	cbnz	r3, 800d0e6 <__swbuf_r+0x12>
 800d0e2:	f000 ffe1 	bl	800e0a8 <__sinit>
 800d0e6:	4b21      	ldr	r3, [pc, #132]	; (800d16c <__swbuf_r+0x98>)
 800d0e8:	429c      	cmp	r4, r3
 800d0ea:	d12b      	bne.n	800d144 <__swbuf_r+0x70>
 800d0ec:	686c      	ldr	r4, [r5, #4]
 800d0ee:	69a3      	ldr	r3, [r4, #24]
 800d0f0:	60a3      	str	r3, [r4, #8]
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	071a      	lsls	r2, r3, #28
 800d0f6:	d52f      	bpl.n	800d158 <__swbuf_r+0x84>
 800d0f8:	6923      	ldr	r3, [r4, #16]
 800d0fa:	b36b      	cbz	r3, 800d158 <__swbuf_r+0x84>
 800d0fc:	6923      	ldr	r3, [r4, #16]
 800d0fe:	6820      	ldr	r0, [r4, #0]
 800d100:	1ac0      	subs	r0, r0, r3
 800d102:	6963      	ldr	r3, [r4, #20]
 800d104:	b2f6      	uxtb	r6, r6
 800d106:	4283      	cmp	r3, r0
 800d108:	4637      	mov	r7, r6
 800d10a:	dc04      	bgt.n	800d116 <__swbuf_r+0x42>
 800d10c:	4621      	mov	r1, r4
 800d10e:	4628      	mov	r0, r5
 800d110:	f000 ff36 	bl	800df80 <_fflush_r>
 800d114:	bb30      	cbnz	r0, 800d164 <__swbuf_r+0x90>
 800d116:	68a3      	ldr	r3, [r4, #8]
 800d118:	3b01      	subs	r3, #1
 800d11a:	60a3      	str	r3, [r4, #8]
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	6022      	str	r2, [r4, #0]
 800d122:	701e      	strb	r6, [r3, #0]
 800d124:	6963      	ldr	r3, [r4, #20]
 800d126:	3001      	adds	r0, #1
 800d128:	4283      	cmp	r3, r0
 800d12a:	d004      	beq.n	800d136 <__swbuf_r+0x62>
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	07db      	lsls	r3, r3, #31
 800d130:	d506      	bpl.n	800d140 <__swbuf_r+0x6c>
 800d132:	2e0a      	cmp	r6, #10
 800d134:	d104      	bne.n	800d140 <__swbuf_r+0x6c>
 800d136:	4621      	mov	r1, r4
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 ff21 	bl	800df80 <_fflush_r>
 800d13e:	b988      	cbnz	r0, 800d164 <__swbuf_r+0x90>
 800d140:	4638      	mov	r0, r7
 800d142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <__swbuf_r+0x9c>)
 800d146:	429c      	cmp	r4, r3
 800d148:	d101      	bne.n	800d14e <__swbuf_r+0x7a>
 800d14a:	68ac      	ldr	r4, [r5, #8]
 800d14c:	e7cf      	b.n	800d0ee <__swbuf_r+0x1a>
 800d14e:	4b09      	ldr	r3, [pc, #36]	; (800d174 <__swbuf_r+0xa0>)
 800d150:	429c      	cmp	r4, r3
 800d152:	bf08      	it	eq
 800d154:	68ec      	ldreq	r4, [r5, #12]
 800d156:	e7ca      	b.n	800d0ee <__swbuf_r+0x1a>
 800d158:	4621      	mov	r1, r4
 800d15a:	4628      	mov	r0, r5
 800d15c:	f000 f80c 	bl	800d178 <__swsetup_r>
 800d160:	2800      	cmp	r0, #0
 800d162:	d0cb      	beq.n	800d0fc <__swbuf_r+0x28>
 800d164:	f04f 37ff 	mov.w	r7, #4294967295
 800d168:	e7ea      	b.n	800d140 <__swbuf_r+0x6c>
 800d16a:	bf00      	nop
 800d16c:	080100c0 	.word	0x080100c0
 800d170:	080100e0 	.word	0x080100e0
 800d174:	080100a0 	.word	0x080100a0

0800d178 <__swsetup_r>:
 800d178:	4b32      	ldr	r3, [pc, #200]	; (800d244 <__swsetup_r+0xcc>)
 800d17a:	b570      	push	{r4, r5, r6, lr}
 800d17c:	681d      	ldr	r5, [r3, #0]
 800d17e:	4606      	mov	r6, r0
 800d180:	460c      	mov	r4, r1
 800d182:	b125      	cbz	r5, 800d18e <__swsetup_r+0x16>
 800d184:	69ab      	ldr	r3, [r5, #24]
 800d186:	b913      	cbnz	r3, 800d18e <__swsetup_r+0x16>
 800d188:	4628      	mov	r0, r5
 800d18a:	f000 ff8d 	bl	800e0a8 <__sinit>
 800d18e:	4b2e      	ldr	r3, [pc, #184]	; (800d248 <__swsetup_r+0xd0>)
 800d190:	429c      	cmp	r4, r3
 800d192:	d10f      	bne.n	800d1b4 <__swsetup_r+0x3c>
 800d194:	686c      	ldr	r4, [r5, #4]
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d19c:	0719      	lsls	r1, r3, #28
 800d19e:	d42c      	bmi.n	800d1fa <__swsetup_r+0x82>
 800d1a0:	06dd      	lsls	r5, r3, #27
 800d1a2:	d411      	bmi.n	800d1c8 <__swsetup_r+0x50>
 800d1a4:	2309      	movs	r3, #9
 800d1a6:	6033      	str	r3, [r6, #0]
 800d1a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b2:	e03e      	b.n	800d232 <__swsetup_r+0xba>
 800d1b4:	4b25      	ldr	r3, [pc, #148]	; (800d24c <__swsetup_r+0xd4>)
 800d1b6:	429c      	cmp	r4, r3
 800d1b8:	d101      	bne.n	800d1be <__swsetup_r+0x46>
 800d1ba:	68ac      	ldr	r4, [r5, #8]
 800d1bc:	e7eb      	b.n	800d196 <__swsetup_r+0x1e>
 800d1be:	4b24      	ldr	r3, [pc, #144]	; (800d250 <__swsetup_r+0xd8>)
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	bf08      	it	eq
 800d1c4:	68ec      	ldreq	r4, [r5, #12]
 800d1c6:	e7e6      	b.n	800d196 <__swsetup_r+0x1e>
 800d1c8:	0758      	lsls	r0, r3, #29
 800d1ca:	d512      	bpl.n	800d1f2 <__swsetup_r+0x7a>
 800d1cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1ce:	b141      	cbz	r1, 800d1e2 <__swsetup_r+0x6a>
 800d1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1d4:	4299      	cmp	r1, r3
 800d1d6:	d002      	beq.n	800d1de <__swsetup_r+0x66>
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f002 f8c3 	bl	800f364 <_free_r>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	6363      	str	r3, [r4, #52]	; 0x34
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	6063      	str	r3, [r4, #4]
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	f043 0308 	orr.w	r3, r3, #8
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	b94b      	cbnz	r3, 800d212 <__swsetup_r+0x9a>
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d208:	d003      	beq.n	800d212 <__swsetup_r+0x9a>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4630      	mov	r0, r6
 800d20e:	f001 fb83 	bl	800e918 <__smakebuf_r>
 800d212:	89a0      	ldrh	r0, [r4, #12]
 800d214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d218:	f010 0301 	ands.w	r3, r0, #1
 800d21c:	d00a      	beq.n	800d234 <__swsetup_r+0xbc>
 800d21e:	2300      	movs	r3, #0
 800d220:	60a3      	str	r3, [r4, #8]
 800d222:	6963      	ldr	r3, [r4, #20]
 800d224:	425b      	negs	r3, r3
 800d226:	61a3      	str	r3, [r4, #24]
 800d228:	6923      	ldr	r3, [r4, #16]
 800d22a:	b943      	cbnz	r3, 800d23e <__swsetup_r+0xc6>
 800d22c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d230:	d1ba      	bne.n	800d1a8 <__swsetup_r+0x30>
 800d232:	bd70      	pop	{r4, r5, r6, pc}
 800d234:	0781      	lsls	r1, r0, #30
 800d236:	bf58      	it	pl
 800d238:	6963      	ldrpl	r3, [r4, #20]
 800d23a:	60a3      	str	r3, [r4, #8]
 800d23c:	e7f4      	b.n	800d228 <__swsetup_r+0xb0>
 800d23e:	2000      	movs	r0, #0
 800d240:	e7f7      	b.n	800d232 <__swsetup_r+0xba>
 800d242:	bf00      	nop
 800d244:	24000014 	.word	0x24000014
 800d248:	080100c0 	.word	0x080100c0
 800d24c:	080100e0 	.word	0x080100e0
 800d250:	080100a0 	.word	0x080100a0

0800d254 <quorem>:
 800d254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d258:	6903      	ldr	r3, [r0, #16]
 800d25a:	690c      	ldr	r4, [r1, #16]
 800d25c:	42a3      	cmp	r3, r4
 800d25e:	4607      	mov	r7, r0
 800d260:	f2c0 8081 	blt.w	800d366 <quorem+0x112>
 800d264:	3c01      	subs	r4, #1
 800d266:	f101 0814 	add.w	r8, r1, #20
 800d26a:	f100 0514 	add.w	r5, r0, #20
 800d26e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d278:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d27c:	3301      	adds	r3, #1
 800d27e:	429a      	cmp	r2, r3
 800d280:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d284:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d288:	fbb2 f6f3 	udiv	r6, r2, r3
 800d28c:	d331      	bcc.n	800d2f2 <quorem+0x9e>
 800d28e:	f04f 0e00 	mov.w	lr, #0
 800d292:	4640      	mov	r0, r8
 800d294:	46ac      	mov	ip, r5
 800d296:	46f2      	mov	sl, lr
 800d298:	f850 2b04 	ldr.w	r2, [r0], #4
 800d29c:	b293      	uxth	r3, r2
 800d29e:	fb06 e303 	mla	r3, r6, r3, lr
 800d2a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	ebaa 0303 	sub.w	r3, sl, r3
 800d2ac:	0c12      	lsrs	r2, r2, #16
 800d2ae:	f8dc a000 	ldr.w	sl, [ip]
 800d2b2:	fb06 e202 	mla	r2, r6, r2, lr
 800d2b6:	fa13 f38a 	uxtah	r3, r3, sl
 800d2ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2be:	fa1f fa82 	uxth.w	sl, r2
 800d2c2:	f8dc 2000 	ldr.w	r2, [ip]
 800d2c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d2ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2d4:	4581      	cmp	r9, r0
 800d2d6:	f84c 3b04 	str.w	r3, [ip], #4
 800d2da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d2de:	d2db      	bcs.n	800d298 <quorem+0x44>
 800d2e0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d2e4:	b92b      	cbnz	r3, 800d2f2 <quorem+0x9e>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	3b04      	subs	r3, #4
 800d2ea:	429d      	cmp	r5, r3
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	d32e      	bcc.n	800d34e <quorem+0xfa>
 800d2f0:	613c      	str	r4, [r7, #16]
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	f001 fe32 	bl	800ef5c <__mcmp>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	db24      	blt.n	800d346 <quorem+0xf2>
 800d2fc:	3601      	adds	r6, #1
 800d2fe:	4628      	mov	r0, r5
 800d300:	f04f 0c00 	mov.w	ip, #0
 800d304:	f858 2b04 	ldr.w	r2, [r8], #4
 800d308:	f8d0 e000 	ldr.w	lr, [r0]
 800d30c:	b293      	uxth	r3, r2
 800d30e:	ebac 0303 	sub.w	r3, ip, r3
 800d312:	0c12      	lsrs	r2, r2, #16
 800d314:	fa13 f38e 	uxtah	r3, r3, lr
 800d318:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d31c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d320:	b29b      	uxth	r3, r3
 800d322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d326:	45c1      	cmp	r9, r8
 800d328:	f840 3b04 	str.w	r3, [r0], #4
 800d32c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d330:	d2e8      	bcs.n	800d304 <quorem+0xb0>
 800d332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d33a:	b922      	cbnz	r2, 800d346 <quorem+0xf2>
 800d33c:	3b04      	subs	r3, #4
 800d33e:	429d      	cmp	r5, r3
 800d340:	461a      	mov	r2, r3
 800d342:	d30a      	bcc.n	800d35a <quorem+0x106>
 800d344:	613c      	str	r4, [r7, #16]
 800d346:	4630      	mov	r0, r6
 800d348:	b003      	add	sp, #12
 800d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34e:	6812      	ldr	r2, [r2, #0]
 800d350:	3b04      	subs	r3, #4
 800d352:	2a00      	cmp	r2, #0
 800d354:	d1cc      	bne.n	800d2f0 <quorem+0x9c>
 800d356:	3c01      	subs	r4, #1
 800d358:	e7c7      	b.n	800d2ea <quorem+0x96>
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	3b04      	subs	r3, #4
 800d35e:	2a00      	cmp	r2, #0
 800d360:	d1f0      	bne.n	800d344 <quorem+0xf0>
 800d362:	3c01      	subs	r4, #1
 800d364:	e7eb      	b.n	800d33e <quorem+0xea>
 800d366:	2000      	movs	r0, #0
 800d368:	e7ee      	b.n	800d348 <quorem+0xf4>
 800d36a:	0000      	movs	r0, r0
 800d36c:	0000      	movs	r0, r0
	...

0800d370 <_dtoa_r>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ec59 8b10 	vmov	r8, r9, d0
 800d378:	b095      	sub	sp, #84	; 0x54
 800d37a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d37c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d37e:	9107      	str	r1, [sp, #28]
 800d380:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d384:	4606      	mov	r6, r0
 800d386:	9209      	str	r2, [sp, #36]	; 0x24
 800d388:	9310      	str	r3, [sp, #64]	; 0x40
 800d38a:	b975      	cbnz	r5, 800d3aa <_dtoa_r+0x3a>
 800d38c:	2010      	movs	r0, #16
 800d38e:	f001 fb03 	bl	800e998 <malloc>
 800d392:	4602      	mov	r2, r0
 800d394:	6270      	str	r0, [r6, #36]	; 0x24
 800d396:	b920      	cbnz	r0, 800d3a2 <_dtoa_r+0x32>
 800d398:	4bab      	ldr	r3, [pc, #684]	; (800d648 <_dtoa_r+0x2d8>)
 800d39a:	21ea      	movs	r1, #234	; 0xea
 800d39c:	48ab      	ldr	r0, [pc, #684]	; (800d64c <_dtoa_r+0x2dc>)
 800d39e:	f002 fbcf 	bl	800fb40 <__assert_func>
 800d3a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3a6:	6005      	str	r5, [r0, #0]
 800d3a8:	60c5      	str	r5, [r0, #12]
 800d3aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d3ac:	6819      	ldr	r1, [r3, #0]
 800d3ae:	b151      	cbz	r1, 800d3c6 <_dtoa_r+0x56>
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	604a      	str	r2, [r1, #4]
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4093      	lsls	r3, r2
 800d3b8:	608b      	str	r3, [r1, #8]
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f001 fb46 	bl	800ea4c <_Bfree>
 800d3c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	f1b9 0300 	subs.w	r3, r9, #0
 800d3ca:	bfbb      	ittet	lt
 800d3cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3d0:	9303      	strlt	r3, [sp, #12]
 800d3d2:	2300      	movge	r3, #0
 800d3d4:	2201      	movlt	r2, #1
 800d3d6:	bfac      	ite	ge
 800d3d8:	6023      	strge	r3, [r4, #0]
 800d3da:	6022      	strlt	r2, [r4, #0]
 800d3dc:	4b9c      	ldr	r3, [pc, #624]	; (800d650 <_dtoa_r+0x2e0>)
 800d3de:	9c03      	ldr	r4, [sp, #12]
 800d3e0:	43a3      	bics	r3, r4
 800d3e2:	d11a      	bne.n	800d41a <_dtoa_r+0xaa>
 800d3e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d3f0:	ea53 0308 	orrs.w	r3, r3, r8
 800d3f4:	f000 8512 	beq.w	800de1c <_dtoa_r+0xaac>
 800d3f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3fa:	b953      	cbnz	r3, 800d412 <_dtoa_r+0xa2>
 800d3fc:	4b95      	ldr	r3, [pc, #596]	; (800d654 <_dtoa_r+0x2e4>)
 800d3fe:	e01f      	b.n	800d440 <_dtoa_r+0xd0>
 800d400:	4b95      	ldr	r3, [pc, #596]	; (800d658 <_dtoa_r+0x2e8>)
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	3308      	adds	r3, #8
 800d406:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d408:	6013      	str	r3, [r2, #0]
 800d40a:	9800      	ldr	r0, [sp, #0]
 800d40c:	b015      	add	sp, #84	; 0x54
 800d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d412:	4b90      	ldr	r3, [pc, #576]	; (800d654 <_dtoa_r+0x2e4>)
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	3303      	adds	r3, #3
 800d418:	e7f5      	b.n	800d406 <_dtoa_r+0x96>
 800d41a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d41e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d426:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d42a:	d10b      	bne.n	800d444 <_dtoa_r+0xd4>
 800d42c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d42e:	2301      	movs	r3, #1
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 84ee 	beq.w	800de16 <_dtoa_r+0xaa6>
 800d43a:	4888      	ldr	r0, [pc, #544]	; (800d65c <_dtoa_r+0x2ec>)
 800d43c:	6018      	str	r0, [r3, #0]
 800d43e:	1e43      	subs	r3, r0, #1
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	e7e2      	b.n	800d40a <_dtoa_r+0x9a>
 800d444:	a913      	add	r1, sp, #76	; 0x4c
 800d446:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d44a:	aa12      	add	r2, sp, #72	; 0x48
 800d44c:	4630      	mov	r0, r6
 800d44e:	f001 fea5 	bl	800f19c <__d2b>
 800d452:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d456:	4605      	mov	r5, r0
 800d458:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d45a:	2900      	cmp	r1, #0
 800d45c:	d047      	beq.n	800d4ee <_dtoa_r+0x17e>
 800d45e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d460:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d464:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d468:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d46c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d470:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d474:	2400      	movs	r4, #0
 800d476:	ec43 2b16 	vmov	d6, r2, r3
 800d47a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d47e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d630 <_dtoa_r+0x2c0>
 800d482:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d486:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d638 <_dtoa_r+0x2c8>
 800d48a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d48e:	eeb0 7b46 	vmov.f64	d7, d6
 800d492:	ee06 1a90 	vmov	s13, r1
 800d496:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d49a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d640 <_dtoa_r+0x2d0>
 800d49e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d4a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d4a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ae:	ee16 ba90 	vmov	fp, s13
 800d4b2:	9411      	str	r4, [sp, #68]	; 0x44
 800d4b4:	d508      	bpl.n	800d4c8 <_dtoa_r+0x158>
 800d4b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d4ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c2:	bf18      	it	ne
 800d4c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d4c8:	f1bb 0f16 	cmp.w	fp, #22
 800d4cc:	d832      	bhi.n	800d534 <_dtoa_r+0x1c4>
 800d4ce:	4b64      	ldr	r3, [pc, #400]	; (800d660 <_dtoa_r+0x2f0>)
 800d4d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d4d4:	ed93 7b00 	vldr	d7, [r3]
 800d4d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d4dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e4:	d501      	bpl.n	800d4ea <_dtoa_r+0x17a>
 800d4e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e023      	b.n	800d536 <_dtoa_r+0x1c6>
 800d4ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d4f0:	4401      	add	r1, r0
 800d4f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d4f6:	2b20      	cmp	r3, #32
 800d4f8:	bfc3      	ittte	gt
 800d4fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d4fe:	fa04 f303 	lslgt.w	r3, r4, r3
 800d502:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d506:	f1c3 0320 	rsble	r3, r3, #32
 800d50a:	bfc6      	itte	gt
 800d50c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d510:	ea43 0308 	orrgt.w	r3, r3, r8
 800d514:	fa08 f303 	lslle.w	r3, r8, r3
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d520:	3901      	subs	r1, #1
 800d522:	ed8d 7b00 	vstr	d7, [sp]
 800d526:	9c01      	ldr	r4, [sp, #4]
 800d528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d52c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d530:	2401      	movs	r4, #1
 800d532:	e7a0      	b.n	800d476 <_dtoa_r+0x106>
 800d534:	2301      	movs	r3, #1
 800d536:	930f      	str	r3, [sp, #60]	; 0x3c
 800d538:	1a43      	subs	r3, r0, r1
 800d53a:	1e5a      	subs	r2, r3, #1
 800d53c:	bf45      	ittet	mi
 800d53e:	f1c3 0301 	rsbmi	r3, r3, #1
 800d542:	9305      	strmi	r3, [sp, #20]
 800d544:	2300      	movpl	r3, #0
 800d546:	2300      	movmi	r3, #0
 800d548:	9206      	str	r2, [sp, #24]
 800d54a:	bf54      	ite	pl
 800d54c:	9305      	strpl	r3, [sp, #20]
 800d54e:	9306      	strmi	r3, [sp, #24]
 800d550:	f1bb 0f00 	cmp.w	fp, #0
 800d554:	db18      	blt.n	800d588 <_dtoa_r+0x218>
 800d556:	9b06      	ldr	r3, [sp, #24]
 800d558:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d55c:	445b      	add	r3, fp
 800d55e:	9306      	str	r3, [sp, #24]
 800d560:	2300      	movs	r3, #0
 800d562:	9a07      	ldr	r2, [sp, #28]
 800d564:	2a09      	cmp	r2, #9
 800d566:	d849      	bhi.n	800d5fc <_dtoa_r+0x28c>
 800d568:	2a05      	cmp	r2, #5
 800d56a:	bfc4      	itt	gt
 800d56c:	3a04      	subgt	r2, #4
 800d56e:	9207      	strgt	r2, [sp, #28]
 800d570:	9a07      	ldr	r2, [sp, #28]
 800d572:	f1a2 0202 	sub.w	r2, r2, #2
 800d576:	bfcc      	ite	gt
 800d578:	2400      	movgt	r4, #0
 800d57a:	2401      	movle	r4, #1
 800d57c:	2a03      	cmp	r2, #3
 800d57e:	d848      	bhi.n	800d612 <_dtoa_r+0x2a2>
 800d580:	e8df f002 	tbb	[pc, r2]
 800d584:	3a2c2e0b 	.word	0x3a2c2e0b
 800d588:	9b05      	ldr	r3, [sp, #20]
 800d58a:	2200      	movs	r2, #0
 800d58c:	eba3 030b 	sub.w	r3, r3, fp
 800d590:	9305      	str	r3, [sp, #20]
 800d592:	920e      	str	r2, [sp, #56]	; 0x38
 800d594:	f1cb 0300 	rsb	r3, fp, #0
 800d598:	e7e3      	b.n	800d562 <_dtoa_r+0x1f2>
 800d59a:	2200      	movs	r2, #0
 800d59c:	9208      	str	r2, [sp, #32]
 800d59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a0:	2a00      	cmp	r2, #0
 800d5a2:	dc39      	bgt.n	800d618 <_dtoa_r+0x2a8>
 800d5a4:	f04f 0a01 	mov.w	sl, #1
 800d5a8:	46d1      	mov	r9, sl
 800d5aa:	4652      	mov	r2, sl
 800d5ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d5b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	6079      	str	r1, [r7, #4]
 800d5b6:	2004      	movs	r0, #4
 800d5b8:	f100 0c14 	add.w	ip, r0, #20
 800d5bc:	4594      	cmp	ip, r2
 800d5be:	6879      	ldr	r1, [r7, #4]
 800d5c0:	d92f      	bls.n	800d622 <_dtoa_r+0x2b2>
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	930c      	str	r3, [sp, #48]	; 0x30
 800d5c6:	f001 fa01 	bl	800e9cc <_Balloc>
 800d5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5cc:	9000      	str	r0, [sp, #0]
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d149      	bne.n	800d668 <_dtoa_r+0x2f8>
 800d5d4:	4b23      	ldr	r3, [pc, #140]	; (800d664 <_dtoa_r+0x2f4>)
 800d5d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d5da:	e6df      	b.n	800d39c <_dtoa_r+0x2c>
 800d5dc:	2201      	movs	r2, #1
 800d5de:	e7dd      	b.n	800d59c <_dtoa_r+0x22c>
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	9208      	str	r2, [sp, #32]
 800d5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5e6:	eb0b 0a02 	add.w	sl, fp, r2
 800d5ea:	f10a 0901 	add.w	r9, sl, #1
 800d5ee:	464a      	mov	r2, r9
 800d5f0:	2a01      	cmp	r2, #1
 800d5f2:	bfb8      	it	lt
 800d5f4:	2201      	movlt	r2, #1
 800d5f6:	e7db      	b.n	800d5b0 <_dtoa_r+0x240>
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	e7f2      	b.n	800d5e2 <_dtoa_r+0x272>
 800d5fc:	2401      	movs	r4, #1
 800d5fe:	2200      	movs	r2, #0
 800d600:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d604:	f04f 3aff 	mov.w	sl, #4294967295
 800d608:	2100      	movs	r1, #0
 800d60a:	46d1      	mov	r9, sl
 800d60c:	2212      	movs	r2, #18
 800d60e:	9109      	str	r1, [sp, #36]	; 0x24
 800d610:	e7ce      	b.n	800d5b0 <_dtoa_r+0x240>
 800d612:	2201      	movs	r2, #1
 800d614:	9208      	str	r2, [sp, #32]
 800d616:	e7f5      	b.n	800d604 <_dtoa_r+0x294>
 800d618:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d61c:	46d1      	mov	r9, sl
 800d61e:	4652      	mov	r2, sl
 800d620:	e7c6      	b.n	800d5b0 <_dtoa_r+0x240>
 800d622:	3101      	adds	r1, #1
 800d624:	6079      	str	r1, [r7, #4]
 800d626:	0040      	lsls	r0, r0, #1
 800d628:	e7c6      	b.n	800d5b8 <_dtoa_r+0x248>
 800d62a:	bf00      	nop
 800d62c:	f3af 8000 	nop.w
 800d630:	636f4361 	.word	0x636f4361
 800d634:	3fd287a7 	.word	0x3fd287a7
 800d638:	8b60c8b3 	.word	0x8b60c8b3
 800d63c:	3fc68a28 	.word	0x3fc68a28
 800d640:	509f79fb 	.word	0x509f79fb
 800d644:	3fd34413 	.word	0x3fd34413
 800d648:	08010016 	.word	0x08010016
 800d64c:	0801002d 	.word	0x0801002d
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	08010012 	.word	0x08010012
 800d658:	08010009 	.word	0x08010009
 800d65c:	0800fe89 	.word	0x0800fe89
 800d660:	08010208 	.word	0x08010208
 800d664:	0801008c 	.word	0x0801008c
 800d668:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d66a:	9900      	ldr	r1, [sp, #0]
 800d66c:	6011      	str	r1, [r2, #0]
 800d66e:	f1b9 0f0e 	cmp.w	r9, #14
 800d672:	d872      	bhi.n	800d75a <_dtoa_r+0x3ea>
 800d674:	2c00      	cmp	r4, #0
 800d676:	d070      	beq.n	800d75a <_dtoa_r+0x3ea>
 800d678:	f1bb 0f00 	cmp.w	fp, #0
 800d67c:	f340 80a6 	ble.w	800d7cc <_dtoa_r+0x45c>
 800d680:	49ca      	ldr	r1, [pc, #808]	; (800d9ac <_dtoa_r+0x63c>)
 800d682:	f00b 020f 	and.w	r2, fp, #15
 800d686:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d68a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d68e:	ed92 7b00 	vldr	d7, [r2]
 800d692:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d696:	f000 808d 	beq.w	800d7b4 <_dtoa_r+0x444>
 800d69a:	4ac5      	ldr	r2, [pc, #788]	; (800d9b0 <_dtoa_r+0x640>)
 800d69c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d6a0:	ed92 6b08 	vldr	d6, [r2, #32]
 800d6a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d6a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d6ac:	f001 010f 	and.w	r1, r1, #15
 800d6b0:	2203      	movs	r2, #3
 800d6b2:	48bf      	ldr	r0, [pc, #764]	; (800d9b0 <_dtoa_r+0x640>)
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	d17f      	bne.n	800d7b8 <_dtoa_r+0x448>
 800d6b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	f000 80b2 	beq.w	800d830 <_dtoa_r+0x4c0>
 800d6cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d6d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6dc:	f140 80a8 	bpl.w	800d830 <_dtoa_r+0x4c0>
 800d6e0:	f1b9 0f00 	cmp.w	r9, #0
 800d6e4:	f000 80a4 	beq.w	800d830 <_dtoa_r+0x4c0>
 800d6e8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ec:	dd31      	ble.n	800d752 <_dtoa_r+0x3e2>
 800d6ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d6f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d6fe:	3201      	adds	r2, #1
 800d700:	4650      	mov	r0, sl
 800d702:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d706:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d70a:	ee07 2a90 	vmov	s15, r2
 800d70e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d712:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d716:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d71a:	9c03      	ldr	r4, [sp, #12]
 800d71c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d720:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d724:	2800      	cmp	r0, #0
 800d726:	f040 8086 	bne.w	800d836 <_dtoa_r+0x4c6>
 800d72a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d72e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d732:	ec42 1b17 	vmov	d7, r1, r2
 800d736:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73e:	f300 8272 	bgt.w	800dc26 <_dtoa_r+0x8b6>
 800d742:	eeb1 7b47 	vneg.f64	d7, d7
 800d746:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74e:	f100 8267 	bmi.w	800dc20 <_dtoa_r+0x8b0>
 800d752:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d756:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d75a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d75c:	2a00      	cmp	r2, #0
 800d75e:	f2c0 8129 	blt.w	800d9b4 <_dtoa_r+0x644>
 800d762:	f1bb 0f0e 	cmp.w	fp, #14
 800d766:	f300 8125 	bgt.w	800d9b4 <_dtoa_r+0x644>
 800d76a:	4b90      	ldr	r3, [pc, #576]	; (800d9ac <_dtoa_r+0x63c>)
 800d76c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d770:	ed93 6b00 	vldr	d6, [r3]
 800d774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d776:	2b00      	cmp	r3, #0
 800d778:	f280 80c3 	bge.w	800d902 <_dtoa_r+0x592>
 800d77c:	f1b9 0f00 	cmp.w	r9, #0
 800d780:	f300 80bf 	bgt.w	800d902 <_dtoa_r+0x592>
 800d784:	f040 824c 	bne.w	800dc20 <_dtoa_r+0x8b0>
 800d788:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d78c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d790:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d794:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79c:	464c      	mov	r4, r9
 800d79e:	464f      	mov	r7, r9
 800d7a0:	f280 8222 	bge.w	800dbe8 <_dtoa_r+0x878>
 800d7a4:	f8dd 8000 	ldr.w	r8, [sp]
 800d7a8:	2331      	movs	r3, #49	; 0x31
 800d7aa:	f808 3b01 	strb.w	r3, [r8], #1
 800d7ae:	f10b 0b01 	add.w	fp, fp, #1
 800d7b2:	e21e      	b.n	800dbf2 <_dtoa_r+0x882>
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	e77c      	b.n	800d6b2 <_dtoa_r+0x342>
 800d7b8:	07cc      	lsls	r4, r1, #31
 800d7ba:	d504      	bpl.n	800d7c6 <_dtoa_r+0x456>
 800d7bc:	ed90 6b00 	vldr	d6, [r0]
 800d7c0:	3201      	adds	r2, #1
 800d7c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7c6:	1049      	asrs	r1, r1, #1
 800d7c8:	3008      	adds	r0, #8
 800d7ca:	e773      	b.n	800d6b4 <_dtoa_r+0x344>
 800d7cc:	d02e      	beq.n	800d82c <_dtoa_r+0x4bc>
 800d7ce:	f1cb 0100 	rsb	r1, fp, #0
 800d7d2:	4a76      	ldr	r2, [pc, #472]	; (800d9ac <_dtoa_r+0x63c>)
 800d7d4:	f001 000f 	and.w	r0, r1, #15
 800d7d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d7dc:	ed92 7b00 	vldr	d7, [r2]
 800d7e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d7e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d7ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d7f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d7f4:	486e      	ldr	r0, [pc, #440]	; (800d9b0 <_dtoa_r+0x640>)
 800d7f6:	1109      	asrs	r1, r1, #4
 800d7f8:	2400      	movs	r4, #0
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	b939      	cbnz	r1, 800d80e <_dtoa_r+0x49e>
 800d7fe:	2c00      	cmp	r4, #0
 800d800:	f43f af60 	beq.w	800d6c4 <_dtoa_r+0x354>
 800d804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80c:	e75a      	b.n	800d6c4 <_dtoa_r+0x354>
 800d80e:	07cf      	lsls	r7, r1, #31
 800d810:	d509      	bpl.n	800d826 <_dtoa_r+0x4b6>
 800d812:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d816:	ed90 7b00 	vldr	d7, [r0]
 800d81a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d81e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d822:	3201      	adds	r2, #1
 800d824:	2401      	movs	r4, #1
 800d826:	1049      	asrs	r1, r1, #1
 800d828:	3008      	adds	r0, #8
 800d82a:	e7e7      	b.n	800d7fc <_dtoa_r+0x48c>
 800d82c:	2202      	movs	r2, #2
 800d82e:	e749      	b.n	800d6c4 <_dtoa_r+0x354>
 800d830:	465f      	mov	r7, fp
 800d832:	4648      	mov	r0, r9
 800d834:	e765      	b.n	800d702 <_dtoa_r+0x392>
 800d836:	ec42 1b17 	vmov	d7, r1, r2
 800d83a:	4a5c      	ldr	r2, [pc, #368]	; (800d9ac <_dtoa_r+0x63c>)
 800d83c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d840:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d844:	9a00      	ldr	r2, [sp, #0]
 800d846:	1814      	adds	r4, r2, r0
 800d848:	9a08      	ldr	r2, [sp, #32]
 800d84a:	b352      	cbz	r2, 800d8a2 <_dtoa_r+0x532>
 800d84c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d850:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d854:	f8dd 8000 	ldr.w	r8, [sp]
 800d858:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d85c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d860:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d864:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d868:	ee14 2a90 	vmov	r2, s9
 800d86c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d870:	3230      	adds	r2, #48	; 0x30
 800d872:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87e:	f808 2b01 	strb.w	r2, [r8], #1
 800d882:	d439      	bmi.n	800d8f8 <_dtoa_r+0x588>
 800d884:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d888:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	d472      	bmi.n	800d978 <_dtoa_r+0x608>
 800d892:	45a0      	cmp	r8, r4
 800d894:	f43f af5d 	beq.w	800d752 <_dtoa_r+0x3e2>
 800d898:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d89c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8a0:	e7e0      	b.n	800d864 <_dtoa_r+0x4f4>
 800d8a2:	f8dd 8000 	ldr.w	r8, [sp]
 800d8a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d8b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8b4:	ee14 2a90 	vmov	r2, s9
 800d8b8:	3230      	adds	r2, #48	; 0x30
 800d8ba:	f808 2b01 	strb.w	r2, [r8], #1
 800d8be:	45a0      	cmp	r8, r4
 800d8c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d8c8:	d118      	bne.n	800d8fc <_dtoa_r+0x58c>
 800d8ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d8ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d8d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8da:	dc4d      	bgt.n	800d978 <_dtoa_r+0x608>
 800d8dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d8e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e8:	f57f af33 	bpl.w	800d752 <_dtoa_r+0x3e2>
 800d8ec:	4688      	mov	r8, r1
 800d8ee:	3901      	subs	r1, #1
 800d8f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d8f4:	2b30      	cmp	r3, #48	; 0x30
 800d8f6:	d0f9      	beq.n	800d8ec <_dtoa_r+0x57c>
 800d8f8:	46bb      	mov	fp, r7
 800d8fa:	e02a      	b.n	800d952 <_dtoa_r+0x5e2>
 800d8fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d900:	e7d6      	b.n	800d8b0 <_dtoa_r+0x540>
 800d902:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d906:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d90a:	f8dd 8000 	ldr.w	r8, [sp]
 800d90e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d912:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d916:	ee15 3a10 	vmov	r3, s10
 800d91a:	3330      	adds	r3, #48	; 0x30
 800d91c:	f808 3b01 	strb.w	r3, [r8], #1
 800d920:	9b00      	ldr	r3, [sp, #0]
 800d922:	eba8 0303 	sub.w	r3, r8, r3
 800d926:	4599      	cmp	r9, r3
 800d928:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d92c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d930:	d133      	bne.n	800d99a <_dtoa_r+0x62a>
 800d932:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d936:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93e:	dc1a      	bgt.n	800d976 <_dtoa_r+0x606>
 800d940:	eeb4 7b46 	vcmp.f64	d7, d6
 800d944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d948:	d103      	bne.n	800d952 <_dtoa_r+0x5e2>
 800d94a:	ee15 3a10 	vmov	r3, s10
 800d94e:	07d9      	lsls	r1, r3, #31
 800d950:	d411      	bmi.n	800d976 <_dtoa_r+0x606>
 800d952:	4629      	mov	r1, r5
 800d954:	4630      	mov	r0, r6
 800d956:	f001 f879 	bl	800ea4c <_Bfree>
 800d95a:	2300      	movs	r3, #0
 800d95c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d95e:	f888 3000 	strb.w	r3, [r8]
 800d962:	f10b 0301 	add.w	r3, fp, #1
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f43f ad4d 	beq.w	800d40a <_dtoa_r+0x9a>
 800d970:	f8c3 8000 	str.w	r8, [r3]
 800d974:	e549      	b.n	800d40a <_dtoa_r+0x9a>
 800d976:	465f      	mov	r7, fp
 800d978:	4643      	mov	r3, r8
 800d97a:	4698      	mov	r8, r3
 800d97c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d980:	2a39      	cmp	r2, #57	; 0x39
 800d982:	d106      	bne.n	800d992 <_dtoa_r+0x622>
 800d984:	9a00      	ldr	r2, [sp, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d1f7      	bne.n	800d97a <_dtoa_r+0x60a>
 800d98a:	9900      	ldr	r1, [sp, #0]
 800d98c:	2230      	movs	r2, #48	; 0x30
 800d98e:	3701      	adds	r7, #1
 800d990:	700a      	strb	r2, [r1, #0]
 800d992:	781a      	ldrb	r2, [r3, #0]
 800d994:	3201      	adds	r2, #1
 800d996:	701a      	strb	r2, [r3, #0]
 800d998:	e7ae      	b.n	800d8f8 <_dtoa_r+0x588>
 800d99a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d99e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a6:	d1b2      	bne.n	800d90e <_dtoa_r+0x59e>
 800d9a8:	e7d3      	b.n	800d952 <_dtoa_r+0x5e2>
 800d9aa:	bf00      	nop
 800d9ac:	08010208 	.word	0x08010208
 800d9b0:	080101e0 	.word	0x080101e0
 800d9b4:	9908      	ldr	r1, [sp, #32]
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	f000 80d1 	beq.w	800db5e <_dtoa_r+0x7ee>
 800d9bc:	9907      	ldr	r1, [sp, #28]
 800d9be:	2901      	cmp	r1, #1
 800d9c0:	f300 80b4 	bgt.w	800db2c <_dtoa_r+0x7bc>
 800d9c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9c6:	2900      	cmp	r1, #0
 800d9c8:	f000 80ac 	beq.w	800db24 <_dtoa_r+0x7b4>
 800d9cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d9d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d9d4:	461c      	mov	r4, r3
 800d9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9d8:	9b05      	ldr	r3, [sp, #20]
 800d9da:	4413      	add	r3, r2
 800d9dc:	9305      	str	r3, [sp, #20]
 800d9de:	9b06      	ldr	r3, [sp, #24]
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	4413      	add	r3, r2
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	9306      	str	r3, [sp, #24]
 800d9e8:	f001 f936 	bl	800ec58 <__i2b>
 800d9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ee:	4607      	mov	r7, r0
 800d9f0:	f1b8 0f00 	cmp.w	r8, #0
 800d9f4:	dd0d      	ble.n	800da12 <_dtoa_r+0x6a2>
 800d9f6:	9a06      	ldr	r2, [sp, #24]
 800d9f8:	2a00      	cmp	r2, #0
 800d9fa:	dd0a      	ble.n	800da12 <_dtoa_r+0x6a2>
 800d9fc:	4542      	cmp	r2, r8
 800d9fe:	9905      	ldr	r1, [sp, #20]
 800da00:	bfa8      	it	ge
 800da02:	4642      	movge	r2, r8
 800da04:	1a89      	subs	r1, r1, r2
 800da06:	9105      	str	r1, [sp, #20]
 800da08:	9906      	ldr	r1, [sp, #24]
 800da0a:	eba8 0802 	sub.w	r8, r8, r2
 800da0e:	1a8a      	subs	r2, r1, r2
 800da10:	9206      	str	r2, [sp, #24]
 800da12:	b303      	cbz	r3, 800da56 <_dtoa_r+0x6e6>
 800da14:	9a08      	ldr	r2, [sp, #32]
 800da16:	2a00      	cmp	r2, #0
 800da18:	f000 80a6 	beq.w	800db68 <_dtoa_r+0x7f8>
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	dd13      	ble.n	800da48 <_dtoa_r+0x6d8>
 800da20:	4639      	mov	r1, r7
 800da22:	4622      	mov	r2, r4
 800da24:	4630      	mov	r0, r6
 800da26:	930c      	str	r3, [sp, #48]	; 0x30
 800da28:	f001 f9d2 	bl	800edd0 <__pow5mult>
 800da2c:	462a      	mov	r2, r5
 800da2e:	4601      	mov	r1, r0
 800da30:	4607      	mov	r7, r0
 800da32:	4630      	mov	r0, r6
 800da34:	f001 f926 	bl	800ec84 <__multiply>
 800da38:	4629      	mov	r1, r5
 800da3a:	900a      	str	r0, [sp, #40]	; 0x28
 800da3c:	4630      	mov	r0, r6
 800da3e:	f001 f805 	bl	800ea4c <_Bfree>
 800da42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da46:	4615      	mov	r5, r2
 800da48:	1b1a      	subs	r2, r3, r4
 800da4a:	d004      	beq.n	800da56 <_dtoa_r+0x6e6>
 800da4c:	4629      	mov	r1, r5
 800da4e:	4630      	mov	r0, r6
 800da50:	f001 f9be 	bl	800edd0 <__pow5mult>
 800da54:	4605      	mov	r5, r0
 800da56:	2101      	movs	r1, #1
 800da58:	4630      	mov	r0, r6
 800da5a:	f001 f8fd 	bl	800ec58 <__i2b>
 800da5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da60:	2b00      	cmp	r3, #0
 800da62:	4604      	mov	r4, r0
 800da64:	f340 8082 	ble.w	800db6c <_dtoa_r+0x7fc>
 800da68:	461a      	mov	r2, r3
 800da6a:	4601      	mov	r1, r0
 800da6c:	4630      	mov	r0, r6
 800da6e:	f001 f9af 	bl	800edd0 <__pow5mult>
 800da72:	9b07      	ldr	r3, [sp, #28]
 800da74:	2b01      	cmp	r3, #1
 800da76:	4604      	mov	r4, r0
 800da78:	dd7b      	ble.n	800db72 <_dtoa_r+0x802>
 800da7a:	2300      	movs	r3, #0
 800da7c:	930a      	str	r3, [sp, #40]	; 0x28
 800da7e:	6922      	ldr	r2, [r4, #16]
 800da80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da84:	6910      	ldr	r0, [r2, #16]
 800da86:	f001 f897 	bl	800ebb8 <__hi0bits>
 800da8a:	f1c0 0020 	rsb	r0, r0, #32
 800da8e:	9b06      	ldr	r3, [sp, #24]
 800da90:	4418      	add	r0, r3
 800da92:	f010 001f 	ands.w	r0, r0, #31
 800da96:	f000 808d 	beq.w	800dbb4 <_dtoa_r+0x844>
 800da9a:	f1c0 0220 	rsb	r2, r0, #32
 800da9e:	2a04      	cmp	r2, #4
 800daa0:	f340 8086 	ble.w	800dbb0 <_dtoa_r+0x840>
 800daa4:	f1c0 001c 	rsb	r0, r0, #28
 800daa8:	9b05      	ldr	r3, [sp, #20]
 800daaa:	4403      	add	r3, r0
 800daac:	9305      	str	r3, [sp, #20]
 800daae:	9b06      	ldr	r3, [sp, #24]
 800dab0:	4403      	add	r3, r0
 800dab2:	4480      	add	r8, r0
 800dab4:	9306      	str	r3, [sp, #24]
 800dab6:	9b05      	ldr	r3, [sp, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	dd05      	ble.n	800dac8 <_dtoa_r+0x758>
 800dabc:	4629      	mov	r1, r5
 800dabe:	461a      	mov	r2, r3
 800dac0:	4630      	mov	r0, r6
 800dac2:	f001 f9df 	bl	800ee84 <__lshift>
 800dac6:	4605      	mov	r5, r0
 800dac8:	9b06      	ldr	r3, [sp, #24]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dd05      	ble.n	800dada <_dtoa_r+0x76a>
 800dace:	4621      	mov	r1, r4
 800dad0:	461a      	mov	r2, r3
 800dad2:	4630      	mov	r0, r6
 800dad4:	f001 f9d6 	bl	800ee84 <__lshift>
 800dad8:	4604      	mov	r4, r0
 800dada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d06b      	beq.n	800dbb8 <_dtoa_r+0x848>
 800dae0:	4621      	mov	r1, r4
 800dae2:	4628      	mov	r0, r5
 800dae4:	f001 fa3a 	bl	800ef5c <__mcmp>
 800dae8:	2800      	cmp	r0, #0
 800daea:	da65      	bge.n	800dbb8 <_dtoa_r+0x848>
 800daec:	2300      	movs	r3, #0
 800daee:	4629      	mov	r1, r5
 800daf0:	220a      	movs	r2, #10
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 ffcc 	bl	800ea90 <__multadd>
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dafe:	4605      	mov	r5, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	f000 8192 	beq.w	800de2a <_dtoa_r+0xaba>
 800db06:	4639      	mov	r1, r7
 800db08:	2300      	movs	r3, #0
 800db0a:	220a      	movs	r2, #10
 800db0c:	4630      	mov	r0, r6
 800db0e:	f000 ffbf 	bl	800ea90 <__multadd>
 800db12:	f1ba 0f00 	cmp.w	sl, #0
 800db16:	4607      	mov	r7, r0
 800db18:	f300 808e 	bgt.w	800dc38 <_dtoa_r+0x8c8>
 800db1c:	9b07      	ldr	r3, [sp, #28]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	dc51      	bgt.n	800dbc6 <_dtoa_r+0x856>
 800db22:	e089      	b.n	800dc38 <_dtoa_r+0x8c8>
 800db24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db2a:	e751      	b.n	800d9d0 <_dtoa_r+0x660>
 800db2c:	f109 34ff 	add.w	r4, r9, #4294967295
 800db30:	42a3      	cmp	r3, r4
 800db32:	bfbf      	itttt	lt
 800db34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800db36:	1ae3      	sublt	r3, r4, r3
 800db38:	18d2      	addlt	r2, r2, r3
 800db3a:	4613      	movlt	r3, r2
 800db3c:	bfb7      	itett	lt
 800db3e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800db40:	1b1c      	subge	r4, r3, r4
 800db42:	4623      	movlt	r3, r4
 800db44:	2400      	movlt	r4, #0
 800db46:	f1b9 0f00 	cmp.w	r9, #0
 800db4a:	bfb5      	itete	lt
 800db4c:	9a05      	ldrlt	r2, [sp, #20]
 800db4e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800db52:	eba2 0809 	sublt.w	r8, r2, r9
 800db56:	464a      	movge	r2, r9
 800db58:	bfb8      	it	lt
 800db5a:	2200      	movlt	r2, #0
 800db5c:	e73b      	b.n	800d9d6 <_dtoa_r+0x666>
 800db5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800db62:	9f08      	ldr	r7, [sp, #32]
 800db64:	461c      	mov	r4, r3
 800db66:	e743      	b.n	800d9f0 <_dtoa_r+0x680>
 800db68:	461a      	mov	r2, r3
 800db6a:	e76f      	b.n	800da4c <_dtoa_r+0x6dc>
 800db6c:	9b07      	ldr	r3, [sp, #28]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	dc18      	bgt.n	800dba4 <_dtoa_r+0x834>
 800db72:	9b02      	ldr	r3, [sp, #8]
 800db74:	b9b3      	cbnz	r3, 800dba4 <_dtoa_r+0x834>
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db7c:	b9a2      	cbnz	r2, 800dba8 <_dtoa_r+0x838>
 800db7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db82:	0d12      	lsrs	r2, r2, #20
 800db84:	0512      	lsls	r2, r2, #20
 800db86:	b18a      	cbz	r2, 800dbac <_dtoa_r+0x83c>
 800db88:	9b05      	ldr	r3, [sp, #20]
 800db8a:	3301      	adds	r3, #1
 800db8c:	9305      	str	r3, [sp, #20]
 800db8e:	9b06      	ldr	r3, [sp, #24]
 800db90:	3301      	adds	r3, #1
 800db92:	9306      	str	r3, [sp, #24]
 800db94:	2301      	movs	r3, #1
 800db96:	930a      	str	r3, [sp, #40]	; 0x28
 800db98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f47f af6f 	bne.w	800da7e <_dtoa_r+0x70e>
 800dba0:	2001      	movs	r0, #1
 800dba2:	e774      	b.n	800da8e <_dtoa_r+0x71e>
 800dba4:	2300      	movs	r3, #0
 800dba6:	e7f6      	b.n	800db96 <_dtoa_r+0x826>
 800dba8:	9b02      	ldr	r3, [sp, #8]
 800dbaa:	e7f4      	b.n	800db96 <_dtoa_r+0x826>
 800dbac:	920a      	str	r2, [sp, #40]	; 0x28
 800dbae:	e7f3      	b.n	800db98 <_dtoa_r+0x828>
 800dbb0:	d081      	beq.n	800dab6 <_dtoa_r+0x746>
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	301c      	adds	r0, #28
 800dbb6:	e777      	b.n	800daa8 <_dtoa_r+0x738>
 800dbb8:	f1b9 0f00 	cmp.w	r9, #0
 800dbbc:	dc37      	bgt.n	800dc2e <_dtoa_r+0x8be>
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	dd34      	ble.n	800dc2e <_dtoa_r+0x8be>
 800dbc4:	46ca      	mov	sl, r9
 800dbc6:	f1ba 0f00 	cmp.w	sl, #0
 800dbca:	d10d      	bne.n	800dbe8 <_dtoa_r+0x878>
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4653      	mov	r3, sl
 800dbd0:	2205      	movs	r2, #5
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f000 ff5c 	bl	800ea90 <__multadd>
 800dbd8:	4601      	mov	r1, r0
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f001 f9bd 	bl	800ef5c <__mcmp>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	f73f adde 	bgt.w	800d7a4 <_dtoa_r+0x434>
 800dbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbea:	f8dd 8000 	ldr.w	r8, [sp]
 800dbee:	ea6f 0b03 	mvn.w	fp, r3
 800dbf2:	f04f 0900 	mov.w	r9, #0
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f000 ff27 	bl	800ea4c <_Bfree>
 800dbfe:	2f00      	cmp	r7, #0
 800dc00:	f43f aea7 	beq.w	800d952 <_dtoa_r+0x5e2>
 800dc04:	f1b9 0f00 	cmp.w	r9, #0
 800dc08:	d005      	beq.n	800dc16 <_dtoa_r+0x8a6>
 800dc0a:	45b9      	cmp	r9, r7
 800dc0c:	d003      	beq.n	800dc16 <_dtoa_r+0x8a6>
 800dc0e:	4649      	mov	r1, r9
 800dc10:	4630      	mov	r0, r6
 800dc12:	f000 ff1b 	bl	800ea4c <_Bfree>
 800dc16:	4639      	mov	r1, r7
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 ff17 	bl	800ea4c <_Bfree>
 800dc1e:	e698      	b.n	800d952 <_dtoa_r+0x5e2>
 800dc20:	2400      	movs	r4, #0
 800dc22:	4627      	mov	r7, r4
 800dc24:	e7e0      	b.n	800dbe8 <_dtoa_r+0x878>
 800dc26:	46bb      	mov	fp, r7
 800dc28:	4604      	mov	r4, r0
 800dc2a:	4607      	mov	r7, r0
 800dc2c:	e5ba      	b.n	800d7a4 <_dtoa_r+0x434>
 800dc2e:	9b08      	ldr	r3, [sp, #32]
 800dc30:	46ca      	mov	sl, r9
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f000 8100 	beq.w	800de38 <_dtoa_r+0xac8>
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	dd05      	ble.n	800dc4a <_dtoa_r+0x8da>
 800dc3e:	4639      	mov	r1, r7
 800dc40:	4642      	mov	r2, r8
 800dc42:	4630      	mov	r0, r6
 800dc44:	f001 f91e 	bl	800ee84 <__lshift>
 800dc48:	4607      	mov	r7, r0
 800dc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d05d      	beq.n	800dd0c <_dtoa_r+0x99c>
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	4630      	mov	r0, r6
 800dc54:	f000 feba 	bl	800e9cc <_Balloc>
 800dc58:	4680      	mov	r8, r0
 800dc5a:	b928      	cbnz	r0, 800dc68 <_dtoa_r+0x8f8>
 800dc5c:	4b82      	ldr	r3, [pc, #520]	; (800de68 <_dtoa_r+0xaf8>)
 800dc5e:	4602      	mov	r2, r0
 800dc60:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc64:	f7ff bb9a 	b.w	800d39c <_dtoa_r+0x2c>
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	3202      	adds	r2, #2
 800dc6c:	0092      	lsls	r2, r2, #2
 800dc6e:	f107 010c 	add.w	r1, r7, #12
 800dc72:	300c      	adds	r0, #12
 800dc74:	f7fd fca2 	bl	800b5bc <memcpy>
 800dc78:	2201      	movs	r2, #1
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f001 f901 	bl	800ee84 <__lshift>
 800dc82:	9b00      	ldr	r3, [sp, #0]
 800dc84:	3301      	adds	r3, #1
 800dc86:	9305      	str	r3, [sp, #20]
 800dc88:	9b00      	ldr	r3, [sp, #0]
 800dc8a:	4453      	add	r3, sl
 800dc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8e:	9b02      	ldr	r3, [sp, #8]
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	46b9      	mov	r9, r7
 800dc96:	9308      	str	r3, [sp, #32]
 800dc98:	4607      	mov	r7, r0
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	4628      	mov	r0, r5
 800dca2:	9302      	str	r3, [sp, #8]
 800dca4:	f7ff fad6 	bl	800d254 <quorem>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	3330      	adds	r3, #48	; 0x30
 800dcac:	9006      	str	r0, [sp, #24]
 800dcae:	4649      	mov	r1, r9
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	930a      	str	r3, [sp, #40]	; 0x28
 800dcb4:	f001 f952 	bl	800ef5c <__mcmp>
 800dcb8:	463a      	mov	r2, r7
 800dcba:	4682      	mov	sl, r0
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f001 f968 	bl	800ef94 <__mdiff>
 800dcc4:	68c2      	ldr	r2, [r0, #12]
 800dcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc8:	4680      	mov	r8, r0
 800dcca:	bb0a      	cbnz	r2, 800dd10 <_dtoa_r+0x9a0>
 800dccc:	4601      	mov	r1, r0
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f001 f944 	bl	800ef5c <__mcmp>
 800dcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	4641      	mov	r1, r8
 800dcda:	4630      	mov	r0, r6
 800dcdc:	920e      	str	r2, [sp, #56]	; 0x38
 800dcde:	930a      	str	r3, [sp, #40]	; 0x28
 800dce0:	f000 feb4 	bl	800ea4c <_Bfree>
 800dce4:	9b07      	ldr	r3, [sp, #28]
 800dce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dce8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dcec:	ea43 0102 	orr.w	r1, r3, r2
 800dcf0:	9b08      	ldr	r3, [sp, #32]
 800dcf2:	430b      	orrs	r3, r1
 800dcf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf6:	d10d      	bne.n	800dd14 <_dtoa_r+0x9a4>
 800dcf8:	2b39      	cmp	r3, #57	; 0x39
 800dcfa:	d029      	beq.n	800dd50 <_dtoa_r+0x9e0>
 800dcfc:	f1ba 0f00 	cmp.w	sl, #0
 800dd00:	dd01      	ble.n	800dd06 <_dtoa_r+0x996>
 800dd02:	9b06      	ldr	r3, [sp, #24]
 800dd04:	3331      	adds	r3, #49	; 0x31
 800dd06:	9a02      	ldr	r2, [sp, #8]
 800dd08:	7013      	strb	r3, [r2, #0]
 800dd0a:	e774      	b.n	800dbf6 <_dtoa_r+0x886>
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	e7b8      	b.n	800dc82 <_dtoa_r+0x912>
 800dd10:	2201      	movs	r2, #1
 800dd12:	e7e1      	b.n	800dcd8 <_dtoa_r+0x968>
 800dd14:	f1ba 0f00 	cmp.w	sl, #0
 800dd18:	db06      	blt.n	800dd28 <_dtoa_r+0x9b8>
 800dd1a:	9907      	ldr	r1, [sp, #28]
 800dd1c:	ea41 0a0a 	orr.w	sl, r1, sl
 800dd20:	9908      	ldr	r1, [sp, #32]
 800dd22:	ea5a 0101 	orrs.w	r1, sl, r1
 800dd26:	d120      	bne.n	800dd6a <_dtoa_r+0x9fa>
 800dd28:	2a00      	cmp	r2, #0
 800dd2a:	ddec      	ble.n	800dd06 <_dtoa_r+0x996>
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	2201      	movs	r2, #1
 800dd30:	4630      	mov	r0, r6
 800dd32:	9305      	str	r3, [sp, #20]
 800dd34:	f001 f8a6 	bl	800ee84 <__lshift>
 800dd38:	4621      	mov	r1, r4
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	f001 f90e 	bl	800ef5c <__mcmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	9b05      	ldr	r3, [sp, #20]
 800dd44:	dc02      	bgt.n	800dd4c <_dtoa_r+0x9dc>
 800dd46:	d1de      	bne.n	800dd06 <_dtoa_r+0x996>
 800dd48:	07da      	lsls	r2, r3, #31
 800dd4a:	d5dc      	bpl.n	800dd06 <_dtoa_r+0x996>
 800dd4c:	2b39      	cmp	r3, #57	; 0x39
 800dd4e:	d1d8      	bne.n	800dd02 <_dtoa_r+0x992>
 800dd50:	9a02      	ldr	r2, [sp, #8]
 800dd52:	2339      	movs	r3, #57	; 0x39
 800dd54:	7013      	strb	r3, [r2, #0]
 800dd56:	4643      	mov	r3, r8
 800dd58:	4698      	mov	r8, r3
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dd60:	2a39      	cmp	r2, #57	; 0x39
 800dd62:	d051      	beq.n	800de08 <_dtoa_r+0xa98>
 800dd64:	3201      	adds	r2, #1
 800dd66:	701a      	strb	r2, [r3, #0]
 800dd68:	e745      	b.n	800dbf6 <_dtoa_r+0x886>
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	dd03      	ble.n	800dd76 <_dtoa_r+0xa06>
 800dd6e:	2b39      	cmp	r3, #57	; 0x39
 800dd70:	d0ee      	beq.n	800dd50 <_dtoa_r+0x9e0>
 800dd72:	3301      	adds	r3, #1
 800dd74:	e7c7      	b.n	800dd06 <_dtoa_r+0x996>
 800dd76:	9a05      	ldr	r2, [sp, #20]
 800dd78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd7e:	428a      	cmp	r2, r1
 800dd80:	d02b      	beq.n	800ddda <_dtoa_r+0xa6a>
 800dd82:	4629      	mov	r1, r5
 800dd84:	2300      	movs	r3, #0
 800dd86:	220a      	movs	r2, #10
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f000 fe81 	bl	800ea90 <__multadd>
 800dd8e:	45b9      	cmp	r9, r7
 800dd90:	4605      	mov	r5, r0
 800dd92:	f04f 0300 	mov.w	r3, #0
 800dd96:	f04f 020a 	mov.w	r2, #10
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	d107      	bne.n	800ddb0 <_dtoa_r+0xa40>
 800dda0:	f000 fe76 	bl	800ea90 <__multadd>
 800dda4:	4681      	mov	r9, r0
 800dda6:	4607      	mov	r7, r0
 800dda8:	9b05      	ldr	r3, [sp, #20]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	e774      	b.n	800dc9a <_dtoa_r+0x92a>
 800ddb0:	f000 fe6e 	bl	800ea90 <__multadd>
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4681      	mov	r9, r0
 800ddb8:	2300      	movs	r3, #0
 800ddba:	220a      	movs	r2, #10
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f000 fe67 	bl	800ea90 <__multadd>
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	e7f0      	b.n	800dda8 <_dtoa_r+0xa38>
 800ddc6:	f1ba 0f00 	cmp.w	sl, #0
 800ddca:	9a00      	ldr	r2, [sp, #0]
 800ddcc:	bfcc      	ite	gt
 800ddce:	46d0      	movgt	r8, sl
 800ddd0:	f04f 0801 	movle.w	r8, #1
 800ddd4:	4490      	add	r8, r2
 800ddd6:	f04f 0900 	mov.w	r9, #0
 800ddda:	4629      	mov	r1, r5
 800dddc:	2201      	movs	r2, #1
 800ddde:	4630      	mov	r0, r6
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	f001 f84f 	bl	800ee84 <__lshift>
 800dde6:	4621      	mov	r1, r4
 800dde8:	4605      	mov	r5, r0
 800ddea:	f001 f8b7 	bl	800ef5c <__mcmp>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	dcb1      	bgt.n	800dd56 <_dtoa_r+0x9e6>
 800ddf2:	d102      	bne.n	800ddfa <_dtoa_r+0xa8a>
 800ddf4:	9b02      	ldr	r3, [sp, #8]
 800ddf6:	07db      	lsls	r3, r3, #31
 800ddf8:	d4ad      	bmi.n	800dd56 <_dtoa_r+0x9e6>
 800ddfa:	4643      	mov	r3, r8
 800ddfc:	4698      	mov	r8, r3
 800ddfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de02:	2a30      	cmp	r2, #48	; 0x30
 800de04:	d0fa      	beq.n	800ddfc <_dtoa_r+0xa8c>
 800de06:	e6f6      	b.n	800dbf6 <_dtoa_r+0x886>
 800de08:	9a00      	ldr	r2, [sp, #0]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d1a4      	bne.n	800dd58 <_dtoa_r+0x9e8>
 800de0e:	f10b 0b01 	add.w	fp, fp, #1
 800de12:	2331      	movs	r3, #49	; 0x31
 800de14:	e778      	b.n	800dd08 <_dtoa_r+0x998>
 800de16:	4b15      	ldr	r3, [pc, #84]	; (800de6c <_dtoa_r+0xafc>)
 800de18:	f7ff bb12 	b.w	800d440 <_dtoa_r+0xd0>
 800de1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f47f aaee 	bne.w	800d400 <_dtoa_r+0x90>
 800de24:	4b12      	ldr	r3, [pc, #72]	; (800de70 <_dtoa_r+0xb00>)
 800de26:	f7ff bb0b 	b.w	800d440 <_dtoa_r+0xd0>
 800de2a:	f1ba 0f00 	cmp.w	sl, #0
 800de2e:	dc03      	bgt.n	800de38 <_dtoa_r+0xac8>
 800de30:	9b07      	ldr	r3, [sp, #28]
 800de32:	2b02      	cmp	r3, #2
 800de34:	f73f aec7 	bgt.w	800dbc6 <_dtoa_r+0x856>
 800de38:	f8dd 8000 	ldr.w	r8, [sp]
 800de3c:	4621      	mov	r1, r4
 800de3e:	4628      	mov	r0, r5
 800de40:	f7ff fa08 	bl	800d254 <quorem>
 800de44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de48:	f808 3b01 	strb.w	r3, [r8], #1
 800de4c:	9a00      	ldr	r2, [sp, #0]
 800de4e:	eba8 0202 	sub.w	r2, r8, r2
 800de52:	4592      	cmp	sl, r2
 800de54:	ddb7      	ble.n	800ddc6 <_dtoa_r+0xa56>
 800de56:	4629      	mov	r1, r5
 800de58:	2300      	movs	r3, #0
 800de5a:	220a      	movs	r2, #10
 800de5c:	4630      	mov	r0, r6
 800de5e:	f000 fe17 	bl	800ea90 <__multadd>
 800de62:	4605      	mov	r5, r0
 800de64:	e7ea      	b.n	800de3c <_dtoa_r+0xacc>
 800de66:	bf00      	nop
 800de68:	0801008c 	.word	0x0801008c
 800de6c:	0800fe88 	.word	0x0800fe88
 800de70:	08010009 	.word	0x08010009

0800de74 <__sflush_r>:
 800de74:	898a      	ldrh	r2, [r1, #12]
 800de76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7a:	4605      	mov	r5, r0
 800de7c:	0710      	lsls	r0, r2, #28
 800de7e:	460c      	mov	r4, r1
 800de80:	d458      	bmi.n	800df34 <__sflush_r+0xc0>
 800de82:	684b      	ldr	r3, [r1, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	dc05      	bgt.n	800de94 <__sflush_r+0x20>
 800de88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	dc02      	bgt.n	800de94 <__sflush_r+0x20>
 800de8e:	2000      	movs	r0, #0
 800de90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de96:	2e00      	cmp	r6, #0
 800de98:	d0f9      	beq.n	800de8e <__sflush_r+0x1a>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dea0:	682f      	ldr	r7, [r5, #0]
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	d032      	beq.n	800df0c <__sflush_r+0x98>
 800dea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	075a      	lsls	r2, r3, #29
 800deac:	d505      	bpl.n	800deba <__sflush_r+0x46>
 800deae:	6863      	ldr	r3, [r4, #4]
 800deb0:	1ac0      	subs	r0, r0, r3
 800deb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deb4:	b10b      	cbz	r3, 800deba <__sflush_r+0x46>
 800deb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deb8:	1ac0      	subs	r0, r0, r3
 800deba:	2300      	movs	r3, #0
 800debc:	4602      	mov	r2, r0
 800debe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dec0:	6a21      	ldr	r1, [r4, #32]
 800dec2:	4628      	mov	r0, r5
 800dec4:	47b0      	blx	r6
 800dec6:	1c43      	adds	r3, r0, #1
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	d106      	bne.n	800deda <__sflush_r+0x66>
 800decc:	6829      	ldr	r1, [r5, #0]
 800dece:	291d      	cmp	r1, #29
 800ded0:	d82c      	bhi.n	800df2c <__sflush_r+0xb8>
 800ded2:	4a2a      	ldr	r2, [pc, #168]	; (800df7c <__sflush_r+0x108>)
 800ded4:	40ca      	lsrs	r2, r1
 800ded6:	07d6      	lsls	r6, r2, #31
 800ded8:	d528      	bpl.n	800df2c <__sflush_r+0xb8>
 800deda:	2200      	movs	r2, #0
 800dedc:	6062      	str	r2, [r4, #4]
 800dede:	04d9      	lsls	r1, r3, #19
 800dee0:	6922      	ldr	r2, [r4, #16]
 800dee2:	6022      	str	r2, [r4, #0]
 800dee4:	d504      	bpl.n	800def0 <__sflush_r+0x7c>
 800dee6:	1c42      	adds	r2, r0, #1
 800dee8:	d101      	bne.n	800deee <__sflush_r+0x7a>
 800deea:	682b      	ldr	r3, [r5, #0]
 800deec:	b903      	cbnz	r3, 800def0 <__sflush_r+0x7c>
 800deee:	6560      	str	r0, [r4, #84]	; 0x54
 800def0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800def2:	602f      	str	r7, [r5, #0]
 800def4:	2900      	cmp	r1, #0
 800def6:	d0ca      	beq.n	800de8e <__sflush_r+0x1a>
 800def8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800defc:	4299      	cmp	r1, r3
 800defe:	d002      	beq.n	800df06 <__sflush_r+0x92>
 800df00:	4628      	mov	r0, r5
 800df02:	f001 fa2f 	bl	800f364 <_free_r>
 800df06:	2000      	movs	r0, #0
 800df08:	6360      	str	r0, [r4, #52]	; 0x34
 800df0a:	e7c1      	b.n	800de90 <__sflush_r+0x1c>
 800df0c:	6a21      	ldr	r1, [r4, #32]
 800df0e:	2301      	movs	r3, #1
 800df10:	4628      	mov	r0, r5
 800df12:	47b0      	blx	r6
 800df14:	1c41      	adds	r1, r0, #1
 800df16:	d1c7      	bne.n	800dea8 <__sflush_r+0x34>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0c4      	beq.n	800dea8 <__sflush_r+0x34>
 800df1e:	2b1d      	cmp	r3, #29
 800df20:	d001      	beq.n	800df26 <__sflush_r+0xb2>
 800df22:	2b16      	cmp	r3, #22
 800df24:	d101      	bne.n	800df2a <__sflush_r+0xb6>
 800df26:	602f      	str	r7, [r5, #0]
 800df28:	e7b1      	b.n	800de8e <__sflush_r+0x1a>
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	e7ad      	b.n	800de90 <__sflush_r+0x1c>
 800df34:	690f      	ldr	r7, [r1, #16]
 800df36:	2f00      	cmp	r7, #0
 800df38:	d0a9      	beq.n	800de8e <__sflush_r+0x1a>
 800df3a:	0793      	lsls	r3, r2, #30
 800df3c:	680e      	ldr	r6, [r1, #0]
 800df3e:	bf08      	it	eq
 800df40:	694b      	ldreq	r3, [r1, #20]
 800df42:	600f      	str	r7, [r1, #0]
 800df44:	bf18      	it	ne
 800df46:	2300      	movne	r3, #0
 800df48:	eba6 0807 	sub.w	r8, r6, r7
 800df4c:	608b      	str	r3, [r1, #8]
 800df4e:	f1b8 0f00 	cmp.w	r8, #0
 800df52:	dd9c      	ble.n	800de8e <__sflush_r+0x1a>
 800df54:	6a21      	ldr	r1, [r4, #32]
 800df56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df58:	4643      	mov	r3, r8
 800df5a:	463a      	mov	r2, r7
 800df5c:	4628      	mov	r0, r5
 800df5e:	47b0      	blx	r6
 800df60:	2800      	cmp	r0, #0
 800df62:	dc06      	bgt.n	800df72 <__sflush_r+0xfe>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df6a:	81a3      	strh	r3, [r4, #12]
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	e78e      	b.n	800de90 <__sflush_r+0x1c>
 800df72:	4407      	add	r7, r0
 800df74:	eba8 0800 	sub.w	r8, r8, r0
 800df78:	e7e9      	b.n	800df4e <__sflush_r+0xda>
 800df7a:	bf00      	nop
 800df7c:	20400001 	.word	0x20400001

0800df80 <_fflush_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	690b      	ldr	r3, [r1, #16]
 800df84:	4605      	mov	r5, r0
 800df86:	460c      	mov	r4, r1
 800df88:	b913      	cbnz	r3, 800df90 <_fflush_r+0x10>
 800df8a:	2500      	movs	r5, #0
 800df8c:	4628      	mov	r0, r5
 800df8e:	bd38      	pop	{r3, r4, r5, pc}
 800df90:	b118      	cbz	r0, 800df9a <_fflush_r+0x1a>
 800df92:	6983      	ldr	r3, [r0, #24]
 800df94:	b90b      	cbnz	r3, 800df9a <_fflush_r+0x1a>
 800df96:	f000 f887 	bl	800e0a8 <__sinit>
 800df9a:	4b14      	ldr	r3, [pc, #80]	; (800dfec <_fflush_r+0x6c>)
 800df9c:	429c      	cmp	r4, r3
 800df9e:	d11b      	bne.n	800dfd8 <_fflush_r+0x58>
 800dfa0:	686c      	ldr	r4, [r5, #4]
 800dfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0ef      	beq.n	800df8a <_fflush_r+0xa>
 800dfaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfac:	07d0      	lsls	r0, r2, #31
 800dfae:	d404      	bmi.n	800dfba <_fflush_r+0x3a>
 800dfb0:	0599      	lsls	r1, r3, #22
 800dfb2:	d402      	bmi.n	800dfba <_fflush_r+0x3a>
 800dfb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfb6:	f000 fc88 	bl	800e8ca <__retarget_lock_acquire_recursive>
 800dfba:	4628      	mov	r0, r5
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f7ff ff59 	bl	800de74 <__sflush_r>
 800dfc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfc4:	07da      	lsls	r2, r3, #31
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	d4e0      	bmi.n	800df8c <_fflush_r+0xc>
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	059b      	lsls	r3, r3, #22
 800dfce:	d4dd      	bmi.n	800df8c <_fflush_r+0xc>
 800dfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfd2:	f000 fc7b 	bl	800e8cc <__retarget_lock_release_recursive>
 800dfd6:	e7d9      	b.n	800df8c <_fflush_r+0xc>
 800dfd8:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <_fflush_r+0x70>)
 800dfda:	429c      	cmp	r4, r3
 800dfdc:	d101      	bne.n	800dfe2 <_fflush_r+0x62>
 800dfde:	68ac      	ldr	r4, [r5, #8]
 800dfe0:	e7df      	b.n	800dfa2 <_fflush_r+0x22>
 800dfe2:	4b04      	ldr	r3, [pc, #16]	; (800dff4 <_fflush_r+0x74>)
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	bf08      	it	eq
 800dfe8:	68ec      	ldreq	r4, [r5, #12]
 800dfea:	e7da      	b.n	800dfa2 <_fflush_r+0x22>
 800dfec:	080100c0 	.word	0x080100c0
 800dff0:	080100e0 	.word	0x080100e0
 800dff4:	080100a0 	.word	0x080100a0

0800dff8 <std>:
 800dff8:	2300      	movs	r3, #0
 800dffa:	b510      	push	{r4, lr}
 800dffc:	4604      	mov	r4, r0
 800dffe:	e9c0 3300 	strd	r3, r3, [r0]
 800e002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e006:	6083      	str	r3, [r0, #8]
 800e008:	8181      	strh	r1, [r0, #12]
 800e00a:	6643      	str	r3, [r0, #100]	; 0x64
 800e00c:	81c2      	strh	r2, [r0, #14]
 800e00e:	6183      	str	r3, [r0, #24]
 800e010:	4619      	mov	r1, r3
 800e012:	2208      	movs	r2, #8
 800e014:	305c      	adds	r0, #92	; 0x5c
 800e016:	f7fd fadf 	bl	800b5d8 <memset>
 800e01a:	4b05      	ldr	r3, [pc, #20]	; (800e030 <std+0x38>)
 800e01c:	6263      	str	r3, [r4, #36]	; 0x24
 800e01e:	4b05      	ldr	r3, [pc, #20]	; (800e034 <std+0x3c>)
 800e020:	62a3      	str	r3, [r4, #40]	; 0x28
 800e022:	4b05      	ldr	r3, [pc, #20]	; (800e038 <std+0x40>)
 800e024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e026:	4b05      	ldr	r3, [pc, #20]	; (800e03c <std+0x44>)
 800e028:	6224      	str	r4, [r4, #32]
 800e02a:	6323      	str	r3, [r4, #48]	; 0x30
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	bf00      	nop
 800e030:	0800fa59 	.word	0x0800fa59
 800e034:	0800fa7b 	.word	0x0800fa7b
 800e038:	0800fab3 	.word	0x0800fab3
 800e03c:	0800fad7 	.word	0x0800fad7

0800e040 <_cleanup_r>:
 800e040:	4901      	ldr	r1, [pc, #4]	; (800e048 <_cleanup_r+0x8>)
 800e042:	f000 b8af 	b.w	800e1a4 <_fwalk_reent>
 800e046:	bf00      	nop
 800e048:	0800df81 	.word	0x0800df81

0800e04c <__sfmoreglue>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	1e4a      	subs	r2, r1, #1
 800e050:	2568      	movs	r5, #104	; 0x68
 800e052:	4355      	muls	r5, r2
 800e054:	460e      	mov	r6, r1
 800e056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e05a:	f001 f9d3 	bl	800f404 <_malloc_r>
 800e05e:	4604      	mov	r4, r0
 800e060:	b140      	cbz	r0, 800e074 <__sfmoreglue+0x28>
 800e062:	2100      	movs	r1, #0
 800e064:	e9c0 1600 	strd	r1, r6, [r0]
 800e068:	300c      	adds	r0, #12
 800e06a:	60a0      	str	r0, [r4, #8]
 800e06c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e070:	f7fd fab2 	bl	800b5d8 <memset>
 800e074:	4620      	mov	r0, r4
 800e076:	bd70      	pop	{r4, r5, r6, pc}

0800e078 <__sfp_lock_acquire>:
 800e078:	4801      	ldr	r0, [pc, #4]	; (800e080 <__sfp_lock_acquire+0x8>)
 800e07a:	f000 bc26 	b.w	800e8ca <__retarget_lock_acquire_recursive>
 800e07e:	bf00      	nop
 800e080:	24004740 	.word	0x24004740

0800e084 <__sfp_lock_release>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__sfp_lock_release+0x8>)
 800e086:	f000 bc21 	b.w	800e8cc <__retarget_lock_release_recursive>
 800e08a:	bf00      	nop
 800e08c:	24004740 	.word	0x24004740

0800e090 <__sinit_lock_acquire>:
 800e090:	4801      	ldr	r0, [pc, #4]	; (800e098 <__sinit_lock_acquire+0x8>)
 800e092:	f000 bc1a 	b.w	800e8ca <__retarget_lock_acquire_recursive>
 800e096:	bf00      	nop
 800e098:	2400473b 	.word	0x2400473b

0800e09c <__sinit_lock_release>:
 800e09c:	4801      	ldr	r0, [pc, #4]	; (800e0a4 <__sinit_lock_release+0x8>)
 800e09e:	f000 bc15 	b.w	800e8cc <__retarget_lock_release_recursive>
 800e0a2:	bf00      	nop
 800e0a4:	2400473b 	.word	0x2400473b

0800e0a8 <__sinit>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	f7ff fff0 	bl	800e090 <__sinit_lock_acquire>
 800e0b0:	69a3      	ldr	r3, [r4, #24]
 800e0b2:	b11b      	cbz	r3, 800e0bc <__sinit+0x14>
 800e0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0b8:	f7ff bff0 	b.w	800e09c <__sinit_lock_release>
 800e0bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0c0:	6523      	str	r3, [r4, #80]	; 0x50
 800e0c2:	4b13      	ldr	r3, [pc, #76]	; (800e110 <__sinit+0x68>)
 800e0c4:	4a13      	ldr	r2, [pc, #76]	; (800e114 <__sinit+0x6c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0ca:	42a3      	cmp	r3, r4
 800e0cc:	bf04      	itt	eq
 800e0ce:	2301      	moveq	r3, #1
 800e0d0:	61a3      	streq	r3, [r4, #24]
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f000 f820 	bl	800e118 <__sfp>
 800e0d8:	6060      	str	r0, [r4, #4]
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f000 f81c 	bl	800e118 <__sfp>
 800e0e0:	60a0      	str	r0, [r4, #8]
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f000 f818 	bl	800e118 <__sfp>
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	60e0      	str	r0, [r4, #12]
 800e0ec:	2104      	movs	r1, #4
 800e0ee:	6860      	ldr	r0, [r4, #4]
 800e0f0:	f7ff ff82 	bl	800dff8 <std>
 800e0f4:	68a0      	ldr	r0, [r4, #8]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	2109      	movs	r1, #9
 800e0fa:	f7ff ff7d 	bl	800dff8 <std>
 800e0fe:	68e0      	ldr	r0, [r4, #12]
 800e100:	2202      	movs	r2, #2
 800e102:	2112      	movs	r1, #18
 800e104:	f7ff ff78 	bl	800dff8 <std>
 800e108:	2301      	movs	r3, #1
 800e10a:	61a3      	str	r3, [r4, #24]
 800e10c:	e7d2      	b.n	800e0b4 <__sinit+0xc>
 800e10e:	bf00      	nop
 800e110:	0800fe74 	.word	0x0800fe74
 800e114:	0800e041 	.word	0x0800e041

0800e118 <__sfp>:
 800e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11a:	4607      	mov	r7, r0
 800e11c:	f7ff ffac 	bl	800e078 <__sfp_lock_acquire>
 800e120:	4b1e      	ldr	r3, [pc, #120]	; (800e19c <__sfp+0x84>)
 800e122:	681e      	ldr	r6, [r3, #0]
 800e124:	69b3      	ldr	r3, [r6, #24]
 800e126:	b913      	cbnz	r3, 800e12e <__sfp+0x16>
 800e128:	4630      	mov	r0, r6
 800e12a:	f7ff ffbd 	bl	800e0a8 <__sinit>
 800e12e:	3648      	adds	r6, #72	; 0x48
 800e130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e134:	3b01      	subs	r3, #1
 800e136:	d503      	bpl.n	800e140 <__sfp+0x28>
 800e138:	6833      	ldr	r3, [r6, #0]
 800e13a:	b30b      	cbz	r3, 800e180 <__sfp+0x68>
 800e13c:	6836      	ldr	r6, [r6, #0]
 800e13e:	e7f7      	b.n	800e130 <__sfp+0x18>
 800e140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e144:	b9d5      	cbnz	r5, 800e17c <__sfp+0x64>
 800e146:	4b16      	ldr	r3, [pc, #88]	; (800e1a0 <__sfp+0x88>)
 800e148:	60e3      	str	r3, [r4, #12]
 800e14a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e14e:	6665      	str	r5, [r4, #100]	; 0x64
 800e150:	f000 fbba 	bl	800e8c8 <__retarget_lock_init_recursive>
 800e154:	f7ff ff96 	bl	800e084 <__sfp_lock_release>
 800e158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e15c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e160:	6025      	str	r5, [r4, #0]
 800e162:	61a5      	str	r5, [r4, #24]
 800e164:	2208      	movs	r2, #8
 800e166:	4629      	mov	r1, r5
 800e168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e16c:	f7fd fa34 	bl	800b5d8 <memset>
 800e170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e178:	4620      	mov	r0, r4
 800e17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e17c:	3468      	adds	r4, #104	; 0x68
 800e17e:	e7d9      	b.n	800e134 <__sfp+0x1c>
 800e180:	2104      	movs	r1, #4
 800e182:	4638      	mov	r0, r7
 800e184:	f7ff ff62 	bl	800e04c <__sfmoreglue>
 800e188:	4604      	mov	r4, r0
 800e18a:	6030      	str	r0, [r6, #0]
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d1d5      	bne.n	800e13c <__sfp+0x24>
 800e190:	f7ff ff78 	bl	800e084 <__sfp_lock_release>
 800e194:	230c      	movs	r3, #12
 800e196:	603b      	str	r3, [r7, #0]
 800e198:	e7ee      	b.n	800e178 <__sfp+0x60>
 800e19a:	bf00      	nop
 800e19c:	0800fe74 	.word	0x0800fe74
 800e1a0:	ffff0001 	.word	0xffff0001

0800e1a4 <_fwalk_reent>:
 800e1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	4688      	mov	r8, r1
 800e1ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1b0:	2700      	movs	r7, #0
 800e1b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1b6:	f1b9 0901 	subs.w	r9, r9, #1
 800e1ba:	d505      	bpl.n	800e1c8 <_fwalk_reent+0x24>
 800e1bc:	6824      	ldr	r4, [r4, #0]
 800e1be:	2c00      	cmp	r4, #0
 800e1c0:	d1f7      	bne.n	800e1b2 <_fwalk_reent+0xe>
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1c8:	89ab      	ldrh	r3, [r5, #12]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d907      	bls.n	800e1de <_fwalk_reent+0x3a>
 800e1ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	d003      	beq.n	800e1de <_fwalk_reent+0x3a>
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4630      	mov	r0, r6
 800e1da:	47c0      	blx	r8
 800e1dc:	4307      	orrs	r7, r0
 800e1de:	3568      	adds	r5, #104	; 0x68
 800e1e0:	e7e9      	b.n	800e1b6 <_fwalk_reent+0x12>

0800e1e2 <rshift>:
 800e1e2:	6903      	ldr	r3, [r0, #16]
 800e1e4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1ec:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e1f0:	f100 0414 	add.w	r4, r0, #20
 800e1f4:	dd45      	ble.n	800e282 <rshift+0xa0>
 800e1f6:	f011 011f 	ands.w	r1, r1, #31
 800e1fa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e1fe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e202:	d10c      	bne.n	800e21e <rshift+0x3c>
 800e204:	f100 0710 	add.w	r7, r0, #16
 800e208:	4629      	mov	r1, r5
 800e20a:	42b1      	cmp	r1, r6
 800e20c:	d334      	bcc.n	800e278 <rshift+0x96>
 800e20e:	1a9b      	subs	r3, r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	1eea      	subs	r2, r5, #3
 800e214:	4296      	cmp	r6, r2
 800e216:	bf38      	it	cc
 800e218:	2300      	movcc	r3, #0
 800e21a:	4423      	add	r3, r4
 800e21c:	e015      	b.n	800e24a <rshift+0x68>
 800e21e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e222:	f1c1 0820 	rsb	r8, r1, #32
 800e226:	40cf      	lsrs	r7, r1
 800e228:	f105 0e04 	add.w	lr, r5, #4
 800e22c:	46a1      	mov	r9, r4
 800e22e:	4576      	cmp	r6, lr
 800e230:	46f4      	mov	ip, lr
 800e232:	d815      	bhi.n	800e260 <rshift+0x7e>
 800e234:	1a9b      	subs	r3, r3, r2
 800e236:	009a      	lsls	r2, r3, #2
 800e238:	3a04      	subs	r2, #4
 800e23a:	3501      	adds	r5, #1
 800e23c:	42ae      	cmp	r6, r5
 800e23e:	bf38      	it	cc
 800e240:	2200      	movcc	r2, #0
 800e242:	18a3      	adds	r3, r4, r2
 800e244:	50a7      	str	r7, [r4, r2]
 800e246:	b107      	cbz	r7, 800e24a <rshift+0x68>
 800e248:	3304      	adds	r3, #4
 800e24a:	1b1a      	subs	r2, r3, r4
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e252:	bf08      	it	eq
 800e254:	2300      	moveq	r3, #0
 800e256:	6102      	str	r2, [r0, #16]
 800e258:	bf08      	it	eq
 800e25a:	6143      	streq	r3, [r0, #20]
 800e25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e260:	f8dc c000 	ldr.w	ip, [ip]
 800e264:	fa0c fc08 	lsl.w	ip, ip, r8
 800e268:	ea4c 0707 	orr.w	r7, ip, r7
 800e26c:	f849 7b04 	str.w	r7, [r9], #4
 800e270:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e274:	40cf      	lsrs	r7, r1
 800e276:	e7da      	b.n	800e22e <rshift+0x4c>
 800e278:	f851 cb04 	ldr.w	ip, [r1], #4
 800e27c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e280:	e7c3      	b.n	800e20a <rshift+0x28>
 800e282:	4623      	mov	r3, r4
 800e284:	e7e1      	b.n	800e24a <rshift+0x68>

0800e286 <__hexdig_fun>:
 800e286:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e28a:	2b09      	cmp	r3, #9
 800e28c:	d802      	bhi.n	800e294 <__hexdig_fun+0xe>
 800e28e:	3820      	subs	r0, #32
 800e290:	b2c0      	uxtb	r0, r0
 800e292:	4770      	bx	lr
 800e294:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e298:	2b05      	cmp	r3, #5
 800e29a:	d801      	bhi.n	800e2a0 <__hexdig_fun+0x1a>
 800e29c:	3847      	subs	r0, #71	; 0x47
 800e29e:	e7f7      	b.n	800e290 <__hexdig_fun+0xa>
 800e2a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e2a4:	2b05      	cmp	r3, #5
 800e2a6:	d801      	bhi.n	800e2ac <__hexdig_fun+0x26>
 800e2a8:	3827      	subs	r0, #39	; 0x27
 800e2aa:	e7f1      	b.n	800e290 <__hexdig_fun+0xa>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	4770      	bx	lr

0800e2b0 <__gethex>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	ed2d 8b02 	vpush	{d8}
 800e2b8:	b089      	sub	sp, #36	; 0x24
 800e2ba:	ee08 0a10 	vmov	s16, r0
 800e2be:	9304      	str	r3, [sp, #16]
 800e2c0:	4bbc      	ldr	r3, [pc, #752]	; (800e5b4 <__gethex+0x304>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	468b      	mov	fp, r1
 800e2ca:	4690      	mov	r8, r2
 800e2cc:	f7f2 f820 	bl	8000310 <strlen>
 800e2d0:	9b01      	ldr	r3, [sp, #4]
 800e2d2:	f8db 2000 	ldr.w	r2, [fp]
 800e2d6:	4403      	add	r3, r0
 800e2d8:	4682      	mov	sl, r0
 800e2da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e2de:	9305      	str	r3, [sp, #20]
 800e2e0:	1c93      	adds	r3, r2, #2
 800e2e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e2e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e2ea:	32fe      	adds	r2, #254	; 0xfe
 800e2ec:	18d1      	adds	r1, r2, r3
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e2f4:	9100      	str	r1, [sp, #0]
 800e2f6:	2830      	cmp	r0, #48	; 0x30
 800e2f8:	d0f8      	beq.n	800e2ec <__gethex+0x3c>
 800e2fa:	f7ff ffc4 	bl	800e286 <__hexdig_fun>
 800e2fe:	4604      	mov	r4, r0
 800e300:	2800      	cmp	r0, #0
 800e302:	d13a      	bne.n	800e37a <__gethex+0xca>
 800e304:	9901      	ldr	r1, [sp, #4]
 800e306:	4652      	mov	r2, sl
 800e308:	4638      	mov	r0, r7
 800e30a:	f001 fbe8 	bl	800fade <strncmp>
 800e30e:	4605      	mov	r5, r0
 800e310:	2800      	cmp	r0, #0
 800e312:	d168      	bne.n	800e3e6 <__gethex+0x136>
 800e314:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e318:	eb07 060a 	add.w	r6, r7, sl
 800e31c:	f7ff ffb3 	bl	800e286 <__hexdig_fun>
 800e320:	2800      	cmp	r0, #0
 800e322:	d062      	beq.n	800e3ea <__gethex+0x13a>
 800e324:	4633      	mov	r3, r6
 800e326:	7818      	ldrb	r0, [r3, #0]
 800e328:	2830      	cmp	r0, #48	; 0x30
 800e32a:	461f      	mov	r7, r3
 800e32c:	f103 0301 	add.w	r3, r3, #1
 800e330:	d0f9      	beq.n	800e326 <__gethex+0x76>
 800e332:	f7ff ffa8 	bl	800e286 <__hexdig_fun>
 800e336:	2301      	movs	r3, #1
 800e338:	fab0 f480 	clz	r4, r0
 800e33c:	0964      	lsrs	r4, r4, #5
 800e33e:	4635      	mov	r5, r6
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	463a      	mov	r2, r7
 800e344:	4616      	mov	r6, r2
 800e346:	3201      	adds	r2, #1
 800e348:	7830      	ldrb	r0, [r6, #0]
 800e34a:	f7ff ff9c 	bl	800e286 <__hexdig_fun>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d1f8      	bne.n	800e344 <__gethex+0x94>
 800e352:	9901      	ldr	r1, [sp, #4]
 800e354:	4652      	mov	r2, sl
 800e356:	4630      	mov	r0, r6
 800e358:	f001 fbc1 	bl	800fade <strncmp>
 800e35c:	b980      	cbnz	r0, 800e380 <__gethex+0xd0>
 800e35e:	b94d      	cbnz	r5, 800e374 <__gethex+0xc4>
 800e360:	eb06 050a 	add.w	r5, r6, sl
 800e364:	462a      	mov	r2, r5
 800e366:	4616      	mov	r6, r2
 800e368:	3201      	adds	r2, #1
 800e36a:	7830      	ldrb	r0, [r6, #0]
 800e36c:	f7ff ff8b 	bl	800e286 <__hexdig_fun>
 800e370:	2800      	cmp	r0, #0
 800e372:	d1f8      	bne.n	800e366 <__gethex+0xb6>
 800e374:	1bad      	subs	r5, r5, r6
 800e376:	00ad      	lsls	r5, r5, #2
 800e378:	e004      	b.n	800e384 <__gethex+0xd4>
 800e37a:	2400      	movs	r4, #0
 800e37c:	4625      	mov	r5, r4
 800e37e:	e7e0      	b.n	800e342 <__gethex+0x92>
 800e380:	2d00      	cmp	r5, #0
 800e382:	d1f7      	bne.n	800e374 <__gethex+0xc4>
 800e384:	7833      	ldrb	r3, [r6, #0]
 800e386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e38a:	2b50      	cmp	r3, #80	; 0x50
 800e38c:	d13b      	bne.n	800e406 <__gethex+0x156>
 800e38e:	7873      	ldrb	r3, [r6, #1]
 800e390:	2b2b      	cmp	r3, #43	; 0x2b
 800e392:	d02c      	beq.n	800e3ee <__gethex+0x13e>
 800e394:	2b2d      	cmp	r3, #45	; 0x2d
 800e396:	d02e      	beq.n	800e3f6 <__gethex+0x146>
 800e398:	1c71      	adds	r1, r6, #1
 800e39a:	f04f 0900 	mov.w	r9, #0
 800e39e:	7808      	ldrb	r0, [r1, #0]
 800e3a0:	f7ff ff71 	bl	800e286 <__hexdig_fun>
 800e3a4:	1e43      	subs	r3, r0, #1
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b18      	cmp	r3, #24
 800e3aa:	d82c      	bhi.n	800e406 <__gethex+0x156>
 800e3ac:	f1a0 0210 	sub.w	r2, r0, #16
 800e3b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3b4:	f7ff ff67 	bl	800e286 <__hexdig_fun>
 800e3b8:	1e43      	subs	r3, r0, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b18      	cmp	r3, #24
 800e3be:	d91d      	bls.n	800e3fc <__gethex+0x14c>
 800e3c0:	f1b9 0f00 	cmp.w	r9, #0
 800e3c4:	d000      	beq.n	800e3c8 <__gethex+0x118>
 800e3c6:	4252      	negs	r2, r2
 800e3c8:	4415      	add	r5, r2
 800e3ca:	f8cb 1000 	str.w	r1, [fp]
 800e3ce:	b1e4      	cbz	r4, 800e40a <__gethex+0x15a>
 800e3d0:	9b00      	ldr	r3, [sp, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	bf14      	ite	ne
 800e3d6:	2700      	movne	r7, #0
 800e3d8:	2706      	moveq	r7, #6
 800e3da:	4638      	mov	r0, r7
 800e3dc:	b009      	add	sp, #36	; 0x24
 800e3de:	ecbd 8b02 	vpop	{d8}
 800e3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e6:	463e      	mov	r6, r7
 800e3e8:	4625      	mov	r5, r4
 800e3ea:	2401      	movs	r4, #1
 800e3ec:	e7ca      	b.n	800e384 <__gethex+0xd4>
 800e3ee:	f04f 0900 	mov.w	r9, #0
 800e3f2:	1cb1      	adds	r1, r6, #2
 800e3f4:	e7d3      	b.n	800e39e <__gethex+0xee>
 800e3f6:	f04f 0901 	mov.w	r9, #1
 800e3fa:	e7fa      	b.n	800e3f2 <__gethex+0x142>
 800e3fc:	230a      	movs	r3, #10
 800e3fe:	fb03 0202 	mla	r2, r3, r2, r0
 800e402:	3a10      	subs	r2, #16
 800e404:	e7d4      	b.n	800e3b0 <__gethex+0x100>
 800e406:	4631      	mov	r1, r6
 800e408:	e7df      	b.n	800e3ca <__gethex+0x11a>
 800e40a:	1bf3      	subs	r3, r6, r7
 800e40c:	3b01      	subs	r3, #1
 800e40e:	4621      	mov	r1, r4
 800e410:	2b07      	cmp	r3, #7
 800e412:	dc0b      	bgt.n	800e42c <__gethex+0x17c>
 800e414:	ee18 0a10 	vmov	r0, s16
 800e418:	f000 fad8 	bl	800e9cc <_Balloc>
 800e41c:	4604      	mov	r4, r0
 800e41e:	b940      	cbnz	r0, 800e432 <__gethex+0x182>
 800e420:	4b65      	ldr	r3, [pc, #404]	; (800e5b8 <__gethex+0x308>)
 800e422:	4602      	mov	r2, r0
 800e424:	21de      	movs	r1, #222	; 0xde
 800e426:	4865      	ldr	r0, [pc, #404]	; (800e5bc <__gethex+0x30c>)
 800e428:	f001 fb8a 	bl	800fb40 <__assert_func>
 800e42c:	3101      	adds	r1, #1
 800e42e:	105b      	asrs	r3, r3, #1
 800e430:	e7ee      	b.n	800e410 <__gethex+0x160>
 800e432:	f100 0914 	add.w	r9, r0, #20
 800e436:	f04f 0b00 	mov.w	fp, #0
 800e43a:	f1ca 0301 	rsb	r3, sl, #1
 800e43e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e442:	f8cd b000 	str.w	fp, [sp]
 800e446:	9306      	str	r3, [sp, #24]
 800e448:	42b7      	cmp	r7, r6
 800e44a:	d340      	bcc.n	800e4ce <__gethex+0x21e>
 800e44c:	9802      	ldr	r0, [sp, #8]
 800e44e:	9b00      	ldr	r3, [sp, #0]
 800e450:	f840 3b04 	str.w	r3, [r0], #4
 800e454:	eba0 0009 	sub.w	r0, r0, r9
 800e458:	1080      	asrs	r0, r0, #2
 800e45a:	0146      	lsls	r6, r0, #5
 800e45c:	6120      	str	r0, [r4, #16]
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 fbaa 	bl	800ebb8 <__hi0bits>
 800e464:	1a30      	subs	r0, r6, r0
 800e466:	f8d8 6000 	ldr.w	r6, [r8]
 800e46a:	42b0      	cmp	r0, r6
 800e46c:	dd63      	ble.n	800e536 <__gethex+0x286>
 800e46e:	1b87      	subs	r7, r0, r6
 800e470:	4639      	mov	r1, r7
 800e472:	4620      	mov	r0, r4
 800e474:	f000 ff45 	bl	800f302 <__any_on>
 800e478:	4682      	mov	sl, r0
 800e47a:	b1a8      	cbz	r0, 800e4a8 <__gethex+0x1f8>
 800e47c:	1e7b      	subs	r3, r7, #1
 800e47e:	1159      	asrs	r1, r3, #5
 800e480:	f003 021f 	and.w	r2, r3, #31
 800e484:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e488:	f04f 0a01 	mov.w	sl, #1
 800e48c:	fa0a f202 	lsl.w	r2, sl, r2
 800e490:	420a      	tst	r2, r1
 800e492:	d009      	beq.n	800e4a8 <__gethex+0x1f8>
 800e494:	4553      	cmp	r3, sl
 800e496:	dd05      	ble.n	800e4a4 <__gethex+0x1f4>
 800e498:	1eb9      	subs	r1, r7, #2
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 ff31 	bl	800f302 <__any_on>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d145      	bne.n	800e530 <__gethex+0x280>
 800e4a4:	f04f 0a02 	mov.w	sl, #2
 800e4a8:	4639      	mov	r1, r7
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f7ff fe99 	bl	800e1e2 <rshift>
 800e4b0:	443d      	add	r5, r7
 800e4b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4b6:	42ab      	cmp	r3, r5
 800e4b8:	da4c      	bge.n	800e554 <__gethex+0x2a4>
 800e4ba:	ee18 0a10 	vmov	r0, s16
 800e4be:	4621      	mov	r1, r4
 800e4c0:	f000 fac4 	bl	800ea4c <_Bfree>
 800e4c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	27a3      	movs	r7, #163	; 0xa3
 800e4cc:	e785      	b.n	800e3da <__gethex+0x12a>
 800e4ce:	1e73      	subs	r3, r6, #1
 800e4d0:	9a05      	ldr	r2, [sp, #20]
 800e4d2:	9303      	str	r3, [sp, #12]
 800e4d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d019      	beq.n	800e510 <__gethex+0x260>
 800e4dc:	f1bb 0f20 	cmp.w	fp, #32
 800e4e0:	d107      	bne.n	800e4f2 <__gethex+0x242>
 800e4e2:	9b02      	ldr	r3, [sp, #8]
 800e4e4:	9a00      	ldr	r2, [sp, #0]
 800e4e6:	f843 2b04 	str.w	r2, [r3], #4
 800e4ea:	9302      	str	r3, [sp, #8]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	469b      	mov	fp, r3
 800e4f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e4f6:	f7ff fec6 	bl	800e286 <__hexdig_fun>
 800e4fa:	9b00      	ldr	r3, [sp, #0]
 800e4fc:	f000 000f 	and.w	r0, r0, #15
 800e500:	fa00 f00b 	lsl.w	r0, r0, fp
 800e504:	4303      	orrs	r3, r0
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	f10b 0b04 	add.w	fp, fp, #4
 800e50c:	9b03      	ldr	r3, [sp, #12]
 800e50e:	e00d      	b.n	800e52c <__gethex+0x27c>
 800e510:	9b03      	ldr	r3, [sp, #12]
 800e512:	9a06      	ldr	r2, [sp, #24]
 800e514:	4413      	add	r3, r2
 800e516:	42bb      	cmp	r3, r7
 800e518:	d3e0      	bcc.n	800e4dc <__gethex+0x22c>
 800e51a:	4618      	mov	r0, r3
 800e51c:	9901      	ldr	r1, [sp, #4]
 800e51e:	9307      	str	r3, [sp, #28]
 800e520:	4652      	mov	r2, sl
 800e522:	f001 fadc 	bl	800fade <strncmp>
 800e526:	9b07      	ldr	r3, [sp, #28]
 800e528:	2800      	cmp	r0, #0
 800e52a:	d1d7      	bne.n	800e4dc <__gethex+0x22c>
 800e52c:	461e      	mov	r6, r3
 800e52e:	e78b      	b.n	800e448 <__gethex+0x198>
 800e530:	f04f 0a03 	mov.w	sl, #3
 800e534:	e7b8      	b.n	800e4a8 <__gethex+0x1f8>
 800e536:	da0a      	bge.n	800e54e <__gethex+0x29e>
 800e538:	1a37      	subs	r7, r6, r0
 800e53a:	4621      	mov	r1, r4
 800e53c:	ee18 0a10 	vmov	r0, s16
 800e540:	463a      	mov	r2, r7
 800e542:	f000 fc9f 	bl	800ee84 <__lshift>
 800e546:	1bed      	subs	r5, r5, r7
 800e548:	4604      	mov	r4, r0
 800e54a:	f100 0914 	add.w	r9, r0, #20
 800e54e:	f04f 0a00 	mov.w	sl, #0
 800e552:	e7ae      	b.n	800e4b2 <__gethex+0x202>
 800e554:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e558:	42a8      	cmp	r0, r5
 800e55a:	dd72      	ble.n	800e642 <__gethex+0x392>
 800e55c:	1b45      	subs	r5, r0, r5
 800e55e:	42ae      	cmp	r6, r5
 800e560:	dc36      	bgt.n	800e5d0 <__gethex+0x320>
 800e562:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e566:	2b02      	cmp	r3, #2
 800e568:	d02a      	beq.n	800e5c0 <__gethex+0x310>
 800e56a:	2b03      	cmp	r3, #3
 800e56c:	d02c      	beq.n	800e5c8 <__gethex+0x318>
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d115      	bne.n	800e59e <__gethex+0x2ee>
 800e572:	42ae      	cmp	r6, r5
 800e574:	d113      	bne.n	800e59e <__gethex+0x2ee>
 800e576:	2e01      	cmp	r6, #1
 800e578:	d10b      	bne.n	800e592 <__gethex+0x2e2>
 800e57a:	9a04      	ldr	r2, [sp, #16]
 800e57c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e580:	6013      	str	r3, [r2, #0]
 800e582:	2301      	movs	r3, #1
 800e584:	6123      	str	r3, [r4, #16]
 800e586:	f8c9 3000 	str.w	r3, [r9]
 800e58a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e58c:	2762      	movs	r7, #98	; 0x62
 800e58e:	601c      	str	r4, [r3, #0]
 800e590:	e723      	b.n	800e3da <__gethex+0x12a>
 800e592:	1e71      	subs	r1, r6, #1
 800e594:	4620      	mov	r0, r4
 800e596:	f000 feb4 	bl	800f302 <__any_on>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d1ed      	bne.n	800e57a <__gethex+0x2ca>
 800e59e:	ee18 0a10 	vmov	r0, s16
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	f000 fa52 	bl	800ea4c <_Bfree>
 800e5a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6013      	str	r3, [r2, #0]
 800e5ae:	2750      	movs	r7, #80	; 0x50
 800e5b0:	e713      	b.n	800e3da <__gethex+0x12a>
 800e5b2:	bf00      	nop
 800e5b4:	0801016c 	.word	0x0801016c
 800e5b8:	0801008c 	.word	0x0801008c
 800e5bc:	08010100 	.word	0x08010100
 800e5c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1eb      	bne.n	800e59e <__gethex+0x2ee>
 800e5c6:	e7d8      	b.n	800e57a <__gethex+0x2ca>
 800e5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1d5      	bne.n	800e57a <__gethex+0x2ca>
 800e5ce:	e7e6      	b.n	800e59e <__gethex+0x2ee>
 800e5d0:	1e6f      	subs	r7, r5, #1
 800e5d2:	f1ba 0f00 	cmp.w	sl, #0
 800e5d6:	d131      	bne.n	800e63c <__gethex+0x38c>
 800e5d8:	b127      	cbz	r7, 800e5e4 <__gethex+0x334>
 800e5da:	4639      	mov	r1, r7
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f000 fe90 	bl	800f302 <__any_on>
 800e5e2:	4682      	mov	sl, r0
 800e5e4:	117b      	asrs	r3, r7, #5
 800e5e6:	2101      	movs	r1, #1
 800e5e8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e5ec:	f007 071f 	and.w	r7, r7, #31
 800e5f0:	fa01 f707 	lsl.w	r7, r1, r7
 800e5f4:	421f      	tst	r7, r3
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	bf18      	it	ne
 800e5fc:	f04a 0a02 	orrne.w	sl, sl, #2
 800e600:	1b76      	subs	r6, r6, r5
 800e602:	f7ff fdee 	bl	800e1e2 <rshift>
 800e606:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e60a:	2702      	movs	r7, #2
 800e60c:	f1ba 0f00 	cmp.w	sl, #0
 800e610:	d048      	beq.n	800e6a4 <__gethex+0x3f4>
 800e612:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e616:	2b02      	cmp	r3, #2
 800e618:	d015      	beq.n	800e646 <__gethex+0x396>
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d017      	beq.n	800e64e <__gethex+0x39e>
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d109      	bne.n	800e636 <__gethex+0x386>
 800e622:	f01a 0f02 	tst.w	sl, #2
 800e626:	d006      	beq.n	800e636 <__gethex+0x386>
 800e628:	f8d9 0000 	ldr.w	r0, [r9]
 800e62c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e630:	f01a 0f01 	tst.w	sl, #1
 800e634:	d10e      	bne.n	800e654 <__gethex+0x3a4>
 800e636:	f047 0710 	orr.w	r7, r7, #16
 800e63a:	e033      	b.n	800e6a4 <__gethex+0x3f4>
 800e63c:	f04f 0a01 	mov.w	sl, #1
 800e640:	e7d0      	b.n	800e5e4 <__gethex+0x334>
 800e642:	2701      	movs	r7, #1
 800e644:	e7e2      	b.n	800e60c <__gethex+0x35c>
 800e646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e648:	f1c3 0301 	rsb	r3, r3, #1
 800e64c:	9315      	str	r3, [sp, #84]	; 0x54
 800e64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e650:	2b00      	cmp	r3, #0
 800e652:	d0f0      	beq.n	800e636 <__gethex+0x386>
 800e654:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e658:	f104 0314 	add.w	r3, r4, #20
 800e65c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e660:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e664:	f04f 0c00 	mov.w	ip, #0
 800e668:	4618      	mov	r0, r3
 800e66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e66e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e672:	d01c      	beq.n	800e6ae <__gethex+0x3fe>
 800e674:	3201      	adds	r2, #1
 800e676:	6002      	str	r2, [r0, #0]
 800e678:	2f02      	cmp	r7, #2
 800e67a:	f104 0314 	add.w	r3, r4, #20
 800e67e:	d13f      	bne.n	800e700 <__gethex+0x450>
 800e680:	f8d8 2000 	ldr.w	r2, [r8]
 800e684:	3a01      	subs	r2, #1
 800e686:	42b2      	cmp	r2, r6
 800e688:	d10a      	bne.n	800e6a0 <__gethex+0x3f0>
 800e68a:	1171      	asrs	r1, r6, #5
 800e68c:	2201      	movs	r2, #1
 800e68e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e692:	f006 061f 	and.w	r6, r6, #31
 800e696:	fa02 f606 	lsl.w	r6, r2, r6
 800e69a:	421e      	tst	r6, r3
 800e69c:	bf18      	it	ne
 800e69e:	4617      	movne	r7, r2
 800e6a0:	f047 0720 	orr.w	r7, r7, #32
 800e6a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6a6:	601c      	str	r4, [r3, #0]
 800e6a8:	9b04      	ldr	r3, [sp, #16]
 800e6aa:	601d      	str	r5, [r3, #0]
 800e6ac:	e695      	b.n	800e3da <__gethex+0x12a>
 800e6ae:	4299      	cmp	r1, r3
 800e6b0:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6b4:	d8d8      	bhi.n	800e668 <__gethex+0x3b8>
 800e6b6:	68a3      	ldr	r3, [r4, #8]
 800e6b8:	459b      	cmp	fp, r3
 800e6ba:	db19      	blt.n	800e6f0 <__gethex+0x440>
 800e6bc:	6861      	ldr	r1, [r4, #4]
 800e6be:	ee18 0a10 	vmov	r0, s16
 800e6c2:	3101      	adds	r1, #1
 800e6c4:	f000 f982 	bl	800e9cc <_Balloc>
 800e6c8:	4681      	mov	r9, r0
 800e6ca:	b918      	cbnz	r0, 800e6d4 <__gethex+0x424>
 800e6cc:	4b1a      	ldr	r3, [pc, #104]	; (800e738 <__gethex+0x488>)
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	2184      	movs	r1, #132	; 0x84
 800e6d2:	e6a8      	b.n	800e426 <__gethex+0x176>
 800e6d4:	6922      	ldr	r2, [r4, #16]
 800e6d6:	3202      	adds	r2, #2
 800e6d8:	f104 010c 	add.w	r1, r4, #12
 800e6dc:	0092      	lsls	r2, r2, #2
 800e6de:	300c      	adds	r0, #12
 800e6e0:	f7fc ff6c 	bl	800b5bc <memcpy>
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	ee18 0a10 	vmov	r0, s16
 800e6ea:	f000 f9af 	bl	800ea4c <_Bfree>
 800e6ee:	464c      	mov	r4, r9
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	1c5a      	adds	r2, r3, #1
 800e6f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6f8:	6122      	str	r2, [r4, #16]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	615a      	str	r2, [r3, #20]
 800e6fe:	e7bb      	b.n	800e678 <__gethex+0x3c8>
 800e700:	6922      	ldr	r2, [r4, #16]
 800e702:	455a      	cmp	r2, fp
 800e704:	dd0b      	ble.n	800e71e <__gethex+0x46e>
 800e706:	2101      	movs	r1, #1
 800e708:	4620      	mov	r0, r4
 800e70a:	f7ff fd6a 	bl	800e1e2 <rshift>
 800e70e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e712:	3501      	adds	r5, #1
 800e714:	42ab      	cmp	r3, r5
 800e716:	f6ff aed0 	blt.w	800e4ba <__gethex+0x20a>
 800e71a:	2701      	movs	r7, #1
 800e71c:	e7c0      	b.n	800e6a0 <__gethex+0x3f0>
 800e71e:	f016 061f 	ands.w	r6, r6, #31
 800e722:	d0fa      	beq.n	800e71a <__gethex+0x46a>
 800e724:	449a      	add	sl, r3
 800e726:	f1c6 0620 	rsb	r6, r6, #32
 800e72a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e72e:	f000 fa43 	bl	800ebb8 <__hi0bits>
 800e732:	42b0      	cmp	r0, r6
 800e734:	dbe7      	blt.n	800e706 <__gethex+0x456>
 800e736:	e7f0      	b.n	800e71a <__gethex+0x46a>
 800e738:	0801008c 	.word	0x0801008c

0800e73c <L_shift>:
 800e73c:	f1c2 0208 	rsb	r2, r2, #8
 800e740:	0092      	lsls	r2, r2, #2
 800e742:	b570      	push	{r4, r5, r6, lr}
 800e744:	f1c2 0620 	rsb	r6, r2, #32
 800e748:	6843      	ldr	r3, [r0, #4]
 800e74a:	6804      	ldr	r4, [r0, #0]
 800e74c:	fa03 f506 	lsl.w	r5, r3, r6
 800e750:	432c      	orrs	r4, r5
 800e752:	40d3      	lsrs	r3, r2
 800e754:	6004      	str	r4, [r0, #0]
 800e756:	f840 3f04 	str.w	r3, [r0, #4]!
 800e75a:	4288      	cmp	r0, r1
 800e75c:	d3f4      	bcc.n	800e748 <L_shift+0xc>
 800e75e:	bd70      	pop	{r4, r5, r6, pc}

0800e760 <__match>:
 800e760:	b530      	push	{r4, r5, lr}
 800e762:	6803      	ldr	r3, [r0, #0]
 800e764:	3301      	adds	r3, #1
 800e766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e76a:	b914      	cbnz	r4, 800e772 <__match+0x12>
 800e76c:	6003      	str	r3, [r0, #0]
 800e76e:	2001      	movs	r0, #1
 800e770:	bd30      	pop	{r4, r5, pc}
 800e772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e776:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e77a:	2d19      	cmp	r5, #25
 800e77c:	bf98      	it	ls
 800e77e:	3220      	addls	r2, #32
 800e780:	42a2      	cmp	r2, r4
 800e782:	d0f0      	beq.n	800e766 <__match+0x6>
 800e784:	2000      	movs	r0, #0
 800e786:	e7f3      	b.n	800e770 <__match+0x10>

0800e788 <__hexnan>:
 800e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78c:	680b      	ldr	r3, [r1, #0]
 800e78e:	6801      	ldr	r1, [r0, #0]
 800e790:	115e      	asrs	r6, r3, #5
 800e792:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e796:	f013 031f 	ands.w	r3, r3, #31
 800e79a:	b087      	sub	sp, #28
 800e79c:	bf18      	it	ne
 800e79e:	3604      	addne	r6, #4
 800e7a0:	2500      	movs	r5, #0
 800e7a2:	1f37      	subs	r7, r6, #4
 800e7a4:	4682      	mov	sl, r0
 800e7a6:	4690      	mov	r8, r2
 800e7a8:	9301      	str	r3, [sp, #4]
 800e7aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7ae:	46b9      	mov	r9, r7
 800e7b0:	463c      	mov	r4, r7
 800e7b2:	9502      	str	r5, [sp, #8]
 800e7b4:	46ab      	mov	fp, r5
 800e7b6:	784a      	ldrb	r2, [r1, #1]
 800e7b8:	1c4b      	adds	r3, r1, #1
 800e7ba:	9303      	str	r3, [sp, #12]
 800e7bc:	b342      	cbz	r2, 800e810 <__hexnan+0x88>
 800e7be:	4610      	mov	r0, r2
 800e7c0:	9105      	str	r1, [sp, #20]
 800e7c2:	9204      	str	r2, [sp, #16]
 800e7c4:	f7ff fd5f 	bl	800e286 <__hexdig_fun>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d14f      	bne.n	800e86c <__hexnan+0xe4>
 800e7cc:	9a04      	ldr	r2, [sp, #16]
 800e7ce:	9905      	ldr	r1, [sp, #20]
 800e7d0:	2a20      	cmp	r2, #32
 800e7d2:	d818      	bhi.n	800e806 <__hexnan+0x7e>
 800e7d4:	9b02      	ldr	r3, [sp, #8]
 800e7d6:	459b      	cmp	fp, r3
 800e7d8:	dd13      	ble.n	800e802 <__hexnan+0x7a>
 800e7da:	454c      	cmp	r4, r9
 800e7dc:	d206      	bcs.n	800e7ec <__hexnan+0x64>
 800e7de:	2d07      	cmp	r5, #7
 800e7e0:	dc04      	bgt.n	800e7ec <__hexnan+0x64>
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	4649      	mov	r1, r9
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f7ff ffa8 	bl	800e73c <L_shift>
 800e7ec:	4544      	cmp	r4, r8
 800e7ee:	d950      	bls.n	800e892 <__hexnan+0x10a>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f1a4 0904 	sub.w	r9, r4, #4
 800e7f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7fa:	f8cd b008 	str.w	fp, [sp, #8]
 800e7fe:	464c      	mov	r4, r9
 800e800:	461d      	mov	r5, r3
 800e802:	9903      	ldr	r1, [sp, #12]
 800e804:	e7d7      	b.n	800e7b6 <__hexnan+0x2e>
 800e806:	2a29      	cmp	r2, #41	; 0x29
 800e808:	d156      	bne.n	800e8b8 <__hexnan+0x130>
 800e80a:	3102      	adds	r1, #2
 800e80c:	f8ca 1000 	str.w	r1, [sl]
 800e810:	f1bb 0f00 	cmp.w	fp, #0
 800e814:	d050      	beq.n	800e8b8 <__hexnan+0x130>
 800e816:	454c      	cmp	r4, r9
 800e818:	d206      	bcs.n	800e828 <__hexnan+0xa0>
 800e81a:	2d07      	cmp	r5, #7
 800e81c:	dc04      	bgt.n	800e828 <__hexnan+0xa0>
 800e81e:	462a      	mov	r2, r5
 800e820:	4649      	mov	r1, r9
 800e822:	4620      	mov	r0, r4
 800e824:	f7ff ff8a 	bl	800e73c <L_shift>
 800e828:	4544      	cmp	r4, r8
 800e82a:	d934      	bls.n	800e896 <__hexnan+0x10e>
 800e82c:	f1a8 0204 	sub.w	r2, r8, #4
 800e830:	4623      	mov	r3, r4
 800e832:	f853 1b04 	ldr.w	r1, [r3], #4
 800e836:	f842 1f04 	str.w	r1, [r2, #4]!
 800e83a:	429f      	cmp	r7, r3
 800e83c:	d2f9      	bcs.n	800e832 <__hexnan+0xaa>
 800e83e:	1b3b      	subs	r3, r7, r4
 800e840:	f023 0303 	bic.w	r3, r3, #3
 800e844:	3304      	adds	r3, #4
 800e846:	3401      	adds	r4, #1
 800e848:	3e03      	subs	r6, #3
 800e84a:	42b4      	cmp	r4, r6
 800e84c:	bf88      	it	hi
 800e84e:	2304      	movhi	r3, #4
 800e850:	4443      	add	r3, r8
 800e852:	2200      	movs	r2, #0
 800e854:	f843 2b04 	str.w	r2, [r3], #4
 800e858:	429f      	cmp	r7, r3
 800e85a:	d2fb      	bcs.n	800e854 <__hexnan+0xcc>
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	b91b      	cbnz	r3, 800e868 <__hexnan+0xe0>
 800e860:	4547      	cmp	r7, r8
 800e862:	d127      	bne.n	800e8b4 <__hexnan+0x12c>
 800e864:	2301      	movs	r3, #1
 800e866:	603b      	str	r3, [r7, #0]
 800e868:	2005      	movs	r0, #5
 800e86a:	e026      	b.n	800e8ba <__hexnan+0x132>
 800e86c:	3501      	adds	r5, #1
 800e86e:	2d08      	cmp	r5, #8
 800e870:	f10b 0b01 	add.w	fp, fp, #1
 800e874:	dd06      	ble.n	800e884 <__hexnan+0xfc>
 800e876:	4544      	cmp	r4, r8
 800e878:	d9c3      	bls.n	800e802 <__hexnan+0x7a>
 800e87a:	2300      	movs	r3, #0
 800e87c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e880:	2501      	movs	r5, #1
 800e882:	3c04      	subs	r4, #4
 800e884:	6822      	ldr	r2, [r4, #0]
 800e886:	f000 000f 	and.w	r0, r0, #15
 800e88a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e88e:	6022      	str	r2, [r4, #0]
 800e890:	e7b7      	b.n	800e802 <__hexnan+0x7a>
 800e892:	2508      	movs	r5, #8
 800e894:	e7b5      	b.n	800e802 <__hexnan+0x7a>
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d0df      	beq.n	800e85c <__hexnan+0xd4>
 800e89c:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a0:	f1c3 0320 	rsb	r3, r3, #32
 800e8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800e8a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e8ac:	401a      	ands	r2, r3
 800e8ae:	f846 2c04 	str.w	r2, [r6, #-4]
 800e8b2:	e7d3      	b.n	800e85c <__hexnan+0xd4>
 800e8b4:	3f04      	subs	r7, #4
 800e8b6:	e7d1      	b.n	800e85c <__hexnan+0xd4>
 800e8b8:	2004      	movs	r0, #4
 800e8ba:	b007      	add	sp, #28
 800e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8c0 <_localeconv_r>:
 800e8c0:	4800      	ldr	r0, [pc, #0]	; (800e8c4 <_localeconv_r+0x4>)
 800e8c2:	4770      	bx	lr
 800e8c4:	2400016c 	.word	0x2400016c

0800e8c8 <__retarget_lock_init_recursive>:
 800e8c8:	4770      	bx	lr

0800e8ca <__retarget_lock_acquire_recursive>:
 800e8ca:	4770      	bx	lr

0800e8cc <__retarget_lock_release_recursive>:
 800e8cc:	4770      	bx	lr

0800e8ce <__swhatbuf_r>:
 800e8ce:	b570      	push	{r4, r5, r6, lr}
 800e8d0:	460e      	mov	r6, r1
 800e8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d6:	2900      	cmp	r1, #0
 800e8d8:	b096      	sub	sp, #88	; 0x58
 800e8da:	4614      	mov	r4, r2
 800e8dc:	461d      	mov	r5, r3
 800e8de:	da07      	bge.n	800e8f0 <__swhatbuf_r+0x22>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	602b      	str	r3, [r5, #0]
 800e8e4:	89b3      	ldrh	r3, [r6, #12]
 800e8e6:	061a      	lsls	r2, r3, #24
 800e8e8:	d410      	bmi.n	800e90c <__swhatbuf_r+0x3e>
 800e8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8ee:	e00e      	b.n	800e90e <__swhatbuf_r+0x40>
 800e8f0:	466a      	mov	r2, sp
 800e8f2:	f001 f965 	bl	800fbc0 <_fstat_r>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	dbf2      	blt.n	800e8e0 <__swhatbuf_r+0x12>
 800e8fa:	9a01      	ldr	r2, [sp, #4]
 800e8fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e904:	425a      	negs	r2, r3
 800e906:	415a      	adcs	r2, r3
 800e908:	602a      	str	r2, [r5, #0]
 800e90a:	e7ee      	b.n	800e8ea <__swhatbuf_r+0x1c>
 800e90c:	2340      	movs	r3, #64	; 0x40
 800e90e:	2000      	movs	r0, #0
 800e910:	6023      	str	r3, [r4, #0]
 800e912:	b016      	add	sp, #88	; 0x58
 800e914:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e918 <__smakebuf_r>:
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e91c:	079d      	lsls	r5, r3, #30
 800e91e:	4606      	mov	r6, r0
 800e920:	460c      	mov	r4, r1
 800e922:	d507      	bpl.n	800e934 <__smakebuf_r+0x1c>
 800e924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	6123      	str	r3, [r4, #16]
 800e92c:	2301      	movs	r3, #1
 800e92e:	6163      	str	r3, [r4, #20]
 800e930:	b002      	add	sp, #8
 800e932:	bd70      	pop	{r4, r5, r6, pc}
 800e934:	ab01      	add	r3, sp, #4
 800e936:	466a      	mov	r2, sp
 800e938:	f7ff ffc9 	bl	800e8ce <__swhatbuf_r>
 800e93c:	9900      	ldr	r1, [sp, #0]
 800e93e:	4605      	mov	r5, r0
 800e940:	4630      	mov	r0, r6
 800e942:	f000 fd5f 	bl	800f404 <_malloc_r>
 800e946:	b948      	cbnz	r0, 800e95c <__smakebuf_r+0x44>
 800e948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94c:	059a      	lsls	r2, r3, #22
 800e94e:	d4ef      	bmi.n	800e930 <__smakebuf_r+0x18>
 800e950:	f023 0303 	bic.w	r3, r3, #3
 800e954:	f043 0302 	orr.w	r3, r3, #2
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	e7e3      	b.n	800e924 <__smakebuf_r+0xc>
 800e95c:	4b0d      	ldr	r3, [pc, #52]	; (800e994 <__smakebuf_r+0x7c>)
 800e95e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	6020      	str	r0, [r4, #0]
 800e964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e968:	81a3      	strh	r3, [r4, #12]
 800e96a:	9b00      	ldr	r3, [sp, #0]
 800e96c:	6163      	str	r3, [r4, #20]
 800e96e:	9b01      	ldr	r3, [sp, #4]
 800e970:	6120      	str	r0, [r4, #16]
 800e972:	b15b      	cbz	r3, 800e98c <__smakebuf_r+0x74>
 800e974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e978:	4630      	mov	r0, r6
 800e97a:	f001 f933 	bl	800fbe4 <_isatty_r>
 800e97e:	b128      	cbz	r0, 800e98c <__smakebuf_r+0x74>
 800e980:	89a3      	ldrh	r3, [r4, #12]
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	f043 0301 	orr.w	r3, r3, #1
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	89a0      	ldrh	r0, [r4, #12]
 800e98e:	4305      	orrs	r5, r0
 800e990:	81a5      	strh	r5, [r4, #12]
 800e992:	e7cd      	b.n	800e930 <__smakebuf_r+0x18>
 800e994:	0800e041 	.word	0x0800e041

0800e998 <malloc>:
 800e998:	4b02      	ldr	r3, [pc, #8]	; (800e9a4 <malloc+0xc>)
 800e99a:	4601      	mov	r1, r0
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	f000 bd31 	b.w	800f404 <_malloc_r>
 800e9a2:	bf00      	nop
 800e9a4:	24000014 	.word	0x24000014

0800e9a8 <__ascii_mbtowc>:
 800e9a8:	b082      	sub	sp, #8
 800e9aa:	b901      	cbnz	r1, 800e9ae <__ascii_mbtowc+0x6>
 800e9ac:	a901      	add	r1, sp, #4
 800e9ae:	b142      	cbz	r2, 800e9c2 <__ascii_mbtowc+0x1a>
 800e9b0:	b14b      	cbz	r3, 800e9c6 <__ascii_mbtowc+0x1e>
 800e9b2:	7813      	ldrb	r3, [r2, #0]
 800e9b4:	600b      	str	r3, [r1, #0]
 800e9b6:	7812      	ldrb	r2, [r2, #0]
 800e9b8:	1e10      	subs	r0, r2, #0
 800e9ba:	bf18      	it	ne
 800e9bc:	2001      	movne	r0, #1
 800e9be:	b002      	add	sp, #8
 800e9c0:	4770      	bx	lr
 800e9c2:	4610      	mov	r0, r2
 800e9c4:	e7fb      	b.n	800e9be <__ascii_mbtowc+0x16>
 800e9c6:	f06f 0001 	mvn.w	r0, #1
 800e9ca:	e7f8      	b.n	800e9be <__ascii_mbtowc+0x16>

0800e9cc <_Balloc>:
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	460d      	mov	r5, r1
 800e9d4:	b976      	cbnz	r6, 800e9f4 <_Balloc+0x28>
 800e9d6:	2010      	movs	r0, #16
 800e9d8:	f7ff ffde 	bl	800e998 <malloc>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	6260      	str	r0, [r4, #36]	; 0x24
 800e9e0:	b920      	cbnz	r0, 800e9ec <_Balloc+0x20>
 800e9e2:	4b18      	ldr	r3, [pc, #96]	; (800ea44 <_Balloc+0x78>)
 800e9e4:	4818      	ldr	r0, [pc, #96]	; (800ea48 <_Balloc+0x7c>)
 800e9e6:	2166      	movs	r1, #102	; 0x66
 800e9e8:	f001 f8aa 	bl	800fb40 <__assert_func>
 800e9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9f0:	6006      	str	r6, [r0, #0]
 800e9f2:	60c6      	str	r6, [r0, #12]
 800e9f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e9f6:	68f3      	ldr	r3, [r6, #12]
 800e9f8:	b183      	cbz	r3, 800ea1c <_Balloc+0x50>
 800e9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea02:	b9b8      	cbnz	r0, 800ea34 <_Balloc+0x68>
 800ea04:	2101      	movs	r1, #1
 800ea06:	fa01 f605 	lsl.w	r6, r1, r5
 800ea0a:	1d72      	adds	r2, r6, #5
 800ea0c:	0092      	lsls	r2, r2, #2
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f000 fc98 	bl	800f344 <_calloc_r>
 800ea14:	b160      	cbz	r0, 800ea30 <_Balloc+0x64>
 800ea16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea1a:	e00e      	b.n	800ea3a <_Balloc+0x6e>
 800ea1c:	2221      	movs	r2, #33	; 0x21
 800ea1e:	2104      	movs	r1, #4
 800ea20:	4620      	mov	r0, r4
 800ea22:	f000 fc8f 	bl	800f344 <_calloc_r>
 800ea26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea28:	60f0      	str	r0, [r6, #12]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1e4      	bne.n	800e9fa <_Balloc+0x2e>
 800ea30:	2000      	movs	r0, #0
 800ea32:	bd70      	pop	{r4, r5, r6, pc}
 800ea34:	6802      	ldr	r2, [r0, #0]
 800ea36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea40:	e7f7      	b.n	800ea32 <_Balloc+0x66>
 800ea42:	bf00      	nop
 800ea44:	08010016 	.word	0x08010016
 800ea48:	08010180 	.word	0x08010180

0800ea4c <_Bfree>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea50:	4605      	mov	r5, r0
 800ea52:	460c      	mov	r4, r1
 800ea54:	b976      	cbnz	r6, 800ea74 <_Bfree+0x28>
 800ea56:	2010      	movs	r0, #16
 800ea58:	f7ff ff9e 	bl	800e998 <malloc>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	6268      	str	r0, [r5, #36]	; 0x24
 800ea60:	b920      	cbnz	r0, 800ea6c <_Bfree+0x20>
 800ea62:	4b09      	ldr	r3, [pc, #36]	; (800ea88 <_Bfree+0x3c>)
 800ea64:	4809      	ldr	r0, [pc, #36]	; (800ea8c <_Bfree+0x40>)
 800ea66:	218a      	movs	r1, #138	; 0x8a
 800ea68:	f001 f86a 	bl	800fb40 <__assert_func>
 800ea6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea70:	6006      	str	r6, [r0, #0]
 800ea72:	60c6      	str	r6, [r0, #12]
 800ea74:	b13c      	cbz	r4, 800ea86 <_Bfree+0x3a>
 800ea76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea78:	6862      	ldr	r2, [r4, #4]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea80:	6021      	str	r1, [r4, #0]
 800ea82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea86:	bd70      	pop	{r4, r5, r6, pc}
 800ea88:	08010016 	.word	0x08010016
 800ea8c:	08010180 	.word	0x08010180

0800ea90 <__multadd>:
 800ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea94:	690e      	ldr	r6, [r1, #16]
 800ea96:	4607      	mov	r7, r0
 800ea98:	4698      	mov	r8, r3
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	f101 0014 	add.w	r0, r1, #20
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	6805      	ldr	r5, [r0, #0]
 800eaa4:	b2a9      	uxth	r1, r5
 800eaa6:	fb02 8101 	mla	r1, r2, r1, r8
 800eaaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eaae:	0c2d      	lsrs	r5, r5, #16
 800eab0:	fb02 c505 	mla	r5, r2, r5, ip
 800eab4:	b289      	uxth	r1, r1
 800eab6:	3301      	adds	r3, #1
 800eab8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eabc:	429e      	cmp	r6, r3
 800eabe:	f840 1b04 	str.w	r1, [r0], #4
 800eac2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eac6:	dcec      	bgt.n	800eaa2 <__multadd+0x12>
 800eac8:	f1b8 0f00 	cmp.w	r8, #0
 800eacc:	d022      	beq.n	800eb14 <__multadd+0x84>
 800eace:	68a3      	ldr	r3, [r4, #8]
 800ead0:	42b3      	cmp	r3, r6
 800ead2:	dc19      	bgt.n	800eb08 <__multadd+0x78>
 800ead4:	6861      	ldr	r1, [r4, #4]
 800ead6:	4638      	mov	r0, r7
 800ead8:	3101      	adds	r1, #1
 800eada:	f7ff ff77 	bl	800e9cc <_Balloc>
 800eade:	4605      	mov	r5, r0
 800eae0:	b928      	cbnz	r0, 800eaee <__multadd+0x5e>
 800eae2:	4602      	mov	r2, r0
 800eae4:	4b0d      	ldr	r3, [pc, #52]	; (800eb1c <__multadd+0x8c>)
 800eae6:	480e      	ldr	r0, [pc, #56]	; (800eb20 <__multadd+0x90>)
 800eae8:	21b5      	movs	r1, #181	; 0xb5
 800eaea:	f001 f829 	bl	800fb40 <__assert_func>
 800eaee:	6922      	ldr	r2, [r4, #16]
 800eaf0:	3202      	adds	r2, #2
 800eaf2:	f104 010c 	add.w	r1, r4, #12
 800eaf6:	0092      	lsls	r2, r2, #2
 800eaf8:	300c      	adds	r0, #12
 800eafa:	f7fc fd5f 	bl	800b5bc <memcpy>
 800eafe:	4621      	mov	r1, r4
 800eb00:	4638      	mov	r0, r7
 800eb02:	f7ff ffa3 	bl	800ea4c <_Bfree>
 800eb06:	462c      	mov	r4, r5
 800eb08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800eb0c:	3601      	adds	r6, #1
 800eb0e:	f8c3 8014 	str.w	r8, [r3, #20]
 800eb12:	6126      	str	r6, [r4, #16]
 800eb14:	4620      	mov	r0, r4
 800eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1a:	bf00      	nop
 800eb1c:	0801008c 	.word	0x0801008c
 800eb20:	08010180 	.word	0x08010180

0800eb24 <__s2b>:
 800eb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb28:	460c      	mov	r4, r1
 800eb2a:	4615      	mov	r5, r2
 800eb2c:	461f      	mov	r7, r3
 800eb2e:	2209      	movs	r2, #9
 800eb30:	3308      	adds	r3, #8
 800eb32:	4606      	mov	r6, r0
 800eb34:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb38:	2100      	movs	r1, #0
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	db09      	blt.n	800eb54 <__s2b+0x30>
 800eb40:	4630      	mov	r0, r6
 800eb42:	f7ff ff43 	bl	800e9cc <_Balloc>
 800eb46:	b940      	cbnz	r0, 800eb5a <__s2b+0x36>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	4b19      	ldr	r3, [pc, #100]	; (800ebb0 <__s2b+0x8c>)
 800eb4c:	4819      	ldr	r0, [pc, #100]	; (800ebb4 <__s2b+0x90>)
 800eb4e:	21ce      	movs	r1, #206	; 0xce
 800eb50:	f000 fff6 	bl	800fb40 <__assert_func>
 800eb54:	0052      	lsls	r2, r2, #1
 800eb56:	3101      	adds	r1, #1
 800eb58:	e7f0      	b.n	800eb3c <__s2b+0x18>
 800eb5a:	9b08      	ldr	r3, [sp, #32]
 800eb5c:	6143      	str	r3, [r0, #20]
 800eb5e:	2d09      	cmp	r5, #9
 800eb60:	f04f 0301 	mov.w	r3, #1
 800eb64:	6103      	str	r3, [r0, #16]
 800eb66:	dd16      	ble.n	800eb96 <__s2b+0x72>
 800eb68:	f104 0909 	add.w	r9, r4, #9
 800eb6c:	46c8      	mov	r8, r9
 800eb6e:	442c      	add	r4, r5
 800eb70:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb74:	4601      	mov	r1, r0
 800eb76:	3b30      	subs	r3, #48	; 0x30
 800eb78:	220a      	movs	r2, #10
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f7ff ff88 	bl	800ea90 <__multadd>
 800eb80:	45a0      	cmp	r8, r4
 800eb82:	d1f5      	bne.n	800eb70 <__s2b+0x4c>
 800eb84:	f1a5 0408 	sub.w	r4, r5, #8
 800eb88:	444c      	add	r4, r9
 800eb8a:	1b2d      	subs	r5, r5, r4
 800eb8c:	1963      	adds	r3, r4, r5
 800eb8e:	42bb      	cmp	r3, r7
 800eb90:	db04      	blt.n	800eb9c <__s2b+0x78>
 800eb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb96:	340a      	adds	r4, #10
 800eb98:	2509      	movs	r5, #9
 800eb9a:	e7f6      	b.n	800eb8a <__s2b+0x66>
 800eb9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eba0:	4601      	mov	r1, r0
 800eba2:	3b30      	subs	r3, #48	; 0x30
 800eba4:	220a      	movs	r2, #10
 800eba6:	4630      	mov	r0, r6
 800eba8:	f7ff ff72 	bl	800ea90 <__multadd>
 800ebac:	e7ee      	b.n	800eb8c <__s2b+0x68>
 800ebae:	bf00      	nop
 800ebb0:	0801008c 	.word	0x0801008c
 800ebb4:	08010180 	.word	0x08010180

0800ebb8 <__hi0bits>:
 800ebb8:	0c03      	lsrs	r3, r0, #16
 800ebba:	041b      	lsls	r3, r3, #16
 800ebbc:	b9d3      	cbnz	r3, 800ebf4 <__hi0bits+0x3c>
 800ebbe:	0400      	lsls	r0, r0, #16
 800ebc0:	2310      	movs	r3, #16
 800ebc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebc6:	bf04      	itt	eq
 800ebc8:	0200      	lsleq	r0, r0, #8
 800ebca:	3308      	addeq	r3, #8
 800ebcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebd0:	bf04      	itt	eq
 800ebd2:	0100      	lsleq	r0, r0, #4
 800ebd4:	3304      	addeq	r3, #4
 800ebd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebda:	bf04      	itt	eq
 800ebdc:	0080      	lsleq	r0, r0, #2
 800ebde:	3302      	addeq	r3, #2
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	db05      	blt.n	800ebf0 <__hi0bits+0x38>
 800ebe4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ebe8:	f103 0301 	add.w	r3, r3, #1
 800ebec:	bf08      	it	eq
 800ebee:	2320      	moveq	r3, #32
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	4770      	bx	lr
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e7e4      	b.n	800ebc2 <__hi0bits+0xa>

0800ebf8 <__lo0bits>:
 800ebf8:	6803      	ldr	r3, [r0, #0]
 800ebfa:	f013 0207 	ands.w	r2, r3, #7
 800ebfe:	4601      	mov	r1, r0
 800ec00:	d00b      	beq.n	800ec1a <__lo0bits+0x22>
 800ec02:	07da      	lsls	r2, r3, #31
 800ec04:	d424      	bmi.n	800ec50 <__lo0bits+0x58>
 800ec06:	0798      	lsls	r0, r3, #30
 800ec08:	bf49      	itett	mi
 800ec0a:	085b      	lsrmi	r3, r3, #1
 800ec0c:	089b      	lsrpl	r3, r3, #2
 800ec0e:	2001      	movmi	r0, #1
 800ec10:	600b      	strmi	r3, [r1, #0]
 800ec12:	bf5c      	itt	pl
 800ec14:	600b      	strpl	r3, [r1, #0]
 800ec16:	2002      	movpl	r0, #2
 800ec18:	4770      	bx	lr
 800ec1a:	b298      	uxth	r0, r3
 800ec1c:	b9b0      	cbnz	r0, 800ec4c <__lo0bits+0x54>
 800ec1e:	0c1b      	lsrs	r3, r3, #16
 800ec20:	2010      	movs	r0, #16
 800ec22:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec26:	bf04      	itt	eq
 800ec28:	0a1b      	lsreq	r3, r3, #8
 800ec2a:	3008      	addeq	r0, #8
 800ec2c:	071a      	lsls	r2, r3, #28
 800ec2e:	bf04      	itt	eq
 800ec30:	091b      	lsreq	r3, r3, #4
 800ec32:	3004      	addeq	r0, #4
 800ec34:	079a      	lsls	r2, r3, #30
 800ec36:	bf04      	itt	eq
 800ec38:	089b      	lsreq	r3, r3, #2
 800ec3a:	3002      	addeq	r0, #2
 800ec3c:	07da      	lsls	r2, r3, #31
 800ec3e:	d403      	bmi.n	800ec48 <__lo0bits+0x50>
 800ec40:	085b      	lsrs	r3, r3, #1
 800ec42:	f100 0001 	add.w	r0, r0, #1
 800ec46:	d005      	beq.n	800ec54 <__lo0bits+0x5c>
 800ec48:	600b      	str	r3, [r1, #0]
 800ec4a:	4770      	bx	lr
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	e7e8      	b.n	800ec22 <__lo0bits+0x2a>
 800ec50:	2000      	movs	r0, #0
 800ec52:	4770      	bx	lr
 800ec54:	2020      	movs	r0, #32
 800ec56:	4770      	bx	lr

0800ec58 <__i2b>:
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	2101      	movs	r1, #1
 800ec5e:	f7ff feb5 	bl	800e9cc <_Balloc>
 800ec62:	4602      	mov	r2, r0
 800ec64:	b928      	cbnz	r0, 800ec72 <__i2b+0x1a>
 800ec66:	4b05      	ldr	r3, [pc, #20]	; (800ec7c <__i2b+0x24>)
 800ec68:	4805      	ldr	r0, [pc, #20]	; (800ec80 <__i2b+0x28>)
 800ec6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec6e:	f000 ff67 	bl	800fb40 <__assert_func>
 800ec72:	2301      	movs	r3, #1
 800ec74:	6144      	str	r4, [r0, #20]
 800ec76:	6103      	str	r3, [r0, #16]
 800ec78:	bd10      	pop	{r4, pc}
 800ec7a:	bf00      	nop
 800ec7c:	0801008c 	.word	0x0801008c
 800ec80:	08010180 	.word	0x08010180

0800ec84 <__multiply>:
 800ec84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec88:	4614      	mov	r4, r2
 800ec8a:	690a      	ldr	r2, [r1, #16]
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	bfb8      	it	lt
 800ec92:	460b      	movlt	r3, r1
 800ec94:	460d      	mov	r5, r1
 800ec96:	bfbc      	itt	lt
 800ec98:	4625      	movlt	r5, r4
 800ec9a:	461c      	movlt	r4, r3
 800ec9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eca0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eca4:	68ab      	ldr	r3, [r5, #8]
 800eca6:	6869      	ldr	r1, [r5, #4]
 800eca8:	eb0a 0709 	add.w	r7, sl, r9
 800ecac:	42bb      	cmp	r3, r7
 800ecae:	b085      	sub	sp, #20
 800ecb0:	bfb8      	it	lt
 800ecb2:	3101      	addlt	r1, #1
 800ecb4:	f7ff fe8a 	bl	800e9cc <_Balloc>
 800ecb8:	b930      	cbnz	r0, 800ecc8 <__multiply+0x44>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	4b42      	ldr	r3, [pc, #264]	; (800edc8 <__multiply+0x144>)
 800ecbe:	4843      	ldr	r0, [pc, #268]	; (800edcc <__multiply+0x148>)
 800ecc0:	f240 115d 	movw	r1, #349	; 0x15d
 800ecc4:	f000 ff3c 	bl	800fb40 <__assert_func>
 800ecc8:	f100 0614 	add.w	r6, r0, #20
 800eccc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ecd0:	4633      	mov	r3, r6
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	4543      	cmp	r3, r8
 800ecd6:	d31e      	bcc.n	800ed16 <__multiply+0x92>
 800ecd8:	f105 0c14 	add.w	ip, r5, #20
 800ecdc:	f104 0314 	add.w	r3, r4, #20
 800ece0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ece4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ece8:	9202      	str	r2, [sp, #8]
 800ecea:	ebac 0205 	sub.w	r2, ip, r5
 800ecee:	3a15      	subs	r2, #21
 800ecf0:	f022 0203 	bic.w	r2, r2, #3
 800ecf4:	3204      	adds	r2, #4
 800ecf6:	f105 0115 	add.w	r1, r5, #21
 800ecfa:	458c      	cmp	ip, r1
 800ecfc:	bf38      	it	cc
 800ecfe:	2204      	movcc	r2, #4
 800ed00:	9201      	str	r2, [sp, #4]
 800ed02:	9a02      	ldr	r2, [sp, #8]
 800ed04:	9303      	str	r3, [sp, #12]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d808      	bhi.n	800ed1c <__multiply+0x98>
 800ed0a:	2f00      	cmp	r7, #0
 800ed0c:	dc55      	bgt.n	800edba <__multiply+0x136>
 800ed0e:	6107      	str	r7, [r0, #16]
 800ed10:	b005      	add	sp, #20
 800ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed16:	f843 2b04 	str.w	r2, [r3], #4
 800ed1a:	e7db      	b.n	800ecd4 <__multiply+0x50>
 800ed1c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed20:	f1ba 0f00 	cmp.w	sl, #0
 800ed24:	d020      	beq.n	800ed68 <__multiply+0xe4>
 800ed26:	f105 0e14 	add.w	lr, r5, #20
 800ed2a:	46b1      	mov	r9, r6
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ed32:	f8d9 b000 	ldr.w	fp, [r9]
 800ed36:	b2a1      	uxth	r1, r4
 800ed38:	fa1f fb8b 	uxth.w	fp, fp
 800ed3c:	fb0a b101 	mla	r1, sl, r1, fp
 800ed40:	4411      	add	r1, r2
 800ed42:	f8d9 2000 	ldr.w	r2, [r9]
 800ed46:	0c24      	lsrs	r4, r4, #16
 800ed48:	0c12      	lsrs	r2, r2, #16
 800ed4a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ed4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ed52:	b289      	uxth	r1, r1
 800ed54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ed58:	45f4      	cmp	ip, lr
 800ed5a:	f849 1b04 	str.w	r1, [r9], #4
 800ed5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ed62:	d8e4      	bhi.n	800ed2e <__multiply+0xaa>
 800ed64:	9901      	ldr	r1, [sp, #4]
 800ed66:	5072      	str	r2, [r6, r1]
 800ed68:	9a03      	ldr	r2, [sp, #12]
 800ed6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	f1b9 0f00 	cmp.w	r9, #0
 800ed74:	d01f      	beq.n	800edb6 <__multiply+0x132>
 800ed76:	6834      	ldr	r4, [r6, #0]
 800ed78:	f105 0114 	add.w	r1, r5, #20
 800ed7c:	46b6      	mov	lr, r6
 800ed7e:	f04f 0a00 	mov.w	sl, #0
 800ed82:	880a      	ldrh	r2, [r1, #0]
 800ed84:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ed88:	fb09 b202 	mla	r2, r9, r2, fp
 800ed8c:	4492      	add	sl, r2
 800ed8e:	b2a4      	uxth	r4, r4
 800ed90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ed94:	f84e 4b04 	str.w	r4, [lr], #4
 800ed98:	f851 4b04 	ldr.w	r4, [r1], #4
 800ed9c:	f8be 2000 	ldrh.w	r2, [lr]
 800eda0:	0c24      	lsrs	r4, r4, #16
 800eda2:	fb09 2404 	mla	r4, r9, r4, r2
 800eda6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800edaa:	458c      	cmp	ip, r1
 800edac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800edb0:	d8e7      	bhi.n	800ed82 <__multiply+0xfe>
 800edb2:	9a01      	ldr	r2, [sp, #4]
 800edb4:	50b4      	str	r4, [r6, r2]
 800edb6:	3604      	adds	r6, #4
 800edb8:	e7a3      	b.n	800ed02 <__multiply+0x7e>
 800edba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1a5      	bne.n	800ed0e <__multiply+0x8a>
 800edc2:	3f01      	subs	r7, #1
 800edc4:	e7a1      	b.n	800ed0a <__multiply+0x86>
 800edc6:	bf00      	nop
 800edc8:	0801008c 	.word	0x0801008c
 800edcc:	08010180 	.word	0x08010180

0800edd0 <__pow5mult>:
 800edd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edd4:	4615      	mov	r5, r2
 800edd6:	f012 0203 	ands.w	r2, r2, #3
 800edda:	4606      	mov	r6, r0
 800eddc:	460f      	mov	r7, r1
 800edde:	d007      	beq.n	800edf0 <__pow5mult+0x20>
 800ede0:	4c25      	ldr	r4, [pc, #148]	; (800ee78 <__pow5mult+0xa8>)
 800ede2:	3a01      	subs	r2, #1
 800ede4:	2300      	movs	r3, #0
 800ede6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edea:	f7ff fe51 	bl	800ea90 <__multadd>
 800edee:	4607      	mov	r7, r0
 800edf0:	10ad      	asrs	r5, r5, #2
 800edf2:	d03d      	beq.n	800ee70 <__pow5mult+0xa0>
 800edf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800edf6:	b97c      	cbnz	r4, 800ee18 <__pow5mult+0x48>
 800edf8:	2010      	movs	r0, #16
 800edfa:	f7ff fdcd 	bl	800e998 <malloc>
 800edfe:	4602      	mov	r2, r0
 800ee00:	6270      	str	r0, [r6, #36]	; 0x24
 800ee02:	b928      	cbnz	r0, 800ee10 <__pow5mult+0x40>
 800ee04:	4b1d      	ldr	r3, [pc, #116]	; (800ee7c <__pow5mult+0xac>)
 800ee06:	481e      	ldr	r0, [pc, #120]	; (800ee80 <__pow5mult+0xb0>)
 800ee08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee0c:	f000 fe98 	bl	800fb40 <__assert_func>
 800ee10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee14:	6004      	str	r4, [r0, #0]
 800ee16:	60c4      	str	r4, [r0, #12]
 800ee18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee20:	b94c      	cbnz	r4, 800ee36 <__pow5mult+0x66>
 800ee22:	f240 2171 	movw	r1, #625	; 0x271
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7ff ff16 	bl	800ec58 <__i2b>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee32:	4604      	mov	r4, r0
 800ee34:	6003      	str	r3, [r0, #0]
 800ee36:	f04f 0900 	mov.w	r9, #0
 800ee3a:	07eb      	lsls	r3, r5, #31
 800ee3c:	d50a      	bpl.n	800ee54 <__pow5mult+0x84>
 800ee3e:	4639      	mov	r1, r7
 800ee40:	4622      	mov	r2, r4
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff ff1e 	bl	800ec84 <__multiply>
 800ee48:	4639      	mov	r1, r7
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f7ff fdfd 	bl	800ea4c <_Bfree>
 800ee52:	4647      	mov	r7, r8
 800ee54:	106d      	asrs	r5, r5, #1
 800ee56:	d00b      	beq.n	800ee70 <__pow5mult+0xa0>
 800ee58:	6820      	ldr	r0, [r4, #0]
 800ee5a:	b938      	cbnz	r0, 800ee6c <__pow5mult+0x9c>
 800ee5c:	4622      	mov	r2, r4
 800ee5e:	4621      	mov	r1, r4
 800ee60:	4630      	mov	r0, r6
 800ee62:	f7ff ff0f 	bl	800ec84 <__multiply>
 800ee66:	6020      	str	r0, [r4, #0]
 800ee68:	f8c0 9000 	str.w	r9, [r0]
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	e7e4      	b.n	800ee3a <__pow5mult+0x6a>
 800ee70:	4638      	mov	r0, r7
 800ee72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee76:	bf00      	nop
 800ee78:	080102d0 	.word	0x080102d0
 800ee7c:	08010016 	.word	0x08010016
 800ee80:	08010180 	.word	0x08010180

0800ee84 <__lshift>:
 800ee84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee88:	460c      	mov	r4, r1
 800ee8a:	6849      	ldr	r1, [r1, #4]
 800ee8c:	6923      	ldr	r3, [r4, #16]
 800ee8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee92:	68a3      	ldr	r3, [r4, #8]
 800ee94:	4607      	mov	r7, r0
 800ee96:	4691      	mov	r9, r2
 800ee98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee9c:	f108 0601 	add.w	r6, r8, #1
 800eea0:	42b3      	cmp	r3, r6
 800eea2:	db0b      	blt.n	800eebc <__lshift+0x38>
 800eea4:	4638      	mov	r0, r7
 800eea6:	f7ff fd91 	bl	800e9cc <_Balloc>
 800eeaa:	4605      	mov	r5, r0
 800eeac:	b948      	cbnz	r0, 800eec2 <__lshift+0x3e>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	4b28      	ldr	r3, [pc, #160]	; (800ef54 <__lshift+0xd0>)
 800eeb2:	4829      	ldr	r0, [pc, #164]	; (800ef58 <__lshift+0xd4>)
 800eeb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eeb8:	f000 fe42 	bl	800fb40 <__assert_func>
 800eebc:	3101      	adds	r1, #1
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	e7ee      	b.n	800eea0 <__lshift+0x1c>
 800eec2:	2300      	movs	r3, #0
 800eec4:	f100 0114 	add.w	r1, r0, #20
 800eec8:	f100 0210 	add.w	r2, r0, #16
 800eecc:	4618      	mov	r0, r3
 800eece:	4553      	cmp	r3, sl
 800eed0:	db33      	blt.n	800ef3a <__lshift+0xb6>
 800eed2:	6920      	ldr	r0, [r4, #16]
 800eed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eed8:	f104 0314 	add.w	r3, r4, #20
 800eedc:	f019 091f 	ands.w	r9, r9, #31
 800eee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eee8:	d02b      	beq.n	800ef42 <__lshift+0xbe>
 800eeea:	f1c9 0e20 	rsb	lr, r9, #32
 800eeee:	468a      	mov	sl, r1
 800eef0:	2200      	movs	r2, #0
 800eef2:	6818      	ldr	r0, [r3, #0]
 800eef4:	fa00 f009 	lsl.w	r0, r0, r9
 800eef8:	4302      	orrs	r2, r0
 800eefa:	f84a 2b04 	str.w	r2, [sl], #4
 800eefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef02:	459c      	cmp	ip, r3
 800ef04:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef08:	d8f3      	bhi.n	800eef2 <__lshift+0x6e>
 800ef0a:	ebac 0304 	sub.w	r3, ip, r4
 800ef0e:	3b15      	subs	r3, #21
 800ef10:	f023 0303 	bic.w	r3, r3, #3
 800ef14:	3304      	adds	r3, #4
 800ef16:	f104 0015 	add.w	r0, r4, #21
 800ef1a:	4584      	cmp	ip, r0
 800ef1c:	bf38      	it	cc
 800ef1e:	2304      	movcc	r3, #4
 800ef20:	50ca      	str	r2, [r1, r3]
 800ef22:	b10a      	cbz	r2, 800ef28 <__lshift+0xa4>
 800ef24:	f108 0602 	add.w	r6, r8, #2
 800ef28:	3e01      	subs	r6, #1
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	612e      	str	r6, [r5, #16]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	f7ff fd8c 	bl	800ea4c <_Bfree>
 800ef34:	4628      	mov	r0, r5
 800ef36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef3e:	3301      	adds	r3, #1
 800ef40:	e7c5      	b.n	800eece <__lshift+0x4a>
 800ef42:	3904      	subs	r1, #4
 800ef44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef48:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef4c:	459c      	cmp	ip, r3
 800ef4e:	d8f9      	bhi.n	800ef44 <__lshift+0xc0>
 800ef50:	e7ea      	b.n	800ef28 <__lshift+0xa4>
 800ef52:	bf00      	nop
 800ef54:	0801008c 	.word	0x0801008c
 800ef58:	08010180 	.word	0x08010180

0800ef5c <__mcmp>:
 800ef5c:	b530      	push	{r4, r5, lr}
 800ef5e:	6902      	ldr	r2, [r0, #16]
 800ef60:	690c      	ldr	r4, [r1, #16]
 800ef62:	1b12      	subs	r2, r2, r4
 800ef64:	d10e      	bne.n	800ef84 <__mcmp+0x28>
 800ef66:	f100 0314 	add.w	r3, r0, #20
 800ef6a:	3114      	adds	r1, #20
 800ef6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef7c:	42a5      	cmp	r5, r4
 800ef7e:	d003      	beq.n	800ef88 <__mcmp+0x2c>
 800ef80:	d305      	bcc.n	800ef8e <__mcmp+0x32>
 800ef82:	2201      	movs	r2, #1
 800ef84:	4610      	mov	r0, r2
 800ef86:	bd30      	pop	{r4, r5, pc}
 800ef88:	4283      	cmp	r3, r0
 800ef8a:	d3f3      	bcc.n	800ef74 <__mcmp+0x18>
 800ef8c:	e7fa      	b.n	800ef84 <__mcmp+0x28>
 800ef8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef92:	e7f7      	b.n	800ef84 <__mcmp+0x28>

0800ef94 <__mdiff>:
 800ef94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	460c      	mov	r4, r1
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	4611      	mov	r1, r2
 800ef9e:	4620      	mov	r0, r4
 800efa0:	4617      	mov	r7, r2
 800efa2:	f7ff ffdb 	bl	800ef5c <__mcmp>
 800efa6:	1e05      	subs	r5, r0, #0
 800efa8:	d110      	bne.n	800efcc <__mdiff+0x38>
 800efaa:	4629      	mov	r1, r5
 800efac:	4630      	mov	r0, r6
 800efae:	f7ff fd0d 	bl	800e9cc <_Balloc>
 800efb2:	b930      	cbnz	r0, 800efc2 <__mdiff+0x2e>
 800efb4:	4b39      	ldr	r3, [pc, #228]	; (800f09c <__mdiff+0x108>)
 800efb6:	4602      	mov	r2, r0
 800efb8:	f240 2132 	movw	r1, #562	; 0x232
 800efbc:	4838      	ldr	r0, [pc, #224]	; (800f0a0 <__mdiff+0x10c>)
 800efbe:	f000 fdbf 	bl	800fb40 <__assert_func>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efcc:	bfa4      	itt	ge
 800efce:	463b      	movge	r3, r7
 800efd0:	4627      	movge	r7, r4
 800efd2:	4630      	mov	r0, r6
 800efd4:	6879      	ldr	r1, [r7, #4]
 800efd6:	bfa6      	itte	ge
 800efd8:	461c      	movge	r4, r3
 800efda:	2500      	movge	r5, #0
 800efdc:	2501      	movlt	r5, #1
 800efde:	f7ff fcf5 	bl	800e9cc <_Balloc>
 800efe2:	b920      	cbnz	r0, 800efee <__mdiff+0x5a>
 800efe4:	4b2d      	ldr	r3, [pc, #180]	; (800f09c <__mdiff+0x108>)
 800efe6:	4602      	mov	r2, r0
 800efe8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800efec:	e7e6      	b.n	800efbc <__mdiff+0x28>
 800efee:	693e      	ldr	r6, [r7, #16]
 800eff0:	60c5      	str	r5, [r0, #12]
 800eff2:	6925      	ldr	r5, [r4, #16]
 800eff4:	f107 0114 	add.w	r1, r7, #20
 800eff8:	f104 0914 	add.w	r9, r4, #20
 800effc:	f100 0e14 	add.w	lr, r0, #20
 800f000:	f107 0210 	add.w	r2, r7, #16
 800f004:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f008:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f00c:	46f2      	mov	sl, lr
 800f00e:	2700      	movs	r7, #0
 800f010:	f859 3b04 	ldr.w	r3, [r9], #4
 800f014:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f018:	fa1f f883 	uxth.w	r8, r3
 800f01c:	fa17 f78b 	uxtah	r7, r7, fp
 800f020:	0c1b      	lsrs	r3, r3, #16
 800f022:	eba7 0808 	sub.w	r8, r7, r8
 800f026:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f02a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f02e:	fa1f f888 	uxth.w	r8, r8
 800f032:	141f      	asrs	r7, r3, #16
 800f034:	454d      	cmp	r5, r9
 800f036:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f03a:	f84a 3b04 	str.w	r3, [sl], #4
 800f03e:	d8e7      	bhi.n	800f010 <__mdiff+0x7c>
 800f040:	1b2b      	subs	r3, r5, r4
 800f042:	3b15      	subs	r3, #21
 800f044:	f023 0303 	bic.w	r3, r3, #3
 800f048:	3304      	adds	r3, #4
 800f04a:	3415      	adds	r4, #21
 800f04c:	42a5      	cmp	r5, r4
 800f04e:	bf38      	it	cc
 800f050:	2304      	movcc	r3, #4
 800f052:	4419      	add	r1, r3
 800f054:	4473      	add	r3, lr
 800f056:	469e      	mov	lr, r3
 800f058:	460d      	mov	r5, r1
 800f05a:	4565      	cmp	r5, ip
 800f05c:	d30e      	bcc.n	800f07c <__mdiff+0xe8>
 800f05e:	f10c 0203 	add.w	r2, ip, #3
 800f062:	1a52      	subs	r2, r2, r1
 800f064:	f022 0203 	bic.w	r2, r2, #3
 800f068:	3903      	subs	r1, #3
 800f06a:	458c      	cmp	ip, r1
 800f06c:	bf38      	it	cc
 800f06e:	2200      	movcc	r2, #0
 800f070:	441a      	add	r2, r3
 800f072:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f076:	b17b      	cbz	r3, 800f098 <__mdiff+0x104>
 800f078:	6106      	str	r6, [r0, #16]
 800f07a:	e7a5      	b.n	800efc8 <__mdiff+0x34>
 800f07c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f080:	fa17 f488 	uxtah	r4, r7, r8
 800f084:	1422      	asrs	r2, r4, #16
 800f086:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f08a:	b2a4      	uxth	r4, r4
 800f08c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f090:	f84e 4b04 	str.w	r4, [lr], #4
 800f094:	1417      	asrs	r7, r2, #16
 800f096:	e7e0      	b.n	800f05a <__mdiff+0xc6>
 800f098:	3e01      	subs	r6, #1
 800f09a:	e7ea      	b.n	800f072 <__mdiff+0xde>
 800f09c:	0801008c 	.word	0x0801008c
 800f0a0:	08010180 	.word	0x08010180

0800f0a4 <__ulp>:
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	ed8d 0b00 	vstr	d0, [sp]
 800f0aa:	9b01      	ldr	r3, [sp, #4]
 800f0ac:	4912      	ldr	r1, [pc, #72]	; (800f0f8 <__ulp+0x54>)
 800f0ae:	4019      	ands	r1, r3
 800f0b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f0b4:	2900      	cmp	r1, #0
 800f0b6:	dd05      	ble.n	800f0c4 <__ulp+0x20>
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	ec43 2b10 	vmov	d0, r2, r3
 800f0c0:	b002      	add	sp, #8
 800f0c2:	4770      	bx	lr
 800f0c4:	4249      	negs	r1, r1
 800f0c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f0ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f0ce:	f04f 0200 	mov.w	r2, #0
 800f0d2:	f04f 0300 	mov.w	r3, #0
 800f0d6:	da04      	bge.n	800f0e2 <__ulp+0x3e>
 800f0d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f0dc:	fa41 f300 	asr.w	r3, r1, r0
 800f0e0:	e7ec      	b.n	800f0bc <__ulp+0x18>
 800f0e2:	f1a0 0114 	sub.w	r1, r0, #20
 800f0e6:	291e      	cmp	r1, #30
 800f0e8:	bfda      	itte	le
 800f0ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f0ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800f0f2:	2101      	movgt	r1, #1
 800f0f4:	460a      	mov	r2, r1
 800f0f6:	e7e1      	b.n	800f0bc <__ulp+0x18>
 800f0f8:	7ff00000 	.word	0x7ff00000

0800f0fc <__b2d>:
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	6905      	ldr	r5, [r0, #16]
 800f100:	f100 0714 	add.w	r7, r0, #20
 800f104:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f108:	1f2e      	subs	r6, r5, #4
 800f10a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f10e:	4620      	mov	r0, r4
 800f110:	f7ff fd52 	bl	800ebb8 <__hi0bits>
 800f114:	f1c0 0320 	rsb	r3, r0, #32
 800f118:	280a      	cmp	r0, #10
 800f11a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f198 <__b2d+0x9c>
 800f11e:	600b      	str	r3, [r1, #0]
 800f120:	dc14      	bgt.n	800f14c <__b2d+0x50>
 800f122:	f1c0 0e0b 	rsb	lr, r0, #11
 800f126:	fa24 f10e 	lsr.w	r1, r4, lr
 800f12a:	42b7      	cmp	r7, r6
 800f12c:	ea41 030c 	orr.w	r3, r1, ip
 800f130:	bf34      	ite	cc
 800f132:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f136:	2100      	movcs	r1, #0
 800f138:	3015      	adds	r0, #21
 800f13a:	fa04 f000 	lsl.w	r0, r4, r0
 800f13e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f142:	ea40 0201 	orr.w	r2, r0, r1
 800f146:	ec43 2b10 	vmov	d0, r2, r3
 800f14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f14c:	42b7      	cmp	r7, r6
 800f14e:	bf3a      	itte	cc
 800f150:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f154:	f1a5 0608 	subcc.w	r6, r5, #8
 800f158:	2100      	movcs	r1, #0
 800f15a:	380b      	subs	r0, #11
 800f15c:	d017      	beq.n	800f18e <__b2d+0x92>
 800f15e:	f1c0 0c20 	rsb	ip, r0, #32
 800f162:	fa04 f500 	lsl.w	r5, r4, r0
 800f166:	42be      	cmp	r6, r7
 800f168:	fa21 f40c 	lsr.w	r4, r1, ip
 800f16c:	ea45 0504 	orr.w	r5, r5, r4
 800f170:	bf8c      	ite	hi
 800f172:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f176:	2400      	movls	r4, #0
 800f178:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f17c:	fa01 f000 	lsl.w	r0, r1, r0
 800f180:	fa24 f40c 	lsr.w	r4, r4, ip
 800f184:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f188:	ea40 0204 	orr.w	r2, r0, r4
 800f18c:	e7db      	b.n	800f146 <__b2d+0x4a>
 800f18e:	ea44 030c 	orr.w	r3, r4, ip
 800f192:	460a      	mov	r2, r1
 800f194:	e7d7      	b.n	800f146 <__b2d+0x4a>
 800f196:	bf00      	nop
 800f198:	3ff00000 	.word	0x3ff00000

0800f19c <__d2b>:
 800f19c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	4689      	mov	r9, r1
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	ec57 6b10 	vmov	r6, r7, d0
 800f1a8:	4690      	mov	r8, r2
 800f1aa:	f7ff fc0f 	bl	800e9cc <_Balloc>
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	b930      	cbnz	r0, 800f1c0 <__d2b+0x24>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	4b25      	ldr	r3, [pc, #148]	; (800f24c <__d2b+0xb0>)
 800f1b6:	4826      	ldr	r0, [pc, #152]	; (800f250 <__d2b+0xb4>)
 800f1b8:	f240 310a 	movw	r1, #778	; 0x30a
 800f1bc:	f000 fcc0 	bl	800fb40 <__assert_func>
 800f1c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f1c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1c8:	bb35      	cbnz	r5, 800f218 <__d2b+0x7c>
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	9301      	str	r3, [sp, #4]
 800f1ce:	d028      	beq.n	800f222 <__d2b+0x86>
 800f1d0:	4668      	mov	r0, sp
 800f1d2:	9600      	str	r6, [sp, #0]
 800f1d4:	f7ff fd10 	bl	800ebf8 <__lo0bits>
 800f1d8:	9900      	ldr	r1, [sp, #0]
 800f1da:	b300      	cbz	r0, 800f21e <__d2b+0x82>
 800f1dc:	9a01      	ldr	r2, [sp, #4]
 800f1de:	f1c0 0320 	rsb	r3, r0, #32
 800f1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f1e6:	430b      	orrs	r3, r1
 800f1e8:	40c2      	lsrs	r2, r0
 800f1ea:	6163      	str	r3, [r4, #20]
 800f1ec:	9201      	str	r2, [sp, #4]
 800f1ee:	9b01      	ldr	r3, [sp, #4]
 800f1f0:	61a3      	str	r3, [r4, #24]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	bf14      	ite	ne
 800f1f6:	2202      	movne	r2, #2
 800f1f8:	2201      	moveq	r2, #1
 800f1fa:	6122      	str	r2, [r4, #16]
 800f1fc:	b1d5      	cbz	r5, 800f234 <__d2b+0x98>
 800f1fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f202:	4405      	add	r5, r0
 800f204:	f8c9 5000 	str.w	r5, [r9]
 800f208:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f20c:	f8c8 0000 	str.w	r0, [r8]
 800f210:	4620      	mov	r0, r4
 800f212:	b003      	add	sp, #12
 800f214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f21c:	e7d5      	b.n	800f1ca <__d2b+0x2e>
 800f21e:	6161      	str	r1, [r4, #20]
 800f220:	e7e5      	b.n	800f1ee <__d2b+0x52>
 800f222:	a801      	add	r0, sp, #4
 800f224:	f7ff fce8 	bl	800ebf8 <__lo0bits>
 800f228:	9b01      	ldr	r3, [sp, #4]
 800f22a:	6163      	str	r3, [r4, #20]
 800f22c:	2201      	movs	r2, #1
 800f22e:	6122      	str	r2, [r4, #16]
 800f230:	3020      	adds	r0, #32
 800f232:	e7e3      	b.n	800f1fc <__d2b+0x60>
 800f234:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f238:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f23c:	f8c9 0000 	str.w	r0, [r9]
 800f240:	6918      	ldr	r0, [r3, #16]
 800f242:	f7ff fcb9 	bl	800ebb8 <__hi0bits>
 800f246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f24a:	e7df      	b.n	800f20c <__d2b+0x70>
 800f24c:	0801008c 	.word	0x0801008c
 800f250:	08010180 	.word	0x08010180

0800f254 <__ratio>:
 800f254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f258:	468a      	mov	sl, r1
 800f25a:	4669      	mov	r1, sp
 800f25c:	4683      	mov	fp, r0
 800f25e:	f7ff ff4d 	bl	800f0fc <__b2d>
 800f262:	a901      	add	r1, sp, #4
 800f264:	4650      	mov	r0, sl
 800f266:	ec59 8b10 	vmov	r8, r9, d0
 800f26a:	ee10 6a10 	vmov	r6, s0
 800f26e:	f7ff ff45 	bl	800f0fc <__b2d>
 800f272:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f276:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f27a:	eba3 0c02 	sub.w	ip, r3, r2
 800f27e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f282:	1a9b      	subs	r3, r3, r2
 800f284:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f288:	ec55 4b10 	vmov	r4, r5, d0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	ee10 0a10 	vmov	r0, s0
 800f292:	bfce      	itee	gt
 800f294:	464a      	movgt	r2, r9
 800f296:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f29a:	462a      	movle	r2, r5
 800f29c:	464f      	mov	r7, r9
 800f29e:	4629      	mov	r1, r5
 800f2a0:	bfcc      	ite	gt
 800f2a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f2a6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f2aa:	ec47 6b17 	vmov	d7, r6, r7
 800f2ae:	ec41 0b16 	vmov	d6, r0, r1
 800f2b2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800f2b6:	b003      	add	sp, #12
 800f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2bc <__copybits>:
 800f2bc:	3901      	subs	r1, #1
 800f2be:	b570      	push	{r4, r5, r6, lr}
 800f2c0:	1149      	asrs	r1, r1, #5
 800f2c2:	6914      	ldr	r4, [r2, #16]
 800f2c4:	3101      	adds	r1, #1
 800f2c6:	f102 0314 	add.w	r3, r2, #20
 800f2ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f2ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f2d2:	1f05      	subs	r5, r0, #4
 800f2d4:	42a3      	cmp	r3, r4
 800f2d6:	d30c      	bcc.n	800f2f2 <__copybits+0x36>
 800f2d8:	1aa3      	subs	r3, r4, r2
 800f2da:	3b11      	subs	r3, #17
 800f2dc:	f023 0303 	bic.w	r3, r3, #3
 800f2e0:	3211      	adds	r2, #17
 800f2e2:	42a2      	cmp	r2, r4
 800f2e4:	bf88      	it	hi
 800f2e6:	2300      	movhi	r3, #0
 800f2e8:	4418      	add	r0, r3
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	4288      	cmp	r0, r1
 800f2ee:	d305      	bcc.n	800f2fc <__copybits+0x40>
 800f2f0:	bd70      	pop	{r4, r5, r6, pc}
 800f2f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f2f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f2fa:	e7eb      	b.n	800f2d4 <__copybits+0x18>
 800f2fc:	f840 3b04 	str.w	r3, [r0], #4
 800f300:	e7f4      	b.n	800f2ec <__copybits+0x30>

0800f302 <__any_on>:
 800f302:	f100 0214 	add.w	r2, r0, #20
 800f306:	6900      	ldr	r0, [r0, #16]
 800f308:	114b      	asrs	r3, r1, #5
 800f30a:	4298      	cmp	r0, r3
 800f30c:	b510      	push	{r4, lr}
 800f30e:	db11      	blt.n	800f334 <__any_on+0x32>
 800f310:	dd0a      	ble.n	800f328 <__any_on+0x26>
 800f312:	f011 011f 	ands.w	r1, r1, #31
 800f316:	d007      	beq.n	800f328 <__any_on+0x26>
 800f318:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f31c:	fa24 f001 	lsr.w	r0, r4, r1
 800f320:	fa00 f101 	lsl.w	r1, r0, r1
 800f324:	428c      	cmp	r4, r1
 800f326:	d10b      	bne.n	800f340 <__any_on+0x3e>
 800f328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d803      	bhi.n	800f338 <__any_on+0x36>
 800f330:	2000      	movs	r0, #0
 800f332:	bd10      	pop	{r4, pc}
 800f334:	4603      	mov	r3, r0
 800f336:	e7f7      	b.n	800f328 <__any_on+0x26>
 800f338:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f33c:	2900      	cmp	r1, #0
 800f33e:	d0f5      	beq.n	800f32c <__any_on+0x2a>
 800f340:	2001      	movs	r0, #1
 800f342:	e7f6      	b.n	800f332 <__any_on+0x30>

0800f344 <_calloc_r>:
 800f344:	b513      	push	{r0, r1, r4, lr}
 800f346:	434a      	muls	r2, r1
 800f348:	4611      	mov	r1, r2
 800f34a:	9201      	str	r2, [sp, #4]
 800f34c:	f000 f85a 	bl	800f404 <_malloc_r>
 800f350:	4604      	mov	r4, r0
 800f352:	b118      	cbz	r0, 800f35c <_calloc_r+0x18>
 800f354:	9a01      	ldr	r2, [sp, #4]
 800f356:	2100      	movs	r1, #0
 800f358:	f7fc f93e 	bl	800b5d8 <memset>
 800f35c:	4620      	mov	r0, r4
 800f35e:	b002      	add	sp, #8
 800f360:	bd10      	pop	{r4, pc}
	...

0800f364 <_free_r>:
 800f364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f366:	2900      	cmp	r1, #0
 800f368:	d048      	beq.n	800f3fc <_free_r+0x98>
 800f36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f36e:	9001      	str	r0, [sp, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	f1a1 0404 	sub.w	r4, r1, #4
 800f376:	bfb8      	it	lt
 800f378:	18e4      	addlt	r4, r4, r3
 800f37a:	f000 fc6f 	bl	800fc5c <__malloc_lock>
 800f37e:	4a20      	ldr	r2, [pc, #128]	; (800f400 <_free_r+0x9c>)
 800f380:	9801      	ldr	r0, [sp, #4]
 800f382:	6813      	ldr	r3, [r2, #0]
 800f384:	4615      	mov	r5, r2
 800f386:	b933      	cbnz	r3, 800f396 <_free_r+0x32>
 800f388:	6063      	str	r3, [r4, #4]
 800f38a:	6014      	str	r4, [r2, #0]
 800f38c:	b003      	add	sp, #12
 800f38e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f392:	f000 bc69 	b.w	800fc68 <__malloc_unlock>
 800f396:	42a3      	cmp	r3, r4
 800f398:	d90b      	bls.n	800f3b2 <_free_r+0x4e>
 800f39a:	6821      	ldr	r1, [r4, #0]
 800f39c:	1862      	adds	r2, r4, r1
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	bf04      	itt	eq
 800f3a2:	681a      	ldreq	r2, [r3, #0]
 800f3a4:	685b      	ldreq	r3, [r3, #4]
 800f3a6:	6063      	str	r3, [r4, #4]
 800f3a8:	bf04      	itt	eq
 800f3aa:	1852      	addeq	r2, r2, r1
 800f3ac:	6022      	streq	r2, [r4, #0]
 800f3ae:	602c      	str	r4, [r5, #0]
 800f3b0:	e7ec      	b.n	800f38c <_free_r+0x28>
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	b10b      	cbz	r3, 800f3bc <_free_r+0x58>
 800f3b8:	42a3      	cmp	r3, r4
 800f3ba:	d9fa      	bls.n	800f3b2 <_free_r+0x4e>
 800f3bc:	6811      	ldr	r1, [r2, #0]
 800f3be:	1855      	adds	r5, r2, r1
 800f3c0:	42a5      	cmp	r5, r4
 800f3c2:	d10b      	bne.n	800f3dc <_free_r+0x78>
 800f3c4:	6824      	ldr	r4, [r4, #0]
 800f3c6:	4421      	add	r1, r4
 800f3c8:	1854      	adds	r4, r2, r1
 800f3ca:	42a3      	cmp	r3, r4
 800f3cc:	6011      	str	r1, [r2, #0]
 800f3ce:	d1dd      	bne.n	800f38c <_free_r+0x28>
 800f3d0:	681c      	ldr	r4, [r3, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	6053      	str	r3, [r2, #4]
 800f3d6:	4421      	add	r1, r4
 800f3d8:	6011      	str	r1, [r2, #0]
 800f3da:	e7d7      	b.n	800f38c <_free_r+0x28>
 800f3dc:	d902      	bls.n	800f3e4 <_free_r+0x80>
 800f3de:	230c      	movs	r3, #12
 800f3e0:	6003      	str	r3, [r0, #0]
 800f3e2:	e7d3      	b.n	800f38c <_free_r+0x28>
 800f3e4:	6825      	ldr	r5, [r4, #0]
 800f3e6:	1961      	adds	r1, r4, r5
 800f3e8:	428b      	cmp	r3, r1
 800f3ea:	bf04      	itt	eq
 800f3ec:	6819      	ldreq	r1, [r3, #0]
 800f3ee:	685b      	ldreq	r3, [r3, #4]
 800f3f0:	6063      	str	r3, [r4, #4]
 800f3f2:	bf04      	itt	eq
 800f3f4:	1949      	addeq	r1, r1, r5
 800f3f6:	6021      	streq	r1, [r4, #0]
 800f3f8:	6054      	str	r4, [r2, #4]
 800f3fa:	e7c7      	b.n	800f38c <_free_r+0x28>
 800f3fc:	b003      	add	sp, #12
 800f3fe:	bd30      	pop	{r4, r5, pc}
 800f400:	24000214 	.word	0x24000214

0800f404 <_malloc_r>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	1ccd      	adds	r5, r1, #3
 800f408:	f025 0503 	bic.w	r5, r5, #3
 800f40c:	3508      	adds	r5, #8
 800f40e:	2d0c      	cmp	r5, #12
 800f410:	bf38      	it	cc
 800f412:	250c      	movcc	r5, #12
 800f414:	2d00      	cmp	r5, #0
 800f416:	4606      	mov	r6, r0
 800f418:	db01      	blt.n	800f41e <_malloc_r+0x1a>
 800f41a:	42a9      	cmp	r1, r5
 800f41c:	d903      	bls.n	800f426 <_malloc_r+0x22>
 800f41e:	230c      	movs	r3, #12
 800f420:	6033      	str	r3, [r6, #0]
 800f422:	2000      	movs	r0, #0
 800f424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f426:	f000 fc19 	bl	800fc5c <__malloc_lock>
 800f42a:	4921      	ldr	r1, [pc, #132]	; (800f4b0 <_malloc_r+0xac>)
 800f42c:	680a      	ldr	r2, [r1, #0]
 800f42e:	4614      	mov	r4, r2
 800f430:	b99c      	cbnz	r4, 800f45a <_malloc_r+0x56>
 800f432:	4f20      	ldr	r7, [pc, #128]	; (800f4b4 <_malloc_r+0xb0>)
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	b923      	cbnz	r3, 800f442 <_malloc_r+0x3e>
 800f438:	4621      	mov	r1, r4
 800f43a:	4630      	mov	r0, r6
 800f43c:	f000 fafc 	bl	800fa38 <_sbrk_r>
 800f440:	6038      	str	r0, [r7, #0]
 800f442:	4629      	mov	r1, r5
 800f444:	4630      	mov	r0, r6
 800f446:	f000 faf7 	bl	800fa38 <_sbrk_r>
 800f44a:	1c43      	adds	r3, r0, #1
 800f44c:	d123      	bne.n	800f496 <_malloc_r+0x92>
 800f44e:	230c      	movs	r3, #12
 800f450:	6033      	str	r3, [r6, #0]
 800f452:	4630      	mov	r0, r6
 800f454:	f000 fc08 	bl	800fc68 <__malloc_unlock>
 800f458:	e7e3      	b.n	800f422 <_malloc_r+0x1e>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	1b5b      	subs	r3, r3, r5
 800f45e:	d417      	bmi.n	800f490 <_malloc_r+0x8c>
 800f460:	2b0b      	cmp	r3, #11
 800f462:	d903      	bls.n	800f46c <_malloc_r+0x68>
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	441c      	add	r4, r3
 800f468:	6025      	str	r5, [r4, #0]
 800f46a:	e004      	b.n	800f476 <_malloc_r+0x72>
 800f46c:	6863      	ldr	r3, [r4, #4]
 800f46e:	42a2      	cmp	r2, r4
 800f470:	bf0c      	ite	eq
 800f472:	600b      	streq	r3, [r1, #0]
 800f474:	6053      	strne	r3, [r2, #4]
 800f476:	4630      	mov	r0, r6
 800f478:	f000 fbf6 	bl	800fc68 <__malloc_unlock>
 800f47c:	f104 000b 	add.w	r0, r4, #11
 800f480:	1d23      	adds	r3, r4, #4
 800f482:	f020 0007 	bic.w	r0, r0, #7
 800f486:	1ac2      	subs	r2, r0, r3
 800f488:	d0cc      	beq.n	800f424 <_malloc_r+0x20>
 800f48a:	1a1b      	subs	r3, r3, r0
 800f48c:	50a3      	str	r3, [r4, r2]
 800f48e:	e7c9      	b.n	800f424 <_malloc_r+0x20>
 800f490:	4622      	mov	r2, r4
 800f492:	6864      	ldr	r4, [r4, #4]
 800f494:	e7cc      	b.n	800f430 <_malloc_r+0x2c>
 800f496:	1cc4      	adds	r4, r0, #3
 800f498:	f024 0403 	bic.w	r4, r4, #3
 800f49c:	42a0      	cmp	r0, r4
 800f49e:	d0e3      	beq.n	800f468 <_malloc_r+0x64>
 800f4a0:	1a21      	subs	r1, r4, r0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 fac8 	bl	800fa38 <_sbrk_r>
 800f4a8:	3001      	adds	r0, #1
 800f4aa:	d1dd      	bne.n	800f468 <_malloc_r+0x64>
 800f4ac:	e7cf      	b.n	800f44e <_malloc_r+0x4a>
 800f4ae:	bf00      	nop
 800f4b0:	24000214 	.word	0x24000214
 800f4b4:	24000218 	.word	0x24000218

0800f4b8 <__ssputs_r>:
 800f4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4bc:	688e      	ldr	r6, [r1, #8]
 800f4be:	429e      	cmp	r6, r3
 800f4c0:	4682      	mov	sl, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	4690      	mov	r8, r2
 800f4c6:	461f      	mov	r7, r3
 800f4c8:	d838      	bhi.n	800f53c <__ssputs_r+0x84>
 800f4ca:	898a      	ldrh	r2, [r1, #12]
 800f4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4d0:	d032      	beq.n	800f538 <__ssputs_r+0x80>
 800f4d2:	6825      	ldr	r5, [r4, #0]
 800f4d4:	6909      	ldr	r1, [r1, #16]
 800f4d6:	eba5 0901 	sub.w	r9, r5, r1
 800f4da:	6965      	ldr	r5, [r4, #20]
 800f4dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	444b      	add	r3, r9
 800f4e8:	106d      	asrs	r5, r5, #1
 800f4ea:	429d      	cmp	r5, r3
 800f4ec:	bf38      	it	cc
 800f4ee:	461d      	movcc	r5, r3
 800f4f0:	0553      	lsls	r3, r2, #21
 800f4f2:	d531      	bpl.n	800f558 <__ssputs_r+0xa0>
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	f7ff ff85 	bl	800f404 <_malloc_r>
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	b950      	cbnz	r0, 800f514 <__ssputs_r+0x5c>
 800f4fe:	230c      	movs	r3, #12
 800f500:	f8ca 3000 	str.w	r3, [sl]
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	f04f 30ff 	mov.w	r0, #4294967295
 800f510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f514:	6921      	ldr	r1, [r4, #16]
 800f516:	464a      	mov	r2, r9
 800f518:	f7fc f850 	bl	800b5bc <memcpy>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f526:	81a3      	strh	r3, [r4, #12]
 800f528:	6126      	str	r6, [r4, #16]
 800f52a:	6165      	str	r5, [r4, #20]
 800f52c:	444e      	add	r6, r9
 800f52e:	eba5 0509 	sub.w	r5, r5, r9
 800f532:	6026      	str	r6, [r4, #0]
 800f534:	60a5      	str	r5, [r4, #8]
 800f536:	463e      	mov	r6, r7
 800f538:	42be      	cmp	r6, r7
 800f53a:	d900      	bls.n	800f53e <__ssputs_r+0x86>
 800f53c:	463e      	mov	r6, r7
 800f53e:	4632      	mov	r2, r6
 800f540:	6820      	ldr	r0, [r4, #0]
 800f542:	4641      	mov	r1, r8
 800f544:	f000 fb70 	bl	800fc28 <memmove>
 800f548:	68a3      	ldr	r3, [r4, #8]
 800f54a:	6822      	ldr	r2, [r4, #0]
 800f54c:	1b9b      	subs	r3, r3, r6
 800f54e:	4432      	add	r2, r6
 800f550:	60a3      	str	r3, [r4, #8]
 800f552:	6022      	str	r2, [r4, #0]
 800f554:	2000      	movs	r0, #0
 800f556:	e7db      	b.n	800f510 <__ssputs_r+0x58>
 800f558:	462a      	mov	r2, r5
 800f55a:	f000 fb8b 	bl	800fc74 <_realloc_r>
 800f55e:	4606      	mov	r6, r0
 800f560:	2800      	cmp	r0, #0
 800f562:	d1e1      	bne.n	800f528 <__ssputs_r+0x70>
 800f564:	6921      	ldr	r1, [r4, #16]
 800f566:	4650      	mov	r0, sl
 800f568:	f7ff fefc 	bl	800f364 <_free_r>
 800f56c:	e7c7      	b.n	800f4fe <__ssputs_r+0x46>
	...

0800f570 <_svfiprintf_r>:
 800f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f574:	4698      	mov	r8, r3
 800f576:	898b      	ldrh	r3, [r1, #12]
 800f578:	061b      	lsls	r3, r3, #24
 800f57a:	b09d      	sub	sp, #116	; 0x74
 800f57c:	4607      	mov	r7, r0
 800f57e:	460d      	mov	r5, r1
 800f580:	4614      	mov	r4, r2
 800f582:	d50e      	bpl.n	800f5a2 <_svfiprintf_r+0x32>
 800f584:	690b      	ldr	r3, [r1, #16]
 800f586:	b963      	cbnz	r3, 800f5a2 <_svfiprintf_r+0x32>
 800f588:	2140      	movs	r1, #64	; 0x40
 800f58a:	f7ff ff3b 	bl	800f404 <_malloc_r>
 800f58e:	6028      	str	r0, [r5, #0]
 800f590:	6128      	str	r0, [r5, #16]
 800f592:	b920      	cbnz	r0, 800f59e <_svfiprintf_r+0x2e>
 800f594:	230c      	movs	r3, #12
 800f596:	603b      	str	r3, [r7, #0]
 800f598:	f04f 30ff 	mov.w	r0, #4294967295
 800f59c:	e0d1      	b.n	800f742 <_svfiprintf_r+0x1d2>
 800f59e:	2340      	movs	r3, #64	; 0x40
 800f5a0:	616b      	str	r3, [r5, #20]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a6:	2320      	movs	r3, #32
 800f5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5b0:	2330      	movs	r3, #48	; 0x30
 800f5b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f75c <_svfiprintf_r+0x1ec>
 800f5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ba:	f04f 0901 	mov.w	r9, #1
 800f5be:	4623      	mov	r3, r4
 800f5c0:	469a      	mov	sl, r3
 800f5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5c6:	b10a      	cbz	r2, 800f5cc <_svfiprintf_r+0x5c>
 800f5c8:	2a25      	cmp	r2, #37	; 0x25
 800f5ca:	d1f9      	bne.n	800f5c0 <_svfiprintf_r+0x50>
 800f5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f5d0:	d00b      	beq.n	800f5ea <_svfiprintf_r+0x7a>
 800f5d2:	465b      	mov	r3, fp
 800f5d4:	4622      	mov	r2, r4
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	4638      	mov	r0, r7
 800f5da:	f7ff ff6d 	bl	800f4b8 <__ssputs_r>
 800f5de:	3001      	adds	r0, #1
 800f5e0:	f000 80aa 	beq.w	800f738 <_svfiprintf_r+0x1c8>
 800f5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5e6:	445a      	add	r2, fp
 800f5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f000 80a2 	beq.w	800f738 <_svfiprintf_r+0x1c8>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5fe:	f10a 0a01 	add.w	sl, sl, #1
 800f602:	9304      	str	r3, [sp, #16]
 800f604:	9307      	str	r3, [sp, #28]
 800f606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f60a:	931a      	str	r3, [sp, #104]	; 0x68
 800f60c:	4654      	mov	r4, sl
 800f60e:	2205      	movs	r2, #5
 800f610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f614:	4851      	ldr	r0, [pc, #324]	; (800f75c <_svfiprintf_r+0x1ec>)
 800f616:	f7f0 fe83 	bl	8000320 <memchr>
 800f61a:	9a04      	ldr	r2, [sp, #16]
 800f61c:	b9d8      	cbnz	r0, 800f656 <_svfiprintf_r+0xe6>
 800f61e:	06d0      	lsls	r0, r2, #27
 800f620:	bf44      	itt	mi
 800f622:	2320      	movmi	r3, #32
 800f624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f628:	0711      	lsls	r1, r2, #28
 800f62a:	bf44      	itt	mi
 800f62c:	232b      	movmi	r3, #43	; 0x2b
 800f62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f632:	f89a 3000 	ldrb.w	r3, [sl]
 800f636:	2b2a      	cmp	r3, #42	; 0x2a
 800f638:	d015      	beq.n	800f666 <_svfiprintf_r+0xf6>
 800f63a:	9a07      	ldr	r2, [sp, #28]
 800f63c:	4654      	mov	r4, sl
 800f63e:	2000      	movs	r0, #0
 800f640:	f04f 0c0a 	mov.w	ip, #10
 800f644:	4621      	mov	r1, r4
 800f646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f64a:	3b30      	subs	r3, #48	; 0x30
 800f64c:	2b09      	cmp	r3, #9
 800f64e:	d94e      	bls.n	800f6ee <_svfiprintf_r+0x17e>
 800f650:	b1b0      	cbz	r0, 800f680 <_svfiprintf_r+0x110>
 800f652:	9207      	str	r2, [sp, #28]
 800f654:	e014      	b.n	800f680 <_svfiprintf_r+0x110>
 800f656:	eba0 0308 	sub.w	r3, r0, r8
 800f65a:	fa09 f303 	lsl.w	r3, r9, r3
 800f65e:	4313      	orrs	r3, r2
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	46a2      	mov	sl, r4
 800f664:	e7d2      	b.n	800f60c <_svfiprintf_r+0x9c>
 800f666:	9b03      	ldr	r3, [sp, #12]
 800f668:	1d19      	adds	r1, r3, #4
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	9103      	str	r1, [sp, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	bfbb      	ittet	lt
 800f672:	425b      	neglt	r3, r3
 800f674:	f042 0202 	orrlt.w	r2, r2, #2
 800f678:	9307      	strge	r3, [sp, #28]
 800f67a:	9307      	strlt	r3, [sp, #28]
 800f67c:	bfb8      	it	lt
 800f67e:	9204      	strlt	r2, [sp, #16]
 800f680:	7823      	ldrb	r3, [r4, #0]
 800f682:	2b2e      	cmp	r3, #46	; 0x2e
 800f684:	d10c      	bne.n	800f6a0 <_svfiprintf_r+0x130>
 800f686:	7863      	ldrb	r3, [r4, #1]
 800f688:	2b2a      	cmp	r3, #42	; 0x2a
 800f68a:	d135      	bne.n	800f6f8 <_svfiprintf_r+0x188>
 800f68c:	9b03      	ldr	r3, [sp, #12]
 800f68e:	1d1a      	adds	r2, r3, #4
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	9203      	str	r2, [sp, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	bfb8      	it	lt
 800f698:	f04f 33ff 	movlt.w	r3, #4294967295
 800f69c:	3402      	adds	r4, #2
 800f69e:	9305      	str	r3, [sp, #20]
 800f6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f76c <_svfiprintf_r+0x1fc>
 800f6a4:	7821      	ldrb	r1, [r4, #0]
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	4650      	mov	r0, sl
 800f6aa:	f7f0 fe39 	bl	8000320 <memchr>
 800f6ae:	b140      	cbz	r0, 800f6c2 <_svfiprintf_r+0x152>
 800f6b0:	2340      	movs	r3, #64	; 0x40
 800f6b2:	eba0 000a 	sub.w	r0, r0, sl
 800f6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800f6ba:	9b04      	ldr	r3, [sp, #16]
 800f6bc:	4303      	orrs	r3, r0
 800f6be:	3401      	adds	r4, #1
 800f6c0:	9304      	str	r3, [sp, #16]
 800f6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c6:	4826      	ldr	r0, [pc, #152]	; (800f760 <_svfiprintf_r+0x1f0>)
 800f6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6cc:	2206      	movs	r2, #6
 800f6ce:	f7f0 fe27 	bl	8000320 <memchr>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d038      	beq.n	800f748 <_svfiprintf_r+0x1d8>
 800f6d6:	4b23      	ldr	r3, [pc, #140]	; (800f764 <_svfiprintf_r+0x1f4>)
 800f6d8:	bb1b      	cbnz	r3, 800f722 <_svfiprintf_r+0x1b2>
 800f6da:	9b03      	ldr	r3, [sp, #12]
 800f6dc:	3307      	adds	r3, #7
 800f6de:	f023 0307 	bic.w	r3, r3, #7
 800f6e2:	3308      	adds	r3, #8
 800f6e4:	9303      	str	r3, [sp, #12]
 800f6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6e8:	4433      	add	r3, r6
 800f6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ec:	e767      	b.n	800f5be <_svfiprintf_r+0x4e>
 800f6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	2001      	movs	r0, #1
 800f6f6:	e7a5      	b.n	800f644 <_svfiprintf_r+0xd4>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	3401      	adds	r4, #1
 800f6fc:	9305      	str	r3, [sp, #20]
 800f6fe:	4619      	mov	r1, r3
 800f700:	f04f 0c0a 	mov.w	ip, #10
 800f704:	4620      	mov	r0, r4
 800f706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f70a:	3a30      	subs	r2, #48	; 0x30
 800f70c:	2a09      	cmp	r2, #9
 800f70e:	d903      	bls.n	800f718 <_svfiprintf_r+0x1a8>
 800f710:	2b00      	cmp	r3, #0
 800f712:	d0c5      	beq.n	800f6a0 <_svfiprintf_r+0x130>
 800f714:	9105      	str	r1, [sp, #20]
 800f716:	e7c3      	b.n	800f6a0 <_svfiprintf_r+0x130>
 800f718:	fb0c 2101 	mla	r1, ip, r1, r2
 800f71c:	4604      	mov	r4, r0
 800f71e:	2301      	movs	r3, #1
 800f720:	e7f0      	b.n	800f704 <_svfiprintf_r+0x194>
 800f722:	ab03      	add	r3, sp, #12
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	462a      	mov	r2, r5
 800f728:	4b0f      	ldr	r3, [pc, #60]	; (800f768 <_svfiprintf_r+0x1f8>)
 800f72a:	a904      	add	r1, sp, #16
 800f72c:	4638      	mov	r0, r7
 800f72e:	f7fb ffeb 	bl	800b708 <_printf_float>
 800f732:	1c42      	adds	r2, r0, #1
 800f734:	4606      	mov	r6, r0
 800f736:	d1d6      	bne.n	800f6e6 <_svfiprintf_r+0x176>
 800f738:	89ab      	ldrh	r3, [r5, #12]
 800f73a:	065b      	lsls	r3, r3, #25
 800f73c:	f53f af2c 	bmi.w	800f598 <_svfiprintf_r+0x28>
 800f740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f742:	b01d      	add	sp, #116	; 0x74
 800f744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f748:	ab03      	add	r3, sp, #12
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	462a      	mov	r2, r5
 800f74e:	4b06      	ldr	r3, [pc, #24]	; (800f768 <_svfiprintf_r+0x1f8>)
 800f750:	a904      	add	r1, sp, #16
 800f752:	4638      	mov	r0, r7
 800f754:	f7fc fa64 	bl	800bc20 <_printf_i>
 800f758:	e7eb      	b.n	800f732 <_svfiprintf_r+0x1c2>
 800f75a:	bf00      	nop
 800f75c:	080102dc 	.word	0x080102dc
 800f760:	080102e6 	.word	0x080102e6
 800f764:	0800b709 	.word	0x0800b709
 800f768:	0800f4b9 	.word	0x0800f4b9
 800f76c:	080102e2 	.word	0x080102e2

0800f770 <__sfputc_r>:
 800f770:	6893      	ldr	r3, [r2, #8]
 800f772:	3b01      	subs	r3, #1
 800f774:	2b00      	cmp	r3, #0
 800f776:	b410      	push	{r4}
 800f778:	6093      	str	r3, [r2, #8]
 800f77a:	da08      	bge.n	800f78e <__sfputc_r+0x1e>
 800f77c:	6994      	ldr	r4, [r2, #24]
 800f77e:	42a3      	cmp	r3, r4
 800f780:	db01      	blt.n	800f786 <__sfputc_r+0x16>
 800f782:	290a      	cmp	r1, #10
 800f784:	d103      	bne.n	800f78e <__sfputc_r+0x1e>
 800f786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f78a:	f7fd bca3 	b.w	800d0d4 <__swbuf_r>
 800f78e:	6813      	ldr	r3, [r2, #0]
 800f790:	1c58      	adds	r0, r3, #1
 800f792:	6010      	str	r0, [r2, #0]
 800f794:	7019      	strb	r1, [r3, #0]
 800f796:	4608      	mov	r0, r1
 800f798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <__sfputs_r>:
 800f79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	460f      	mov	r7, r1
 800f7a4:	4614      	mov	r4, r2
 800f7a6:	18d5      	adds	r5, r2, r3
 800f7a8:	42ac      	cmp	r4, r5
 800f7aa:	d101      	bne.n	800f7b0 <__sfputs_r+0x12>
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	e007      	b.n	800f7c0 <__sfputs_r+0x22>
 800f7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b4:	463a      	mov	r2, r7
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f7ff ffda 	bl	800f770 <__sfputc_r>
 800f7bc:	1c43      	adds	r3, r0, #1
 800f7be:	d1f3      	bne.n	800f7a8 <__sfputs_r+0xa>
 800f7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7c4 <_vfiprintf_r>:
 800f7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c8:	460d      	mov	r5, r1
 800f7ca:	b09d      	sub	sp, #116	; 0x74
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	4698      	mov	r8, r3
 800f7d0:	4606      	mov	r6, r0
 800f7d2:	b118      	cbz	r0, 800f7dc <_vfiprintf_r+0x18>
 800f7d4:	6983      	ldr	r3, [r0, #24]
 800f7d6:	b90b      	cbnz	r3, 800f7dc <_vfiprintf_r+0x18>
 800f7d8:	f7fe fc66 	bl	800e0a8 <__sinit>
 800f7dc:	4b89      	ldr	r3, [pc, #548]	; (800fa04 <_vfiprintf_r+0x240>)
 800f7de:	429d      	cmp	r5, r3
 800f7e0:	d11b      	bne.n	800f81a <_vfiprintf_r+0x56>
 800f7e2:	6875      	ldr	r5, [r6, #4]
 800f7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7e6:	07d9      	lsls	r1, r3, #31
 800f7e8:	d405      	bmi.n	800f7f6 <_vfiprintf_r+0x32>
 800f7ea:	89ab      	ldrh	r3, [r5, #12]
 800f7ec:	059a      	lsls	r2, r3, #22
 800f7ee:	d402      	bmi.n	800f7f6 <_vfiprintf_r+0x32>
 800f7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7f2:	f7ff f86a 	bl	800e8ca <__retarget_lock_acquire_recursive>
 800f7f6:	89ab      	ldrh	r3, [r5, #12]
 800f7f8:	071b      	lsls	r3, r3, #28
 800f7fa:	d501      	bpl.n	800f800 <_vfiprintf_r+0x3c>
 800f7fc:	692b      	ldr	r3, [r5, #16]
 800f7fe:	b9eb      	cbnz	r3, 800f83c <_vfiprintf_r+0x78>
 800f800:	4629      	mov	r1, r5
 800f802:	4630      	mov	r0, r6
 800f804:	f7fd fcb8 	bl	800d178 <__swsetup_r>
 800f808:	b1c0      	cbz	r0, 800f83c <_vfiprintf_r+0x78>
 800f80a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f80c:	07dc      	lsls	r4, r3, #31
 800f80e:	d50e      	bpl.n	800f82e <_vfiprintf_r+0x6a>
 800f810:	f04f 30ff 	mov.w	r0, #4294967295
 800f814:	b01d      	add	sp, #116	; 0x74
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	4b7b      	ldr	r3, [pc, #492]	; (800fa08 <_vfiprintf_r+0x244>)
 800f81c:	429d      	cmp	r5, r3
 800f81e:	d101      	bne.n	800f824 <_vfiprintf_r+0x60>
 800f820:	68b5      	ldr	r5, [r6, #8]
 800f822:	e7df      	b.n	800f7e4 <_vfiprintf_r+0x20>
 800f824:	4b79      	ldr	r3, [pc, #484]	; (800fa0c <_vfiprintf_r+0x248>)
 800f826:	429d      	cmp	r5, r3
 800f828:	bf08      	it	eq
 800f82a:	68f5      	ldreq	r5, [r6, #12]
 800f82c:	e7da      	b.n	800f7e4 <_vfiprintf_r+0x20>
 800f82e:	89ab      	ldrh	r3, [r5, #12]
 800f830:	0598      	lsls	r0, r3, #22
 800f832:	d4ed      	bmi.n	800f810 <_vfiprintf_r+0x4c>
 800f834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f836:	f7ff f849 	bl	800e8cc <__retarget_lock_release_recursive>
 800f83a:	e7e9      	b.n	800f810 <_vfiprintf_r+0x4c>
 800f83c:	2300      	movs	r3, #0
 800f83e:	9309      	str	r3, [sp, #36]	; 0x24
 800f840:	2320      	movs	r3, #32
 800f842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f846:	f8cd 800c 	str.w	r8, [sp, #12]
 800f84a:	2330      	movs	r3, #48	; 0x30
 800f84c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa10 <_vfiprintf_r+0x24c>
 800f850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f854:	f04f 0901 	mov.w	r9, #1
 800f858:	4623      	mov	r3, r4
 800f85a:	469a      	mov	sl, r3
 800f85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f860:	b10a      	cbz	r2, 800f866 <_vfiprintf_r+0xa2>
 800f862:	2a25      	cmp	r2, #37	; 0x25
 800f864:	d1f9      	bne.n	800f85a <_vfiprintf_r+0x96>
 800f866:	ebba 0b04 	subs.w	fp, sl, r4
 800f86a:	d00b      	beq.n	800f884 <_vfiprintf_r+0xc0>
 800f86c:	465b      	mov	r3, fp
 800f86e:	4622      	mov	r2, r4
 800f870:	4629      	mov	r1, r5
 800f872:	4630      	mov	r0, r6
 800f874:	f7ff ff93 	bl	800f79e <__sfputs_r>
 800f878:	3001      	adds	r0, #1
 800f87a:	f000 80aa 	beq.w	800f9d2 <_vfiprintf_r+0x20e>
 800f87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f880:	445a      	add	r2, fp
 800f882:	9209      	str	r2, [sp, #36]	; 0x24
 800f884:	f89a 3000 	ldrb.w	r3, [sl]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f000 80a2 	beq.w	800f9d2 <_vfiprintf_r+0x20e>
 800f88e:	2300      	movs	r3, #0
 800f890:	f04f 32ff 	mov.w	r2, #4294967295
 800f894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f898:	f10a 0a01 	add.w	sl, sl, #1
 800f89c:	9304      	str	r3, [sp, #16]
 800f89e:	9307      	str	r3, [sp, #28]
 800f8a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8a4:	931a      	str	r3, [sp, #104]	; 0x68
 800f8a6:	4654      	mov	r4, sl
 800f8a8:	2205      	movs	r2, #5
 800f8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ae:	4858      	ldr	r0, [pc, #352]	; (800fa10 <_vfiprintf_r+0x24c>)
 800f8b0:	f7f0 fd36 	bl	8000320 <memchr>
 800f8b4:	9a04      	ldr	r2, [sp, #16]
 800f8b6:	b9d8      	cbnz	r0, 800f8f0 <_vfiprintf_r+0x12c>
 800f8b8:	06d1      	lsls	r1, r2, #27
 800f8ba:	bf44      	itt	mi
 800f8bc:	2320      	movmi	r3, #32
 800f8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8c2:	0713      	lsls	r3, r2, #28
 800f8c4:	bf44      	itt	mi
 800f8c6:	232b      	movmi	r3, #43	; 0x2b
 800f8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f8d2:	d015      	beq.n	800f900 <_vfiprintf_r+0x13c>
 800f8d4:	9a07      	ldr	r2, [sp, #28]
 800f8d6:	4654      	mov	r4, sl
 800f8d8:	2000      	movs	r0, #0
 800f8da:	f04f 0c0a 	mov.w	ip, #10
 800f8de:	4621      	mov	r1, r4
 800f8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8e4:	3b30      	subs	r3, #48	; 0x30
 800f8e6:	2b09      	cmp	r3, #9
 800f8e8:	d94e      	bls.n	800f988 <_vfiprintf_r+0x1c4>
 800f8ea:	b1b0      	cbz	r0, 800f91a <_vfiprintf_r+0x156>
 800f8ec:	9207      	str	r2, [sp, #28]
 800f8ee:	e014      	b.n	800f91a <_vfiprintf_r+0x156>
 800f8f0:	eba0 0308 	sub.w	r3, r0, r8
 800f8f4:	fa09 f303 	lsl.w	r3, r9, r3
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	9304      	str	r3, [sp, #16]
 800f8fc:	46a2      	mov	sl, r4
 800f8fe:	e7d2      	b.n	800f8a6 <_vfiprintf_r+0xe2>
 800f900:	9b03      	ldr	r3, [sp, #12]
 800f902:	1d19      	adds	r1, r3, #4
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	9103      	str	r1, [sp, #12]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	bfbb      	ittet	lt
 800f90c:	425b      	neglt	r3, r3
 800f90e:	f042 0202 	orrlt.w	r2, r2, #2
 800f912:	9307      	strge	r3, [sp, #28]
 800f914:	9307      	strlt	r3, [sp, #28]
 800f916:	bfb8      	it	lt
 800f918:	9204      	strlt	r2, [sp, #16]
 800f91a:	7823      	ldrb	r3, [r4, #0]
 800f91c:	2b2e      	cmp	r3, #46	; 0x2e
 800f91e:	d10c      	bne.n	800f93a <_vfiprintf_r+0x176>
 800f920:	7863      	ldrb	r3, [r4, #1]
 800f922:	2b2a      	cmp	r3, #42	; 0x2a
 800f924:	d135      	bne.n	800f992 <_vfiprintf_r+0x1ce>
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	1d1a      	adds	r2, r3, #4
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	9203      	str	r2, [sp, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	bfb8      	it	lt
 800f932:	f04f 33ff 	movlt.w	r3, #4294967295
 800f936:	3402      	adds	r4, #2
 800f938:	9305      	str	r3, [sp, #20]
 800f93a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa20 <_vfiprintf_r+0x25c>
 800f93e:	7821      	ldrb	r1, [r4, #0]
 800f940:	2203      	movs	r2, #3
 800f942:	4650      	mov	r0, sl
 800f944:	f7f0 fcec 	bl	8000320 <memchr>
 800f948:	b140      	cbz	r0, 800f95c <_vfiprintf_r+0x198>
 800f94a:	2340      	movs	r3, #64	; 0x40
 800f94c:	eba0 000a 	sub.w	r0, r0, sl
 800f950:	fa03 f000 	lsl.w	r0, r3, r0
 800f954:	9b04      	ldr	r3, [sp, #16]
 800f956:	4303      	orrs	r3, r0
 800f958:	3401      	adds	r4, #1
 800f95a:	9304      	str	r3, [sp, #16]
 800f95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f960:	482c      	ldr	r0, [pc, #176]	; (800fa14 <_vfiprintf_r+0x250>)
 800f962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f966:	2206      	movs	r2, #6
 800f968:	f7f0 fcda 	bl	8000320 <memchr>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	d03f      	beq.n	800f9f0 <_vfiprintf_r+0x22c>
 800f970:	4b29      	ldr	r3, [pc, #164]	; (800fa18 <_vfiprintf_r+0x254>)
 800f972:	bb1b      	cbnz	r3, 800f9bc <_vfiprintf_r+0x1f8>
 800f974:	9b03      	ldr	r3, [sp, #12]
 800f976:	3307      	adds	r3, #7
 800f978:	f023 0307 	bic.w	r3, r3, #7
 800f97c:	3308      	adds	r3, #8
 800f97e:	9303      	str	r3, [sp, #12]
 800f980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f982:	443b      	add	r3, r7
 800f984:	9309      	str	r3, [sp, #36]	; 0x24
 800f986:	e767      	b.n	800f858 <_vfiprintf_r+0x94>
 800f988:	fb0c 3202 	mla	r2, ip, r2, r3
 800f98c:	460c      	mov	r4, r1
 800f98e:	2001      	movs	r0, #1
 800f990:	e7a5      	b.n	800f8de <_vfiprintf_r+0x11a>
 800f992:	2300      	movs	r3, #0
 800f994:	3401      	adds	r4, #1
 800f996:	9305      	str	r3, [sp, #20]
 800f998:	4619      	mov	r1, r3
 800f99a:	f04f 0c0a 	mov.w	ip, #10
 800f99e:	4620      	mov	r0, r4
 800f9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9a4:	3a30      	subs	r2, #48	; 0x30
 800f9a6:	2a09      	cmp	r2, #9
 800f9a8:	d903      	bls.n	800f9b2 <_vfiprintf_r+0x1ee>
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d0c5      	beq.n	800f93a <_vfiprintf_r+0x176>
 800f9ae:	9105      	str	r1, [sp, #20]
 800f9b0:	e7c3      	b.n	800f93a <_vfiprintf_r+0x176>
 800f9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e7f0      	b.n	800f99e <_vfiprintf_r+0x1da>
 800f9bc:	ab03      	add	r3, sp, #12
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	462a      	mov	r2, r5
 800f9c2:	4b16      	ldr	r3, [pc, #88]	; (800fa1c <_vfiprintf_r+0x258>)
 800f9c4:	a904      	add	r1, sp, #16
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f7fb fe9e 	bl	800b708 <_printf_float>
 800f9cc:	4607      	mov	r7, r0
 800f9ce:	1c78      	adds	r0, r7, #1
 800f9d0:	d1d6      	bne.n	800f980 <_vfiprintf_r+0x1bc>
 800f9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9d4:	07d9      	lsls	r1, r3, #31
 800f9d6:	d405      	bmi.n	800f9e4 <_vfiprintf_r+0x220>
 800f9d8:	89ab      	ldrh	r3, [r5, #12]
 800f9da:	059a      	lsls	r2, r3, #22
 800f9dc:	d402      	bmi.n	800f9e4 <_vfiprintf_r+0x220>
 800f9de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9e0:	f7fe ff74 	bl	800e8cc <__retarget_lock_release_recursive>
 800f9e4:	89ab      	ldrh	r3, [r5, #12]
 800f9e6:	065b      	lsls	r3, r3, #25
 800f9e8:	f53f af12 	bmi.w	800f810 <_vfiprintf_r+0x4c>
 800f9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9ee:	e711      	b.n	800f814 <_vfiprintf_r+0x50>
 800f9f0:	ab03      	add	r3, sp, #12
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	462a      	mov	r2, r5
 800f9f6:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <_vfiprintf_r+0x258>)
 800f9f8:	a904      	add	r1, sp, #16
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f7fc f910 	bl	800bc20 <_printf_i>
 800fa00:	e7e4      	b.n	800f9cc <_vfiprintf_r+0x208>
 800fa02:	bf00      	nop
 800fa04:	080100c0 	.word	0x080100c0
 800fa08:	080100e0 	.word	0x080100e0
 800fa0c:	080100a0 	.word	0x080100a0
 800fa10:	080102dc 	.word	0x080102dc
 800fa14:	080102e6 	.word	0x080102e6
 800fa18:	0800b709 	.word	0x0800b709
 800fa1c:	0800f79f 	.word	0x0800f79f
 800fa20:	080102e2 	.word	0x080102e2
 800fa24:	00000000 	.word	0x00000000

0800fa28 <nan>:
 800fa28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa30 <nan+0x8>
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	00000000 	.word	0x00000000
 800fa34:	7ff80000 	.word	0x7ff80000

0800fa38 <_sbrk_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4d06      	ldr	r5, [pc, #24]	; (800fa54 <_sbrk_r+0x1c>)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	4604      	mov	r4, r0
 800fa40:	4608      	mov	r0, r1
 800fa42:	602b      	str	r3, [r5, #0]
 800fa44:	f7f3 f9fe 	bl	8002e44 <_sbrk>
 800fa48:	1c43      	adds	r3, r0, #1
 800fa4a:	d102      	bne.n	800fa52 <_sbrk_r+0x1a>
 800fa4c:	682b      	ldr	r3, [r5, #0]
 800fa4e:	b103      	cbz	r3, 800fa52 <_sbrk_r+0x1a>
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	bd38      	pop	{r3, r4, r5, pc}
 800fa54:	24004744 	.word	0x24004744

0800fa58 <__sread>:
 800fa58:	b510      	push	{r4, lr}
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa60:	f000 f92e 	bl	800fcc0 <_read_r>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	bfab      	itete	ge
 800fa68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa6a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa6c:	181b      	addge	r3, r3, r0
 800fa6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa72:	bfac      	ite	ge
 800fa74:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa76:	81a3      	strhlt	r3, [r4, #12]
 800fa78:	bd10      	pop	{r4, pc}

0800fa7a <__swrite>:
 800fa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	461f      	mov	r7, r3
 800fa80:	898b      	ldrh	r3, [r1, #12]
 800fa82:	05db      	lsls	r3, r3, #23
 800fa84:	4605      	mov	r5, r0
 800fa86:	460c      	mov	r4, r1
 800fa88:	4616      	mov	r6, r2
 800fa8a:	d505      	bpl.n	800fa98 <__swrite+0x1e>
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	2302      	movs	r3, #2
 800fa92:	2200      	movs	r2, #0
 800fa94:	f000 f8b6 	bl	800fc04 <_lseek_r>
 800fa98:	89a3      	ldrh	r3, [r4, #12]
 800fa9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800faa2:	81a3      	strh	r3, [r4, #12]
 800faa4:	4632      	mov	r2, r6
 800faa6:	463b      	mov	r3, r7
 800faa8:	4628      	mov	r0, r5
 800faaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faae:	f000 b835 	b.w	800fb1c <_write_r>

0800fab2 <__sseek>:
 800fab2:	b510      	push	{r4, lr}
 800fab4:	460c      	mov	r4, r1
 800fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faba:	f000 f8a3 	bl	800fc04 <_lseek_r>
 800fabe:	1c43      	adds	r3, r0, #1
 800fac0:	89a3      	ldrh	r3, [r4, #12]
 800fac2:	bf15      	itete	ne
 800fac4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800faca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800face:	81a3      	strheq	r3, [r4, #12]
 800fad0:	bf18      	it	ne
 800fad2:	81a3      	strhne	r3, [r4, #12]
 800fad4:	bd10      	pop	{r4, pc}

0800fad6 <__sclose>:
 800fad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fada:	f000 b84f 	b.w	800fb7c <_close_r>

0800fade <strncmp>:
 800fade:	b510      	push	{r4, lr}
 800fae0:	b16a      	cbz	r2, 800fafe <strncmp+0x20>
 800fae2:	3901      	subs	r1, #1
 800fae4:	1884      	adds	r4, r0, r2
 800fae6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800faea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800faee:	4293      	cmp	r3, r2
 800faf0:	d103      	bne.n	800fafa <strncmp+0x1c>
 800faf2:	42a0      	cmp	r0, r4
 800faf4:	d001      	beq.n	800fafa <strncmp+0x1c>
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1f5      	bne.n	800fae6 <strncmp+0x8>
 800fafa:	1a98      	subs	r0, r3, r2
 800fafc:	bd10      	pop	{r4, pc}
 800fafe:	4610      	mov	r0, r2
 800fb00:	e7fc      	b.n	800fafc <strncmp+0x1e>

0800fb02 <__ascii_wctomb>:
 800fb02:	b149      	cbz	r1, 800fb18 <__ascii_wctomb+0x16>
 800fb04:	2aff      	cmp	r2, #255	; 0xff
 800fb06:	bf85      	ittet	hi
 800fb08:	238a      	movhi	r3, #138	; 0x8a
 800fb0a:	6003      	strhi	r3, [r0, #0]
 800fb0c:	700a      	strbls	r2, [r1, #0]
 800fb0e:	f04f 30ff 	movhi.w	r0, #4294967295
 800fb12:	bf98      	it	ls
 800fb14:	2001      	movls	r0, #1
 800fb16:	4770      	bx	lr
 800fb18:	4608      	mov	r0, r1
 800fb1a:	4770      	bx	lr

0800fb1c <_write_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4d07      	ldr	r5, [pc, #28]	; (800fb3c <_write_r+0x20>)
 800fb20:	4604      	mov	r4, r0
 800fb22:	4608      	mov	r0, r1
 800fb24:	4611      	mov	r1, r2
 800fb26:	2200      	movs	r2, #0
 800fb28:	602a      	str	r2, [r5, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f7f3 f939 	bl	8002da2 <_write>
 800fb30:	1c43      	adds	r3, r0, #1
 800fb32:	d102      	bne.n	800fb3a <_write_r+0x1e>
 800fb34:	682b      	ldr	r3, [r5, #0]
 800fb36:	b103      	cbz	r3, 800fb3a <_write_r+0x1e>
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	bd38      	pop	{r3, r4, r5, pc}
 800fb3c:	24004744 	.word	0x24004744

0800fb40 <__assert_func>:
 800fb40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb42:	4614      	mov	r4, r2
 800fb44:	461a      	mov	r2, r3
 800fb46:	4b09      	ldr	r3, [pc, #36]	; (800fb6c <__assert_func+0x2c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	68d8      	ldr	r0, [r3, #12]
 800fb4e:	b14c      	cbz	r4, 800fb64 <__assert_func+0x24>
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <__assert_func+0x30>)
 800fb52:	9100      	str	r1, [sp, #0]
 800fb54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb58:	4906      	ldr	r1, [pc, #24]	; (800fb74 <__assert_func+0x34>)
 800fb5a:	462b      	mov	r3, r5
 800fb5c:	f000 f81e 	bl	800fb9c <fiprintf>
 800fb60:	f000 f8c0 	bl	800fce4 <abort>
 800fb64:	4b04      	ldr	r3, [pc, #16]	; (800fb78 <__assert_func+0x38>)
 800fb66:	461c      	mov	r4, r3
 800fb68:	e7f3      	b.n	800fb52 <__assert_func+0x12>
 800fb6a:	bf00      	nop
 800fb6c:	24000014 	.word	0x24000014
 800fb70:	080102ed 	.word	0x080102ed
 800fb74:	080102fa 	.word	0x080102fa
 800fb78:	08010328 	.word	0x08010328

0800fb7c <_close_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4d06      	ldr	r5, [pc, #24]	; (800fb98 <_close_r+0x1c>)
 800fb80:	2300      	movs	r3, #0
 800fb82:	4604      	mov	r4, r0
 800fb84:	4608      	mov	r0, r1
 800fb86:	602b      	str	r3, [r5, #0]
 800fb88:	f7f3 f927 	bl	8002dda <_close>
 800fb8c:	1c43      	adds	r3, r0, #1
 800fb8e:	d102      	bne.n	800fb96 <_close_r+0x1a>
 800fb90:	682b      	ldr	r3, [r5, #0]
 800fb92:	b103      	cbz	r3, 800fb96 <_close_r+0x1a>
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	bd38      	pop	{r3, r4, r5, pc}
 800fb98:	24004744 	.word	0x24004744

0800fb9c <fiprintf>:
 800fb9c:	b40e      	push	{r1, r2, r3}
 800fb9e:	b503      	push	{r0, r1, lr}
 800fba0:	4601      	mov	r1, r0
 800fba2:	ab03      	add	r3, sp, #12
 800fba4:	4805      	ldr	r0, [pc, #20]	; (800fbbc <fiprintf+0x20>)
 800fba6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	f7ff fe09 	bl	800f7c4 <_vfiprintf_r>
 800fbb2:	b002      	add	sp, #8
 800fbb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbb8:	b003      	add	sp, #12
 800fbba:	4770      	bx	lr
 800fbbc:	24000014 	.word	0x24000014

0800fbc0 <_fstat_r>:
 800fbc0:	b538      	push	{r3, r4, r5, lr}
 800fbc2:	4d07      	ldr	r5, [pc, #28]	; (800fbe0 <_fstat_r+0x20>)
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	4608      	mov	r0, r1
 800fbca:	4611      	mov	r1, r2
 800fbcc:	602b      	str	r3, [r5, #0]
 800fbce:	f7f3 f910 	bl	8002df2 <_fstat>
 800fbd2:	1c43      	adds	r3, r0, #1
 800fbd4:	d102      	bne.n	800fbdc <_fstat_r+0x1c>
 800fbd6:	682b      	ldr	r3, [r5, #0]
 800fbd8:	b103      	cbz	r3, 800fbdc <_fstat_r+0x1c>
 800fbda:	6023      	str	r3, [r4, #0]
 800fbdc:	bd38      	pop	{r3, r4, r5, pc}
 800fbde:	bf00      	nop
 800fbe0:	24004744 	.word	0x24004744

0800fbe4 <_isatty_r>:
 800fbe4:	b538      	push	{r3, r4, r5, lr}
 800fbe6:	4d06      	ldr	r5, [pc, #24]	; (800fc00 <_isatty_r+0x1c>)
 800fbe8:	2300      	movs	r3, #0
 800fbea:	4604      	mov	r4, r0
 800fbec:	4608      	mov	r0, r1
 800fbee:	602b      	str	r3, [r5, #0]
 800fbf0:	f7f3 f90f 	bl	8002e12 <_isatty>
 800fbf4:	1c43      	adds	r3, r0, #1
 800fbf6:	d102      	bne.n	800fbfe <_isatty_r+0x1a>
 800fbf8:	682b      	ldr	r3, [r5, #0]
 800fbfa:	b103      	cbz	r3, 800fbfe <_isatty_r+0x1a>
 800fbfc:	6023      	str	r3, [r4, #0]
 800fbfe:	bd38      	pop	{r3, r4, r5, pc}
 800fc00:	24004744 	.word	0x24004744

0800fc04 <_lseek_r>:
 800fc04:	b538      	push	{r3, r4, r5, lr}
 800fc06:	4d07      	ldr	r5, [pc, #28]	; (800fc24 <_lseek_r+0x20>)
 800fc08:	4604      	mov	r4, r0
 800fc0a:	4608      	mov	r0, r1
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	2200      	movs	r2, #0
 800fc10:	602a      	str	r2, [r5, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	f7f3 f908 	bl	8002e28 <_lseek>
 800fc18:	1c43      	adds	r3, r0, #1
 800fc1a:	d102      	bne.n	800fc22 <_lseek_r+0x1e>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	b103      	cbz	r3, 800fc22 <_lseek_r+0x1e>
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	24004744 	.word	0x24004744

0800fc28 <memmove>:
 800fc28:	4288      	cmp	r0, r1
 800fc2a:	b510      	push	{r4, lr}
 800fc2c:	eb01 0402 	add.w	r4, r1, r2
 800fc30:	d902      	bls.n	800fc38 <memmove+0x10>
 800fc32:	4284      	cmp	r4, r0
 800fc34:	4623      	mov	r3, r4
 800fc36:	d807      	bhi.n	800fc48 <memmove+0x20>
 800fc38:	1e43      	subs	r3, r0, #1
 800fc3a:	42a1      	cmp	r1, r4
 800fc3c:	d008      	beq.n	800fc50 <memmove+0x28>
 800fc3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc46:	e7f8      	b.n	800fc3a <memmove+0x12>
 800fc48:	4402      	add	r2, r0
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	428a      	cmp	r2, r1
 800fc4e:	d100      	bne.n	800fc52 <memmove+0x2a>
 800fc50:	bd10      	pop	{r4, pc}
 800fc52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc5a:	e7f7      	b.n	800fc4c <memmove+0x24>

0800fc5c <__malloc_lock>:
 800fc5c:	4801      	ldr	r0, [pc, #4]	; (800fc64 <__malloc_lock+0x8>)
 800fc5e:	f7fe be34 	b.w	800e8ca <__retarget_lock_acquire_recursive>
 800fc62:	bf00      	nop
 800fc64:	2400473c 	.word	0x2400473c

0800fc68 <__malloc_unlock>:
 800fc68:	4801      	ldr	r0, [pc, #4]	; (800fc70 <__malloc_unlock+0x8>)
 800fc6a:	f7fe be2f 	b.w	800e8cc <__retarget_lock_release_recursive>
 800fc6e:	bf00      	nop
 800fc70:	2400473c 	.word	0x2400473c

0800fc74 <_realloc_r>:
 800fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc76:	4607      	mov	r7, r0
 800fc78:	4614      	mov	r4, r2
 800fc7a:	460e      	mov	r6, r1
 800fc7c:	b921      	cbnz	r1, 800fc88 <_realloc_r+0x14>
 800fc7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc82:	4611      	mov	r1, r2
 800fc84:	f7ff bbbe 	b.w	800f404 <_malloc_r>
 800fc88:	b922      	cbnz	r2, 800fc94 <_realloc_r+0x20>
 800fc8a:	f7ff fb6b 	bl	800f364 <_free_r>
 800fc8e:	4625      	mov	r5, r4
 800fc90:	4628      	mov	r0, r5
 800fc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc94:	f000 f82d 	bl	800fcf2 <_malloc_usable_size_r>
 800fc98:	42a0      	cmp	r0, r4
 800fc9a:	d20f      	bcs.n	800fcbc <_realloc_r+0x48>
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	4638      	mov	r0, r7
 800fca0:	f7ff fbb0 	bl	800f404 <_malloc_r>
 800fca4:	4605      	mov	r5, r0
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d0f2      	beq.n	800fc90 <_realloc_r+0x1c>
 800fcaa:	4631      	mov	r1, r6
 800fcac:	4622      	mov	r2, r4
 800fcae:	f7fb fc85 	bl	800b5bc <memcpy>
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f7ff fb55 	bl	800f364 <_free_r>
 800fcba:	e7e9      	b.n	800fc90 <_realloc_r+0x1c>
 800fcbc:	4635      	mov	r5, r6
 800fcbe:	e7e7      	b.n	800fc90 <_realloc_r+0x1c>

0800fcc0 <_read_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d07      	ldr	r5, [pc, #28]	; (800fce0 <_read_r+0x20>)
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	4608      	mov	r0, r1
 800fcc8:	4611      	mov	r1, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	602a      	str	r2, [r5, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	f7f3 f84a 	bl	8002d68 <_read>
 800fcd4:	1c43      	adds	r3, r0, #1
 800fcd6:	d102      	bne.n	800fcde <_read_r+0x1e>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	b103      	cbz	r3, 800fcde <_read_r+0x1e>
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
 800fce0:	24004744 	.word	0x24004744

0800fce4 <abort>:
 800fce4:	b508      	push	{r3, lr}
 800fce6:	2006      	movs	r0, #6
 800fce8:	f000 f834 	bl	800fd54 <raise>
 800fcec:	2001      	movs	r0, #1
 800fcee:	f7f3 f831 	bl	8002d54 <_exit>

0800fcf2 <_malloc_usable_size_r>:
 800fcf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcf6:	1f18      	subs	r0, r3, #4
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	bfbc      	itt	lt
 800fcfc:	580b      	ldrlt	r3, [r1, r0]
 800fcfe:	18c0      	addlt	r0, r0, r3
 800fd00:	4770      	bx	lr

0800fd02 <_raise_r>:
 800fd02:	291f      	cmp	r1, #31
 800fd04:	b538      	push	{r3, r4, r5, lr}
 800fd06:	4604      	mov	r4, r0
 800fd08:	460d      	mov	r5, r1
 800fd0a:	d904      	bls.n	800fd16 <_raise_r+0x14>
 800fd0c:	2316      	movs	r3, #22
 800fd0e:	6003      	str	r3, [r0, #0]
 800fd10:	f04f 30ff 	mov.w	r0, #4294967295
 800fd14:	bd38      	pop	{r3, r4, r5, pc}
 800fd16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd18:	b112      	cbz	r2, 800fd20 <_raise_r+0x1e>
 800fd1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd1e:	b94b      	cbnz	r3, 800fd34 <_raise_r+0x32>
 800fd20:	4620      	mov	r0, r4
 800fd22:	f000 f831 	bl	800fd88 <_getpid_r>
 800fd26:	462a      	mov	r2, r5
 800fd28:	4601      	mov	r1, r0
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd30:	f000 b818 	b.w	800fd64 <_kill_r>
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d00a      	beq.n	800fd4e <_raise_r+0x4c>
 800fd38:	1c59      	adds	r1, r3, #1
 800fd3a:	d103      	bne.n	800fd44 <_raise_r+0x42>
 800fd3c:	2316      	movs	r3, #22
 800fd3e:	6003      	str	r3, [r0, #0]
 800fd40:	2001      	movs	r0, #1
 800fd42:	e7e7      	b.n	800fd14 <_raise_r+0x12>
 800fd44:	2400      	movs	r4, #0
 800fd46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	4798      	blx	r3
 800fd4e:	2000      	movs	r0, #0
 800fd50:	e7e0      	b.n	800fd14 <_raise_r+0x12>
	...

0800fd54 <raise>:
 800fd54:	4b02      	ldr	r3, [pc, #8]	; (800fd60 <raise+0xc>)
 800fd56:	4601      	mov	r1, r0
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	f7ff bfd2 	b.w	800fd02 <_raise_r>
 800fd5e:	bf00      	nop
 800fd60:	24000014 	.word	0x24000014

0800fd64 <_kill_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4d07      	ldr	r5, [pc, #28]	; (800fd84 <_kill_r+0x20>)
 800fd68:	2300      	movs	r3, #0
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	4608      	mov	r0, r1
 800fd6e:	4611      	mov	r1, r2
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	f7f2 ffdf 	bl	8002d34 <_kill>
 800fd76:	1c43      	adds	r3, r0, #1
 800fd78:	d102      	bne.n	800fd80 <_kill_r+0x1c>
 800fd7a:	682b      	ldr	r3, [r5, #0]
 800fd7c:	b103      	cbz	r3, 800fd80 <_kill_r+0x1c>
 800fd7e:	6023      	str	r3, [r4, #0]
 800fd80:	bd38      	pop	{r3, r4, r5, pc}
 800fd82:	bf00      	nop
 800fd84:	24004744 	.word	0x24004744

0800fd88 <_getpid_r>:
 800fd88:	f7f2 bfcc 	b.w	8002d24 <_getpid>

0800fd8c <_init>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	bf00      	nop
 800fd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd92:	bc08      	pop	{r3}
 800fd94:	469e      	mov	lr, r3
 800fd96:	4770      	bx	lr

0800fd98 <_fini>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	bf00      	nop
 800fd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9e:	bc08      	pop	{r3}
 800fda0:	469e      	mov	lr, r3
 800fda2:	4770      	bx	lr
