
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3d4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a724  0800a724  0001a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000568  24000010  0800a744  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000578  0800a744  00020578  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fcff  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c7c  00000000  00000000  0004fd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b90  00000000  00000000  000539c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a78  00000000  00000000  00055550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003782b  00000000  00000000  00056fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000212a4  00000000  00000000  0008e7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001744d1  00000000  00000000  000afa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00223f68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a58  00000000  00000000  00223fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a688 	.word	0x0800a688

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800a688 	.word	0x0800a688

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000614:	d118      	bne.n	8000648 <HAL_GPIO_EXTI_Callback+0x44>

		/*
		HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
		HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
		*/
		HAL_TIM_Base_Start(&htim13);
 8000616:	480e      	ldr	r0, [pc, #56]	; (8000650 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000618:	f007 fc2c 	bl	8007e74 <HAL_TIM_Base_Start>
		HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800061c:	2108      	movs	r1, #8
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <HAL_GPIO_EXTI_Callback+0x50>)
 8000620:	f004 fa4f 	bl	8004ac2 <HAL_GPIO_TogglePin>

		htim13.Instance->CNT = 0;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2200      	movs	r2, #0
 800062a:	625a      	str	r2, [r3, #36]	; 0x24
		while(1){
			if(htim13.Instance->CNT == 1000)
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_GPIO_EXTI_Callback+0x4c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000636:	d1f9      	bne.n	800062c <HAL_GPIO_EXTI_Callback+0x28>
			{
				HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8000638:	2104      	movs	r1, #4
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <HAL_GPIO_EXTI_Callback+0x50>)
 800063c:	f004 fa41 	bl	8004ac2 <HAL_GPIO_TogglePin>
				HAL_TIM_Base_Stop(&htim13);
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000642:	f007 fc95 	bl	8007f70 <HAL_TIM_Base_Stop>
				break;
 8000646:	bf00      	nop
			}
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2400030c 	.word	0x2400030c
 8000654:	58020800 	.word	0x58020800

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fe6c 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f820 	bl	80006a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000664:	f000 f896 	bl	8000794 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 fd7e 	bl	8001168 <MX_GPIO_Init>
  MX_ADC1_Init();
 800066c:	f000 f8be 	bl	80007ec <MX_ADC1_Init>
  MX_ADC2_Init();
 8000670:	f000 f934 	bl	80008dc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000674:	f000 f994 	bl	80009a0 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000678:	f000 fa04 	bl	8000a84 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 800067c:	f000 fa34 	bl	8000ae8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000680:	f000 fa96 	bl	8000bb0 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8000684:	f000 faf8 	bl	8000c78 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000688:	f000 fb36 	bl	8000cf8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800068c:	f000 fbc2 	bl	8000e14 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000690:	f000 fc30 	bl	8000ef4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000694:	f000 fcd0 	bl	8001038 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fd1a 	bl	80010d0 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 800069c:	f000 fc84 	bl	8000fa8 <MX_TIM13_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80006a0:	e7fe      	b.n	80006a0 <main+0x48>
	...

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	; 0x70
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	224c      	movs	r2, #76	; 0x4c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f009 ffe0 	bl	800a678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2220      	movs	r2, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 ffda 	bl	800a678 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006c4:	2004      	movs	r0, #4
 80006c6:	f004 fb59 	bl	8004d7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemClock_Config+0xe8>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a2e      	ldr	r2, [pc, #184]	; (800078c <SystemClock_Config+0xe8>)
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemClock_Config+0xe8>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e6:	bf00      	nop
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xe8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f4:	d1f8      	bne.n	80006e8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0xec>)
 80006f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fa:	f023 0303 	bic.w	r3, r3, #3
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <SystemClock_Config+0xec>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000706:	2301      	movs	r3, #1
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000718:	2305      	movs	r3, #5
 800071a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 800071c:	236e      	movs	r3, #110	; 0x6e
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800072c:	2308      	movs	r3, #8
 800072e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000730:	2300      	movs	r3, #0
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	4618      	mov	r0, r3
 800073e:	f004 fb77 	bl	8004e30 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000748:	f001 f884 	bl	8001854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	233f      	movs	r3, #63	; 0x3f
 800074e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000758:	2308      	movs	r3, #8
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800075c:	2340      	movs	r3, #64	; 0x40
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000760:	2340      	movs	r3, #64	; 0x40
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000768:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2103      	movs	r1, #3
 8000772:	4618      	mov	r0, r3
 8000774:	f004 ff08 	bl	8005588 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800077e:	f001 f869 	bl	8001854 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3770      	adds	r7, #112	; 0x70
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800
 8000790:	58024400 	.word	0x58024400

08000794 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0ae      	sub	sp, #184	; 0xb8
 8000798:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	22b4      	movs	r2, #180	; 0xb4
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f009 ff69 	bl	800a678 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007aa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80007b0:	2350      	movs	r3, #80	; 0x50
 80007b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80007b4:	2305      	movs	r3, #5
 80007b6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f005 fa63 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80007e0:	f001 f838 	bl	8001854 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	37b8      	adds	r7, #184	; 0xb8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2224      	movs	r2, #36	; 0x24
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f009 ff37 	bl	800a678 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800080c:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <MX_ADC1_Init+0xe8>)
 800080e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000824:	2204      	movs	r2, #4
 8000826:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000868:	4819      	ldr	r0, [pc, #100]	; (80008d0 <MX_ADC1_Init+0xe4>)
 800086a:	f002 f877 	bl	800295c <HAL_ADC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 ffee 	bl	8001854 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_ADC1_Init+0xe4>)
 8000884:	f003 f8b0 	bl	80039e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800088e:	f000 ffe1 	bl	8001854 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_ADC1_Init+0xec>)
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000896:	2306      	movs	r3, #6
 8000898:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a4:	2304      	movs	r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_ADC1_Init+0xe4>)
 80008b8:	f002 fa58 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80008c2:	f000 ffc7 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	; 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2400022c 	.word	0x2400022c
 80008d4:	40022000 	.word	0x40022000
 80008d8:	04300002 	.word	0x04300002

080008dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2224      	movs	r2, #36	; 0x24
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f009 fec5 	bl	800a678 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_ADC2_Init+0xbc>)
 80008f0:	4a2a      	ldr	r2, [pc, #168]	; (800099c <MX_ADC2_Init+0xc0>)
 80008f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_ADC2_Init+0xbc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_ADC2_Init+0xbc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000908:	2204      	movs	r2, #4
 800090a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_ADC2_Init+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000914:	2200      	movs	r2, #0
 8000916:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC2_Init+0xbc>)
 800091a:	2201      	movs	r2, #1
 800091c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC2_Init+0xbc>)
 800092e:	2200      	movs	r2, #0
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC2_Init+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000940:	2200      	movs	r2, #0
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <MX_ADC2_Init+0xbc>)
 800094e:	f002 f805 	bl	800295c <HAL_ADC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000958:	f000 ff7c 	bl	8001854 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800095c:	2301      	movs	r3, #1
 800095e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000960:	2306      	movs	r3, #6
 8000962:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000968:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800096c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800096e:	2304      	movs	r3, #4
 8000970:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC2_Init+0xbc>)
 8000982:	f002 f9f3 	bl	8002d6c <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800098c:	f000 ff62 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000170 	.word	0x24000170
 800099c:	40022100 	.word	0x40022100

080009a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2224      	movs	r2, #36	; 0x24
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f009 fe63 	bl	800a678 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <MX_ADC3_Init+0xe0>)
 80009b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80009c4:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_ADC3_Init+0xdc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a24:	4815      	ldr	r0, [pc, #84]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a26:	f001 ff99 	bl	800295c <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000a30:	f000 ff10 	bl	8001854 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a34:	2301      	movs	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a44:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a46:	2304      	movs	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_ADC3_Init+0xdc>)
 8000a64:	f002 f982 	bl	8002d6c <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000a6e:	f000 fef1 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2400029c 	.word	0x2400029c
 8000a80:	58026000 	.word	0x58026000

08000a84 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2224      	movs	r2, #36	; 0x24
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f009 fdf1 	bl	800a678 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_DAC1_Init+0x5c>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_DAC1_Init+0x60>)
 8000a9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <MX_DAC1_Init+0x5c>)
 8000a9e:	f003 f994 	bl	8003dca <HAL_DAC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000aa8:	f000 fed4 	bl	8001854 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2210      	movs	r2, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_DAC1_Init+0x5c>)
 8000ac8:	f003 f9a2 	bl	8003e10 <HAL_DAC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 febf 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	240000cc 	.word	0x240000cc
 8000ae4:	40007400 	.word	0x40007400

08000ae8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <MX_FDCAN1_Init+0xc4>)
 8000af0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_FDCAN1_Init+0xc0>)
 8000b96:	f003 fa6b 	bl	8004070 <HAL_FDCAN_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ba0:	f000 fe58 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	240003e8 	.word	0x240003e8
 8000bac:	4000a000 	.word	0x4000a000

08000bb0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <MX_FDCAN2_Init+0xc4>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_FDCAN2_Init+0xc0>)
 8000c5e:	f003 fa07 	bl	8004070 <HAL_FDCAN_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c68:	f000 fdf4 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	240004d4 	.word	0x240004d4
 8000c74:	4000a400 	.word	0x4000a400

08000c78 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_I2C4_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <MX_I2C4_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_I2C4_Init+0x74>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <MX_I2C4_Init+0x7c>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_I2C4_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_I2C4_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_I2C4_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_I2C4_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_I2C4_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_I2C4_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_I2C4_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_I2C4_Init+0x74>)
 8000cb4:	f003 ff3a 	bl	8004b2c <HAL_I2C_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 fdc9 	bl	8001854 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <MX_I2C4_Init+0x74>)
 8000cc6:	f003 ffc1 	bl	8004c4c <HAL_I2CEx_ConfigAnalogFilter>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 fdc0 	bl	8001854 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_I2C4_Init+0x74>)
 8000cd8:	f004 f803 	bl	8004ce2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 fdb7 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000034 	.word	0x24000034
 8000cf0:	58001c00 	.word	0x58001c00
 8000cf4:	60404e72 	.word	0x60404e72

08000cf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b098      	sub	sp, #96	; 0x60
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2234      	movs	r2, #52	; 0x34
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f009 fca7 	bl	800a678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d2a:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d2c:	4a38      	ldr	r2, [pc, #224]	; (8000e10 <MX_TIM1_Init+0x118>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d56:	482d      	ldr	r0, [pc, #180]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d58:	f007 f931 	bl	8007fbe <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fd77 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d76:	4619      	mov	r1, r3
 8000d78:	4824      	ldr	r0, [pc, #144]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000d7a:	f008 f98b 	bl	8009094 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d84:	f000 fd66 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000da0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da4:	220c      	movs	r2, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4818      	ldr	r0, [pc, #96]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000daa:	f007 fb7b 	bl	80084a4 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000db4:	f000 fd4e 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000dee:	f008 f9ed 	bl	80091cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000df8:	f000 fd2c 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <MX_TIM1_Init+0x114>)
 8000dfe:	f001 f857 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3760      	adds	r7, #96	; 0x60
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	24000488 	.word	0x24000488
 8000e10:	40010000 	.word	0x40010000

08000e14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <MX_TIM4_Init+0xdc>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e5e:	4823      	ldr	r0, [pc, #140]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e60:	f007 f8ad 	bl	8007fbe <HAL_TIM_PWM_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e6a:	f000 fcf3 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481b      	ldr	r0, [pc, #108]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000e7e:	f008 f909 	bl	8009094 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e88:	f000 fce4 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8c:	2360      	movs	r3, #96	; 0x60
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000ea4:	f007 fafe 	bl	80084a4 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000eae:	f000 fcd1 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000eba:	f007 faf3 	bl	80084a4 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ec4:	f000 fcc6 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	220c      	movs	r2, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000ed0:	f007 fae8 	bl	80084a4 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000eda:	f000 fcbb 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM4_Init+0xd8>)
 8000ee0:	f000 ffe6 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	24000080 	.word	0x24000080
 8000ef0:	40000800 	.word	0x40000800

08000ef4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <MX_TIM5_Init+0xb0>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f40:	f007 f83d 	bl	8007fbe <HAL_TIM_PWM_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000f4a:	f000 fc83 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f5e:	f008 f899 	bl	8009094 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000f68:	f000 fc74 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f84:	f007 fa8e 	bl	80084a4 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f8e:	f000 fc61 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM5_Init+0xac>)
 8000f94:	f000 ff8c 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	240001e0 	.word	0x240001e0
 8000fa4:	40000c00 	.word	0x40000c00

08000fa8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <MX_TIM13_Init+0x8c>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 27500 -1;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fc2:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8000fc6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000 - 1;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fd4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_TIM13_Init+0x88>)
 8000fe4:	f006 feee 	bl	8007dc4 <HAL_TIM_Base_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 8000fee:	f000 fc31 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8000ff2:	480f      	ldr	r0, [pc, #60]	; (8001030 <MX_TIM13_Init+0x88>)
 8000ff4:	f007 f83a 	bl	800806c <HAL_TIM_IC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM13_Init+0x5a>
  {
    Error_Handler();
 8000ffe:	f000 fc29 	bl	8001854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001006:	2301      	movs	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_TIM13_Init+0x88>)
 800101a:	f007 f9a7 	bl	800836c <HAL_TIM_IC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM13_Init+0x80>
  {
    Error_Handler();
 8001024:	f000 fc16 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2400030c 	.word	0x2400030c
 8001034:	40001c00 	.word	0x40001c00

08001038 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 800103e:	4a23      	ldr	r2, [pc, #140]	; (80010cc <MX_USART1_UART_Init+0x94>)
 8001040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001080:	4811      	ldr	r0, [pc, #68]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001082:	f008 f961 	bl	8009348 <HAL_UART_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800108c:	f000 fbe2 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 8001094:	f009 f9f4 	bl	800a480 <HAL_UARTEx_SetTxFifoThreshold>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800109e:	f000 fbd9 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 80010a6:	f009 fa29 	bl	800a4fc <HAL_UARTEx_SetRxFifoThreshold>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f000 fbd0 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_USART1_UART_Init+0x90>)
 80010b6:	f009 f9aa 	bl	800a40e <HAL_UARTEx_DisableFifoMode>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c0:	f000 fbc8 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24000358 	.word	0x24000358
 80010cc:	40011000 	.word	0x40011000

080010d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_USART3_UART_Init+0x94>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800111a:	f008 f915 	bl	8009348 <HAL_UART_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001124:	f000 fb96 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800112c:	f009 f9a8 	bl	800a480 <HAL_UARTEx_SetTxFifoThreshold>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001136:	f000 fb8d 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800113e:	f009 f9dd 	bl	800a4fc <HAL_UARTEx_SetRxFifoThreshold>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001148:	f000 fb84 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800114e:	f009 f95e 	bl	800a40e <HAL_UARTEx_DisableFifoMode>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001158:	f000 fb7c 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240000e0 	.word	0x240000e0
 8001164:	40004800 	.word	0x40004800

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4bbf      	ldr	r3, [pc, #764]	; (800147c <MX_GPIO_Init+0x314>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4abd      	ldr	r2, [pc, #756]	; (800147c <MX_GPIO_Init+0x314>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4bbb      	ldr	r3, [pc, #748]	; (800147c <MX_GPIO_Init+0x314>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	623b      	str	r3, [r7, #32]
 800119a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119c:	4bb7      	ldr	r3, [pc, #732]	; (800147c <MX_GPIO_Init+0x314>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4ab6      	ldr	r2, [pc, #728]	; (800147c <MX_GPIO_Init+0x314>)
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4bb3      	ldr	r3, [pc, #716]	; (800147c <MX_GPIO_Init+0x314>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4bb0      	ldr	r3, [pc, #704]	; (800147c <MX_GPIO_Init+0x314>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4aae      	ldr	r2, [pc, #696]	; (800147c <MX_GPIO_Init+0x314>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4bac      	ldr	r3, [pc, #688]	; (800147c <MX_GPIO_Init+0x314>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4ba8      	ldr	r3, [pc, #672]	; (800147c <MX_GPIO_Init+0x314>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	4aa7      	ldr	r2, [pc, #668]	; (800147c <MX_GPIO_Init+0x314>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e8:	4ba4      	ldr	r3, [pc, #656]	; (800147c <MX_GPIO_Init+0x314>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4ba1      	ldr	r3, [pc, #644]	; (800147c <MX_GPIO_Init+0x314>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a9f      	ldr	r2, [pc, #636]	; (800147c <MX_GPIO_Init+0x314>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b9d      	ldr	r3, [pc, #628]	; (800147c <MX_GPIO_Init+0x314>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <MX_GPIO_Init+0x314>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	4a98      	ldr	r2, [pc, #608]	; (800147c <MX_GPIO_Init+0x314>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001224:	4b95      	ldr	r3, [pc, #596]	; (800147c <MX_GPIO_Init+0x314>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	4b92      	ldr	r3, [pc, #584]	; (800147c <MX_GPIO_Init+0x314>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <MX_GPIO_Init+0x314>)
 800123a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <MX_GPIO_Init+0x314>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001250:	4b8a      	ldr	r3, [pc, #552]	; (800147c <MX_GPIO_Init+0x314>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a89      	ldr	r2, [pc, #548]	; (800147c <MX_GPIO_Init+0x314>)
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b86      	ldr	r3, [pc, #536]	; (800147c <MX_GPIO_Init+0x314>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f240 4102 	movw	r1, #1026	; 0x402
 8001274:	4882      	ldr	r0, [pc, #520]	; (8001480 <MX_GPIO_Init+0x318>)
 8001276:	f003 fc0b 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8001280:	4880      	ldr	r0, [pc, #512]	; (8001484 <MX_GPIO_Init+0x31c>)
 8001282:	f003 fc05 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001286:	2200      	movs	r2, #0
 8001288:	f248 1138 	movw	r1, #33080	; 0x8138
 800128c:	487e      	ldr	r0, [pc, #504]	; (8001488 <MX_GPIO_Init+0x320>)
 800128e:	f003 fbff 	bl	8004a90 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	210c      	movs	r1, #12
 8001296:	487d      	ldr	r0, [pc, #500]	; (800148c <MX_GPIO_Init+0x324>)
 8001298:	f003 fbfa 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a2:	487b      	ldr	r0, [pc, #492]	; (8001490 <MX_GPIO_Init+0x328>)
 80012a4:	f003 fbf4 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2160      	movs	r1, #96	; 0x60
 80012ac:	4879      	ldr	r0, [pc, #484]	; (8001494 <MX_GPIO_Init+0x32c>)
 80012ae:	f003 fbef 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 80012b2:	f240 3303 	movw	r3, #771	; 0x303
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c4:	230e      	movs	r3, #14
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4872      	ldr	r0, [pc, #456]	; (8001498 <MX_GPIO_Init+0x330>)
 80012d0:	f003 fa36 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 80012d4:	f640 0303 	movw	r3, #2051	; 0x803
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80012e6:	2309      	movs	r3, #9
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	4865      	ldr	r0, [pc, #404]	; (8001488 <MX_GPIO_Init+0x320>)
 80012f2:	f003 fa25 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001308:	2309      	movs	r3, #9
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	485d      	ldr	r0, [pc, #372]	; (8001488 <MX_GPIO_Init+0x320>)
 8001314:	f003 fa14 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001318:	2349      	movs	r3, #73	; 0x49
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001328:	230e      	movs	r3, #14
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4853      	ldr	r0, [pc, #332]	; (8001480 <MX_GPIO_Init+0x318>)
 8001334:	f003 fa04 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 8001338:	f240 4302 	movw	r3, #1026	; 0x402
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	484b      	ldr	r0, [pc, #300]	; (8001480 <MX_GPIO_Init+0x318>)
 8001352:	f003 f9f5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001356:	2330      	movs	r3, #48	; 0x30
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001366:	230a      	movs	r3, #10
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4844      	ldr	r0, [pc, #272]	; (8001484 <MX_GPIO_Init+0x31c>)
 8001372:	f003 f9e5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001376:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	483d      	ldr	r0, [pc, #244]	; (8001484 <MX_GPIO_Init+0x31c>)
 8001390:	f003 f9d6 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001394:	f64b 0303 	movw	r3, #47107	; 0xb803
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013a6:	230e      	movs	r3, #14
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4834      	ldr	r0, [pc, #208]	; (8001484 <MX_GPIO_Init+0x31c>)
 80013b2:	f003 f9c5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 80013b6:	23b0      	movs	r3, #176	; 0xb0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013c6:	230a      	movs	r3, #10
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	482b      	ldr	r0, [pc, #172]	; (8001480 <MX_GPIO_Init+0x318>)
 80013d2:	f003 f9b5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80013d6:	2304      	movs	r3, #4
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013e6:	230c      	movs	r3, #12
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_GPIO_Init+0x318>)
 80013f2:	f003 f9a5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 80013f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001408:	230c      	movs	r3, #12
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <MX_GPIO_Init+0x324>)
 8001414:	f003 f994 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800142a:	230d      	movs	r3, #13
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4819      	ldr	r0, [pc, #100]	; (800149c <MX_GPIO_Init+0x334>)
 8001436:	f003 f983 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 800143a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <MX_GPIO_Init+0x334>)
 8001454:	f003 f974 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_GPIO_Init+0x324>)
 8001470:	f003 f966 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8001474:	2304      	movs	r3, #4
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	e011      	b.n	80014a0 <MX_GPIO_Init+0x338>
 800147c:	58024400 	.word	0x58024400
 8001480:	58020c00 	.word	0x58020c00
 8001484:	58021000 	.word	0x58021000
 8001488:	58021800 	.word	0x58021800
 800148c:	58020800 	.word	0x58020800
 8001490:	58021400 	.word	0x58021400
 8001494:	58021c00 	.word	0x58021c00
 8001498:	58020400 	.word	0x58020400
 800149c:	58020000 	.word	0x58020000
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014aa:	2309      	movs	r3, #9
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	48bc      	ldr	r0, [pc, #752]	; (80017a8 <MX_GPIO_Init+0x640>)
 80014b6:	f003 f943 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 80014ba:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014cc:	230e      	movs	r3, #14
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	48b5      	ldr	r0, [pc, #724]	; (80017ac <MX_GPIO_Init+0x644>)
 80014d8:	f003 f932 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 80014dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80014ee:	2303      	movs	r3, #3
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	48ac      	ldr	r0, [pc, #688]	; (80017ac <MX_GPIO_Init+0x644>)
 80014fa:	f003 f921 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80014fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001510:	230a      	movs	r3, #10
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	48a5      	ldr	r0, [pc, #660]	; (80017b0 <MX_GPIO_Init+0x648>)
 800151c:	f003 f910 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001520:	f248 1338 	movw	r3, #33080	; 0x8138
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	489c      	ldr	r0, [pc, #624]	; (80017ac <MX_GPIO_Init+0x644>)
 800153a:	f003 f901 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 800153e:	f648 7308 	movw	r3, #36616	; 0x8f08
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001550:	230e      	movs	r3, #14
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4896      	ldr	r0, [pc, #600]	; (80017b4 <MX_GPIO_Init+0x64c>)
 800155c:	f003 f8f0 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 8001560:	23c0      	movs	r3, #192	; 0xc0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001570:	230e      	movs	r3, #14
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	488f      	ldr	r0, [pc, #572]	; (80017b8 <MX_GPIO_Init+0x650>)
 800157c:	f003 f8e0 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001590:	2306      	movs	r3, #6
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4883      	ldr	r0, [pc, #524]	; (80017a8 <MX_GPIO_Init+0x640>)
 800159c:	f003 f8d0 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 80015a0:	f241 031f 	movw	r3, #4127	; 0x101f
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80015b2:	2309      	movs	r3, #9
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	487f      	ldr	r0, [pc, #508]	; (80017bc <MX_GPIO_Init+0x654>)
 80015be:	f003 f8bf 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80015c2:	2340      	movs	r3, #64	; 0x40
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015d2:	230a      	movs	r3, #10
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4873      	ldr	r0, [pc, #460]	; (80017ac <MX_GPIO_Init+0x644>)
 80015de:	f003 f8af 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80015e2:	2304      	movs	r3, #4
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	486d      	ldr	r0, [pc, #436]	; (80017ac <MX_GPIO_Init+0x644>)
 80015f8:	f003 f8a2 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_MCLK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 80015fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800160e:	2306      	movs	r3, #6
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4868      	ldr	r0, [pc, #416]	; (80017bc <MX_GPIO_Init+0x654>)
 800161a:	f003 f891 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800161e:	2320      	movs	r3, #32
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4862      	ldr	r0, [pc, #392]	; (80017bc <MX_GPIO_Init+0x654>)
 8001634:	f003 f884 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8001638:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800164a:	2309      	movs	r3, #9
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	485a      	ldr	r0, [pc, #360]	; (80017c0 <MX_GPIO_Init+0x658>)
 8001656:	f003 f873 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800166c:	2309      	movs	r3, #9
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4851      	ldr	r0, [pc, #324]	; (80017bc <MX_GPIO_Init+0x654>)
 8001678:	f003 f862 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 800167c:	2332      	movs	r3, #50	; 0x32
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168c:	230b      	movs	r3, #11
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4848      	ldr	r0, [pc, #288]	; (80017b8 <MX_GPIO_Init+0x650>)
 8001698:	f003 f852 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 800169c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ae:	230b      	movs	r3, #11
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4842      	ldr	r0, [pc, #264]	; (80017c4 <MX_GPIO_Init+0x65c>)
 80016ba:	f003 f841 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED2_Pin USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 80016be:	230c      	movs	r3, #12
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	4838      	ldr	r0, [pc, #224]	; (80017b8 <MX_GPIO_Init+0x650>)
 80016d6:	f003 f833 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016ea:	2305      	movs	r3, #5
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	482f      	ldr	r0, [pc, #188]	; (80017b4 <MX_GPIO_Init+0x64c>)
 80016f6:	f003 f823 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 80016fa:	2318      	movs	r3, #24
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800170a:	230e      	movs	r3, #14
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	4826      	ldr	r0, [pc, #152]	; (80017b0 <MX_GPIO_Init+0x648>)
 8001716:	f003 f813 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800171a:	2386      	movs	r3, #134	; 0x86
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172a:	230b      	movs	r3, #11
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	481e      	ldr	r0, [pc, #120]	; (80017b0 <MX_GPIO_Init+0x648>)
 8001736:	f003 f803 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 800173a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800174c:	2305      	movs	r3, #5
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <MX_GPIO_Init+0x654>)
 8001758:	f002 fff2 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001762:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_GPIO_Init+0x640>)
 8001774:	f002 ffe4 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_20_Pin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 8001778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <MX_GPIO_Init+0x654>)
 8001792:	f002 ffd5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e010      	b.n	80017c8 <MX_GPIO_Init+0x660>
 80017a6:	bf00      	nop
 80017a8:	58021000 	.word	0x58021000
 80017ac:	58021800 	.word	0x58021800
 80017b0:	58020000 	.word	0x58020000
 80017b4:	58021c00 	.word	0x58021c00
 80017b8:	58020800 	.word	0x58020800
 80017bc:	58021400 	.word	0x58021400
 80017c0:	58020c00 	.word	0x58020c00
 80017c4:	58020400 	.word	0x58020400
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	481e      	ldr	r0, [pc, #120]	; (800184c <MX_GPIO_Init+0x6e4>)
 80017d2:	f002 ffb5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 80017d6:	2310      	movs	r3, #16
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017e6:	2309      	movs	r3, #9
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4816      	ldr	r0, [pc, #88]	; (800184c <MX_GPIO_Init+0x6e4>)
 80017f2:	f002 ffa5 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 80017f6:	2304      	movs	r3, #4
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001806:	230a      	movs	r3, #10
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	480f      	ldr	r0, [pc, #60]	; (8001850 <MX_GPIO_Init+0x6e8>)
 8001812:	f002 ff95 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001816:	2360      	movs	r3, #96	; 0x60
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <MX_GPIO_Init+0x6e4>)
 800182e:	f002 ff87 	bl	8004740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2028      	movs	r0, #40	; 0x28
 8001838:	f002 fa93 	bl	8003d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800183c:	2028      	movs	r0, #40	; 0x28
 800183e:	f002 faaa 	bl	8003d96 <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3738      	adds	r7, #56	; 0x38
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	58021c00 	.word	0x58021c00
 8001850:	58020400 	.word	0x58020400

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_MspInit+0x30>)
 8001868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800186c:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x30>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x30>)
 8001878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	58024400 	.word	0x58024400

08001894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b090      	sub	sp, #64	; 0x40
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6c      	ldr	r2, [pc, #432]	; (8001a64 <HAL_ADC_MspInit+0x1d0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d14e      	bne.n	8001954 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018b6:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <HAL_ADC_MspInit+0x1d4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_ADC_MspInit+0x1d4>)
 80018be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018c0:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <HAL_ADC_MspInit+0x1d4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10e      	bne.n	80018e6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80018ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ce:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018d8:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80018da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4b61      	ldr	r3, [pc, #388]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001922:	2301      	movs	r3, #1
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	484e      	ldr	r0, [pc, #312]	; (8001a70 <HAL_ADC_MspInit+0x1dc>)
 8001936:	f002 ff03 	bl	8004740 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800193a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800193e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001942:	f000 fdaf 	bl	80024a4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001946:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800194a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800194e:	f000 fda9 	bl	80024a4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001952:	e082      	b.n	8001a5a <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <HAL_ADC_MspInit+0x1e0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d133      	bne.n	80019c6 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_ADC_MspInit+0x1d4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_ADC_MspInit+0x1d4>)
 8001966:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_ADC_MspInit+0x1d4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10e      	bne.n	800198e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001976:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019b4:	f000 fd76 	bl	80024a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019b8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019c0:	f000 fd70 	bl	80024a4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80019c4:	e049      	b.n	8001a5a <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2b      	ldr	r2, [pc, #172]	; (8001a78 <HAL_ADC_MspInit+0x1e4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d144      	bne.n	8001a5a <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80019d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_ADC_MspInit+0x1d8>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a2a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a2e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a32:	f000 fd37 	bl	80024a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a3a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a3e:	f000 fd31 	bl	80024a4 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001a42:	2304      	movs	r3, #4
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a46:	2303      	movs	r3, #3
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <HAL_ADC_MspInit+0x1e8>)
 8001a56:	f002 fe73 	bl	8004740 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3740      	adds	r7, #64	; 0x40
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000
 8001a68:	2400002c 	.word	0x2400002c
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58020800 	.word	0x58020800
 8001a74:	40022100 	.word	0x40022100
 8001a78:	58026000 	.word	0x58026000
 8001a7c:	58021c00 	.word	0x58021c00

08001a80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <HAL_DAC_MspInit+0x80>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d129      	bne.n	8001af6 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_DAC_MspInit+0x84>)
 8001aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa8:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <HAL_DAC_MspInit+0x84>)
 8001aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_DAC_MspInit+0x84>)
 8001ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_DAC_MspInit+0x84>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_DAC_MspInit+0x84>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_DAC_MspInit+0x84>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <HAL_DAC_MspInit+0x88>)
 8001af2:	f002 fe25 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40007400 	.word	0x40007400
 8001b04:	58024400 	.word	0x58024400
 8001b08:	58020000 	.word	0x58020000

08001b0c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0b8      	sub	sp, #224	; 0xe0
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	22b4      	movs	r2, #180	; 0xb4
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f008 fda3 	bl	800a678 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <HAL_FDCAN_MspInit+0x17c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d14e      	bne.n	8001bda <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 f8a6 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001b5a:	f7ff fe7b 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_FDCAN_MspInit+0x180>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <HAL_FDCAN_MspInit+0x180>)
 8001b66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b68:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_FDCAN_MspInit+0x180>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10e      	bne.n	8001b8e <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b70:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001b72:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001b76:	4a46      	ldr	r2, [pc, #280]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001b80:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001b82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001bac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4830      	ldr	r0, [pc, #192]	; (8001c94 <HAL_FDCAN_MspInit+0x188>)
 8001bd4:	f002 fdb4 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001bd8:	e051      	b.n	8001c7e <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <HAL_FDCAN_MspInit+0x18c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d14c      	bne.n	8001c7e <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001bea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f852 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001c02:	f7ff fe27 	bl	8001854 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_FDCAN_MspInit+0x180>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_FDCAN_MspInit+0x180>)
 8001c0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_FDCAN_MspInit+0x180>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10e      	bne.n	8001c36 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001c1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001c2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_FDCAN_MspInit+0x184>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001c54:	2360      	movs	r3, #96	; 0x60
 8001c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001c6c:	2309      	movs	r3, #9
 8001c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c76:	4619      	mov	r1, r3
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <HAL_FDCAN_MspInit+0x190>)
 8001c7a:	f002 fd61 	bl	8004740 <HAL_GPIO_Init>
}
 8001c7e:	bf00      	nop
 8001c80:	37e0      	adds	r7, #224	; 0xe0
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	4000a000 	.word	0x4000a000
 8001c8c:	24000030 	.word	0x24000030
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58021c00 	.word	0x58021c00
 8001c98:	4000a400 	.word	0x4000a400
 8001c9c:	58020400 	.word	0x58020400

08001ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0b6      	sub	sp, #216	; 0xd8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	22b4      	movs	r2, #180	; 0xb4
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f008 fcd9 	bl	800a678 <memset>
  if(hi2c->Instance==I2C4)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_I2C_MspInit+0xc0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d142      	bne.n	8001d56 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 ffde 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cea:	f7ff fdb3 	bl	8001854 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001cf6:	f043 0320 	orr.w	r3, r3, #32
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001d0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d14:	2312      	movs	r3, #18
 8001d16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d26:	2304      	movs	r3, #4
 8001d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001d34:	f002 fd04 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_I2C_MspInit+0xc4>)
 8001d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	37d8      	adds	r7, #216	; 0xd8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58001c00 	.word	0x58001c00
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58021400 	.word	0x58021400

08001d6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_TIM_PWM_MspInit+0x90>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10f      	bne.n	8001d9e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d9c:	e028      	b.n	8001df0 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_TIM_PWM_MspInit+0x98>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d10f      	bne.n	8001dc8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
}
 8001dc6:	e013      	b.n	8001df0 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_TIM_PWM_MspInit+0x9c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_TIM_PWM_MspInit+0x94>)
 8001de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	58024400 	.word	0x58024400
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40000c00 	.word	0x40000c00

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <HAL_TIM_Base_MspInit+0x98>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d135      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_TIM_Base_MspInit+0x9c>)
 8001e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_TIM_Base_MspInit+0x9c>)
 8001e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_TIM_Base_MspInit+0x9c>)
 8001e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_TIM_Base_MspInit+0x9c>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_TIM_Base_MspInit+0x9c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_TIM_Base_MspInit+0x9c>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e6a:	2340      	movs	r3, #64	; 0x40
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0xa0>)
 8001e86:	f002 fc5b 	bl	8004740 <HAL_GPIO_Init>

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	202c      	movs	r0, #44	; 0x2c
 8001e90:	f001 ff67 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f001 ff7e 	bl	8003d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40001c00 	.word	0x40001c00
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020000 	.word	0x58020000

08001eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_TIM_MspPostInit+0x140>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d120      	bne.n	8001f14 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed2:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed8:	4a46      	ldr	r2, [pc, #280]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001ef0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	483a      	ldr	r0, [pc, #232]	; (8001ff8 <HAL_TIM_MspPostInit+0x148>)
 8001f0e:	f002 fc17 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f12:	e068      	b.n	8001fe6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_TIM_MspPostInit+0x14c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d13f      	bne.n	8001f9e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f42:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4619      	mov	r1, r3
 8001f74:	4822      	ldr	r0, [pc, #136]	; (8002000 <HAL_TIM_MspPostInit+0x150>)
 8001f76:	f002 fbe3 	bl	8004740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8001f7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	481b      	ldr	r0, [pc, #108]	; (8002004 <HAL_TIM_MspPostInit+0x154>)
 8001f98:	f002 fbd2 	bl	8004740 <HAL_GPIO_Init>
}
 8001f9c:	e023      	b.n	8001fe6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_TIM_MspPostInit+0x158>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d11e      	bne.n	8001fe6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_TIM_MspPostInit+0x144>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480a      	ldr	r0, [pc, #40]	; (800200c <HAL_TIM_MspPostInit+0x15c>)
 8001fe2:	f002 fbad 	bl	8004740 <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	; 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58021000 	.word	0x58021000
 8001ffc:	40000800 	.word	0x40000800
 8002000:	58020400 	.word	0x58020400
 8002004:	58020c00 	.word	0x58020c00
 8002008:	40000c00 	.word	0x40000c00
 800200c:	58020000 	.word	0x58020000

08002010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0b8      	sub	sp, #224	; 0xe0
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	22b4      	movs	r2, #180	; 0xb4
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f008 fb21 	bl	800a678 <memset>
  if(huart->Instance==USART1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a49      	ldr	r2, [pc, #292]	; (8002160 <HAL_UART_MspInit+0x150>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d143      	bne.n	80020c8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002040:	2301      	movs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204a:	f107 0318 	add.w	r3, r7, #24
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fe26 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800205a:	f7ff fbfb 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002064:	4a3f      	ldr	r2, [pc, #252]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_UART_MspInit+0x154>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_UART_MspInit+0x154>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800209a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800209e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80020b4:	2304      	movs	r3, #4
 80020b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020be:	4619      	mov	r1, r3
 80020c0:	4829      	ldr	r0, [pc, #164]	; (8002168 <HAL_UART_MspInit+0x158>)
 80020c2:	f002 fb3d 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020c6:	e047      	b.n	8002158 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_UART_MspInit+0x15c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d142      	bne.n	8002158 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fddd 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80020ec:	f7ff fbb2 	bl	8001854 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_UART_MspInit+0x154>)
 80020f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f6:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <HAL_UART_MspInit+0x154>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_UART_MspInit+0x154>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800212c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002146:	2307      	movs	r3, #7
 8002148:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <HAL_UART_MspInit+0x160>)
 8002154:	f002 faf4 	bl	8004740 <HAL_GPIO_Init>
}
 8002158:	bf00      	nop
 800215a:	37e0      	adds	r7, #224	; 0xe0
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40011000 	.word	0x40011000
 8002164:	58024400 	.word	0x58024400
 8002168:	58020400 	.word	0x58020400
 800216c:	40004800 	.word	0x40004800
 8002170:	58020c00 	.word	0x58020c00

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c0:	f000 f92c 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021d0:	f002 fc91 	bl	8004af6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021d8:	f002 fc8d 	bl	8004af6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80021e6:	f005 ffa2 	bl	800812e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2400030c 	.word	0x2400030c

080021f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <SystemInit+0xd0>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <SystemInit+0xd0>)
 8002200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <SystemInit+0xd4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2b06      	cmp	r3, #6
 8002212:	d807      	bhi.n	8002224 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <SystemInit+0xd4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 030f 	bic.w	r3, r3, #15
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <SystemInit+0xd4>)
 800221e:	f043 0307 	orr.w	r3, r3, #7
 8002222:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <SystemInit+0xd8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a28      	ldr	r2, [pc, #160]	; (80022cc <SystemInit+0xd8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <SystemInit+0xd8>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <SystemInit+0xd8>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4924      	ldr	r1, [pc, #144]	; (80022cc <SystemInit+0xd8>)
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <SystemInit+0xdc>)
 800223e:	4013      	ands	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <SystemInit+0xd4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <SystemInit+0xd4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 030f 	bic.w	r3, r3, #15
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <SystemInit+0xd4>)
 8002258:	f043 0307 	orr.w	r3, r3, #7
 800225c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <SystemInit+0xd8>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <SystemInit+0xd8>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <SystemInit+0xd8>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <SystemInit+0xd8>)
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <SystemInit+0xe0>)
 8002274:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <SystemInit+0xd8>)
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <SystemInit+0xe4>)
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <SystemInit+0xd8>)
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <SystemInit+0xe8>)
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <SystemInit+0xd8>)
 8002284:	2200      	movs	r2, #0
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <SystemInit+0xd8>)
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <SystemInit+0xe8>)
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <SystemInit+0xd8>)
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <SystemInit+0xd8>)
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <SystemInit+0xe8>)
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <SystemInit+0xd8>)
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <SystemInit+0xd8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <SystemInit+0xd8>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <SystemInit+0xd8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <SystemInit+0xec>)
 80022b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022b8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	52002000 	.word	0x52002000
 80022cc:	58024400 	.word	0x58024400
 80022d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80022d4:	02020200 	.word	0x02020200
 80022d8:	01ff0000 	.word	0x01ff0000
 80022dc:	01010280 	.word	0x01010280
 80022e0:	52004000 	.word	0x52004000

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022e8:	f7ff ff84 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ee:	490d      	ldr	r1, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002304:	4c0a      	ldr	r4, [pc, #40]	; (8002330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002312:	f008 f97f 	bl	800a614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7fe f99f 	bl	8000658 <main>
  bx  lr
 800231a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800231c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002320:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002324:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002328:	0800a734 	.word	0x0800a734
  ldr r2, =_sbss
 800232c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002330:	24000578 	.word	0x24000578

08002334 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC3_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233e:	2003      	movs	r0, #3
 8002340:	f001 fd04 	bl	8003d4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002344:	f003 fad6 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_Init+0x68>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	4913      	ldr	r1, [pc, #76]	; (80023a4 <HAL_Init+0x6c>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_Init+0x68>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_Init+0x6c>)
 800236c:	5cd3      	ldrb	r3, [r2, r3]
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_Init+0x70>)
 800237a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <HAL_Init+0x74>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f814 	bl	80023b0 <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e002      	b.n	8002398 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002392:	f7ff fa65 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58024400 	.word	0x58024400
 80023a4:	0800a6ec 	.word	0x0800a6ec
 80023a8:	24000004 	.word	0x24000004
 80023ac:	24000000 	.word	0x24000000

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_InitTick+0x60>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e021      	b.n	8002408 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_InitTick+0x64>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_InitTick+0x60>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 fce9 	bl	8003db2 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f8:	f001 fcb3 	bl	8003d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x68>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2400000c 	.word	0x2400000c
 8002414:	24000000 	.word	0x24000000
 8002418:	24000008 	.word	0x24000008

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	2400000c 	.word	0x2400000c
 8002440:	24000574 	.word	0x24000574

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	24000574 	.word	0x24000574

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2400000c 	.word	0x2400000c

080024a4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	401a      	ands	r2, r3
 80024b8:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	58000400 	.word	0x58000400

080024d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3360      	adds	r3, #96	; 0x60
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <LL_ADC_SetOffset+0x60>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d10b      	bne.n	8002574 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002572:	e00b      	b.n	800258c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58026000 	.word	0x58026000

0800259c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	461a      	mov	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	611a      	str	r2, [r3, #16]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00e      	beq.n	800262e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3360      	adds	r3, #96	; 0x60
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]
  }
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	58026000 	.word	0x58026000

08002640 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <LL_ADC_SetOffsetSaturation+0x40>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10e      	bne.n	8002672 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3360      	adds	r3, #96	; 0x60
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	58026000 	.word	0x58026000

08002684 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <LL_ADC_SetOffsetSign+0x40>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10e      	bne.n	80026b6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	58026000 	.word	0x58026000

080026c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3360      	adds	r3, #96	; 0x60
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <LL_ADC_SetOffsetState+0x50>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80026fa:	e007      	b.n	800270c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	431a      	orrs	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	58026000 	.word	0x58026000

0800271c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3330      	adds	r3, #48	; 0x30
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	4413      	add	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	211f      	movs	r1, #31
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	f003 011f 	and.w	r1, r3, #31
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	431a      	orrs	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3314      	adds	r3, #20
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0e5b      	lsrs	r3, r3, #25
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	0d1b      	lsrs	r3, r3, #20
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2107      	movs	r1, #7
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	401a      	ands	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0d1b      	lsrs	r3, r3, #20
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <LL_ADC_SetChannelSingleDiff+0x78>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d115      	bne.n	800280c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0318 	and.w	r3, r3, #24
 80027f6:	4914      	ldr	r1, [pc, #80]	; (8002848 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80027f8:	40d9      	lsrs	r1, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	400b      	ands	r3, r1
 80027fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800280a:	e014      	b.n	8002836 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0318 	and.w	r3, r3, #24
 8002822:	4909      	ldr	r1, [pc, #36]	; (8002848 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002824:	40d9      	lsrs	r1, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	400b      	ands	r3, r1
 800282a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282e:	431a      	orrs	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	58026000 	.word	0x58026000
 8002848:	000fffff 	.word	0x000fffff

0800284c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <LL_ADC_DisableDeepPowerDown+0x20>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6093      	str	r3, [r2, #8]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	5fffffc0 	.word	0x5fffffc0

08002870 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002884:	d101      	bne.n	800288a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <LL_ADC_EnableInternalRegulator+0x24>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	6fffffc0 	.word	0x6fffffc0

080028c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <LL_ADC_IsEnabled+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_ADC_IsEnabled+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d101      	bne.n	8002926 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b08      	cmp	r3, #8
 8002946:	d101      	bne.n	800294c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1ee      	b.n	8002d54 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fe ff85 	bl	8001894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff67 	bl	8002870 <LL_ADC_IsDeepPowerDownEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff4d 	bl	800284c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff82 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d114      	bne.n	80029ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff66 	bl	8002898 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029cc:	4b8e      	ldr	r3, [pc, #568]	; (8002c08 <HAL_ADC_Init+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	4a8e      	ldr	r2, [pc, #568]	; (8002c0c <HAL_ADC_Init+0x2b0>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3301      	adds	r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029de:	e002      	b.n	80029e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff65 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff76 	bl	800290e <LL_ADC_REG_IsConversionOngoing>
 8002a22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 8188 	bne.w	8002d42 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 8184 	bne.w	8002d42 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a42:	f043 0202 	orr.w	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff4a 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d136      	bne.n	8002ac8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6c      	ldr	r2, [pc, #432]	; (8002c10 <HAL_ADC_Init+0x2b4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_ADC_Init+0x112>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_ADC_Init+0x2b8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10e      	bne.n	8002a8c <HAL_ADC_Init+0x130>
 8002a6e:	4868      	ldr	r0, [pc, #416]	; (8002c10 <HAL_ADC_Init+0x2b4>)
 8002a70:	f7ff ff3a 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a74:	4604      	mov	r4, r0
 8002a76:	4867      	ldr	r0, [pc, #412]	; (8002c14 <HAL_ADC_Init+0x2b8>)
 8002a78:	f7ff ff36 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e008      	b.n	8002a9e <HAL_ADC_Init+0x142>
 8002a8c:	4862      	ldr	r0, [pc, #392]	; (8002c18 <HAL_ADC_Init+0x2bc>)
 8002a8e:	f7ff ff2b 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <HAL_ADC_Init+0x2b4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_ADC_Init+0x15a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_ADC_Init+0x2b8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_Init+0x15e>
 8002ab6:	4a59      	ldr	r2, [pc, #356]	; (8002c1c <HAL_ADC_Init+0x2c0>)
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_Init+0x160>
 8002aba:	4a59      	ldr	r2, [pc, #356]	; (8002c20 <HAL_ADC_Init+0x2c4>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7ff fd04 	bl	80024d0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a52      	ldr	r2, [pc, #328]	; (8002c18 <HAL_ADC_Init+0x2bc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d129      	bne.n	8002b26 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7e5b      	ldrb	r3, [r3, #25]
 8002ad6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002adc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002ae2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d013      	beq.n	8002b14 <HAL_ADC_Init+0x1b8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d00d      	beq.n	8002b10 <HAL_ADC_Init+0x1b4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b1c      	cmp	r3, #28
 8002afa:	d007      	beq.n	8002b0c <HAL_ADC_Init+0x1b0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b18      	cmp	r3, #24
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_Init+0x1ac>
 8002b04:	2318      	movs	r3, #24
 8002b06:	e006      	b.n	8002b16 <HAL_ADC_Init+0x1ba>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_Init+0x1ba>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	e002      	b.n	8002b16 <HAL_ADC_Init+0x1ba>
 8002b10:	2308      	movs	r3, #8
 8002b12:	e000      	b.n	8002b16 <HAL_ADC_Init+0x1ba>
 8002b14:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002b16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e00e      	b.n	8002b44 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7e5b      	ldrb	r3, [r3, #25]
 8002b2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	3b01      	subs	r3, #1
 8002b54:	045b      	lsls	r3, r3, #17
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <HAL_ADC_Init+0x2bc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d115      	bne.n	8002bae <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_ADC_Init+0x2c8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	69b9      	ldr	r1, [r7, #24]
 8002b92:	430b      	orrs	r3, r1
 8002b94:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	611a      	str	r2, [r3, #16]
 8002bac:	e009      	b.n	8002bc2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_ADC_Init+0x2cc>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	69b9      	ldr	r1, [r7, #24]
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fea1 	bl	800290e <LL_ADC_REG_IsConversionOngoing>
 8002bcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff feae 	bl	8002934 <LL_ADC_INJ_IsConversionOngoing>
 8002bd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 808e 	bne.w	8002cfe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 808a 	bne.w	8002cfe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_ADC_Init+0x2bc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d11b      	bne.n	8002c2c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7e1b      	ldrb	r3, [r3, #24]
 8002bf8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c00:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	e018      	b.n	8002c3a <HAL_ADC_Init+0x2de>
 8002c08:	24000000 	.word	0x24000000
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40022100 	.word	0x40022100
 8002c18:	58026000 	.word	0x58026000
 8002c1c:	40022300 	.word	0x40022300
 8002c20:	58026300 	.word	0x58026300
 8002c24:	fff04007 	.word	0xfff04007
 8002c28:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e1b      	ldrb	r3, [r3, #24]
 8002c30:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_ADC_Init+0x400>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	69b9      	ldr	r1, [r7, #24]
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d137      	bne.n	8002cc8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3f      	ldr	r2, [pc, #252]	; (8002d60 <HAL_ADC_Init+0x404>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d116      	bne.n	8002c96 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_ADC_Init+0x408>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c80:	4311      	orrs	r1, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c86:	430a      	orrs	r2, r1
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	611a      	str	r2, [r3, #16]
 8002c94:	e020      	b.n	8002cd8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_ADC_Init+0x40c>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0411      	lsls	r1, r2, #16
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cac:	4311      	orrs	r1, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
 8002cc6:	e007      	b.n	8002cd8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <HAL_ADC_Init+0x404>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d002      	beq.n	8002cfe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fd63 	bl	80037c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10c      	bne.n	8002d20 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f023 010f 	bic.w	r1, r3, #15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1e:	e007      	b.n	8002d30 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020f 	bic.w	r2, r2, #15
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	f023 0303 	bic.w	r3, r3, #3
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60
 8002d40:	e007      	b.n	8002d52 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}
 8002d5c:	ffffbffc 	.word	0xffffbffc
 8002d60:	58026000 	.word	0x58026000
 8002d64:	fc00f81f 	.word	0xfc00f81f
 8002d68:	fc00f81e 	.word	0xfc00f81e

08002d6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b0b9      	sub	sp, #228	; 0xe4
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d86:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4ab3      	ldr	r2, [pc, #716]	; (800305c <HAL_ADC_ConfigChannel+0x2f0>)
 8002d8e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x34>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f000 bcfa 	b.w	8003794 <HAL_ADC_ConfigChannel+0xa28>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fdae 	bl	800290e <LL_ADC_REG_IsConversionOngoing>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 84de 	bne.w	8003776 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4aa8      	ldr	r2, [pc, #672]	; (8003060 <HAL_ADC_ConfigChannel+0x2f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d033      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d108      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x76>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2201      	movs	r2, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	e01d      	b.n	8002e1e <HAL_ADC_ConfigChannel+0xb2>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e004      	b.n	8002e14 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2201      	movs	r2, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	69d1      	ldr	r1, [r2, #28]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f7ff fc6f 	bl	800271c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fd63 	bl	800290e <LL_ADC_REG_IsConversionOngoing>
 8002e48:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fd6f 	bl	8002934 <LL_ADC_INJ_IsConversionOngoing>
 8002e56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 8270 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 826b 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f7ff fc7a 	bl	8002774 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a76      	ldr	r2, [pc, #472]	; (8003060 <HAL_ADC_ConfigChannel+0x2f4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10d      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ea4:	e032      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ea6:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_ADC_ConfigChannel+0x2f8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x160>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	e01d      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x19c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x186>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	e00a      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x19c>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d048      	beq.n	8002fa6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6919      	ldr	r1, [r3, #16]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f24:	f7ff fb08 	bl	8002538 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4c      	ldr	r2, [pc, #304]	; (8003060 <HAL_ADC_ConfigChannel+0x2f4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d119      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6919      	ldr	r1, [r3, #16]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7ff fba0 	bl	8002684 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6919      	ldr	r1, [r3, #16]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1f0>
 8002f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5a:	e000      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x1f2>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f7ff fb6e 	bl	8002640 <LL_ADC_SetOffsetSaturation>
 8002f64:	e1ee      	b.n	8003344 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6919      	ldr	r1, [r3, #16]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d102      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x212>
 8002f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f7c:	e000      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x214>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	461a      	mov	r2, r3
 8002f82:	f7ff fb3b 	bl	80025fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6919      	ldr	r1, [r3, #16]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	7e1b      	ldrb	r3, [r3, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x230>
 8002f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9a:	e000      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x232>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f7ff fb12 	bl	80025c8 <LL_ADC_SetDataRightShift>
 8002fa4:	e1ce      	b.n	8003344 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <HAL_ADC_ConfigChannel+0x2f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	f040 8181 	bne.w	80032b4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff faef 	bl	800259c <LL_ADC_GetOffsetChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x272>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fae4 	bl	800259c <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	e01e      	b.n	800301c <HAL_ADC_ConfigChannel+0x2b0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fad9 	bl	800259c <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003004:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e004      	b.n	800301a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x2c8>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	e01e      	b.n	8003072 <HAL_ADC_ConfigChannel+0x306>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800304c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003050:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	e00a      	b.n	8003072 <HAL_ADC_ConfigChannel+0x306>
 800305c:	47ff0000 	.word	0x47ff0000
 8003060:	58026000 	.word	0x58026000
 8003064:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	429a      	cmp	r2, r3
 8003074:	d106      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fb22 	bl	80026c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fa86 	bl	800259c <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x344>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fa7b 	bl	800259c <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	e01e      	b.n	80030ee <HAL_ADC_ConfigChannel+0x382>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fa70 	bl	800259c <LL_ADC_GetOffsetChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80030ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80030d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80030e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x39a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	e018      	b.n	8003138 <HAL_ADC_ConfigChannel+0x3cc>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800311a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800311e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003122:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800312e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fabf 	bl	80026c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fa23 	bl	800259c <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x40a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fa18 	bl	800259c <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	e01e      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x448>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fa0d 	bl	800259c <LL_ADC_GetOffsetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e004      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x460>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	e014      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x48a>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80031da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80031e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e004      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fa60 	bl	80026c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2103      	movs	r1, #3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f9c4 	bl	800259c <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x4c8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2103      	movs	r1, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f9b9 	bl	800259c <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 021f 	and.w	r2, r3, #31
 8003232:	e017      	b.n	8003264 <HAL_ADC_ConfigChannel+0x4f8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2103      	movs	r1, #3
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f9ae 	bl	800259c <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_ConfigChannel+0x510>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	e011      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x534>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800328a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800328c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800328e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d14f      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2103      	movs	r1, #3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fa0b 	bl	80026c8 <LL_ADC_SetOffsetState>
 80032b2:	e047      	b.n	8003344 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	069b      	lsls	r3, r3, #26
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d107      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	069b      	lsls	r3, r3, #26
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032fa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	069b      	lsls	r3, r3, #26
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800331e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003342:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff facd 	bl	80028e8 <LL_ADC_IsEnabled>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 8219 	bne.w	8003788 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	461a      	mov	r2, r3
 8003364:	f7ff fa32 	bl	80027cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4aa1      	ldr	r2, [pc, #644]	; (80035f4 <HAL_ADC_ConfigChannel+0x888>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f040 812e 	bne.w	80035d0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_ADC_ConfigChannel+0x630>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2b09      	cmp	r3, #9
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e019      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x664>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80033aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80033ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	e003      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	bf94      	ite	ls
 80033ca:	2301      	movls	r3, #1
 80033cc:	2300      	movhi	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d079      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d107      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x684>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	3301      	adds	r3, #1
 80033e8:	069b      	lsls	r3, r3, #26
 80033ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ee:	e015      	b.n	800341c <HAL_ADC_ConfigChannel+0x6b0>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003400:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	069b      	lsls	r3, r3, #26
 8003418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_ADC_ConfigChannel+0x6d0>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	3301      	adds	r3, #1
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	e017      	b.n	800346c <HAL_ADC_ConfigChannel+0x700>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800344e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e003      	b.n	8003460 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	ea42 0103 	orr.w	r1, r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x726>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	051b      	lsls	r3, r3, #20
 8003490:	e018      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x758>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80034aa:	2320      	movs	r3, #32
 80034ac:	e003      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c4:	430b      	orrs	r3, r1
 80034c6:	e07e      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x778>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	3301      	adds	r3, #1
 80034dc:	069b      	lsls	r3, r3, #26
 80034de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e2:	e015      	b.n	8003510 <HAL_ADC_ConfigChannel+0x7a4>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e003      	b.n	8003508 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	069b      	lsls	r3, r3, #26
 800350c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x7c4>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	3301      	adds	r3, #1
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	e017      	b.n	8003560 <HAL_ADC_ConfigChannel+0x7f4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	61bb      	str	r3, [r7, #24]
  return result;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e003      	b.n	8003554 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3301      	adds	r3, #1
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10d      	bne.n	800358c <HAL_ADC_ConfigChannel+0x820>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	3b1e      	subs	r3, #30
 8003584:	051b      	lsls	r3, r3, #20
 8003586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800358a:	e01b      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x858>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	60fb      	str	r3, [r7, #12]
  return result;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e003      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f003 021f 	and.w	r2, r3, #31
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	3b1e      	subs	r3, #30
 80035be:	051b      	lsls	r3, r3, #20
 80035c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c4:	430b      	orrs	r3, r1
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	6892      	ldr	r2, [r2, #8]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f7ff f8d2 	bl	8002774 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f280 80d7 	bge.w	8003788 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <HAL_ADC_ConfigChannel+0x88c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x882>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <HAL_ADC_ConfigChannel+0x890>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10a      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x898>
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_ADC_ConfigChannel+0x894>)
 80035f0:	e009      	b.n	8003606 <HAL_ADC_ConfigChannel+0x89a>
 80035f2:	bf00      	nop
 80035f4:	47ff0000 	.word	0x47ff0000
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40022100 	.word	0x40022100
 8003600:	40022300 	.word	0x40022300
 8003604:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_ADC_ConfigChannel+0xa30>)
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe ff88 	bl	800251c <LL_ADC_GetCommonPathInternalCh>
 800360c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a62      	ldr	r2, [pc, #392]	; (80037a0 <HAL_ADC_ConfigChannel+0xa34>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_ADC_ConfigChannel+0x8b8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_ADC_ConfigChannel+0xa38>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10e      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x8d6>
 8003624:	485e      	ldr	r0, [pc, #376]	; (80037a0 <HAL_ADC_ConfigChannel+0xa34>)
 8003626:	f7ff f95f 	bl	80028e8 <LL_ADC_IsEnabled>
 800362a:	4604      	mov	r4, r0
 800362c:	485d      	ldr	r0, [pc, #372]	; (80037a4 <HAL_ADC_ConfigChannel+0xa38>)
 800362e:	f7ff f95b 	bl	80028e8 <LL_ADC_IsEnabled>
 8003632:	4603      	mov	r3, r0
 8003634:	4323      	orrs	r3, r4
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e008      	b.n	8003654 <HAL_ADC_ConfigChannel+0x8e8>
 8003642:	4859      	ldr	r0, [pc, #356]	; (80037a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003644:	f7ff f950 	bl	80028e8 <LL_ADC_IsEnabled>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8084 	beq.w	8003762 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a53      	ldr	r2, [pc, #332]	; (80037ac <HAL_ADC_ConfigChannel+0xa40>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d132      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x95e>
 8003664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d12c      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f040 8086 	bne.w	8003788 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a47      	ldr	r2, [pc, #284]	; (80037a0 <HAL_ADC_ConfigChannel+0xa34>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x924>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a46      	ldr	r2, [pc, #280]	; (80037a4 <HAL_ADC_ConfigChannel+0xa38>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x928>
 8003690:	4a47      	ldr	r2, [pc, #284]	; (80037b0 <HAL_ADC_ConfigChannel+0xa44>)
 8003692:	e000      	b.n	8003696 <HAL_ADC_ConfigChannel+0x92a>
 8003694:	4a41      	ldr	r2, [pc, #260]	; (800379c <HAL_ADC_ConfigChannel+0xa30>)
 8003696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800369a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7fe ff28 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a6:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_ADC_ConfigChannel+0xa48>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	4a42      	ldr	r2, [pc, #264]	; (80037b8 <HAL_ADC_ConfigChannel+0xa4c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	3301      	adds	r3, #1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036ba:	e002      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3b01      	subs	r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f9      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036c8:	e05e      	b.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_ADC_ConfigChannel+0xa50>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d120      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x9aa>
 80036d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <HAL_ADC_ConfigChannel+0xa3c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d14e      	bne.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <HAL_ADC_ConfigChannel+0xa34>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_ADC_ConfigChannel+0x992>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_ADC_ConfigChannel+0xa38>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x996>
 80036fe:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <HAL_ADC_ConfigChannel+0xa44>)
 8003700:	e000      	b.n	8003704 <HAL_ADC_ConfigChannel+0x998>
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <HAL_ADC_ConfigChannel+0xa30>)
 8003704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f7fe fef1 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003714:	e038      	b.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_ADC_ConfigChannel+0xa54>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d133      	bne.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
 8003720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d12d      	bne.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d128      	bne.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_ADC_ConfigChannel+0xa34>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_ADC_ConfigChannel+0x9de>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <HAL_ADC_ConfigChannel+0xa38>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x9e2>
 800374a:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_ADC_ConfigChannel+0xa44>)
 800374c:	e000      	b.n	8003750 <HAL_ADC_ConfigChannel+0x9e4>
 800374e:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_ADC_ConfigChannel+0xa30>)
 8003750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7fe fecb 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
 8003760:	e012      	b.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003774:	e008      	b.n	8003788 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003790:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003794:	4618      	mov	r0, r3
 8003796:	37e4      	adds	r7, #228	; 0xe4
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}
 800379c:	58026300 	.word	0x58026300
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40022100 	.word	0x40022100
 80037a8:	58026000 	.word	0x58026000
 80037ac:	c7520000 	.word	0xc7520000
 80037b0:	40022300 	.word	0x40022300
 80037b4:	24000000 	.word	0x24000000
 80037b8:	053e2d63 	.word	0x053e2d63
 80037bc:	c3210000 	.word	0xc3210000
 80037c0:	cb840000 	.word	0xcb840000

080037c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6b      	ldr	r2, [pc, #428]	; (8003980 <ADC_ConfigureBoostMode+0x1bc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <ADC_ConfigureBoostMode+0x1c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6a      	ldr	r2, [pc, #424]	; (8003984 <ADC_ConfigureBoostMode+0x1c0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d109      	bne.n	80037f4 <ADC_ConfigureBoostMode+0x30>
 80037e0:	4b69      	ldr	r3, [pc, #420]	; (8003988 <ADC_ConfigureBoostMode+0x1c4>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e008      	b.n	8003806 <ADC_ConfigureBoostMode+0x42>
 80037f4:	4b65      	ldr	r3, [pc, #404]	; (800398c <ADC_ConfigureBoostMode+0x1c8>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01c      	beq.n	8003844 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800380a:	f002 f9ed 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 800380e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003818:	d010      	beq.n	800383c <ADC_ConfigureBoostMode+0x78>
 800381a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800381e:	d871      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x140>
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d002      	beq.n	800382c <ADC_ConfigureBoostMode+0x68>
 8003826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382a:	d16b      	bne.n	8003904 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	60fb      	str	r3, [r7, #12]
        break;
 800383a:	e066      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	60fb      	str	r3, [r7, #12]
        break;
 8003842:	e062      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003844:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003848:	f003 f924 	bl	8006a94 <HAL_RCCEx_GetPeriphCLKFreq>
 800384c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003856:	d051      	beq.n	80038fc <ADC_ConfigureBoostMode+0x138>
 8003858:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800385c:	d854      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 800385e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003862:	d047      	beq.n	80038f4 <ADC_ConfigureBoostMode+0x130>
 8003864:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003868:	d84e      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 800386a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800386e:	d03d      	beq.n	80038ec <ADC_ConfigureBoostMode+0x128>
 8003870:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003874:	d848      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 8003876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387a:	d033      	beq.n	80038e4 <ADC_ConfigureBoostMode+0x120>
 800387c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003880:	d842      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 8003882:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003886:	d029      	beq.n	80038dc <ADC_ConfigureBoostMode+0x118>
 8003888:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800388c:	d83c      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 800388e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003892:	d01a      	beq.n	80038ca <ADC_ConfigureBoostMode+0x106>
 8003894:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003898:	d836      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 800389a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800389e:	d014      	beq.n	80038ca <ADC_ConfigureBoostMode+0x106>
 80038a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80038a4:	d830      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 80038a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038aa:	d00e      	beq.n	80038ca <ADC_ConfigureBoostMode+0x106>
 80038ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b0:	d82a      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 80038b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038b6:	d008      	beq.n	80038ca <ADC_ConfigureBoostMode+0x106>
 80038b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038bc:	d824      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x144>
 80038be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038c2:	d002      	beq.n	80038ca <ADC_ConfigureBoostMode+0x106>
 80038c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038c8:	d11e      	bne.n	8003908 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	60fb      	str	r3, [r7, #12]
        break;
 80038da:	e016      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
        break;
 80038e2:	e012      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	60fb      	str	r3, [r7, #12]
        break;
 80038ea:	e00e      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	60fb      	str	r3, [r7, #12]
        break;
 80038f2:	e00a      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	09db      	lsrs	r3, r3, #7
 80038f8:	60fb      	str	r3, [r7, #12]
        break;
 80038fa:	e006      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	60fb      	str	r3, [r7, #12]
        break;
 8003902:	e002      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
        break;
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003908:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <ADC_ConfigureBoostMode+0x1cc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d808      	bhi.n	800392a <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003926:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003928:	e025      	b.n	8003976 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a19      	ldr	r2, [pc, #100]	; (8003994 <ADC_ConfigureBoostMode+0x1d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d80a      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003944:	609a      	str	r2, [r3, #8]
}
 8003946:	e016      	b.n	8003976 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a13      	ldr	r2, [pc, #76]	; (8003998 <ADC_ConfigureBoostMode+0x1d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d80a      	bhi.n	8003966 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	e007      	b.n	8003976 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003974:	609a      	str	r2, [r3, #8]
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40022000 	.word	0x40022000
 8003984:	40022100 	.word	0x40022100
 8003988:	40022300 	.word	0x40022300
 800398c:	58026300 	.word	0x58026300
 8003990:	005f5e10 	.word	0x005f5e10
 8003994:	00bebc20 	.word	0x00bebc20
 8003998:	017d7840 	.word	0x017d7840

0800399c <LL_ADC_IsEnabled>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <LL_ADC_IsEnabled+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_ADC_IsEnabled+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d101      	bne.n	80039da <LL_ADC_REG_IsConversionOngoing+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b0a3      	sub	sp, #140	; 0x8c
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0c1      	b.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5e      	ldr	r2, [pc, #376]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d102      	bne.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e001      	b.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0a0      	b.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ffb9 	bl	80039c2 <LL_ADC_REG_IsConversionOngoing>
 8003a50:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ffb2 	bl	80039c2 <LL_ADC_REG_IsConversionOngoing>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 8081 	bne.w	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d17c      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a48      	ldr	r2, [pc, #288]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a46      	ldr	r2, [pc, #280]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003a82:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a84:	e000      	b.n	8003a88 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003a86:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a88:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d039      	beq.n	8003b06 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aa2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3a      	ldr	r2, [pc, #232]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a39      	ldr	r2, [pc, #228]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003ab8:	4836      	ldr	r0, [pc, #216]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003aba:	f7ff ff6f 	bl	800399c <LL_ADC_IsEnabled>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	4835      	ldr	r0, [pc, #212]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ac2:	f7ff ff6b 	bl	800399c <LL_ADC_IsEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4323      	orrs	r3, r4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e008      	b.n	8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003ad6:	4833      	ldr	r0, [pc, #204]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ad8:	f7ff ff60 	bl	800399c <LL_ADC_IsEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d047      	beq.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	6811      	ldr	r1, [r2, #0]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	6892      	ldr	r2, [r2, #8]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b04:	e03a      	b.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10e      	bne.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003b26:	481b      	ldr	r0, [pc, #108]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b28:	f7ff ff38 	bl	800399c <LL_ADC_IsEnabled>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	481a      	ldr	r0, [pc, #104]	; (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b30:	f7ff ff34 	bl	800399c <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4323      	orrs	r3, r4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e008      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003b44:	4817      	ldr	r0, [pc, #92]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003b46:	f7ff ff29 	bl	800399c <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003b64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b66:	e009      	b.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003b7a:	e000      	b.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b86:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	378c      	adds	r7, #140	; 0x8c
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40022000 	.word	0x40022000
 8003b98:	40022100 	.word	0x40022100
 8003b9c:	40022300 	.word	0x40022300
 8003ba0:	58026300 	.word	0x58026300
 8003ba4:	58026000 	.word	0x58026000
 8003ba8:	fffff0e0 	.word	0xfffff0e0

08003bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <__NVIC_SetPriorityGrouping+0x40>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bda:	4a04      	ldr	r2, [pc, #16]	; (8003bec <__NVIC_SetPriorityGrouping+0x40>)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	60d3      	str	r3, [r2, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00
 8003bf0:	05fa0000 	.word	0x05fa0000

08003bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <__NVIC_GetPriorityGrouping+0x18>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	f003 0307 	and.w	r3, r3, #7
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db0b      	blt.n	8003c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4907      	ldr	r1, [pc, #28]	; (8003c48 <__NVIC_EnableIRQ+0x38>)
 8003c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2001      	movs	r0, #1
 8003c32:	fa00 f202 	lsl.w	r2, r0, r2
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100

08003c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db0a      	blt.n	8003c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	490c      	ldr	r1, [pc, #48]	; (8003c98 <__NVIC_SetPriority+0x4c>)
 8003c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c74:	e00a      	b.n	8003c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4908      	ldr	r1, [pc, #32]	; (8003c9c <__NVIC_SetPriority+0x50>)
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	3b04      	subs	r3, #4
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	440b      	add	r3, r1
 8003c8a:	761a      	strb	r2, [r3, #24]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000e100 	.word	0xe000e100
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f1c3 0307 	rsb	r3, r3, #7
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	bf28      	it	cs
 8003cbe:	2304      	movcs	r3, #4
 8003cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d902      	bls.n	8003cd0 <NVIC_EncodePriority+0x30>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3b03      	subs	r3, #3
 8003cce:	e000      	b.n	8003cd2 <NVIC_EncodePriority+0x32>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43d9      	mvns	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	4313      	orrs	r3, r2
         );
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d18:	d301      	bcc.n	8003d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00f      	b.n	8003d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <SysTick_Config+0x40>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d26:	210f      	movs	r1, #15
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2c:	f7ff ff8e 	bl	8003c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <SysTick_Config+0x40>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <SysTick_Config+0x40>)
 8003d38:	2207      	movs	r2, #7
 8003d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	e000e010 	.word	0xe000e010

08003d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff29 	bl	8003bac <__NVIC_SetPriorityGrouping>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d70:	f7ff ff40 	bl	8003bf4 <__NVIC_GetPriorityGrouping>
 8003d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f7ff ff90 	bl	8003ca0 <NVIC_EncodePriority>
 8003d80:	4602      	mov	r2, r0
 8003d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ff5f 	bl	8003c4c <__NVIC_SetPriority>
}
 8003d8e:	bf00      	nop
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff33 	bl	8003c10 <__NVIC_EnableIRQ>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffa4 	bl	8003d08 <SysTick_Config>
 8003dc0:	4603      	mov	r3, r0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e014      	b.n	8003e06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	791b      	ldrb	r3, [r3, #4]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fd fe47 	bl	8001a80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	795b      	ldrb	r3, [r3, #5]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_DAC_ConfigChannel+0x18>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e11d      	b.n	8004064 <HAL_DAC_ConfigChannel+0x254>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2202      	movs	r2, #2
 8003e32:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d174      	bne.n	8003f26 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fb02 	bl	8002444 <HAL_GetTick>
 8003e40:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d134      	bne.n	8003eb2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e48:	e011      	b.n	8003e6e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e4a:	f7fe fafb 	bl	8002444 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d90a      	bls.n	8003e6e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f043 0208 	orr.w	r2, r3, #8
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2203      	movs	r2, #3
 8003e68:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0fa      	b.n	8004064 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e74:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_DAC_ConfigChannel+0x25c>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e6      	bne.n	8003e4a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7fe faed 	bl	800245c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	6992      	ldr	r2, [r2, #24]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e8c:	e01e      	b.n	8003ecc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e8e:	f7fe fad9 	bl	8002444 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d90a      	bls.n	8003eb2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f043 0208 	orr.w	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0d8      	b.n	8004064 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	dbe8      	blt.n	8003e8e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fe facd 	bl	800245c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	6992      	ldr	r2, [r2, #24]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	ea02 0103 	and.w	r1, r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	21ff      	movs	r1, #255	; 0xff
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	ea02 0103 	and.w	r1, r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d11d      	bne.n	8003f6a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	221f      	movs	r2, #31
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4013      	ands	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2207      	movs	r2, #7
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4013      	ands	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d102      	bne.n	8003f94 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	e00f      	b.n	8003fb4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e008      	b.n	8003fb4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e001      	b.n	8003fb4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4013      	ands	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	22c0      	movs	r2, #192	; 0xc0
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43da      	mvns	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	400a      	ands	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20008000 	.word	0x20008000

08004070 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b098      	sub	sp, #96	; 0x60
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004078:	4a84      	ldr	r2, [pc, #528]	; (800428c <HAL_FDCAN_Init+0x21c>)
 800407a:	f107 030c 	add.w	r3, r7, #12
 800407e:	4611      	mov	r1, r2
 8004080:	224c      	movs	r2, #76	; 0x4c
 8004082:	4618      	mov	r0, r3
 8004084:	f006 faea 	bl	800a65c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1ca      	b.n	8004428 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7e      	ldr	r2, [pc, #504]	; (8004290 <HAL_FDCAN_Init+0x220>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d106      	bne.n	80040aa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fd24 	bl	8001b0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0210 	bic.w	r2, r2, #16
 80040d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d4:	f7fe f9b6 	bl	8002444 <HAL_GetTick>
 80040d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040da:	e014      	b.n	8004106 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80040dc:	f7fe f9b2 	bl	8002444 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b0a      	cmp	r3, #10
 80040e8:	d90d      	bls.n	8004106 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e190      	b.n	8004428 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b08      	cmp	r3, #8
 8004112:	d0e3      	beq.n	80040dc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004124:	f7fe f98e 	bl	8002444 <HAL_GetTick>
 8004128:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800412a:	e014      	b.n	8004156 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800412c:	f7fe f98a 	bl	8002444 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b0a      	cmp	r3, #10
 8004138:	d90d      	bls.n	8004156 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2203      	movs	r2, #3
 800414e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e168      	b.n	8004428 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0e3      	beq.n	800412c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0202 	orr.w	r2, r2, #2
 8004172:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7c1b      	ldrb	r3, [r3, #16]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d108      	bne.n	800418e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	619a      	str	r2, [r3, #24]
 800418c:	e007      	b.n	800419e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7c5b      	ldrb	r3, [r3, #17]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d108      	bne.n	80041b8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b4:	619a      	str	r2, [r3, #24]
 80041b6:	e007      	b.n	80041c8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	7c9b      	ldrb	r3, [r3, #18]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d108      	bne.n	80041e2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041de:	619a      	str	r2, [r3, #24]
 80041e0:	e007      	b.n	80041f2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041f0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004216:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0210 	bic.w	r2, r2, #16
 8004226:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d108      	bne.n	8004242 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0204 	orr.w	r2, r2, #4
 800423e:	619a      	str	r2, [r3, #24]
 8004240:	e030      	b.n	80042a4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02c      	beq.n	80042a4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d020      	beq.n	8004294 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004260:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0210 	orr.w	r2, r2, #16
 8004270:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d114      	bne.n	80042a4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0220 	orr.w	r2, r2, #32
 8004288:	619a      	str	r2, [r3, #24]
 800428a:	e00b      	b.n	80042a4 <HAL_FDCAN_Init+0x234>
 800428c:	0800a6a0 	.word	0x0800a6a0
 8004290:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042b4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042bc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042cc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042ce:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d8:	d115      	bne.n	8004306 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	3b01      	subs	r3, #1
 80042e6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80042e8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	3b01      	subs	r3, #1
 80042f0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80042f2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004302:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004304:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	4413      	add	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d012      	beq.n	8004358 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800433a:	f023 0107 	bic.w	r1, r3, #7
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004348:	4413      	add	r3, r2
 800434a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d012      	beq.n	8004386 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004368:	f023 0107 	bic.w	r1, r3, #7
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004376:	4413      	add	r3, r2
 8004378:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438a:	2b00      	cmp	r3, #0
 800438c:	d013      	beq.n	80043b6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004396:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043a4:	4413      	add	r3, r2
 80043a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043aa:	011a      	lsls	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d013      	beq.n	80043e6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043c6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043d4:	4413      	add	r3, r2
 80043d6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_FDCAN_Init+0x3c0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d107      	bne.n	8004400 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f022 0203 	bic.w	r2, r2, #3
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f80b 	bl	8004434 <FDCAN_CalcultateRamBlockAddresses>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004424:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004428:	4618      	mov	r0, r3
 800442a:	3760      	adds	r7, #96	; 0x60
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	4000a000 	.word	0x4000a000

08004434 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800444a:	4ba7      	ldr	r3, [pc, #668]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800444c:	4013      	ands	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0091      	lsls	r1, r2, #2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	430b      	orrs	r3, r1
 8004458:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	041a      	lsls	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4413      	add	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800448a:	4b97      	ldr	r3, [pc, #604]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0091      	lsls	r1, r2, #2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	430b      	orrs	r3, r1
 8004498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044cc:	4b86      	ldr	r3, [pc, #536]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0091      	lsls	r1, r2, #2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	041a      	lsls	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004514:	4b74      	ldr	r3, [pc, #464]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	0091      	lsls	r1, r2, #2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800452e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800455c:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800455e:	4013      	ands	r3, r2
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	0091      	lsls	r1, r2, #2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004588:	4b57      	ldr	r3, [pc, #348]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800458a:	4013      	ands	r3, r2
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	0091      	lsls	r1, r2, #2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045a2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	041a      	lsls	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4413      	add	r3, r2
 80045c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	0091      	lsls	r1, r2, #2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	430b      	orrs	r3, r1
 80045d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045e4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	041a      	lsls	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004600:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	061a      	lsls	r2, r3, #24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800461a:	4413      	add	r3, r2
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d915      	bls.n	8004710 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80046e4:	e006      	b.n	80046f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80046e6:	bf00      	nop
 80046e8:	ffff0003 	.word	0xffff0003
 80046ec:	10002b00 	.word	0x10002b00
 80046f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2203      	movs	r2, #3
 8004708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e010      	b.n	8004732 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e005      	b.n	8004724 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3f3      	bcc.n	8004718 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800474e:	4b86      	ldr	r3, [pc, #536]	; (8004968 <HAL_GPIO_Init+0x228>)
 8004750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004752:	e18c      	b.n	8004a6e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 817e 	beq.w	8004a68 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d005      	beq.n	8004784 <HAL_GPIO_Init+0x44>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d130      	bne.n	80047e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047ba:	2201      	movs	r2, #1
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 0201 	and.w	r2, r3, #1
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d017      	beq.n	8004822 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2203      	movs	r2, #3
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d123      	bne.n	8004876 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	08da      	lsrs	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3208      	adds	r2, #8
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0203 	and.w	r2, r3, #3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80d8 	beq.w	8004a68 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b8:	4b2c      	ldr	r3, [pc, #176]	; (800496c <HAL_GPIO_Init+0x22c>)
 80048ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048be:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_GPIO_Init+0x22c>)
 80048c0:	f043 0302 	orr.w	r3, r3, #2
 80048c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <HAL_GPIO_Init+0x22c>)
 80048ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <HAL_GPIO_Init+0x230>)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_GPIO_Init+0x234>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04a      	beq.n	8004998 <HAL_GPIO_Init+0x258>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_GPIO_Init+0x238>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02b      	beq.n	8004962 <HAL_GPIO_Init+0x222>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_GPIO_Init+0x23c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d025      	beq.n	800495e <HAL_GPIO_Init+0x21e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_GPIO_Init+0x240>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01f      	beq.n	800495a <HAL_GPIO_Init+0x21a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <HAL_GPIO_Init+0x244>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d019      	beq.n	8004956 <HAL_GPIO_Init+0x216>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <HAL_GPIO_Init+0x248>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_GPIO_Init+0x212>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_GPIO_Init+0x24c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00d      	beq.n	800494e <HAL_GPIO_Init+0x20e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a16      	ldr	r2, [pc, #88]	; (8004990 <HAL_GPIO_Init+0x250>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <HAL_GPIO_Init+0x20a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <HAL_GPIO_Init+0x254>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_GPIO_Init+0x206>
 8004942:	2309      	movs	r3, #9
 8004944:	e029      	b.n	800499a <HAL_GPIO_Init+0x25a>
 8004946:	230a      	movs	r3, #10
 8004948:	e027      	b.n	800499a <HAL_GPIO_Init+0x25a>
 800494a:	2307      	movs	r3, #7
 800494c:	e025      	b.n	800499a <HAL_GPIO_Init+0x25a>
 800494e:	2306      	movs	r3, #6
 8004950:	e023      	b.n	800499a <HAL_GPIO_Init+0x25a>
 8004952:	2305      	movs	r3, #5
 8004954:	e021      	b.n	800499a <HAL_GPIO_Init+0x25a>
 8004956:	2304      	movs	r3, #4
 8004958:	e01f      	b.n	800499a <HAL_GPIO_Init+0x25a>
 800495a:	2303      	movs	r3, #3
 800495c:	e01d      	b.n	800499a <HAL_GPIO_Init+0x25a>
 800495e:	2302      	movs	r3, #2
 8004960:	e01b      	b.n	800499a <HAL_GPIO_Init+0x25a>
 8004962:	2301      	movs	r3, #1
 8004964:	e019      	b.n	800499a <HAL_GPIO_Init+0x25a>
 8004966:	bf00      	nop
 8004968:	58000080 	.word	0x58000080
 800496c:	58024400 	.word	0x58024400
 8004970:	58000400 	.word	0x58000400
 8004974:	58020000 	.word	0x58020000
 8004978:	58020400 	.word	0x58020400
 800497c:	58020800 	.word	0x58020800
 8004980:	58020c00 	.word	0x58020c00
 8004984:	58021000 	.word	0x58021000
 8004988:	58021400 	.word	0x58021400
 800498c:	58021800 	.word	0x58021800
 8004990:	58021c00 	.word	0x58021c00
 8004994:	58022400 	.word	0x58022400
 8004998:	2300      	movs	r3, #0
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	f002 0203 	and.w	r2, r2, #3
 80049a0:	0092      	lsls	r2, r2, #2
 80049a2:	4093      	lsls	r3, r2
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049aa:	4938      	ldr	r1, [pc, #224]	; (8004a8c <HAL_GPIO_Init+0x34c>)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f47f ae6b 	bne.w	8004754 <HAL_GPIO_Init+0x14>
  }
}
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	3724      	adds	r7, #36	; 0x24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	58000400 	.word	0x58000400

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004aac:	e003      	b.n	8004ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	041a      	lsls	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad4:	887a      	ldrh	r2, [r7, #2]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	041a      	lsls	r2, r3, #16
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	43d9      	mvns	r1, r3
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	400b      	ands	r3, r1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	619a      	str	r2, [r3, #24]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fd71 	bl	8000604 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07f      	b.n	8004c3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd f8a4 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	e006      	b.n	8004bb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d104      	bne.n	8004bc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_I2C_Init+0x11c>)
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69d9      	ldr	r1, [r3, #28]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	02008000 	.word	0x02008000

08004c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d138      	bne.n	8004cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e032      	b.n	8004cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d139      	bne.n	8004d6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e033      	b.n	8004d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004d84:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d00a      	beq.n	8004da6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d90:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d001      	beq.n	8004da2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e03f      	b.n	8004e22 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e03d      	b.n	8004e22 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004dae:	491f      	ldr	r1, [pc, #124]	; (8004e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004db6:	f7fd fb45 	bl	8002444 <HAL_GetTick>
 8004dba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dbc:	e009      	b.n	8004dd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dbe:	f7fd fb41 	bl	8002444 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dcc:	d901      	bls.n	8004dd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e027      	b.n	8004e22 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dd2:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	d1ee      	bne.n	8004dbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b1e      	cmp	r3, #30
 8004de4:	d008      	beq.n	8004df8 <HAL_PWREx_ConfigSupply+0x7c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dea:	d005      	beq.n	8004df8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b1d      	cmp	r3, #29
 8004df0:	d002      	beq.n	8004df8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b2d      	cmp	r3, #45	; 0x2d
 8004df6:	d113      	bne.n	8004e20 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004df8:	f7fd fb24 	bl	8002444 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004dfe:	e009      	b.n	8004e14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e00:	f7fd fb20 	bl	8002444 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e0e:	d901      	bls.n	8004e14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e006      	b.n	8004e22 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0311 	and.w	r3, r3, #17
 8004e1c:	2b11      	cmp	r3, #17
 8004e1e:	d1ef      	bne.n	8004e00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	58024800 	.word	0x58024800

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	; 0x30
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e397      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8087 	beq.w	8004f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e50:	4b9e      	ldr	r3, [pc, #632]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e5a:	4b9c      	ldr	r3, [pc, #624]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d007      	beq.n	8004e76 <HAL_RCC_OscConfig+0x46>
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	2b18      	cmp	r3, #24
 8004e6a:	d110      	bne.n	8004e8e <HAL_RCC_OscConfig+0x5e>
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d10b      	bne.n	8004e8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e76:	4b95      	ldr	r3, [pc, #596]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d06c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x12c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d168      	bne.n	8004f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e371      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x76>
 8004e98:	4b8c      	ldr	r3, [pc, #560]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a8b      	ldr	r2, [pc, #556]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e02e      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x98>
 8004eae:	4b87      	ldr	r3, [pc, #540]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a86      	ldr	r2, [pc, #536]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b84      	ldr	r3, [pc, #528]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a83      	ldr	r2, [pc, #524]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e01d      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0xbc>
 8004ed2:	4b7e      	ldr	r3, [pc, #504]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a7d      	ldr	r2, [pc, #500]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b7b      	ldr	r3, [pc, #492]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a7a      	ldr	r2, [pc, #488]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 8004eec:	4b77      	ldr	r3, [pc, #476]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a76      	ldr	r2, [pc, #472]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b74      	ldr	r3, [pc, #464]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a73      	ldr	r2, [pc, #460]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd fa9a 	bl	8002444 <HAL_GetTick>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fd fa96 	bl	8002444 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e325      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f26:	4b69      	ldr	r3, [pc, #420]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0xe4>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fd fa86 	bl	8002444 <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fa82 	bl	8002444 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e311      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x10c>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 808a 	beq.w	8005080 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6c:	4b57      	ldr	r3, [pc, #348]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f76:	4b55      	ldr	r3, [pc, #340]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_RCC_OscConfig+0x162>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2b18      	cmp	r3, #24
 8004f86:	d137      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x1c8>
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d132      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f92:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x17a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e2e3      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004faa:	4b48      	ldr	r3, [pc, #288]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 0219 	bic.w	r2, r3, #25
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4945      	ldr	r1, [pc, #276]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fbc:	f7fd fa42 	bl	8002444 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fd fa3e 	bl	8002444 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e2cd      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fd6:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3a      	ldr	r3, [pc, #232]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	4936      	ldr	r1, [pc, #216]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff6:	e043      	b.n	8005080 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d026      	beq.n	800504e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005000:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 0219 	bic.w	r2, r3, #25
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	492f      	ldr	r1, [pc, #188]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fd fa17 	bl	8002444 <HAL_GetTick>
 8005016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501a:	f7fd fa13 	bl	8002444 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e2a2      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800502c:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	4921      	ldr	r1, [pc, #132]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
 800504c:	e018      	b.n	8005080 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504e:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fd f9f3 	bl	8002444 <HAL_GetTick>
 800505e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005062:	f7fd f9ef 	bl	8002444 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e27e      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d06d      	beq.n	8005168 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005094:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d007      	beq.n	80050b2 <HAL_RCC_OscConfig+0x282>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b18      	cmp	r3, #24
 80050a6:	d11e      	bne.n	80050e6 <HAL_RCC_OscConfig+0x2b6>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d119      	bne.n	80050e6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_OscConfig+0x29c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCC_OscConfig+0x2a0>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d004      	beq.n	80050d0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e253      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
 80050ca:	bf00      	nop
 80050cc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050d0:	4ba3      	ldr	r3, [pc, #652]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	49a0      	ldr	r1, [pc, #640]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050e4:	e040      	b.n	8005168 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d023      	beq.n	8005136 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050ee:	4b9c      	ldr	r3, [pc, #624]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a9b      	ldr	r2, [pc, #620]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd f9a3 	bl	8002444 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005102:	f7fd f99f 	bl	8002444 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e22e      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005114:	4b92      	ldr	r3, [pc, #584]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005120:	4b8f      	ldr	r3, [pc, #572]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	498c      	ldr	r1, [pc, #560]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005130:	4313      	orrs	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
 8005134:	e018      	b.n	8005168 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005136:	4b8a      	ldr	r3, [pc, #552]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a89      	ldr	r2, [pc, #548]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 800513c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd f97f 	bl	8002444 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800514a:	f7fd f97b 	bl	8002444 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e20a      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800515c:	4b80      	ldr	r3, [pc, #512]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f0      	bne.n	800514a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d036      	beq.n	80051e2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d019      	beq.n	80051b0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517c:	4b78      	ldr	r3, [pc, #480]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 800517e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005180:	4a77      	ldr	r2, [pc, #476]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fd f95c 	bl	8002444 <HAL_GetTick>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005190:	f7fd f958 	bl	8002444 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e1e7      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051a2:	4b6f      	ldr	r3, [pc, #444]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80051a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x360>
 80051ae:	e018      	b.n	80051e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b0:	4b6b      	ldr	r3, [pc, #428]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	4a6a      	ldr	r2, [pc, #424]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd f942 	bl	8002444 <HAL_GetTick>
 80051c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c4:	f7fd f93e 	bl	8002444 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e1cd      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051d6:	4b62      	ldr	r3, [pc, #392]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80051d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d036      	beq.n	800525c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d019      	beq.n	800522a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051f6:	4b5a      	ldr	r3, [pc, #360]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a59      	ldr	r2, [pc, #356]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80051fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005200:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005202:	f7fd f91f 	bl	8002444 <HAL_GetTick>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800520a:	f7fd f91b 	bl	8002444 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1aa      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800521c:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x3da>
 8005228:	e018      	b.n	800525c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800522a:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4c      	ldr	r2, [pc, #304]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005234:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005236:	f7fd f905 	bl	8002444 <HAL_GetTick>
 800523a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800523e:	f7fd f901 	bl	8002444 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e190      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8085 	beq.w	8005374 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800526a:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <HAL_RCC_OscConfig+0x534>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a3d      	ldr	r2, [pc, #244]	; (8005364 <HAL_RCC_OscConfig+0x534>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005276:	f7fd f8e5 	bl	8002444 <HAL_GetTick>
 800527a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800527e:	f7fd f8e1 	bl	8002444 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b64      	cmp	r3, #100	; 0x64
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e170      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005290:	4b34      	ldr	r3, [pc, #208]	; (8005364 <HAL_RCC_OscConfig+0x534>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_OscConfig+0x482>
 80052a4:	4b2e      	ldr	r3, [pc, #184]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	e02d      	b.n	800530e <HAL_RCC_OscConfig+0x4de>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4a4>
 80052ba:	4b29      	ldr	r3, [pc, #164]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	4a28      	ldr	r2, [pc, #160]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70
 80052c6:	4b26      	ldr	r3, [pc, #152]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a25      	ldr	r2, [pc, #148]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052cc:	f023 0304 	bic.w	r3, r3, #4
 80052d0:	6713      	str	r3, [r2, #112]	; 0x70
 80052d2:	e01c      	b.n	800530e <HAL_RCC_OscConfig+0x4de>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b05      	cmp	r3, #5
 80052da:	d10c      	bne.n	80052f6 <HAL_RCC_OscConfig+0x4c6>
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	6713      	str	r3, [r2, #112]	; 0x70
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6713      	str	r3, [r2, #112]	; 0x70
 80052f4:	e00b      	b.n	800530e <HAL_RCC_OscConfig+0x4de>
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	4a19      	ldr	r2, [pc, #100]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	6713      	str	r3, [r2, #112]	; 0x70
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005308:	f023 0304 	bic.w	r3, r3, #4
 800530c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d015      	beq.n	8005342 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fd f895 	bl	8002444 <HAL_GetTick>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800531c:	e00a      	b.n	8005334 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531e:	f7fd f891 	bl	8002444 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e11e      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_RCC_OscConfig+0x530>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0ee      	beq.n	800531e <HAL_RCC_OscConfig+0x4ee>
 8005340:	e018      	b.n	8005374 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005342:	f7fd f87f 	bl	8002444 <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005348:	e00e      	b.n	8005368 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7fd f87b 	bl	8002444 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	4293      	cmp	r3, r2
 800535a:	d905      	bls.n	8005368 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e108      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
 8005360:	58024400 	.word	0x58024400
 8005364:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005368:	4b84      	ldr	r3, [pc, #528]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ea      	bne.n	800534a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80f9 	beq.w	8005570 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800537e:	4b7f      	ldr	r3, [pc, #508]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005386:	2b18      	cmp	r3, #24
 8005388:	f000 80b4 	beq.w	80054f4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b02      	cmp	r3, #2
 8005392:	f040 8095 	bne.w	80054c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005396:	4b79      	ldr	r3, [pc, #484]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a78      	ldr	r2, [pc, #480]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800539c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a2:	f7fd f84f 	bl	8002444 <HAL_GetTick>
 80053a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fd f84b 	bl	8002444 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e0da      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053bc:	4b6f      	ldr	r3, [pc, #444]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f0      	bne.n	80053aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c8:	4b6c      	ldr	r3, [pc, #432]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80053ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053cc:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <HAL_RCC_OscConfig+0x750>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	430a      	orrs	r2, r1
 80053dc:	4967      	ldr	r1, [pc, #412]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	628b      	str	r3, [r1, #40]	; 0x28
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	3b01      	subs	r3, #1
 80053e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	3b01      	subs	r3, #1
 80053f2:	025b      	lsls	r3, r3, #9
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	3b01      	subs	r3, #1
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005412:	495a      	ldr	r1, [pc, #360]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005414:	4313      	orrs	r3, r2
 8005416:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005418:	4b58      	ldr	r3, [pc, #352]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a57      	ldr	r2, [pc, #348]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005424:	4b55      	ldr	r3, [pc, #340]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005428:	4b56      	ldr	r3, [pc, #344]	; (8005584 <HAL_RCC_OscConfig+0x754>)
 800542a:	4013      	ands	r3, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005430:	00d2      	lsls	r2, r2, #3
 8005432:	4952      	ldr	r1, [pc, #328]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005434:	4313      	orrs	r3, r2
 8005436:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005438:	4b50      	ldr	r3, [pc, #320]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	f023 020c 	bic.w	r2, r3, #12
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	494d      	ldr	r1, [pc, #308]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800544a:	4b4c      	ldr	r3, [pc, #304]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	f023 0202 	bic.w	r2, r3, #2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	4949      	ldr	r1, [pc, #292]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800545c:	4b47      	ldr	r3, [pc, #284]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	4a46      	ldr	r2, [pc, #280]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005468:	4b44      	ldr	r3, [pc, #272]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a43      	ldr	r2, [pc, #268]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800546e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005474:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4a40      	ldr	r2, [pc, #256]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800547a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005480:	4b3e      	ldr	r3, [pc, #248]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a3d      	ldr	r2, [pc, #244]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548c:	4b3b      	ldr	r3, [pc, #236]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a3a      	ldr	r2, [pc, #232]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 8005492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fc ffd4 	bl	8002444 <HAL_GetTick>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fc ffd0 	bl	8002444 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e05f      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b2:	4b32      	ldr	r3, [pc, #200]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x670>
 80054be:	e057      	b.n	8005570 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c0:	4b2e      	ldr	r3, [pc, #184]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2d      	ldr	r2, [pc, #180]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80054c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fc ffba 	bl	8002444 <HAL_GetTick>
 80054d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fc ffb6 	bl	8002444 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e045      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054e6:	4b25      	ldr	r3, [pc, #148]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x6a4>
 80054f2:	e03d      	b.n	8005570 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054f4:	4b21      	ldr	r3, [pc, #132]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054fa:	4b20      	ldr	r3, [pc, #128]	; (800557c <HAL_RCC_OscConfig+0x74c>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	2b01      	cmp	r3, #1
 8005506:	d031      	beq.n	800556c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f003 0203 	and.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d12a      	bne.n	800556c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d122      	bne.n	800556c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d11a      	bne.n	800556c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	0a5b      	lsrs	r3, r3, #9
 800553a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d111      	bne.n	800556c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d108      	bne.n	800556c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0e1b      	lsrs	r3, r3, #24
 800555e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3730      	adds	r7, #48	; 0x30
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
 8005580:	fffffc0c 	.word	0xfffffc0c
 8005584:	ffff0007 	.word	0xffff0007

08005588 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e19c      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800559c:	4b8a      	ldr	r3, [pc, #552]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d910      	bls.n	80055cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b87      	ldr	r3, [pc, #540]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 020f 	bic.w	r2, r3, #15
 80055b2:	4985      	ldr	r1, [pc, #532]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b83      	ldr	r3, [pc, #524]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e184      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	4b7b      	ldr	r3, [pc, #492]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d908      	bls.n	80055fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055e8:	4b78      	ldr	r3, [pc, #480]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	4975      	ldr	r1, [pc, #468]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	4b70      	ldr	r3, [pc, #448]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005612:	429a      	cmp	r2, r3
 8005614:	d908      	bls.n	8005628 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005616:	4b6d      	ldr	r3, [pc, #436]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	496a      	ldr	r1, [pc, #424]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005624:	4313      	orrs	r3, r2
 8005626:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d010      	beq.n	8005656 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	4b64      	ldr	r3, [pc, #400]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005640:	429a      	cmp	r2, r3
 8005642:	d908      	bls.n	8005656 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005644:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	495e      	ldr	r1, [pc, #376]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005652:	4313      	orrs	r3, r2
 8005654:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d010      	beq.n	8005684 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800566e:	429a      	cmp	r2, r3
 8005670:	d908      	bls.n	8005684 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005672:	4b56      	ldr	r3, [pc, #344]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4953      	ldr	r1, [pc, #332]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005680:	4313      	orrs	r3, r2
 8005682:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d010      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	4b4d      	ldr	r3, [pc, #308]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	429a      	cmp	r2, r3
 800569e:	d908      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a0:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f023 020f 	bic.w	r2, r3, #15
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4947      	ldr	r1, [pc, #284]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d055      	beq.n	800576a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80056be:	4b43      	ldr	r3, [pc, #268]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4940      	ldr	r1, [pc, #256]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056d8:	4b3c      	ldr	r3, [pc, #240]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d121      	bne.n	8005728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0f6      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d115      	bne.n	8005728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0ea      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005708:	4b30      	ldr	r3, [pc, #192]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0de      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005718:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0d6      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005728:	4b28      	ldr	r3, [pc, #160]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f023 0207 	bic.w	r2, r3, #7
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4925      	ldr	r1, [pc, #148]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005736:	4313      	orrs	r3, r2
 8005738:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fc fe83 	bl	8002444 <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005740:	e00a      	b.n	8005758 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005742:	f7fc fe7f 	bl	8002444 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0be      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005758:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	429a      	cmp	r2, r3
 8005768:	d1eb      	bne.n	8005742 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	429a      	cmp	r2, r3
 8005784:	d208      	bcs.n	8005798 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f023 020f 	bic.w	r2, r3, #15
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	490e      	ldr	r1, [pc, #56]	; (80057cc <HAL_RCC_ClockConfig+0x244>)
 8005794:	4313      	orrs	r3, r2
 8005796:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d214      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 020f 	bic.w	r2, r3, #15
 80057ae:	4906      	ldr	r1, [pc, #24]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_RCC_ClockConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e086      	b.n	80058d6 <HAL_RCC_ClockConfig+0x34e>
 80057c8:	52002000 	.word	0x52002000
 80057cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d010      	beq.n	80057fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	4b3f      	ldr	r3, [pc, #252]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d208      	bcs.n	80057fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057ec:	4b3c      	ldr	r3, [pc, #240]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	4939      	ldr	r1, [pc, #228]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d010      	beq.n	800582c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005816:	429a      	cmp	r2, r3
 8005818:	d208      	bcs.n	800582c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800581a:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	492e      	ldr	r1, [pc, #184]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 8005828:	4313      	orrs	r3, r2
 800582a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d010      	beq.n	800585a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005844:	429a      	cmp	r2, r3
 8005846:	d208      	bcs.n	800585a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	4922      	ldr	r1, [pc, #136]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 8005856:	4313      	orrs	r3, r2
 8005858:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d010      	beq.n	8005888 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69da      	ldr	r2, [r3, #28]
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005872:	429a      	cmp	r2, r3
 8005874:	d208      	bcs.n	8005888 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005876:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4917      	ldr	r1, [pc, #92]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 8005884:	4313      	orrs	r3, r2
 8005886:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005888:	f000 f834 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	4912      	ldr	r1, [pc, #72]	; (80058e4 <HAL_RCC_ClockConfig+0x35c>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
 80058a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058a6:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <HAL_RCC_ClockConfig+0x358>)
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <HAL_RCC_ClockConfig+0x35c>)
 80058b0:	5cd3      	ldrb	r3, [r2, r3]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <HAL_RCC_ClockConfig+0x360>)
 80058be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058c0:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <HAL_RCC_ClockConfig+0x364>)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_RCC_ClockConfig+0x368>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fc fd70 	bl	80023b0 <HAL_InitTick>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
 80058e4:	0800a6ec 	.word	0x0800a6ec
 80058e8:	24000004 	.word	0x24000004
 80058ec:	24000000 	.word	0x24000000
 80058f0:	24000008 	.word	0x24000008

080058f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b089      	sub	sp, #36	; 0x24
 80058f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058fa:	4bb3      	ldr	r3, [pc, #716]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005902:	2b18      	cmp	r3, #24
 8005904:	f200 8155 	bhi.w	8005bb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005975 	.word	0x08005975
 8005914:	08005bb3 	.word	0x08005bb3
 8005918:	08005bb3 	.word	0x08005bb3
 800591c:	08005bb3 	.word	0x08005bb3
 8005920:	08005bb3 	.word	0x08005bb3
 8005924:	08005bb3 	.word	0x08005bb3
 8005928:	08005bb3 	.word	0x08005bb3
 800592c:	08005bb3 	.word	0x08005bb3
 8005930:	0800599b 	.word	0x0800599b
 8005934:	08005bb3 	.word	0x08005bb3
 8005938:	08005bb3 	.word	0x08005bb3
 800593c:	08005bb3 	.word	0x08005bb3
 8005940:	08005bb3 	.word	0x08005bb3
 8005944:	08005bb3 	.word	0x08005bb3
 8005948:	08005bb3 	.word	0x08005bb3
 800594c:	08005bb3 	.word	0x08005bb3
 8005950:	080059a1 	.word	0x080059a1
 8005954:	08005bb3 	.word	0x08005bb3
 8005958:	08005bb3 	.word	0x08005bb3
 800595c:	08005bb3 	.word	0x08005bb3
 8005960:	08005bb3 	.word	0x08005bb3
 8005964:	08005bb3 	.word	0x08005bb3
 8005968:	08005bb3 	.word	0x08005bb3
 800596c:	08005bb3 	.word	0x08005bb3
 8005970:	080059a7 	.word	0x080059a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005974:	4b94      	ldr	r3, [pc, #592]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005980:	4b91      	ldr	r3, [pc, #580]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	08db      	lsrs	r3, r3, #3
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	4a90      	ldr	r2, [pc, #576]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
 8005990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005992:	e111      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005994:	4b8d      	ldr	r3, [pc, #564]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005996:	61bb      	str	r3, [r7, #24]
    break;
 8005998:	e10e      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800599a:	4b8d      	ldr	r3, [pc, #564]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800599c:	61bb      	str	r3, [r7, #24]
    break;
 800599e:	e10b      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80059a0:	4b8c      	ldr	r3, [pc, #560]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059a2:	61bb      	str	r3, [r7, #24]
    break;
 80059a4:	e108      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059a6:	4b88      	ldr	r3, [pc, #544]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80059b0:	4b85      	ldr	r3, [pc, #532]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059bc:	4b82      	ldr	r3, [pc, #520]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80059c6:	4b80      	ldr	r3, [pc, #512]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	08db      	lsrs	r3, r3, #3
 80059cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80e1 	beq.w	8005bac <HAL_RCC_GetSysClockFreq+0x2b8>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f000 8083 	beq.w	8005af8 <HAL_RCC_GetSysClockFreq+0x204>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	f200 80a1 	bhi.w	8005b3c <HAL_RCC_GetSysClockFreq+0x248>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0x114>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d056      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a06:	e099      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a08:	4b6f      	ldr	r3, [pc, #444]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d02d      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a14:	4b6c      	ldr	r3, [pc, #432]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	08db      	lsrs	r3, r3, #3
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	4a6b      	ldr	r2, [pc, #428]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
 8005a24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3e:	4b62      	ldr	r3, [pc, #392]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005a6e:	e087      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005bdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab2:	e065      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac6:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ada:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af6:	e043      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005be4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b3a:	e021      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	0a5b      	lsrs	r3, r3, #9
 8005b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba4:	ee17 3a90 	vmov	r3, s15
 8005ba8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005baa:	e005      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    break;
 8005bb0:	e002      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bb4:	61bb      	str	r3, [r7, #24]
    break;
 8005bb6:	bf00      	nop
  }

  return sysclockfreq;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3724      	adds	r7, #36	; 0x24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	03d09000 	.word	0x03d09000
 8005bd0:	003d0900 	.word	0x003d0900
 8005bd4:	017d7840 	.word	0x017d7840
 8005bd8:	46000000 	.word	0x46000000
 8005bdc:	4c742400 	.word	0x4c742400
 8005be0:	4a742400 	.word	0x4a742400
 8005be4:	4bbebc20 	.word	0x4bbebc20

08005be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bee:	f7ff fe81 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	0a1b      	lsrs	r3, r3, #8
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	490f      	ldr	r1, [pc, #60]	; (8005c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8005c00:	5ccb      	ldrb	r3, [r1, r3]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8005c16:	5cd3      	ldrb	r3, [r2, r3]
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c22:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c26:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	0800a6ec 	.word	0x0800a6ec
 8005c40:	24000004 	.word	0x24000004
 8005c44:	24000000 	.word	0x24000000

08005c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c4c:	f7ff ffcc 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	4904      	ldr	r1, [pc, #16]	; (8005c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c5e:	5ccb      	ldrb	r3, [r1, r3]
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	0800a6ec 	.word	0x0800a6ec

08005c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c78:	f7ff ffb6 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4904      	ldr	r1, [pc, #16]	; (8005c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	0800a6ec 	.word	0x0800a6ec

08005ca0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ca8:	2300      	movs	r3, #0
 8005caa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cac:	2300      	movs	r3, #0
 8005cae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d03f      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc4:	d02a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cca:	d824      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd0:	d018      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd6:	d81e      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce0:	d007      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ce2:	e018      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce4:	4bab      	ldr	r3, [pc, #684]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4aaa      	ldr	r2, [pc, #680]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005cf0:	e015      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 feff 	bl	8007afc <RCCEx_PLL2_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d02:	e00c      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	2102      	movs	r1, #2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 ffa8 	bl	8007c60 <RCCEx_PLL3_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d14:	e003      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1a:	e000      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d109      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d24:	4b9b      	ldr	r3, [pc, #620]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d30:	4998      	ldr	r1, [pc, #608]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	650b      	str	r3, [r1, #80]	; 0x50
 8005d36:	e001      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d03d      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d826      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d6d 	.word	0x08005d6d
 8005d5c:	08005d7b 	.word	0x08005d7b
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6c:	4b89      	ldr	r3, [pc, #548]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4a88      	ldr	r2, [pc, #544]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d78:	e015      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 febb 	bl	8007afc <RCCEx_PLL2_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d8a:	e00c      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3324      	adds	r3, #36	; 0x24
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 ff64 	bl	8007c60 <RCCEx_PLL3_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]
      break;
 8005da2:	e000      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dac:	4b79      	ldr	r3, [pc, #484]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	f023 0207 	bic.w	r2, r3, #7
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db8:	4976      	ldr	r1, [pc, #472]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	650b      	str	r3, [r1, #80]	; 0x50
 8005dbe:	e001      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d051      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dd6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005dda:	d036      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ddc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005de0:	d830      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005de2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005de6:	d032      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dec:	d82a      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005dee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005df2:	d02e      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005df4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005df8:	d824      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfe:	d018      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e04:	d81e      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e0e:	d007      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005e10:	e018      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e12:	4b60      	ldr	r3, [pc, #384]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	4a5f      	ldr	r2, [pc, #380]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e1e:	e019      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fe68 	bl	8007afc <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e30:	e010      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3324      	adds	r3, #36	; 0x24
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 ff11 	bl	8007c60 <RCCEx_PLL3_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e42:	e007      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	75fb      	strb	r3, [r7, #23]
      break;
 8005e48:	e004      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e5a:	4b4e      	ldr	r3, [pc, #312]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e68:	494a      	ldr	r1, [pc, #296]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e6e:	e001      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d051      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e86:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005e8a:	d036      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005e8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005e90:	d830      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e96:	d032      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9c:	d82a      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005e9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ea2:	d02e      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ea8:	d824      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eae:	d018      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eb4:	d81e      	bhi.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ebe:	d007      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ec0:	e018      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec2:	4b34      	ldr	r3, [pc, #208]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	4a33      	ldr	r2, [pc, #204]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ece:	e019      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 fe10 	bl	8007afc <RCCEx_PLL2_Config>
 8005edc:	4603      	mov	r3, r0
 8005ede:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005ee0:	e010      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3324      	adds	r3, #36	; 0x24
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 feb9 	bl	8007c60 <RCCEx_PLL3_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ef2:	e007      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef8:	e004      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f18:	491e      	ldr	r1, [pc, #120]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8005f1e:	e001      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d035      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d01c      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f38:	2b30      	cmp	r3, #48	; 0x30
 8005f3a:	d817      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d00c      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d813      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d016      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d10f      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4c:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a10      	ldr	r2, [pc, #64]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005f58:	e00e      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fdcb 	bl	8007afc <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005f6a:	e005      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f70:	e002      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005f72:	bf00      	nop
 8005f74:	e000      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8a:	4902      	ldr	r1, [pc, #8]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f90:	e004      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005f92:	bf00      	nop
 8005f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d047      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb0:	d030      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb6:	d82a      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005fb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fbc:	d02c      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005fbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fc2:	d824      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc8:	d018      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fce:	d81e      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d007      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fda:	e018      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fdc:	4bac      	ldr	r3, [pc, #688]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4aab      	ldr	r2, [pc, #684]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fe8:	e017      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3304      	adds	r3, #4
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fd83 	bl	8007afc <RCCEx_PLL2_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ffa:	e00e      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3324      	adds	r3, #36	; 0x24
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fe2c 	bl	8007c60 <RCCEx_PLL3_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800600c:	e005      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
      break;
 8006012:	e002      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006020:	4b9b      	ldr	r3, [pc, #620]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	4998      	ldr	r1, [pc, #608]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800602e:	4313      	orrs	r3, r2
 8006030:	650b      	str	r3, [r1, #80]	; 0x50
 8006032:	e001      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d049      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800604c:	d02e      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800604e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006052:	d828      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006058:	d02a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800605a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800605e:	d822      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006064:	d026      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006066:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800606a:	d81c      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800606c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006070:	d010      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006076:	d816      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01d      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d111      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	2101      	movs	r1, #1
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fd37 	bl	8007afc <RCCEx_PLL2_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006092:	e012      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	2101      	movs	r1, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fde0 	bl	8007c60 <RCCEx_PLL3_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80060a4:	e009      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
      break;
 80060aa:	e006      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80060ac:	bf00      	nop
 80060ae:	e004      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80060b0:	bf00      	nop
 80060b2:	e002      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80060b4:	bf00      	nop
 80060b6:	e000      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80060b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d109      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060c0:	4b73      	ldr	r3, [pc, #460]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	4970      	ldr	r1, [pc, #448]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	650b      	str	r3, [r1, #80]	; 0x50
 80060d2:	e001      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d04b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ee:	d02e      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80060f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060f4:	d828      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fa:	d02a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d822      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006106:	d026      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006108:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800610c:	d81c      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006112:	d010      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006118:	d816      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01d      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800611e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006122:	d111      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f001 fce6 	bl	8007afc <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006134:	e012      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f001 fd8f 	bl	8007c60 <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006146:	e009      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	75fb      	strb	r3, [r7, #23]
      break;
 800614c:	e006      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800614e:	bf00      	nop
 8006150:	e004      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006152:	bf00      	nop
 8006154:	e002      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800615a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006162:	4b4b      	ldr	r3, [pc, #300]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006170:	4947      	ldr	r1, [pc, #284]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006172:	4313      	orrs	r3, r2
 8006174:	658b      	str	r3, [r1, #88]	; 0x58
 8006176:	e001      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02f      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006190:	d00e      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006196:	d814      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d015      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800619c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a0:	d10f      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80061ae:	e00c      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	2101      	movs	r1, #1
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 fca0 	bl	8007afc <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
      break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80061c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061d0:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061dc:	492c      	ldr	r1, [pc, #176]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	650b      	str	r3, [r1, #80]	; 0x50
 80061e2:	e001      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d032      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d81b      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	0800623b 	.word	0x0800623b
 8006208:	08006215 	.word	0x08006215
 800620c:	08006223 	.word	0x08006223
 8006210:	0800623b 	.word	0x0800623b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006214:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800621a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006220:	e00c      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fc67 	bl	8007afc <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006232:	e003      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	75fb      	strb	r3, [r7, #23]
      break;
 8006238:	e000      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800623a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	f023 0203 	bic.w	r2, r3, #3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	4910      	ldr	r1, [pc, #64]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006250:	4313      	orrs	r3, r2
 8006252:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006254:	e001      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 808a 	beq.w	800637c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a09      	ldr	r2, [pc, #36]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006274:	f7fc f8e6 	bl	8002444 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627a:	e00d      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627c:	f7fc f8e2 	bl	8002444 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d906      	bls.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	75fb      	strb	r3, [r7, #23]
        break;
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006290:	58024400 	.word	0x58024400
 8006294:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006298:	4bb9      	ldr	r3, [pc, #740]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0eb      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d166      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062aa:	4bb6      	ldr	r3, [pc, #728]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062b4:	4053      	eors	r3, r2
 80062b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062be:	4bb1      	ldr	r3, [pc, #708]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c8:	4bae      	ldr	r3, [pc, #696]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062cc:	4aad      	ldr	r2, [pc, #692]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d4:	4bab      	ldr	r3, [pc, #684]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	4aaa      	ldr	r2, [pc, #680]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062e0:	4aa8      	ldr	r2, [pc, #672]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f0:	d115      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fc f8a7 	bl	8002444 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f8:	e00b      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fc f8a3 	bl	8002444 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f241 3288 	movw	r2, #5000	; 0x1388
 8006308:	4293      	cmp	r3, r2
 800630a:	d902      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	75fb      	strb	r3, [r7, #23]
            break;
 8006310:	e005      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006312:	4b9c      	ldr	r3, [pc, #624]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0ed      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d126      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800632a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006332:	d10d      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006334:	4b93      	ldr	r3, [pc, #588]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006342:	0919      	lsrs	r1, r3, #4
 8006344:	4b90      	ldr	r3, [pc, #576]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006346:	400b      	ands	r3, r1
 8006348:	498e      	ldr	r1, [pc, #568]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800634a:	4313      	orrs	r3, r2
 800634c:	610b      	str	r3, [r1, #16]
 800634e:	e005      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006350:	4b8c      	ldr	r3, [pc, #560]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4a8b      	ldr	r2, [pc, #556]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006356:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800635a:	6113      	str	r3, [r2, #16]
 800635c:	4b89      	ldr	r3, [pc, #548]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800635e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636a:	4986      	ldr	r1, [pc, #536]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800636c:	4313      	orrs	r3, r2
 800636e:	670b      	str	r3, [r1, #112]	; 0x70
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	75bb      	strb	r3, [r7, #22]
 8006376:	e001      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d07e      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638c:	2b28      	cmp	r3, #40	; 0x28
 800638e:	d867      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	08006467 	.word	0x08006467
 800639c:	08006461 	.word	0x08006461
 80063a0:	08006461 	.word	0x08006461
 80063a4:	08006461 	.word	0x08006461
 80063a8:	08006461 	.word	0x08006461
 80063ac:	08006461 	.word	0x08006461
 80063b0:	08006461 	.word	0x08006461
 80063b4:	08006461 	.word	0x08006461
 80063b8:	0800643d 	.word	0x0800643d
 80063bc:	08006461 	.word	0x08006461
 80063c0:	08006461 	.word	0x08006461
 80063c4:	08006461 	.word	0x08006461
 80063c8:	08006461 	.word	0x08006461
 80063cc:	08006461 	.word	0x08006461
 80063d0:	08006461 	.word	0x08006461
 80063d4:	08006461 	.word	0x08006461
 80063d8:	0800644f 	.word	0x0800644f
 80063dc:	08006461 	.word	0x08006461
 80063e0:	08006461 	.word	0x08006461
 80063e4:	08006461 	.word	0x08006461
 80063e8:	08006461 	.word	0x08006461
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006461 	.word	0x08006461
 80063f4:	08006461 	.word	0x08006461
 80063f8:	08006467 	.word	0x08006467
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006461 	.word	0x08006461
 8006404:	08006461 	.word	0x08006461
 8006408:	08006461 	.word	0x08006461
 800640c:	08006461 	.word	0x08006461
 8006410:	08006461 	.word	0x08006461
 8006414:	08006461 	.word	0x08006461
 8006418:	08006467 	.word	0x08006467
 800641c:	08006461 	.word	0x08006461
 8006420:	08006461 	.word	0x08006461
 8006424:	08006461 	.word	0x08006461
 8006428:	08006461 	.word	0x08006461
 800642c:	08006461 	.word	0x08006461
 8006430:	08006461 	.word	0x08006461
 8006434:	08006461 	.word	0x08006461
 8006438:	08006467 	.word	0x08006467
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	2101      	movs	r1, #1
 8006442:	4618      	mov	r0, r3
 8006444:	f001 fb5a 	bl	8007afc <RCCEx_PLL2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800644c:	e00c      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3324      	adds	r3, #36	; 0x24
 8006452:	2101      	movs	r1, #1
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fc03 	bl	8007c60 <RCCEx_PLL3_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800645e:	e003      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800646e:	4b45      	ldr	r3, [pc, #276]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647a:	4942      	ldr	r1, [pc, #264]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800647c:	4313      	orrs	r3, r2
 800647e:	654b      	str	r3, [r1, #84]	; 0x54
 8006480:	e001      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d037      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	2b05      	cmp	r3, #5
 8006498:	d820      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064e3 	.word	0x080064e3
 80064a4:	080064b9 	.word	0x080064b9
 80064a8:	080064cb 	.word	0x080064cb
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064e3 	.word	0x080064e3
 80064b4:	080064e3 	.word	0x080064e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	2101      	movs	r1, #1
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fb1c 	bl	8007afc <RCCEx_PLL2_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80064c8:	e00c      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3324      	adds	r3, #36	; 0x24
 80064ce:	2101      	movs	r1, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 fbc5 	bl	8007c60 <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80064e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ea:	4b26      	ldr	r3, [pc, #152]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f023 0207 	bic.w	r2, r3, #7
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4923      	ldr	r1, [pc, #140]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	654b      	str	r3, [r1, #84]	; 0x54
 80064fc:	e001      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d040      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006514:	2b05      	cmp	r3, #5
 8006516:	d821      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006563 	.word	0x08006563
 8006524:	08006539 	.word	0x08006539
 8006528:	0800654b 	.word	0x0800654b
 800652c:	08006563 	.word	0x08006563
 8006530:	08006563 	.word	0x08006563
 8006534:	08006563 	.word	0x08006563
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	2101      	movs	r1, #1
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fadc 	bl	8007afc <RCCEx_PLL2_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006548:	e00c      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fb85 	bl	8007c60 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800655a:	e003      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
      break;
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d110      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	f023 0207 	bic.w	r2, r3, #7
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	4902      	ldr	r1, [pc, #8]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800657a:	4313      	orrs	r3, r2
 800657c:	658b      	str	r3, [r1, #88]	; 0x58
 800657e:	e007      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006580:	58024800 	.word	0x58024800
 8006584:	58024400 	.word	0x58024400
 8006588:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d04b      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a6:	d02e      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80065a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ac:	d828      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d02a      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b8:	d822      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80065ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065be:	d026      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80065c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065c4:	d81c      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80065c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ca:	d010      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80065cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d0:	d816      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01d      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80065d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065da:	d111      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3304      	adds	r3, #4
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fa8a 	bl	8007afc <RCCEx_PLL2_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80065ec:	e012      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3324      	adds	r3, #36	; 0x24
 80065f2:	2102      	movs	r1, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 fb33 	bl	8007c60 <RCCEx_PLL3_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80065fe:	e009      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
      break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006606:	bf00      	nop
 8006608:	e004      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800661a:	4bb2      	ldr	r3, [pc, #712]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006628:	49ae      	ldr	r1, [pc, #696]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800662a:	4313      	orrs	r3, r2
 800662c:	654b      	str	r3, [r1, #84]	; 0x54
 800662e:	e001      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d04b      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006646:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800664a:	d02e      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800664c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006650:	d828      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d02a      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d822      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800665e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006662:	d026      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006668:	d81c      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800666a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666e:	d010      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006674:	d816      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01d      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800667a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667e:	d111      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fa38 	bl	8007afc <RCCEx_PLL2_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006690:	e012      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3324      	adds	r3, #36	; 0x24
 8006696:	2102      	movs	r1, #2
 8006698:	4618      	mov	r0, r3
 800669a:	f001 fae1 	bl	8007c60 <RCCEx_PLL3_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80066a2:	e009      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	e006      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80066aa:	bf00      	nop
 80066ac:	e004      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80066ae:	bf00      	nop
 80066b0:	e002      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80066b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066be:	4b89      	ldr	r3, [pc, #548]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80066c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066cc:	4985      	ldr	r1, [pc, #532]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	658b      	str	r3, [r1, #88]	; 0x58
 80066d2:	e001      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d04b      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066ee:	d02e      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80066f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066f4:	d828      	bhi.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80066f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fa:	d02a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80066fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006700:	d822      	bhi.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006702:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006706:	d026      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006708:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800670c:	d81c      	bhi.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800670e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006712:	d010      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006718:	d816      	bhi.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01d      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006722:	d111      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	2100      	movs	r1, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f001 f9e6 	bl	8007afc <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006734:	e012      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3324      	adds	r3, #36	; 0x24
 800673a:	2102      	movs	r1, #2
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fa8f 	bl	8007c60 <RCCEx_PLL3_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006746:	e009      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
      break;
 800674c:	e006      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800674e:	bf00      	nop
 8006750:	e004      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800675a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006762:	4b60      	ldr	r3, [pc, #384]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006770:	495c      	ldr	r1, [pc, #368]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006772:	4313      	orrs	r3, r2
 8006774:	658b      	str	r3, [r1, #88]	; 0x58
 8006776:	e001      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d018      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d10a      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3324      	adds	r3, #36	; 0x24
 8006796:	2102      	movs	r1, #2
 8006798:	4618      	mov	r0, r3
 800679a:	f001 fa61 	bl	8007c60 <RCCEx_PLL3_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80067a8:	4b4e      	ldr	r3, [pc, #312]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b4:	494b      	ldr	r1, [pc, #300]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d0:	d10a      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3324      	adds	r3, #36	; 0x24
 80067d6:	2102      	movs	r1, #2
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 fa41 	bl	8007c60 <RCCEx_PLL3_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067e8:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	493b      	ldr	r1, [pc, #236]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d034      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800680e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006812:	d01d      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006818:	d817      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800681e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006822:	d009      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006824:	e011      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f001 f965 	bl	8007afc <RCCEx_PLL2_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006836:	e00c      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3324      	adds	r3, #36	; 0x24
 800683c:	2102      	movs	r1, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f001 fa0e 	bl	8007c60 <RCCEx_PLL3_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006848:	e003      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
      break;
 800684e:	e000      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006858:	4b22      	ldr	r3, [pc, #136]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006866:	491f      	ldr	r1, [pc, #124]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006868:	4313      	orrs	r3, r2
 800686a:	658b      	str	r3, [r1, #88]	; 0x58
 800686c:	e001      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d036      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006884:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006888:	d01c      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800688a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800688e:	d816      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006894:	d003      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800689a:	d007      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800689c:	e00f      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80068aa:	e00c      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3324      	adds	r3, #36	; 0x24
 80068b0:	2101      	movs	r1, #1
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f9d4 	bl	8007c60 <RCCEx_PLL3_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
      break;
 80068c2:	e000      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80068c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10d      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068da:	4902      	ldr	r1, [pc, #8]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	654b      	str	r3, [r1, #84]	; 0x54
 80068e0:	e004      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
 80068ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d029      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006904:	d007      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006906:	e00f      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006908:	4b61      	ldr	r3, [pc, #388]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	4a60      	ldr	r2, [pc, #384]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800690e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006914:	e00b      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3304      	adds	r3, #4
 800691a:	2102      	movs	r1, #2
 800691c:	4618      	mov	r0, r3
 800691e:	f001 f8ed 	bl	8007afc <RCCEx_PLL2_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006926:	e002      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
      break;
 800692c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006934:	4b56      	ldr	r3, [pc, #344]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006940:	4953      	ldr	r1, [pc, #332]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006942:	4313      	orrs	r3, r2
 8006944:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006946:	e001      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3324      	adds	r3, #36	; 0x24
 800695c:	2102      	movs	r1, #2
 800695e:	4618      	mov	r0, r3
 8006960:	f001 f97e 	bl	8007c60 <RCCEx_PLL3_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d030      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800697e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006982:	d017      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006988:	d811      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800698a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698e:	d013      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d80b      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d106      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a0:	4b3b      	ldr	r3, [pc, #236]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80069ac:	e007      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	75fb      	strb	r3, [r7, #23]
      break;
 80069b2:	e004      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80069bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d109      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069c4:	4b32      	ldr	r3, [pc, #200]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d0:	492f      	ldr	r1, [pc, #188]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	654b      	str	r3, [r1, #84]	; 0x54
 80069d6:	e001      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069e8:	4b29      	ldr	r3, [pc, #164]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f4:	4926      	ldr	r1, [pc, #152]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a06:	4b22      	ldr	r3, [pc, #136]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a12:	491f      	ldr	r1, [pc, #124]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a24:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a2e:	6113      	str	r3, [r2, #16]
 8006a30:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a3a:	4915      	ldr	r1, [pc, #84]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da08      	bge.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a54:	490e      	ldr	r1, [pc, #56]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a74:	4906      	ldr	r1, [pc, #24]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a7a:	7dbb      	ldrb	r3, [r7, #22]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	58024400 	.word	0x58024400

08006a94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b090      	sub	sp, #64	; 0x40
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa2:	f040 8089 	bne.w	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006aa6:	4b95      	ldr	r3, [pc, #596]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d87d      	bhi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ad1 	.word	0x08006ad1
 8006ac0:	08006af5 	.word	0x08006af5
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006bad 	.word	0x08006bad
 8006acc:	08006b3d 	.word	0x08006b3d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ad0:	4b8a      	ldr	r3, [pc, #552]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006adc:	d107      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 feb8 	bl	8007858 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006aec:	e3ed      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af2:	e3ea      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af4:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b00:	d107      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b02:	f107 0318 	add.w	r3, r7, #24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fbfe 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b10:	e3db      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b16:	e3d8      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b18:	4b78      	ldr	r3, [pc, #480]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b24:	d107      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b26:	f107 030c 	add.w	r3, r7, #12
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fd40 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b34:	e3c9      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b3a:	e3c6      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b3c:	4b6f      	ldr	r3, [pc, #444]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b46:	4b6d      	ldr	r3, [pc, #436]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d10c      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d109      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b58:	4b68      	ldr	r3, [pc, #416]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	08db      	lsrs	r3, r3, #3
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	4a67      	ldr	r2, [pc, #412]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6a:	e01e      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b6c:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b78:	d106      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b80:	d102      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b82:	4b60      	ldr	r3, [pc, #384]	; (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b86:	e010      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b88:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b94:	d106      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9c:	d102      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b9e:	4b5a      	ldr	r3, [pc, #360]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba2:	e002      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ba8:	e38f      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006baa:	e38e      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bac:	4b57      	ldr	r3, [pc, #348]	; (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb0:	e38b      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb6:	e388      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbe:	f040 80a7 	bne.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006bc2:	4b4e      	ldr	r3, [pc, #312]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006bca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bd2:	d054      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bda:	f200 808b 	bhi.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006be4:	f000 8083 	beq.w	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bee:	f200 8081 	bhi.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf8:	d02f      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c00:	d878      	bhi.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c0e:	d012      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8006c10:	e070      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c12:	4b3a      	ldr	r3, [pc, #232]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fe17 	bl	8007858 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c2e:	e34c      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c34:	e349      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c36:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c42:	d107      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c44:	f107 0318 	add.w	r3, r7, #24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb5d 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c52:	e33a      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c58:	e337      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c5a:	4b28      	ldr	r3, [pc, #160]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c66:	d107      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fc9f 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c76:	e328      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c7c:	e325      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c7e:	4b1f      	ldr	r3, [pc, #124]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c88:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d10c      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c9a:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cac:	e01e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cba:	d106      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cc2:	d102      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc8:	e010      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006cea:	e2ee      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006cec:	e2ed      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cee:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf2:	e2ea      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf8:	e2e7      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006cfa:	bf00      	nop
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	003d0900 	.word	0x003d0900
 8006d08:	017d7840 	.word	0x017d7840
 8006d0c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d16:	f040 809c 	bne.w	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006d1a:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006d22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d2a:	d054      	beq.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d32:	f200 808b 	bhi.w	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d3c:	f000 8083 	beq.w	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d46:	f200 8081 	bhi.w	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d50:	d02f      	beq.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d58:	d878      	bhi.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d66:	d012      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006d68:	e070      	b.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d6a:	4b8a      	ldr	r3, [pc, #552]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d76:	d107      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fd6b 	bl	8007858 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d86:	e2a0      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d8c:	e29d      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d8e:	4b81      	ldr	r3, [pc, #516]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d9a:	d107      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d9c:	f107 0318 	add.w	r3, r7, #24
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fab1 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006daa:	e28e      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db0:	e28b      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006db2:	4b78      	ldr	r3, [pc, #480]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dc0:	f107 030c 	add.w	r3, r7, #12
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fbf3 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dce:	e27c      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dd4:	e279      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006dd6:	4b6f      	ldr	r3, [pc, #444]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006de0:	4b6c      	ldr	r3, [pc, #432]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d10c      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006df2:	4b68      	ldr	r3, [pc, #416]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	4a66      	ldr	r2, [pc, #408]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e04:	e01e      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e06:	4b63      	ldr	r3, [pc, #396]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e12:	d106      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e1a:	d102      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e1c:	4b5f      	ldr	r3, [pc, #380]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e20:	e010      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e22:	4b5c      	ldr	r3, [pc, #368]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e36:	d102      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e38:	4b59      	ldr	r3, [pc, #356]	; (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3c:	e002      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e42:	e242      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006e44:	e241      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e46:	4b57      	ldr	r3, [pc, #348]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4a:	e23e      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e50:	e23b      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	f040 80a6 	bne.w	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006e5c:	4b4d      	ldr	r3, [pc, #308]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e6c:	d054      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e74:	f200 808b 	bhi.w	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e7e:	f000 8083 	beq.w	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e88:	f200 8081 	bhi.w	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e92:	d02f      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9a:	d878      	bhi.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea8:	d012      	beq.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006eaa:	e070      	b.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eac:	4b39      	ldr	r3, [pc, #228]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb8:	d107      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fcca 	bl	8007858 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ec8:	e1ff      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ece:	e1fc      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ed0:	4b30      	ldr	r3, [pc, #192]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006edc:	d107      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 0318 	add.w	r3, r7, #24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fa10 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eec:	e1ed      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef2:	e1ea      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f00:	d107      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f02:	f107 030c 	add.w	r3, r7, #12
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fb52 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f10:	e1db      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f16:	e1d8      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f34:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	08db      	lsrs	r3, r3, #3
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f46:	e01e      	b.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f48:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f54:	d106      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f5c:	d102      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f62:	e010      	b.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f70:	d106      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f78:	d102      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f7e:	e002      	b.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f84:	e1a1      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006f86:	e1a0      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f88:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f8c:	e19d      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f92:	e19a      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006f94:	58024400 	.word	0x58024400
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	003d0900 	.word	0x003d0900
 8006fa0:	017d7840 	.word	0x017d7840
 8006fa4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fae:	d173      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006fb0:	4b9a      	ldr	r3, [pc, #616]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc0:	d02f      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc8:	d863      	bhi.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd6:	d012      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006fd8:	e05b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fda:	4b90      	ldr	r3, [pc, #576]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe8:	f107 0318 	add.w	r3, r7, #24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f98b 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ff6:	e168      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffc:	e165      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ffe:	4b87      	ldr	r3, [pc, #540]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800700a:	d107      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800700c:	f107 030c 	add.w	r3, r7, #12
 8007010:	4618      	mov	r0, r3
 8007012:	f000 facd 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800701a:	e156      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007020:	e153      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007022:	4b7e      	ldr	r3, [pc, #504]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800702a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800702c:	4b7b      	ldr	r3, [pc, #492]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d10c      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800703e:	4b77      	ldr	r3, [pc, #476]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	4a75      	ldr	r2, [pc, #468]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007050:	e01e      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007052:	4b72      	ldr	r3, [pc, #456]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705e:	d106      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007066:	d102      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007068:	4b6e      	ldr	r3, [pc, #440]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706c:	e010      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800706e:	4b6b      	ldr	r3, [pc, #428]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707a:	d106      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007084:	4b68      	ldr	r3, [pc, #416]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	e002      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800708e:	e11c      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007090:	e11b      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007096:	e118      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709e:	d133      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80070a0:	4b5e      	ldr	r3, [pc, #376]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80070a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b6:	d012      	beq.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80070b8:	e023      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ba:	4b58      	ldr	r3, [pc, #352]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c6:	d107      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fbc3 	bl	8007858 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070d6:	e0f8      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070dc:	e0f5      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070de:	4b4f      	ldr	r3, [pc, #316]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ea:	d107      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ec:	f107 0318 	add.w	r3, r7, #24
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 f909 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070fa:	e0e6      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007100:	e0e3      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007106:	e0e0      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800710e:	f040 808d 	bne.w	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007112:	4b42      	ldr	r3, [pc, #264]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800711a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007122:	d06b      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800712a:	d874      	bhi.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007132:	d056      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713a:	d86c      	bhi.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007142:	d03b      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800714a:	d864      	bhi.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007152:	d021      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715a:	d85c      	bhi.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007168:	d004      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800716a:	e054      	b.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800716c:	f000 f8b6 	bl	80072dc <HAL_RCCEx_GetD3PCLK1Freq>
 8007170:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007172:	e0aa      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007174:	4b29      	ldr	r3, [pc, #164]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007180:	d107      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007182:	f107 0318 	add.w	r3, r7, #24
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f8be 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007190:	e09b      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e098      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007198:	4b20      	ldr	r3, [pc, #128]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a4:	d107      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a6:	f107 030c 	add.w	r3, r7, #12
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fa00 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071b4:	e089      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ba:	e086      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071bc:	4b17      	ldr	r3, [pc, #92]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d109      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071c8:	4b14      	ldr	r3, [pc, #80]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	08db      	lsrs	r3, r3, #3
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	4a13      	ldr	r2, [pc, #76]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071da:	e076      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e0:	e073      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071e2:	4b0e      	ldr	r3, [pc, #56]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ee:	d102      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071f4:	e069      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071fa:	e066      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007208:	d102      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800720a:	4b07      	ldr	r3, [pc, #28]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800720e:	e05c      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007214:	e059      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721a:	e056      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800721c:	58024400 	.word	0x58024400
 8007220:	03d09000 	.word	0x03d09000
 8007224:	003d0900 	.word	0x003d0900
 8007228:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007232:	d148      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007234:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007244:	d02a      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724c:	d838      	bhi.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800725a:	d00d      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800725c:	e030      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800726a:	d102      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007270:	e02b      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007276:	e028      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007278:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007284:	d107      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fae4 	bl	8007858 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007294:	e019      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729a:	e016      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072a8:	d107      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072aa:	f107 0318 	add.w	r3, r7, #24
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 f82a 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072b8:	e007      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072be:	e004      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c4:	e001      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3740      	adds	r7, #64	; 0x40
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	58024400 	.word	0x58024400
 80072d8:	017d7840 	.word	0x017d7840

080072dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072e0:	f7fe fc82 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4904      	ldr	r1, [pc, #16]	; (8007304 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	58024400 	.word	0x58024400
 8007304:	0800a6ec 	.word	0x0800a6ec

08007308 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007308:	b480      	push	{r7}
 800730a:	b089      	sub	sp, #36	; 0x24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007310:	4ba1      	ldr	r3, [pc, #644]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800731a:	4b9f      	ldr	r3, [pc, #636]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	0b1b      	lsrs	r3, r3, #12
 8007320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007324:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007326:	4b9c      	ldr	r3, [pc, #624]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	091b      	lsrs	r3, r3, #4
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007332:	4b99      	ldr	r3, [pc, #612]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	08db      	lsrs	r3, r3, #3
 8007338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	fb02 f303 	mul.w	r3, r2, r3
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8111 	beq.w	8007578 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b02      	cmp	r3, #2
 800735a:	f000 8083 	beq.w	8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b02      	cmp	r3, #2
 8007362:	f200 80a1 	bhi.w	80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d056      	beq.n	8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007372:	e099      	b.n	80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007374:	4b88      	ldr	r3, [pc, #544]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d02d      	beq.n	80073dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007380:	4b85      	ldr	r3, [pc, #532]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	4a84      	ldr	r2, [pc, #528]	; (800759c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b7b      	ldr	r3, [pc, #492]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80073be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073da:	e087      	b.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b6a      	ldr	r3, [pc, #424]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007402:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800741e:	e065      	b.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b59      	ldr	r3, [pc, #356]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a03 	vldr	s12, [r7, #12]
 8007446:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007462:	e043      	b.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b48      	ldr	r3, [pc, #288]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a03 	vldr	s12, [r7, #12]
 800748a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074a6:	e021      	b.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b37      	ldr	r3, [pc, #220]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80074ec:	4b2a      	ldr	r3, [pc, #168]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	0a5b      	lsrs	r3, r3, #9
 80074f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007506:	edd7 6a07 	vldr	s13, [r7, #28]
 800750a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800750e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007512:	ee17 2a90 	vmov	r2, s15
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800751a:	4b1f      	ldr	r3, [pc, #124]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	0c1b      	lsrs	r3, r3, #16
 8007520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007530:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007534:	edd7 6a07 	vldr	s13, [r7, #28]
 8007538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800753c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007540:	ee17 2a90 	vmov	r2, s15
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007548:	4b13      	ldr	r3, [pc, #76]	; (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007562:	edd7 6a07 	vldr	s13, [r7, #28]
 8007566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756e:	ee17 2a90 	vmov	r2, s15
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007576:	e008      	b.n	800758a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	609a      	str	r2, [r3, #8]
}
 800758a:	bf00      	nop
 800758c:	3724      	adds	r7, #36	; 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400
 800759c:	03d09000 	.word	0x03d09000
 80075a0:	46000000 	.word	0x46000000
 80075a4:	4c742400 	.word	0x4c742400
 80075a8:	4a742400 	.word	0x4a742400
 80075ac:	4bbebc20 	.word	0x4bbebc20

080075b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075b8:	4ba1      	ldr	r3, [pc, #644]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80075c2:	4b9f      	ldr	r3, [pc, #636]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c6:	0d1b      	lsrs	r3, r3, #20
 80075c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075ce:	4b9c      	ldr	r3, [pc, #624]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80075da:	4b99      	ldr	r3, [pc, #612]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8111 	beq.w	8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b02      	cmp	r3, #2
 8007602:	f000 8083 	beq.w	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b02      	cmp	r3, #2
 800760a:	f200 80a1 	bhi.w	8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d056      	beq.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800761a:	e099      	b.n	8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800761c:	4b88      	ldr	r3, [pc, #544]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02d      	beq.n	8007684 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007628:	4b85      	ldr	r3, [pc, #532]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	08db      	lsrs	r3, r3, #3
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	4a84      	ldr	r2, [pc, #528]	; (8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
 8007638:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b7b      	ldr	r3, [pc, #492]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a03 	vldr	s12, [r7, #12]
 8007666:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007682:	e087      	b.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b6a      	ldr	r3, [pc, #424]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076c6:	e065      	b.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b59      	ldr	r3, [pc, #356]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800770a:	e043      	b.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b48      	ldr	r3, [pc, #288]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007732:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800774e:	e021      	b.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b37      	ldr	r3, [pc, #220]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a03 	vldr	s12, [r7, #12]
 8007776:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007792:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007794:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	0a5b      	lsrs	r3, r3, #9
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ba:	ee17 2a90 	vmov	r2, s15
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80077c2:	4b1f      	ldr	r3, [pc, #124]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	0c1b      	lsrs	r3, r3, #16
 80077c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e8:	ee17 2a90 	vmov	r2, s15
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	0e1b      	lsrs	r3, r3, #24
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780a:	edd7 6a07 	vldr	s13, [r7, #28]
 800780e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007816:	ee17 2a90 	vmov	r2, s15
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800781e:	e008      	b.n	8007832 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	609a      	str	r2, [r3, #8]
}
 8007832:	bf00      	nop
 8007834:	3724      	adds	r7, #36	; 0x24
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	58024400 	.word	0x58024400
 8007844:	03d09000 	.word	0x03d09000
 8007848:	46000000 	.word	0x46000000
 800784c:	4c742400 	.word	0x4c742400
 8007850:	4a742400 	.word	0x4a742400
 8007854:	4bbebc20 	.word	0x4bbebc20

08007858 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007858:	b480      	push	{r7}
 800785a:	b089      	sub	sp, #36	; 0x24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007860:	4ba0      	ldr	r3, [pc, #640]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800786a:	4b9e      	ldr	r3, [pc, #632]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	091b      	lsrs	r3, r3, #4
 8007870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007874:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007876:	4b9b      	ldr	r3, [pc, #620]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007880:	4b98      	ldr	r3, [pc, #608]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	08db      	lsrs	r3, r3, #3
 8007886:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007898:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 8111 	beq.w	8007ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	f000 8083 	beq.w	80079b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	f200 80a1 	bhi.w	80079f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d056      	beq.n	800796e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078c0:	e099      	b.n	80079f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c2:	4b88      	ldr	r3, [pc, #544]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d02d      	beq.n	800792a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078ce:	4b85      	ldr	r3, [pc, #532]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	08db      	lsrs	r3, r3, #3
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	4a83      	ldr	r2, [pc, #524]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f8:	4b7a      	ldr	r3, [pc, #488]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007908:	ed97 6a03 	vldr	s12, [r7, #12]
 800790c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800791c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007924:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007928:	e087      	b.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	ee07 3a90 	vmov	s15, r3
 8007930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007934:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793c:	4b69      	ldr	r3, [pc, #420]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007950:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800796c:	e065      	b.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007978:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800797c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007980:	4b58      	ldr	r3, [pc, #352]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007988:	ee07 3a90 	vmov	s15, r3
 800798c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007990:	ed97 6a03 	vldr	s12, [r7, #12]
 8007994:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079b0:	e043      	b.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c4:	4b47      	ldr	r3, [pc, #284]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079f4:	e021      	b.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a08:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a3a:	4b2a      	ldr	r3, [pc, #168]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	0a5b      	lsrs	r3, r3, #9
 8007a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a44:	ee07 3a90 	vmov	s15, r3
 8007a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a60:	ee17 2a90 	vmov	r2, s15
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	0c1b      	lsrs	r3, r3, #16
 8007a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a8e:	ee17 2a90 	vmov	r2, s15
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007a96:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	0e1b      	lsrs	r3, r3, #24
 8007a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007abc:	ee17 2a90 	vmov	r2, s15
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	609a      	str	r2, [r3, #8]
}
 8007ad8:	bf00      	nop
 8007ada:	3724      	adds	r7, #36	; 0x24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	03d09000 	.word	0x03d09000
 8007aec:	46000000 	.word	0x46000000
 8007af0:	4c742400 	.word	0x4c742400
 8007af4:	4a742400 	.word	0x4a742400
 8007af8:	4bbebc20 	.word	0x4bbebc20

08007afc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b0a:	4b53      	ldr	r3, [pc, #332]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d101      	bne.n	8007b1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e099      	b.n	8007c4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b1a:	4b4f      	ldr	r3, [pc, #316]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a4e      	ldr	r2, [pc, #312]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b26:	f7fa fc8d 	bl	8002444 <HAL_GetTick>
 8007b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b2c:	e008      	b.n	8007b40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b2e:	f7fa fc89 	bl	8002444 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e086      	b.n	8007c4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b40:	4b45      	ldr	r3, [pc, #276]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b4c:	4b42      	ldr	r3, [pc, #264]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	493f      	ldr	r1, [pc, #252]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	628b      	str	r3, [r1, #40]	; 0x28
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	025b      	lsls	r3, r3, #9
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	431a      	orrs	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	061b      	lsls	r3, r3, #24
 8007b8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b90:	4931      	ldr	r1, [pc, #196]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b96:	4b30      	ldr	r3, [pc, #192]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	492d      	ldr	r1, [pc, #180]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f023 0220 	bic.w	r2, r3, #32
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	4928      	ldr	r1, [pc, #160]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bba:	4b27      	ldr	r3, [pc, #156]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	4a26      	ldr	r2, [pc, #152]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <RCCEx_PLL2_Config+0x160>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	69d2      	ldr	r2, [r2, #28]
 8007bd2:	00d2      	lsls	r2, r2, #3
 8007bd4:	4920      	ldr	r1, [pc, #128]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bda:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	f043 0310 	orr.w	r3, r3, #16
 8007be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf0:	4a19      	ldr	r2, [pc, #100]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007bf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bf8:	e00f      	b.n	8007c1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d106      	bne.n	8007c0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c00:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c0c:	e005      	b.n	8007c1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c0e:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	4a11      	ldr	r2, [pc, #68]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a0e      	ldr	r2, [pc, #56]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c26:	f7fa fc0d 	bl	8002444 <HAL_GetTick>
 8007c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c2c:	e008      	b.n	8007c40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c2e:	f7fa fc09 	bl	8002444 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d901      	bls.n	8007c40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e006      	b.n	8007c4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <RCCEx_PLL2_Config+0x15c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0f0      	beq.n	8007c2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	ffff0007 	.word	0xffff0007

08007c60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c6e:	4b53      	ldr	r3, [pc, #332]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d101      	bne.n	8007c7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e099      	b.n	8007db2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c7e:	4b4f      	ldr	r3, [pc, #316]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a4e      	ldr	r2, [pc, #312]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8a:	f7fa fbdb 	bl	8002444 <HAL_GetTick>
 8007c8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c90:	e008      	b.n	8007ca4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c92:	f7fa fbd7 	bl	8002444 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e086      	b.n	8007db2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca4:	4b45      	ldr	r3, [pc, #276]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f0      	bne.n	8007c92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cb0:	4b42      	ldr	r3, [pc, #264]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	051b      	lsls	r3, r3, #20
 8007cbe:	493f      	ldr	r1, [pc, #252]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	628b      	str	r3, [r1, #40]	; 0x28
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	025b      	lsls	r3, r3, #9
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cf4:	4931      	ldr	r1, [pc, #196]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cfa:	4b30      	ldr	r3, [pc, #192]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	492d      	ldr	r1, [pc, #180]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d0c:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	4928      	ldr	r1, [pc, #160]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d1e:	4b27      	ldr	r3, [pc, #156]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	4a26      	ldr	r2, [pc, #152]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d2a:	4b24      	ldr	r3, [pc, #144]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <RCCEx_PLL3_Config+0x160>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	69d2      	ldr	r2, [r2, #28]
 8007d36:	00d2      	lsls	r2, r2, #3
 8007d38:	4920      	ldr	r1, [pc, #128]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d3e:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	4a1e      	ldr	r2, [pc, #120]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	4a19      	ldr	r2, [pc, #100]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d5c:	e00f      	b.n	8007d7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d106      	bne.n	8007d72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d64:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d70:	e005      	b.n	8007d7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d76:	4a11      	ldr	r2, [pc, #68]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a0e      	ldr	r2, [pc, #56]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d8a:	f7fa fb5b 	bl	8002444 <HAL_GetTick>
 8007d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d90:	e008      	b.n	8007da4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d92:	f7fa fb57 	bl	8002444 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e006      	b.n	8007db2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <RCCEx_PLL3_Config+0x15c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0f0      	beq.n	8007d92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	ffff0007 	.word	0xffff0007

08007dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e049      	b.n	8007e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fa f80e 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f000 fc94 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d001      	beq.n	8007e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e056      	b.n	8007f3a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a2b      	ldr	r2, [pc, #172]	; (8007f48 <HAL_TIM_Base_Start+0xd4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d02c      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea6:	d027      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <HAL_TIM_Base_Start+0xd8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d022      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <HAL_TIM_Base_Start+0xdc>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d01d      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a24      	ldr	r2, [pc, #144]	; (8007f54 <HAL_TIM_Base_Start+0xe0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d018      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a23      	ldr	r2, [pc, #140]	; (8007f58 <HAL_TIM_Base_Start+0xe4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a21      	ldr	r2, [pc, #132]	; (8007f5c <HAL_TIM_Base_Start+0xe8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a20      	ldr	r2, [pc, #128]	; (8007f60 <HAL_TIM_Base_Start+0xec>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d009      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <HAL_TIM_Base_Start+0xf0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIM_Base_Start+0x84>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1d      	ldr	r2, [pc, #116]	; (8007f68 <HAL_TIM_Base_Start+0xf4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d115      	bne.n	8007f24 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <HAL_TIM_Base_Start+0xf8>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b06      	cmp	r3, #6
 8007f08:	d015      	beq.n	8007f36 <HAL_TIM_Base_Start+0xc2>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f10:	d011      	beq.n	8007f36 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f22:	e008      	b.n	8007f36 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0201 	orr.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e000      	b.n	8007f38 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40001800 	.word	0x40001800
 8007f60:	40014000 	.word	0x40014000
 8007f64:	4000e000 	.word	0x4000e000
 8007f68:	4000e400 	.word	0x4000e400
 8007f6c:	00010007 	.word	0x00010007

08007f70 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6a1a      	ldr	r2, [r3, #32]
 8007f7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10f      	bne.n	8007fa8 <HAL_TIM_Base_Stop+0x38>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6a1a      	ldr	r2, [r3, #32]
 8007f8e:	f240 4344 	movw	r3, #1092	; 0x444
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d107      	bne.n	8007fa8 <HAL_TIM_Base_Stop+0x38>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0201 	bic.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e049      	b.n	8008064 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7f9 fec1 	bl	8001d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f000 fb97 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e049      	b.n	8008112 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f841 	bl	800811a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f000 fb40 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b02      	cmp	r3, #2
 8008142:	d122      	bne.n	800818a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d11b      	bne.n	800818a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f06f 0202 	mvn.w	r2, #2
 800815a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f003 0303 	and.w	r3, r3, #3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fabf 	bl	80086f4 <HAL_TIM_IC_CaptureCallback>
 8008176:	e005      	b.n	8008184 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fab1 	bl	80086e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fac2 	bl	8008708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b04      	cmp	r3, #4
 8008196:	d122      	bne.n	80081de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d11b      	bne.n	80081de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f06f 0204 	mvn.w	r2, #4
 80081ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa95 	bl	80086f4 <HAL_TIM_IC_CaptureCallback>
 80081ca:	e005      	b.n	80081d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa87 	bl	80086e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa98 	bl	8008708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d122      	bne.n	8008232 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d11b      	bne.n	8008232 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0208 	mvn.w	r2, #8
 8008202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2204      	movs	r2, #4
 8008208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa6b 	bl	80086f4 <HAL_TIM_IC_CaptureCallback>
 800821e:	e005      	b.n	800822c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fa5d 	bl	80086e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa6e 	bl	8008708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b10      	cmp	r3, #16
 800823e:	d122      	bne.n	8008286 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d11b      	bne.n	8008286 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f06f 0210 	mvn.w	r2, #16
 8008256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2208      	movs	r2, #8
 800825c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa41 	bl	80086f4 <HAL_TIM_IC_CaptureCallback>
 8008272:	e005      	b.n	8008280 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fa33 	bl	80086e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa44 	bl	8008708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10e      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d107      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0201 	mvn.w	r2, #1
 80082aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa0d 	bl	80086cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d10e      	bne.n	80082de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d107      	bne.n	80082de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f821 	bl	8009320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ec:	d10e      	bne.n	800830c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b80      	cmp	r3, #128	; 0x80
 80082fa:	d107      	bne.n	800830c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 f814 	bl	8009334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d10e      	bne.n	8008338 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d107      	bne.n	8008338 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9f2 	bl	800871c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b20      	cmp	r3, #32
 8008344:	d10e      	bne.n	8008364 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b20      	cmp	r3, #32
 8008352:	d107      	bne.n	8008364 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0220 	mvn.w	r2, #32
 800835c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 ffd4 	bl	800930c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008386:	2302      	movs	r3, #2
 8008388:	e088      	b.n	800849c <HAL_TIM_IC_ConfigChannel+0x130>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11b      	bne.n	80083d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f000 fd3e 	bl	8008e28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 020c 	bic.w	r2, r2, #12
 80083ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6999      	ldr	r1, [r3, #24]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	619a      	str	r2, [r3, #24]
 80083ce:	e060      	b.n	8008492 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d11c      	bne.n	8008410 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f000 fd9f 	bl	8008f28 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80083f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6999      	ldr	r1, [r3, #24]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	021a      	lsls	r2, r3, #8
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	619a      	str	r2, [r3, #24]
 800840e:	e040      	b.n	8008492 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b08      	cmp	r3, #8
 8008414:	d11b      	bne.n	800844e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	6819      	ldr	r1, [r3, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f000 fdbc 	bl	8008fa2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 020c 	bic.w	r2, r2, #12
 8008438:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69d9      	ldr	r1, [r3, #28]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	61da      	str	r2, [r3, #28]
 800844c:	e021      	b.n	8008492 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b0c      	cmp	r3, #12
 8008452:	d11c      	bne.n	800848e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6819      	ldr	r1, [r3, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f000 fdd9 	bl	800901a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69da      	ldr	r2, [r3, #28]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008476:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69d9      	ldr	r1, [r3, #28]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	021a      	lsls	r2, r3, #8
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	61da      	str	r2, [r3, #28]
 800848c:	e001      	b.n	8008492 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084be:	2302      	movs	r3, #2
 80084c0:	e0ff      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b14      	cmp	r3, #20
 80084ce:	f200 80f0 	bhi.w	80086b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	080086b3 	.word	0x080086b3
 80084e0:	080086b3 	.word	0x080086b3
 80084e4:	080086b3 	.word	0x080086b3
 80084e8:	0800856d 	.word	0x0800856d
 80084ec:	080086b3 	.word	0x080086b3
 80084f0:	080086b3 	.word	0x080086b3
 80084f4:	080086b3 	.word	0x080086b3
 80084f8:	080085af 	.word	0x080085af
 80084fc:	080086b3 	.word	0x080086b3
 8008500:	080086b3 	.word	0x080086b3
 8008504:	080086b3 	.word	0x080086b3
 8008508:	080085ef 	.word	0x080085ef
 800850c:	080086b3 	.word	0x080086b3
 8008510:	080086b3 	.word	0x080086b3
 8008514:	080086b3 	.word	0x080086b3
 8008518:	08008631 	.word	0x08008631
 800851c:	080086b3 	.word	0x080086b3
 8008520:	080086b3 	.word	0x080086b3
 8008524:	080086b3 	.word	0x080086b3
 8008528:	08008671 	.word	0x08008671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f9a2 	bl	800887c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0208 	orr.w	r2, r2, #8
 8008546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0204 	bic.w	r2, r2, #4
 8008556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6999      	ldr	r1, [r3, #24]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	619a      	str	r2, [r3, #24]
      break;
 800856a:	e0a5      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fa12 	bl	800899c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699a      	ldr	r2, [r3, #24]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699a      	ldr	r2, [r3, #24]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6999      	ldr	r1, [r3, #24]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	021a      	lsls	r2, r3, #8
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	619a      	str	r2, [r3, #24]
      break;
 80085ac:	e084      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fa7b 	bl	8008ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69da      	ldr	r2, [r3, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0208 	orr.w	r2, r2, #8
 80085c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69da      	ldr	r2, [r3, #28]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0204 	bic.w	r2, r2, #4
 80085d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69d9      	ldr	r1, [r3, #28]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	61da      	str	r2, [r3, #28]
      break;
 80085ec:	e064      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fae3 	bl	8008bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69d9      	ldr	r1, [r3, #28]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	021a      	lsls	r2, r3, #8
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	61da      	str	r2, [r3, #28]
      break;
 800862e:	e043      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fb2c 	bl	8008c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0208 	orr.w	r2, r2, #8
 800864a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0204 	bic.w	r2, r2, #4
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	691a      	ldr	r2, [r3, #16]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800866e:	e023      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fb70 	bl	8008d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800868a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800869a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	021a      	lsls	r2, r3, #8
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086b0:	e002      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
      break;
 80086b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a44      	ldr	r2, [pc, #272]	; (8008854 <TIM_Base_SetConfig+0x124>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d013      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874e:	d00f      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a41      	ldr	r2, [pc, #260]	; (8008858 <TIM_Base_SetConfig+0x128>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00b      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a40      	ldr	r2, [pc, #256]	; (800885c <TIM_Base_SetConfig+0x12c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3f      	ldr	r2, [pc, #252]	; (8008860 <TIM_Base_SetConfig+0x130>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a3e      	ldr	r2, [pc, #248]	; (8008864 <TIM_Base_SetConfig+0x134>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d108      	bne.n	8008782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a33      	ldr	r2, [pc, #204]	; (8008854 <TIM_Base_SetConfig+0x124>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d027      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d023      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a30      	ldr	r2, [pc, #192]	; (8008858 <TIM_Base_SetConfig+0x128>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01f      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a2f      	ldr	r2, [pc, #188]	; (800885c <TIM_Base_SetConfig+0x12c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d01b      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2e      	ldr	r2, [pc, #184]	; (8008860 <TIM_Base_SetConfig+0x130>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d017      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2d      	ldr	r2, [pc, #180]	; (8008864 <TIM_Base_SetConfig+0x134>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2c      	ldr	r2, [pc, #176]	; (8008868 <TIM_Base_SetConfig+0x138>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00f      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a2b      	ldr	r2, [pc, #172]	; (800886c <TIM_Base_SetConfig+0x13c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00b      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2a      	ldr	r2, [pc, #168]	; (8008870 <TIM_Base_SetConfig+0x140>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a29      	ldr	r2, [pc, #164]	; (8008874 <TIM_Base_SetConfig+0x144>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_Base_SetConfig+0xaa>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a28      	ldr	r2, [pc, #160]	; (8008878 <TIM_Base_SetConfig+0x148>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d108      	bne.n	80087ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a10      	ldr	r2, [pc, #64]	; (8008854 <TIM_Base_SetConfig+0x124>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0x108>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a12      	ldr	r2, [pc, #72]	; (8008864 <TIM_Base_SetConfig+0x134>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0x108>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a11      	ldr	r2, [pc, #68]	; (8008868 <TIM_Base_SetConfig+0x138>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0x108>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a10      	ldr	r2, [pc, #64]	; (800886c <TIM_Base_SetConfig+0x13c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0x108>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <TIM_Base_SetConfig+0x140>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d103      	bne.n	8008840 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	615a      	str	r2, [r3, #20]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40010400 	.word	0x40010400
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800
 8008874:	4000e000 	.word	0x4000e000
 8008878:	4000e400 	.word	0x4000e400

0800887c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <TIM_OC1_SetConfig+0x108>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0303 	bic.w	r3, r3, #3
 80088b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 0302 	bic.w	r3, r3, #2
 80088c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a2d      	ldr	r2, [pc, #180]	; (8008988 <TIM_OC1_SetConfig+0x10c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00f      	beq.n	80088f8 <TIM_OC1_SetConfig+0x7c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a2c      	ldr	r2, [pc, #176]	; (800898c <TIM_OC1_SetConfig+0x110>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00b      	beq.n	80088f8 <TIM_OC1_SetConfig+0x7c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a2b      	ldr	r2, [pc, #172]	; (8008990 <TIM_OC1_SetConfig+0x114>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d007      	beq.n	80088f8 <TIM_OC1_SetConfig+0x7c>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a2a      	ldr	r2, [pc, #168]	; (8008994 <TIM_OC1_SetConfig+0x118>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d003      	beq.n	80088f8 <TIM_OC1_SetConfig+0x7c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a29      	ldr	r2, [pc, #164]	; (8008998 <TIM_OC1_SetConfig+0x11c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d10c      	bne.n	8008912 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0308 	bic.w	r3, r3, #8
 80088fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 0304 	bic.w	r3, r3, #4
 8008910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a1c      	ldr	r2, [pc, #112]	; (8008988 <TIM_OC1_SetConfig+0x10c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00f      	beq.n	800893a <TIM_OC1_SetConfig+0xbe>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a1b      	ldr	r2, [pc, #108]	; (800898c <TIM_OC1_SetConfig+0x110>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d00b      	beq.n	800893a <TIM_OC1_SetConfig+0xbe>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <TIM_OC1_SetConfig+0x114>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d007      	beq.n	800893a <TIM_OC1_SetConfig+0xbe>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a19      	ldr	r2, [pc, #100]	; (8008994 <TIM_OC1_SetConfig+0x118>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <TIM_OC1_SetConfig+0xbe>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a18      	ldr	r2, [pc, #96]	; (8008998 <TIM_OC1_SetConfig+0x11c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d111      	bne.n	800895e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	621a      	str	r2, [r3, #32]
}
 8008978:	bf00      	nop
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	fffeff8f 	.word	0xfffeff8f
 8008988:	40010000 	.word	0x40010000
 800898c:	40010400 	.word	0x40010400
 8008990:	40014000 	.word	0x40014000
 8008994:	40014400 	.word	0x40014400
 8008998:	40014800 	.word	0x40014800

0800899c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f023 0210 	bic.w	r2, r3, #16
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <TIM_OC2_SetConfig+0xfc>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f023 0320 	bic.w	r3, r3, #32
 80089e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a29      	ldr	r2, [pc, #164]	; (8008a9c <TIM_OC2_SetConfig+0x100>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_OC2_SetConfig+0x68>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a28      	ldr	r2, [pc, #160]	; (8008aa0 <TIM_OC2_SetConfig+0x104>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d10d      	bne.n	8008a20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a1e      	ldr	r2, [pc, #120]	; (8008a9c <TIM_OC2_SetConfig+0x100>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00f      	beq.n	8008a48 <TIM_OC2_SetConfig+0xac>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a1d      	ldr	r2, [pc, #116]	; (8008aa0 <TIM_OC2_SetConfig+0x104>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <TIM_OC2_SetConfig+0xac>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <TIM_OC2_SetConfig+0x108>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d007      	beq.n	8008a48 <TIM_OC2_SetConfig+0xac>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1b      	ldr	r2, [pc, #108]	; (8008aa8 <TIM_OC2_SetConfig+0x10c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_OC2_SetConfig+0xac>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a1a      	ldr	r2, [pc, #104]	; (8008aac <TIM_OC2_SetConfig+0x110>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d113      	bne.n	8008a70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	621a      	str	r2, [r3, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	feff8fff 	.word	0xfeff8fff
 8008a9c:	40010000 	.word	0x40010000
 8008aa0:	40010400 	.word	0x40010400
 8008aa4:	40014000 	.word	0x40014000
 8008aa8:	40014400 	.word	0x40014400
 8008aac:	40014800 	.word	0x40014800

08008ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4b33      	ldr	r3, [pc, #204]	; (8008ba8 <TIM_OC3_SetConfig+0xf8>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0303 	bic.w	r3, r3, #3
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a28      	ldr	r2, [pc, #160]	; (8008bac <TIM_OC3_SetConfig+0xfc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_OC3_SetConfig+0x66>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a27      	ldr	r2, [pc, #156]	; (8008bb0 <TIM_OC3_SetConfig+0x100>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d10d      	bne.n	8008b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a1d      	ldr	r2, [pc, #116]	; (8008bac <TIM_OC3_SetConfig+0xfc>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_OC3_SetConfig+0xaa>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1c      	ldr	r2, [pc, #112]	; (8008bb0 <TIM_OC3_SetConfig+0x100>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_OC3_SetConfig+0xaa>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1b      	ldr	r2, [pc, #108]	; (8008bb4 <TIM_OC3_SetConfig+0x104>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_OC3_SetConfig+0xaa>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1a      	ldr	r2, [pc, #104]	; (8008bb8 <TIM_OC3_SetConfig+0x108>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_OC3_SetConfig+0xaa>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a19      	ldr	r2, [pc, #100]	; (8008bbc <TIM_OC3_SetConfig+0x10c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d113      	bne.n	8008b82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	621a      	str	r2, [r3, #32]
}
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	fffeff8f 	.word	0xfffeff8f
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	40010400 	.word	0x40010400
 8008bb4:	40014000 	.word	0x40014000
 8008bb8:	40014400 	.word	0x40014400
 8008bbc:	40014800 	.word	0x40014800

08008bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <TIM_OC4_SetConfig+0xbc>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	021b      	lsls	r3, r3, #8
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	031b      	lsls	r3, r3, #12
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a19      	ldr	r2, [pc, #100]	; (8008c80 <TIM_OC4_SetConfig+0xc0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00f      	beq.n	8008c40 <TIM_OC4_SetConfig+0x80>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a18      	ldr	r2, [pc, #96]	; (8008c84 <TIM_OC4_SetConfig+0xc4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d00b      	beq.n	8008c40 <TIM_OC4_SetConfig+0x80>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a17      	ldr	r2, [pc, #92]	; (8008c88 <TIM_OC4_SetConfig+0xc8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d007      	beq.n	8008c40 <TIM_OC4_SetConfig+0x80>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a16      	ldr	r2, [pc, #88]	; (8008c8c <TIM_OC4_SetConfig+0xcc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_OC4_SetConfig+0x80>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <TIM_OC4_SetConfig+0xd0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d109      	bne.n	8008c54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	019b      	lsls	r3, r3, #6
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	621a      	str	r2, [r3, #32]
}
 8008c6e:	bf00      	nop
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	feff8fff 	.word	0xfeff8fff
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800

08008c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <TIM_OC5_SetConfig+0xb0>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	041b      	lsls	r3, r3, #16
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <TIM_OC5_SetConfig+0xb4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00f      	beq.n	8008d0a <TIM_OC5_SetConfig+0x76>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <TIM_OC5_SetConfig+0xb8>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00b      	beq.n	8008d0a <TIM_OC5_SetConfig+0x76>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <TIM_OC5_SetConfig+0xbc>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d007      	beq.n	8008d0a <TIM_OC5_SetConfig+0x76>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <TIM_OC5_SetConfig+0xc0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d003      	beq.n	8008d0a <TIM_OC5_SetConfig+0x76>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <TIM_OC5_SetConfig+0xc4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d109      	bne.n	8008d1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	621a      	str	r2, [r3, #32]
}
 8008d38:	bf00      	nop
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	fffeff8f 	.word	0xfffeff8f
 8008d48:	40010000 	.word	0x40010000
 8008d4c:	40010400 	.word	0x40010400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4b22      	ldr	r3, [pc, #136]	; (8008e10 <TIM_OC6_SetConfig+0xb4>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	051b      	lsls	r3, r3, #20
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a19      	ldr	r2, [pc, #100]	; (8008e14 <TIM_OC6_SetConfig+0xb8>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00f      	beq.n	8008dd4 <TIM_OC6_SetConfig+0x78>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <TIM_OC6_SetConfig+0xbc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00b      	beq.n	8008dd4 <TIM_OC6_SetConfig+0x78>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a17      	ldr	r2, [pc, #92]	; (8008e1c <TIM_OC6_SetConfig+0xc0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d007      	beq.n	8008dd4 <TIM_OC6_SetConfig+0x78>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <TIM_OC6_SetConfig+0xc4>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d003      	beq.n	8008dd4 <TIM_OC6_SetConfig+0x78>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <TIM_OC6_SetConfig+0xc8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d109      	bne.n	8008de8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	029b      	lsls	r3, r3, #10
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	621a      	str	r2, [r3, #32]
}
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	feff8fff 	.word	0xfeff8fff
 8008e14:	40010000 	.word	0x40010000
 8008e18:	40010400 	.word	0x40010400
 8008e1c:	40014000 	.word	0x40014000
 8008e20:	40014400 	.word	0x40014400
 8008e24:	40014800 	.word	0x40014800

08008e28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4a2c      	ldr	r2, [pc, #176]	; (8008f04 <TIM_TI1_SetConfig+0xdc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d023      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5c:	d01f      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4a29      	ldr	r2, [pc, #164]	; (8008f08 <TIM_TI1_SetConfig+0xe0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01b      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4a28      	ldr	r2, [pc, #160]	; (8008f0c <TIM_TI1_SetConfig+0xe4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d017      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a27      	ldr	r2, [pc, #156]	; (8008f10 <TIM_TI1_SetConfig+0xe8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <TIM_TI1_SetConfig+0xec>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00f      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4a25      	ldr	r2, [pc, #148]	; (8008f18 <TIM_TI1_SetConfig+0xf0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00b      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4a24      	ldr	r2, [pc, #144]	; (8008f1c <TIM_TI1_SetConfig+0xf4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d007      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4a23      	ldr	r2, [pc, #140]	; (8008f20 <TIM_TI1_SetConfig+0xf8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_TI1_SetConfig+0x76>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4a22      	ldr	r2, [pc, #136]	; (8008f24 <TIM_TI1_SetConfig+0xfc>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d101      	bne.n	8008ea2 <TIM_TI1_SetConfig+0x7a>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <TIM_TI1_SetConfig+0x7c>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d008      	beq.n	8008eba <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e003      	b.n	8008ec2 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f043 0301 	orr.w	r3, r3, #1
 8008ec0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f023 030a 	bic.w	r3, r3, #10
 8008edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f003 030a 	and.w	r3, r3, #10
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40000400 	.word	0x40000400
 8008f0c:	40000800 	.word	0x40000800
 8008f10:	40000c00 	.word	0x40000c00
 8008f14:	40010400 	.word	0x40010400
 8008f18:	40001800 	.word	0x40001800
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	4000e000 	.word	0x4000e000
 8008f24:	4000e400 	.word	0x4000e400

08008f28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f023 0210 	bic.w	r2, r3, #16
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	031b      	lsls	r3, r3, #12
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800901a:	b480      	push	{r7}
 800901c:	b087      	sub	sp, #28
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009046:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	021b      	lsls	r3, r3, #8
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	031b      	lsls	r3, r3, #12
 800905e:	b29b      	uxth	r3, r3
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	4313      	orrs	r3, r2
 8009064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800906c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	031b      	lsls	r3, r3, #12
 8009072:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	621a      	str	r2, [r3, #32]
}
 8009088:	bf00      	nop
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e077      	b.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a35      	ldr	r2, [pc, #212]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d004      	beq.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a34      	ldr	r2, [pc, #208]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d108      	bne.n	80090f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a25      	ldr	r2, [pc, #148]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d02c      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d027      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a22      	ldr	r2, [pc, #136]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d022      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a21      	ldr	r2, [pc, #132]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d01d      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1f      	ldr	r2, [pc, #124]	; (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d018      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1a      	ldr	r2, [pc, #104]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d013      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1b      	ldr	r2, [pc, #108]	; (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00e      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1a      	ldr	r2, [pc, #104]	; (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d009      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d004      	beq.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10c      	bne.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	4313      	orrs	r3, r2
 8009180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	40010000 	.word	0x40010000
 80091ac:	40010400 	.word	0x40010400
 80091b0:	40000400 	.word	0x40000400
 80091b4:	40000800 	.word	0x40000800
 80091b8:	40000c00 	.word	0x40000c00
 80091bc:	40001800 	.word	0x40001800
 80091c0:	40014000 	.word	0x40014000
 80091c4:	4000e000 	.word	0x4000e000
 80091c8:	4000e400 	.word	0x4000e400

080091cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e087      	b.n	80092f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	4313      	orrs	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	4313      	orrs	r3, r2
 8009242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	041b      	lsls	r3, r3, #16
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a27      	ldr	r2, [pc, #156]	; (8009304 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d004      	beq.n	8009276 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a25      	ldr	r2, [pc, #148]	; (8009308 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d106      	bne.n	8009284 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1d      	ldr	r2, [pc, #116]	; (8009308 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d126      	bne.n	80092e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a2:	051b      	lsls	r3, r3, #20
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a0e      	ldr	r2, [pc, #56]	; (8009304 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d004      	beq.n	80092d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d106      	bne.n	80092e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	40010000 	.word	0x40010000
 8009308:	40010400 	.word	0x40010400

0800930c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e042      	b.n	80093e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7f8 fe4f 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2224      	movs	r2, #36	; 0x24
 8009376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0201 	bic.w	r2, r2, #1
 8009388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f82c 	bl	80093e8 <UART_SetConfig>
 8009390:	4603      	mov	r3, r0
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e022      	b.n	80093e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fe7e 	bl	800a0a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 0201 	orr.w	r2, r2, #1
 80093d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 ff05 	bl	800a1e8 <UART_CheckIdleState>
 80093de:	4603      	mov	r3, r0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093e8:	b5b0      	push	{r4, r5, r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	431a      	orrs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	4313      	orrs	r3, r2
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	4bbf      	ldr	r3, [pc, #764]	; (8009714 <UART_SetConfig+0x32c>)
 8009416:	4013      	ands	r3, r2
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800941e:	430b      	orrs	r3, r1
 8009420:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4ab5      	ldr	r2, [pc, #724]	; (8009718 <UART_SetConfig+0x330>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d004      	beq.n	8009452 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800944e:	4313      	orrs	r3, r2
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	4bb0      	ldr	r3, [pc, #704]	; (800971c <UART_SetConfig+0x334>)
 800945a:	4013      	ands	r3, r2
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009462:	430b      	orrs	r3, r1
 8009464:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	f023 010f 	bic.w	r1, r3, #15
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4aa7      	ldr	r2, [pc, #668]	; (8009720 <UART_SetConfig+0x338>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d176      	bne.n	8009574 <UART_SetConfig+0x18c>
 8009486:	4ba7      	ldr	r3, [pc, #668]	; (8009724 <UART_SetConfig+0x33c>)
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800948e:	2b28      	cmp	r3, #40	; 0x28
 8009490:	d86c      	bhi.n	800956c <UART_SetConfig+0x184>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <UART_SetConfig+0xb0>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	0800953d 	.word	0x0800953d
 800949c:	0800956d 	.word	0x0800956d
 80094a0:	0800956d 	.word	0x0800956d
 80094a4:	0800956d 	.word	0x0800956d
 80094a8:	0800956d 	.word	0x0800956d
 80094ac:	0800956d 	.word	0x0800956d
 80094b0:	0800956d 	.word	0x0800956d
 80094b4:	0800956d 	.word	0x0800956d
 80094b8:	08009545 	.word	0x08009545
 80094bc:	0800956d 	.word	0x0800956d
 80094c0:	0800956d 	.word	0x0800956d
 80094c4:	0800956d 	.word	0x0800956d
 80094c8:	0800956d 	.word	0x0800956d
 80094cc:	0800956d 	.word	0x0800956d
 80094d0:	0800956d 	.word	0x0800956d
 80094d4:	0800956d 	.word	0x0800956d
 80094d8:	0800954d 	.word	0x0800954d
 80094dc:	0800956d 	.word	0x0800956d
 80094e0:	0800956d 	.word	0x0800956d
 80094e4:	0800956d 	.word	0x0800956d
 80094e8:	0800956d 	.word	0x0800956d
 80094ec:	0800956d 	.word	0x0800956d
 80094f0:	0800956d 	.word	0x0800956d
 80094f4:	0800956d 	.word	0x0800956d
 80094f8:	08009555 	.word	0x08009555
 80094fc:	0800956d 	.word	0x0800956d
 8009500:	0800956d 	.word	0x0800956d
 8009504:	0800956d 	.word	0x0800956d
 8009508:	0800956d 	.word	0x0800956d
 800950c:	0800956d 	.word	0x0800956d
 8009510:	0800956d 	.word	0x0800956d
 8009514:	0800956d 	.word	0x0800956d
 8009518:	0800955d 	.word	0x0800955d
 800951c:	0800956d 	.word	0x0800956d
 8009520:	0800956d 	.word	0x0800956d
 8009524:	0800956d 	.word	0x0800956d
 8009528:	0800956d 	.word	0x0800956d
 800952c:	0800956d 	.word	0x0800956d
 8009530:	0800956d 	.word	0x0800956d
 8009534:	0800956d 	.word	0x0800956d
 8009538:	08009565 	.word	0x08009565
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009542:	e326      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954a:	e322      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e31e      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e31a      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e316      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956a:	e312      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800956c:	2380      	movs	r3, #128	; 0x80
 800956e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009572:	e30e      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a6b      	ldr	r2, [pc, #428]	; (8009728 <UART_SetConfig+0x340>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x1f8>
 800957e:	4b69      	ldr	r3, [pc, #420]	; (8009724 <UART_SetConfig+0x33c>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x1f0>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <UART_SetConfig+0x1a8>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e2f0      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e2ec      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e2e8      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e2e4      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e2e0      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095d0:	2340      	movs	r3, #64	; 0x40
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e2dc      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095d8:	2380      	movs	r3, #128	; 0x80
 80095da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095de:	e2d8      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a51      	ldr	r2, [pc, #324]	; (800972c <UART_SetConfig+0x344>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d130      	bne.n	800964c <UART_SetConfig+0x264>
 80095ea:	4b4e      	ldr	r3, [pc, #312]	; (8009724 <UART_SetConfig+0x33c>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d826      	bhi.n	8009644 <UART_SetConfig+0x25c>
 80095f6:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0x214>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009635 	.word	0x08009635
 8009610:	0800963d 	.word	0x0800963d
 8009614:	2300      	movs	r3, #0
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e2ba      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009622:	e2b6      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	e2b2      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e2ae      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009634:	2320      	movs	r3, #32
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e2aa      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800963c:	2340      	movs	r3, #64	; 0x40
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e2a6      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009644:	2380      	movs	r3, #128	; 0x80
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e2a2      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a37      	ldr	r2, [pc, #220]	; (8009730 <UART_SetConfig+0x348>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d130      	bne.n	80096b8 <UART_SetConfig+0x2d0>
 8009656:	4b33      	ldr	r3, [pc, #204]	; (8009724 <UART_SetConfig+0x33c>)
 8009658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	2b05      	cmp	r3, #5
 8009660:	d826      	bhi.n	80096b0 <UART_SetConfig+0x2c8>
 8009662:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <UART_SetConfig+0x280>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009681 	.word	0x08009681
 800966c:	08009689 	.word	0x08009689
 8009670:	08009691 	.word	0x08009691
 8009674:	08009699 	.word	0x08009699
 8009678:	080096a1 	.word	0x080096a1
 800967c:	080096a9 	.word	0x080096a9
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009686:	e284      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e280      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e27c      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e278      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80096a0:	2320      	movs	r3, #32
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e274      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e270      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80096b0:	2380      	movs	r3, #128	; 0x80
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e26c      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a1d      	ldr	r2, [pc, #116]	; (8009734 <UART_SetConfig+0x34c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d142      	bne.n	8009748 <UART_SetConfig+0x360>
 80096c2:	4b18      	ldr	r3, [pc, #96]	; (8009724 <UART_SetConfig+0x33c>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	d838      	bhi.n	8009740 <UART_SetConfig+0x358>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <UART_SetConfig+0x2ec>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096ed 	.word	0x080096ed
 80096d8:	080096f5 	.word	0x080096f5
 80096dc:	080096fd 	.word	0x080096fd
 80096e0:	08009705 	.word	0x08009705
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	08009739 	.word	0x08009739
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e24e      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80096f4:	2304      	movs	r3, #4
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e24a      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80096fc:	2308      	movs	r3, #8
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e246      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009704:	2310      	movs	r3, #16
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	e242      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800970c:	2320      	movs	r3, #32
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009712:	e23e      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009714:	cfff69f3 	.word	0xcfff69f3
 8009718:	58000c00 	.word	0x58000c00
 800971c:	11fff4ff 	.word	0x11fff4ff
 8009720:	40011000 	.word	0x40011000
 8009724:	58024400 	.word	0x58024400
 8009728:	40004400 	.word	0x40004400
 800972c:	40004800 	.word	0x40004800
 8009730:	40004c00 	.word	0x40004c00
 8009734:	40005000 	.word	0x40005000
 8009738:	2340      	movs	r3, #64	; 0x40
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e228      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009740:	2380      	movs	r3, #128	; 0x80
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e224      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4ab1      	ldr	r2, [pc, #708]	; (8009a14 <UART_SetConfig+0x62c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d176      	bne.n	8009840 <UART_SetConfig+0x458>
 8009752:	4bb1      	ldr	r3, [pc, #708]	; (8009a18 <UART_SetConfig+0x630>)
 8009754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800975a:	2b28      	cmp	r3, #40	; 0x28
 800975c:	d86c      	bhi.n	8009838 <UART_SetConfig+0x450>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <UART_SetConfig+0x37c>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	08009809 	.word	0x08009809
 8009768:	08009839 	.word	0x08009839
 800976c:	08009839 	.word	0x08009839
 8009770:	08009839 	.word	0x08009839
 8009774:	08009839 	.word	0x08009839
 8009778:	08009839 	.word	0x08009839
 800977c:	08009839 	.word	0x08009839
 8009780:	08009839 	.word	0x08009839
 8009784:	08009811 	.word	0x08009811
 8009788:	08009839 	.word	0x08009839
 800978c:	08009839 	.word	0x08009839
 8009790:	08009839 	.word	0x08009839
 8009794:	08009839 	.word	0x08009839
 8009798:	08009839 	.word	0x08009839
 800979c:	08009839 	.word	0x08009839
 80097a0:	08009839 	.word	0x08009839
 80097a4:	08009819 	.word	0x08009819
 80097a8:	08009839 	.word	0x08009839
 80097ac:	08009839 	.word	0x08009839
 80097b0:	08009839 	.word	0x08009839
 80097b4:	08009839 	.word	0x08009839
 80097b8:	08009839 	.word	0x08009839
 80097bc:	08009839 	.word	0x08009839
 80097c0:	08009839 	.word	0x08009839
 80097c4:	08009821 	.word	0x08009821
 80097c8:	08009839 	.word	0x08009839
 80097cc:	08009839 	.word	0x08009839
 80097d0:	08009839 	.word	0x08009839
 80097d4:	08009839 	.word	0x08009839
 80097d8:	08009839 	.word	0x08009839
 80097dc:	08009839 	.word	0x08009839
 80097e0:	08009839 	.word	0x08009839
 80097e4:	08009829 	.word	0x08009829
 80097e8:	08009839 	.word	0x08009839
 80097ec:	08009839 	.word	0x08009839
 80097f0:	08009839 	.word	0x08009839
 80097f4:	08009839 	.word	0x08009839
 80097f8:	08009839 	.word	0x08009839
 80097fc:	08009839 	.word	0x08009839
 8009800:	08009839 	.word	0x08009839
 8009804:	08009831 	.word	0x08009831
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e1c0      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e1bc      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e1b8      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e1b4      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e1b0      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009830:	2340      	movs	r3, #64	; 0x40
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e1ac      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009838:	2380      	movs	r3, #128	; 0x80
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e1a8      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a75      	ldr	r2, [pc, #468]	; (8009a1c <UART_SetConfig+0x634>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d130      	bne.n	80098ac <UART_SetConfig+0x4c4>
 800984a:	4b73      	ldr	r3, [pc, #460]	; (8009a18 <UART_SetConfig+0x630>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d826      	bhi.n	80098a4 <UART_SetConfig+0x4bc>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x474>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e18a      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e186      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e182      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e17e      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e17a      	b.n	8009b92 <UART_SetConfig+0x7aa>
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e176      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e172      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a5b      	ldr	r2, [pc, #364]	; (8009a20 <UART_SetConfig+0x638>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d130      	bne.n	8009918 <UART_SetConfig+0x530>
 80098b6:	4b58      	ldr	r3, [pc, #352]	; (8009a18 <UART_SetConfig+0x630>)
 80098b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d826      	bhi.n	8009910 <UART_SetConfig+0x528>
 80098c2:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <UART_SetConfig+0x4e0>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098e9 	.word	0x080098e9
 80098d0:	080098f1 	.word	0x080098f1
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009909 	.word	0x08009909
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e154      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e150      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e14c      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e148      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009900:	2320      	movs	r3, #32
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e144      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e140      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009910:	2380      	movs	r3, #128	; 0x80
 8009912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009916:	e13c      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a41      	ldr	r2, [pc, #260]	; (8009a24 <UART_SetConfig+0x63c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	f040 8082 	bne.w	8009a28 <UART_SetConfig+0x640>
 8009924:	4b3c      	ldr	r3, [pc, #240]	; (8009a18 <UART_SetConfig+0x630>)
 8009926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800992c:	2b28      	cmp	r3, #40	; 0x28
 800992e:	d86d      	bhi.n	8009a0c <UART_SetConfig+0x624>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <UART_SetConfig+0x550>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	080099dd 	.word	0x080099dd
 800993c:	08009a0d 	.word	0x08009a0d
 8009940:	08009a0d 	.word	0x08009a0d
 8009944:	08009a0d 	.word	0x08009a0d
 8009948:	08009a0d 	.word	0x08009a0d
 800994c:	08009a0d 	.word	0x08009a0d
 8009950:	08009a0d 	.word	0x08009a0d
 8009954:	08009a0d 	.word	0x08009a0d
 8009958:	080099e5 	.word	0x080099e5
 800995c:	08009a0d 	.word	0x08009a0d
 8009960:	08009a0d 	.word	0x08009a0d
 8009964:	08009a0d 	.word	0x08009a0d
 8009968:	08009a0d 	.word	0x08009a0d
 800996c:	08009a0d 	.word	0x08009a0d
 8009970:	08009a0d 	.word	0x08009a0d
 8009974:	08009a0d 	.word	0x08009a0d
 8009978:	080099ed 	.word	0x080099ed
 800997c:	08009a0d 	.word	0x08009a0d
 8009980:	08009a0d 	.word	0x08009a0d
 8009984:	08009a0d 	.word	0x08009a0d
 8009988:	08009a0d 	.word	0x08009a0d
 800998c:	08009a0d 	.word	0x08009a0d
 8009990:	08009a0d 	.word	0x08009a0d
 8009994:	08009a0d 	.word	0x08009a0d
 8009998:	080099f5 	.word	0x080099f5
 800999c:	08009a0d 	.word	0x08009a0d
 80099a0:	08009a0d 	.word	0x08009a0d
 80099a4:	08009a0d 	.word	0x08009a0d
 80099a8:	08009a0d 	.word	0x08009a0d
 80099ac:	08009a0d 	.word	0x08009a0d
 80099b0:	08009a0d 	.word	0x08009a0d
 80099b4:	08009a0d 	.word	0x08009a0d
 80099b8:	080099fd 	.word	0x080099fd
 80099bc:	08009a0d 	.word	0x08009a0d
 80099c0:	08009a0d 	.word	0x08009a0d
 80099c4:	08009a0d 	.word	0x08009a0d
 80099c8:	08009a0d 	.word	0x08009a0d
 80099cc:	08009a0d 	.word	0x08009a0d
 80099d0:	08009a0d 	.word	0x08009a0d
 80099d4:	08009a0d 	.word	0x08009a0d
 80099d8:	08009a05 	.word	0x08009a05
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e0d6      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e0d2      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e0ce      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e0ca      	b.n	8009b92 <UART_SetConfig+0x7aa>
 80099fc:	2320      	movs	r3, #32
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e0c6      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e0c2      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e0be      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009a14:	40011400 	.word	0x40011400
 8009a18:	58024400 	.word	0x58024400
 8009a1c:	40007800 	.word	0x40007800
 8009a20:	40007c00 	.word	0x40007c00
 8009a24:	40011800 	.word	0x40011800
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4aad      	ldr	r2, [pc, #692]	; (8009ce4 <UART_SetConfig+0x8fc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d176      	bne.n	8009b20 <UART_SetConfig+0x738>
 8009a32:	4bad      	ldr	r3, [pc, #692]	; (8009ce8 <UART_SetConfig+0x900>)
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a3a:	2b28      	cmp	r3, #40	; 0x28
 8009a3c:	d86c      	bhi.n	8009b18 <UART_SetConfig+0x730>
 8009a3e:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <UART_SetConfig+0x65c>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009ae9 	.word	0x08009ae9
 8009a48:	08009b19 	.word	0x08009b19
 8009a4c:	08009b19 	.word	0x08009b19
 8009a50:	08009b19 	.word	0x08009b19
 8009a54:	08009b19 	.word	0x08009b19
 8009a58:	08009b19 	.word	0x08009b19
 8009a5c:	08009b19 	.word	0x08009b19
 8009a60:	08009b19 	.word	0x08009b19
 8009a64:	08009af1 	.word	0x08009af1
 8009a68:	08009b19 	.word	0x08009b19
 8009a6c:	08009b19 	.word	0x08009b19
 8009a70:	08009b19 	.word	0x08009b19
 8009a74:	08009b19 	.word	0x08009b19
 8009a78:	08009b19 	.word	0x08009b19
 8009a7c:	08009b19 	.word	0x08009b19
 8009a80:	08009b19 	.word	0x08009b19
 8009a84:	08009af9 	.word	0x08009af9
 8009a88:	08009b19 	.word	0x08009b19
 8009a8c:	08009b19 	.word	0x08009b19
 8009a90:	08009b19 	.word	0x08009b19
 8009a94:	08009b19 	.word	0x08009b19
 8009a98:	08009b19 	.word	0x08009b19
 8009a9c:	08009b19 	.word	0x08009b19
 8009aa0:	08009b19 	.word	0x08009b19
 8009aa4:	08009b01 	.word	0x08009b01
 8009aa8:	08009b19 	.word	0x08009b19
 8009aac:	08009b19 	.word	0x08009b19
 8009ab0:	08009b19 	.word	0x08009b19
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009b19 	.word	0x08009b19
 8009abc:	08009b19 	.word	0x08009b19
 8009ac0:	08009b19 	.word	0x08009b19
 8009ac4:	08009b09 	.word	0x08009b09
 8009ac8:	08009b19 	.word	0x08009b19
 8009acc:	08009b19 	.word	0x08009b19
 8009ad0:	08009b19 	.word	0x08009b19
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b19 	.word	0x08009b19
 8009adc:	08009b19 	.word	0x08009b19
 8009ae0:	08009b19 	.word	0x08009b19
 8009ae4:	08009b11 	.word	0x08009b11
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e050      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009af0:	2304      	movs	r3, #4
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e04c      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009af8:	2308      	movs	r3, #8
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e048      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b00:	2310      	movs	r3, #16
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e044      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0e:	e040      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b16:	e03c      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1e:	e038      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a71      	ldr	r2, [pc, #452]	; (8009cec <UART_SetConfig+0x904>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d130      	bne.n	8009b8c <UART_SetConfig+0x7a4>
 8009b2a:	4b6f      	ldr	r3, [pc, #444]	; (8009ce8 <UART_SetConfig+0x900>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d826      	bhi.n	8009b84 <UART_SetConfig+0x79c>
 8009b36:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <UART_SetConfig+0x754>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b5d 	.word	0x08009b5d
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b75 	.word	0x08009b75
 8009b50:	08009b7d 	.word	0x08009b7d
 8009b54:	2302      	movs	r3, #2
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e01a      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e016      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e012      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e00e      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b74:	2320      	movs	r3, #32
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e00a      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b7c:	2340      	movs	r3, #64	; 0x40
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e006      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b84:	2380      	movs	r3, #128	; 0x80
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e002      	b.n	8009b92 <UART_SetConfig+0x7aa>
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a55      	ldr	r2, [pc, #340]	; (8009cec <UART_SetConfig+0x904>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f040 80f0 	bne.w	8009d7e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	dc46      	bgt.n	8009c34 <UART_SetConfig+0x84c>
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	db75      	blt.n	8009c96 <UART_SetConfig+0x8ae>
 8009baa:	3b02      	subs	r3, #2
 8009bac:	2b1e      	cmp	r3, #30
 8009bae:	d872      	bhi.n	8009c96 <UART_SetConfig+0x8ae>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x7d0>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009c3b 	.word	0x08009c3b
 8009bbc:	08009c97 	.word	0x08009c97
 8009bc0:	08009c43 	.word	0x08009c43
 8009bc4:	08009c97 	.word	0x08009c97
 8009bc8:	08009c97 	.word	0x08009c97
 8009bcc:	08009c97 	.word	0x08009c97
 8009bd0:	08009c53 	.word	0x08009c53
 8009bd4:	08009c97 	.word	0x08009c97
 8009bd8:	08009c97 	.word	0x08009c97
 8009bdc:	08009c97 	.word	0x08009c97
 8009be0:	08009c97 	.word	0x08009c97
 8009be4:	08009c97 	.word	0x08009c97
 8009be8:	08009c97 	.word	0x08009c97
 8009bec:	08009c97 	.word	0x08009c97
 8009bf0:	08009c63 	.word	0x08009c63
 8009bf4:	08009c97 	.word	0x08009c97
 8009bf8:	08009c97 	.word	0x08009c97
 8009bfc:	08009c97 	.word	0x08009c97
 8009c00:	08009c97 	.word	0x08009c97
 8009c04:	08009c97 	.word	0x08009c97
 8009c08:	08009c97 	.word	0x08009c97
 8009c0c:	08009c97 	.word	0x08009c97
 8009c10:	08009c97 	.word	0x08009c97
 8009c14:	08009c97 	.word	0x08009c97
 8009c18:	08009c97 	.word	0x08009c97
 8009c1c:	08009c97 	.word	0x08009c97
 8009c20:	08009c97 	.word	0x08009c97
 8009c24:	08009c97 	.word	0x08009c97
 8009c28:	08009c97 	.word	0x08009c97
 8009c2c:	08009c97 	.word	0x08009c97
 8009c30:	08009c89 	.word	0x08009c89
 8009c34:	2b40      	cmp	r3, #64	; 0x40
 8009c36:	d02a      	beq.n	8009c8e <UART_SetConfig+0x8a6>
 8009c38:	e02d      	b.n	8009c96 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c3a:	f7fd fb4f 	bl	80072dc <HAL_RCCEx_GetD3PCLK1Freq>
 8009c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c40:	e02f      	b.n	8009ca2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c42:	f107 0314 	add.w	r3, r7, #20
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fd fb5e 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c50:	e027      	b.n	8009ca2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c52:	f107 0308 	add.w	r3, r7, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fd fcaa 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c60:	e01f      	b.n	8009ca2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c62:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <UART_SetConfig+0x900>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c6e:	4b1e      	ldr	r3, [pc, #120]	; (8009ce8 <UART_SetConfig+0x900>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	4a1d      	ldr	r2, [pc, #116]	; (8009cf0 <UART_SetConfig+0x908>)
 8009c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c80:	e00f      	b.n	8009ca2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <UART_SetConfig+0x908>)
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c86:	e00c      	b.n	8009ca2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c88:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <UART_SetConfig+0x90c>)
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c8c:	e009      	b.n	8009ca2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c94:	e005      	b.n	8009ca2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 81e6 	beq.w	800a076 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	4a12      	ldr	r2, [pc, #72]	; (8009cf8 <UART_SetConfig+0x910>)
 8009cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cbc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	4413      	add	r3, r2
 8009cc8:	6a3a      	ldr	r2, [r7, #32]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d305      	bcc.n	8009cda <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cd4:	6a3a      	ldr	r2, [r7, #32]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d910      	bls.n	8009cfc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ce0:	e1c9      	b.n	800a076 <UART_SetConfig+0xc8e>
 8009ce2:	bf00      	nop
 8009ce4:	40011c00 	.word	0x40011c00
 8009ce8:	58024400 	.word	0x58024400
 8009cec:	58000c00 	.word	0x58000c00
 8009cf0:	03d09000 	.word	0x03d09000
 8009cf4:	003d0900 	.word	0x003d0900
 8009cf8:	0800a6fc 	.word	0x0800a6fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	4ac1      	ldr	r2, [pc, #772]	; (800a010 <UART_SetConfig+0xc28>)
 8009d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	f04f 0300 	mov.w	r3, #0
 8009d14:	f7f6 fafa 	bl	800030c <__aeabi_uldivmod>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	020b      	lsls	r3, r1, #8
 8009d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d2e:	0202      	lsls	r2, r0, #8
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	6849      	ldr	r1, [r1, #4]
 8009d34:	0849      	lsrs	r1, r1, #1
 8009d36:	4608      	mov	r0, r1
 8009d38:	f04f 0100 	mov.w	r1, #0
 8009d3c:	1814      	adds	r4, r2, r0
 8009d3e:	eb43 0501 	adc.w	r5, r3, r1
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f7f6 fadc 	bl	800030c <__aeabi_uldivmod>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4613      	mov	r3, r2
 8009d5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d62:	d308      	bcc.n	8009d76 <UART_SetConfig+0x98e>
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6a:	d204      	bcs.n	8009d76 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d72:	60da      	str	r2, [r3, #12]
 8009d74:	e17f      	b.n	800a076 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d7c:	e17b      	b.n	800a076 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d86:	f040 80bd 	bne.w	8009f04 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8009d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	dc48      	bgt.n	8009e24 <UART_SetConfig+0xa3c>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	db7b      	blt.n	8009e8e <UART_SetConfig+0xaa6>
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	d879      	bhi.n	8009e8e <UART_SetConfig+0xaa6>
 8009d9a:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <UART_SetConfig+0x9b8>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009e2b 	.word	0x08009e2b
 8009da4:	08009e33 	.word	0x08009e33
 8009da8:	08009e8f 	.word	0x08009e8f
 8009dac:	08009e8f 	.word	0x08009e8f
 8009db0:	08009e3b 	.word	0x08009e3b
 8009db4:	08009e8f 	.word	0x08009e8f
 8009db8:	08009e8f 	.word	0x08009e8f
 8009dbc:	08009e8f 	.word	0x08009e8f
 8009dc0:	08009e4b 	.word	0x08009e4b
 8009dc4:	08009e8f 	.word	0x08009e8f
 8009dc8:	08009e8f 	.word	0x08009e8f
 8009dcc:	08009e8f 	.word	0x08009e8f
 8009dd0:	08009e8f 	.word	0x08009e8f
 8009dd4:	08009e8f 	.word	0x08009e8f
 8009dd8:	08009e8f 	.word	0x08009e8f
 8009ddc:	08009e8f 	.word	0x08009e8f
 8009de0:	08009e5b 	.word	0x08009e5b
 8009de4:	08009e8f 	.word	0x08009e8f
 8009de8:	08009e8f 	.word	0x08009e8f
 8009dec:	08009e8f 	.word	0x08009e8f
 8009df0:	08009e8f 	.word	0x08009e8f
 8009df4:	08009e8f 	.word	0x08009e8f
 8009df8:	08009e8f 	.word	0x08009e8f
 8009dfc:	08009e8f 	.word	0x08009e8f
 8009e00:	08009e8f 	.word	0x08009e8f
 8009e04:	08009e8f 	.word	0x08009e8f
 8009e08:	08009e8f 	.word	0x08009e8f
 8009e0c:	08009e8f 	.word	0x08009e8f
 8009e10:	08009e8f 	.word	0x08009e8f
 8009e14:	08009e8f 	.word	0x08009e8f
 8009e18:	08009e8f 	.word	0x08009e8f
 8009e1c:	08009e8f 	.word	0x08009e8f
 8009e20:	08009e81 	.word	0x08009e81
 8009e24:	2b40      	cmp	r3, #64	; 0x40
 8009e26:	d02e      	beq.n	8009e86 <UART_SetConfig+0xa9e>
 8009e28:	e031      	b.n	8009e8e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e2a:	f7fb ff0d 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 8009e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e30:	e033      	b.n	8009e9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e32:	f7fb ff1f 	bl	8005c74 <HAL_RCC_GetPCLK2Freq>
 8009e36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e38:	e02f      	b.n	8009e9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e3a:	f107 0314 	add.w	r3, r7, #20
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fd fa62 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e48:	e027      	b.n	8009e9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fd fbae 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e58:	e01f      	b.n	8009e9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e5a:	4b6e      	ldr	r3, [pc, #440]	; (800a014 <UART_SetConfig+0xc2c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0320 	and.w	r3, r3, #32
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d009      	beq.n	8009e7a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e66:	4b6b      	ldr	r3, [pc, #428]	; (800a014 <UART_SetConfig+0xc2c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	08db      	lsrs	r3, r3, #3
 8009e6c:	f003 0303 	and.w	r3, r3, #3
 8009e70:	4a69      	ldr	r2, [pc, #420]	; (800a018 <UART_SetConfig+0xc30>)
 8009e72:	fa22 f303 	lsr.w	r3, r2, r3
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e78:	e00f      	b.n	8009e9a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009e7a:	4b67      	ldr	r3, [pc, #412]	; (800a018 <UART_SetConfig+0xc30>)
 8009e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e7e:	e00c      	b.n	8009e9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e80:	4b66      	ldr	r3, [pc, #408]	; (800a01c <UART_SetConfig+0xc34>)
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e84:	e009      	b.n	8009e9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e8c:	e005      	b.n	8009e9a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80ea 	beq.w	800a076 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	4a5a      	ldr	r2, [pc, #360]	; (800a010 <UART_SetConfig+0xc28>)
 8009ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eac:	461a      	mov	r2, r3
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb4:	005a      	lsls	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	085b      	lsrs	r3, r3, #1
 8009ebc:	441a      	add	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	2b0f      	cmp	r3, #15
 8009ecc:	d916      	bls.n	8009efc <UART_SetConfig+0xb14>
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed4:	d212      	bcs.n	8009efc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	f023 030f 	bic.w	r3, r3, #15
 8009ede:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ef8:	60da      	str	r2, [r3, #12]
 8009efa:	e0bc      	b.n	800a076 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f02:	e0b8      	b.n	800a076 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	dc4b      	bgt.n	8009fa4 <UART_SetConfig+0xbbc>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f2c0 8087 	blt.w	800a020 <UART_SetConfig+0xc38>
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	f200 8084 	bhi.w	800a020 <UART_SetConfig+0xc38>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <UART_SetConfig+0xb38>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009fab 	.word	0x08009fab
 8009f24:	08009fb3 	.word	0x08009fb3
 8009f28:	0800a021 	.word	0x0800a021
 8009f2c:	0800a021 	.word	0x0800a021
 8009f30:	08009fbb 	.word	0x08009fbb
 8009f34:	0800a021 	.word	0x0800a021
 8009f38:	0800a021 	.word	0x0800a021
 8009f3c:	0800a021 	.word	0x0800a021
 8009f40:	08009fcb 	.word	0x08009fcb
 8009f44:	0800a021 	.word	0x0800a021
 8009f48:	0800a021 	.word	0x0800a021
 8009f4c:	0800a021 	.word	0x0800a021
 8009f50:	0800a021 	.word	0x0800a021
 8009f54:	0800a021 	.word	0x0800a021
 8009f58:	0800a021 	.word	0x0800a021
 8009f5c:	0800a021 	.word	0x0800a021
 8009f60:	08009fdb 	.word	0x08009fdb
 8009f64:	0800a021 	.word	0x0800a021
 8009f68:	0800a021 	.word	0x0800a021
 8009f6c:	0800a021 	.word	0x0800a021
 8009f70:	0800a021 	.word	0x0800a021
 8009f74:	0800a021 	.word	0x0800a021
 8009f78:	0800a021 	.word	0x0800a021
 8009f7c:	0800a021 	.word	0x0800a021
 8009f80:	0800a021 	.word	0x0800a021
 8009f84:	0800a021 	.word	0x0800a021
 8009f88:	0800a021 	.word	0x0800a021
 8009f8c:	0800a021 	.word	0x0800a021
 8009f90:	0800a021 	.word	0x0800a021
 8009f94:	0800a021 	.word	0x0800a021
 8009f98:	0800a021 	.word	0x0800a021
 8009f9c:	0800a021 	.word	0x0800a021
 8009fa0:	0800a001 	.word	0x0800a001
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d02e      	beq.n	800a006 <UART_SetConfig+0xc1e>
 8009fa8:	e03a      	b.n	800a020 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009faa:	f7fb fe4d 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 8009fae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fb0:	e03c      	b.n	800a02c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fb2:	f7fb fe5f 	bl	8005c74 <HAL_RCC_GetPCLK2Freq>
 8009fb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fb8:	e038      	b.n	800a02c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fba:	f107 0314 	add.w	r3, r7, #20
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd f9a2 	bl	8007308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fc8:	e030      	b.n	800a02c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fd faee 	bl	80075b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fd8:	e028      	b.n	800a02c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fda:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <UART_SetConfig+0xc2c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0320 	and.w	r3, r3, #32
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <UART_SetConfig+0xc2c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	08db      	lsrs	r3, r3, #3
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	4a09      	ldr	r2, [pc, #36]	; (800a018 <UART_SetConfig+0xc30>)
 8009ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ff8:	e018      	b.n	800a02c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8009ffa:	4b07      	ldr	r3, [pc, #28]	; (800a018 <UART_SetConfig+0xc30>)
 8009ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ffe:	e015      	b.n	800a02c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <UART_SetConfig+0xc34>)
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a004:	e012      	b.n	800a02c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a00c:	e00e      	b.n	800a02c <UART_SetConfig+0xc44>
 800a00e:	bf00      	nop
 800a010:	0800a6fc 	.word	0x0800a6fc
 800a014:	58024400 	.word	0x58024400
 800a018:	03d09000 	.word	0x03d09000
 800a01c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a020:	2300      	movs	r3, #0
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a02a:	bf00      	nop
    }

    if (pclk != 0U)
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d021      	beq.n	800a076 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	4a1a      	ldr	r2, [pc, #104]	; (800a0a0 <UART_SetConfig+0xcb8>)
 800a038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a03c:	461a      	mov	r2, r3
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	fbb3 f2f2 	udiv	r2, r3, r2
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	085b      	lsrs	r3, r3, #1
 800a04a:	441a      	add	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	fbb2 f3f3 	udiv	r3, r2, r3
 800a054:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	2b0f      	cmp	r3, #15
 800a05a:	d909      	bls.n	800a070 <UART_SetConfig+0xc88>
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a062:	d205      	bcs.n	800a070 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e002      	b.n	800a076 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a092:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a096:	4618      	mov	r0, r3
 800a098:	3738      	adds	r7, #56	; 0x38
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bdb0      	pop	{r4, r5, r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	0800a6fc 	.word	0x0800a6fc

0800a0a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	f003 0308 	and.w	r3, r3, #8
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	f003 0310 	and.w	r3, r3, #16
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00a      	beq.n	800a156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a180:	2b00      	cmp	r3, #0
 800a182:	d01a      	beq.n	800a1ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1a2:	d10a      	bne.n	800a1ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	605a      	str	r2, [r3, #4]
  }
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1f8:	f7f8 f924 	bl	8002444 <HAL_GetTick>
 800a1fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0308 	and.w	r3, r3, #8
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d10e      	bne.n	800a22a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a20c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f82f 	bl	800a27e <UART_WaitOnFlagUntilTimeout>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e025      	b.n	800a276 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b04      	cmp	r3, #4
 800a236:	d10e      	bne.n	800a256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f819 	bl	800a27e <UART_WaitOnFlagUntilTimeout>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e00f      	b.n	800a276 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2220      	movs	r2, #32
 800a25a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b09c      	sub	sp, #112	; 0x70
 800a282:	af00      	add	r7, sp, #0
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	603b      	str	r3, [r7, #0]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a28e:	e0a9      	b.n	800a3e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a296:	f000 80a5 	beq.w	800a3e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29a:	f7f8 f8d3 	bl	8002444 <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d302      	bcc.n	800a2b0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a2aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d140      	bne.n	800a332 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2c4:	667b      	str	r3, [r7, #100]	; 0x64
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a2dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e6      	bne.n	800a2b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	f023 0301 	bic.w	r3, r3, #1
 800a2f8:	663b      	str	r3, [r7, #96]	; 0x60
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3308      	adds	r3, #8
 800a300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a302:	64ba      	str	r2, [r7, #72]	; 0x48
 800a304:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e5      	bne.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e069      	b.n	800a406 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d051      	beq.n	800a3e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a34e:	d149      	bne.n	800a3e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a358:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a36e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	637b      	str	r3, [r7, #52]	; 0x34
 800a37a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e6      	bne.n	800a35a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3308      	adds	r3, #8
 800a392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	e853 3f00 	ldrex	r3, [r3]
 800a39a:	613b      	str	r3, [r7, #16]
   return(result);
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f023 0301 	bic.w	r3, r3, #1
 800a3a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3ac:	623a      	str	r2, [r7, #32]
 800a3ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	69f9      	ldr	r1, [r7, #28]
 800a3b2:	6a3a      	ldr	r2, [r7, #32]
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e5      	bne.n	800a38c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e010      	b.n	800a406 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	69da      	ldr	r2, [r3, #28]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	bf0c      	ite	eq
 800a3f4:	2301      	moveq	r3, #1
 800a3f6:	2300      	movne	r3, #0
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	f43f af46 	beq.w	800a290 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3770      	adds	r7, #112	; 0x70
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a40e:	b480      	push	{r7}
 800a410:	b085      	sub	sp, #20
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_UARTEx_DisableFifoMode+0x16>
 800a420:	2302      	movs	r3, #2
 800a422:	e027      	b.n	800a474 <HAL_UARTEx_DisableFifoMode+0x66>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2224      	movs	r2, #36	; 0x24
 800a430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0201 	bic.w	r2, r2, #1
 800a44a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a452:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a494:	2302      	movs	r3, #2
 800a496:	e02d      	b.n	800a4f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	; 0x24
 800a4a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f84f 	bl	800a578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d101      	bne.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a510:	2302      	movs	r3, #2
 800a512:	e02d      	b.n	800a570 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2224      	movs	r2, #36	; 0x24
 800a520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 0201 	bic.w	r2, r2, #1
 800a53a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f811 	bl	800a578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2220      	movs	r2, #32
 800a562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a584:	2b00      	cmp	r3, #0
 800a586:	d108      	bne.n	800a59a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a598:	e031      	b.n	800a5fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a59a:	2310      	movs	r3, #16
 800a59c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a59e:	2310      	movs	r3, #16
 800a5a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	0e5b      	lsrs	r3, r3, #25
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f003 0307 	and.w	r3, r3, #7
 800a5b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	0f5b      	lsrs	r3, r3, #29
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	7b3a      	ldrb	r2, [r7, #12]
 800a5c6:	4911      	ldr	r1, [pc, #68]	; (800a60c <UARTEx_SetNbDataToProcess+0x94>)
 800a5c8:	5c8a      	ldrb	r2, [r1, r2]
 800a5ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5ce:	7b3a      	ldrb	r2, [r7, #12]
 800a5d0:	490f      	ldr	r1, [pc, #60]	; (800a610 <UARTEx_SetNbDataToProcess+0x98>)
 800a5d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	7b7a      	ldrb	r2, [r7, #13]
 800a5e4:	4909      	ldr	r1, [pc, #36]	; (800a60c <UARTEx_SetNbDataToProcess+0x94>)
 800a5e6:	5c8a      	ldrb	r2, [r1, r2]
 800a5e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5ec:	7b7a      	ldrb	r2, [r7, #13]
 800a5ee:	4908      	ldr	r1, [pc, #32]	; (800a610 <UARTEx_SetNbDataToProcess+0x98>)
 800a5f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5fe:	bf00      	nop
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	0800a714 	.word	0x0800a714
 800a610:	0800a71c 	.word	0x0800a71c

0800a614 <__libc_init_array>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	4d0d      	ldr	r5, [pc, #52]	; (800a64c <__libc_init_array+0x38>)
 800a618:	4c0d      	ldr	r4, [pc, #52]	; (800a650 <__libc_init_array+0x3c>)
 800a61a:	1b64      	subs	r4, r4, r5
 800a61c:	10a4      	asrs	r4, r4, #2
 800a61e:	2600      	movs	r6, #0
 800a620:	42a6      	cmp	r6, r4
 800a622:	d109      	bne.n	800a638 <__libc_init_array+0x24>
 800a624:	4d0b      	ldr	r5, [pc, #44]	; (800a654 <__libc_init_array+0x40>)
 800a626:	4c0c      	ldr	r4, [pc, #48]	; (800a658 <__libc_init_array+0x44>)
 800a628:	f000 f82e 	bl	800a688 <_init>
 800a62c:	1b64      	subs	r4, r4, r5
 800a62e:	10a4      	asrs	r4, r4, #2
 800a630:	2600      	movs	r6, #0
 800a632:	42a6      	cmp	r6, r4
 800a634:	d105      	bne.n	800a642 <__libc_init_array+0x2e>
 800a636:	bd70      	pop	{r4, r5, r6, pc}
 800a638:	f855 3b04 	ldr.w	r3, [r5], #4
 800a63c:	4798      	blx	r3
 800a63e:	3601      	adds	r6, #1
 800a640:	e7ee      	b.n	800a620 <__libc_init_array+0xc>
 800a642:	f855 3b04 	ldr.w	r3, [r5], #4
 800a646:	4798      	blx	r3
 800a648:	3601      	adds	r6, #1
 800a64a:	e7f2      	b.n	800a632 <__libc_init_array+0x1e>
 800a64c:	0800a72c 	.word	0x0800a72c
 800a650:	0800a72c 	.word	0x0800a72c
 800a654:	0800a72c 	.word	0x0800a72c
 800a658:	0800a730 	.word	0x0800a730

0800a65c <memcpy>:
 800a65c:	440a      	add	r2, r1
 800a65e:	4291      	cmp	r1, r2
 800a660:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a664:	d100      	bne.n	800a668 <memcpy+0xc>
 800a666:	4770      	bx	lr
 800a668:	b510      	push	{r4, lr}
 800a66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a66e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a672:	4291      	cmp	r1, r2
 800a674:	d1f9      	bne.n	800a66a <memcpy+0xe>
 800a676:	bd10      	pop	{r4, pc}

0800a678 <memset>:
 800a678:	4402      	add	r2, r0
 800a67a:	4603      	mov	r3, r0
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d100      	bne.n	800a682 <memset+0xa>
 800a680:	4770      	bx	lr
 800a682:	f803 1b01 	strb.w	r1, [r3], #1
 800a686:	e7f9      	b.n	800a67c <memset+0x4>

0800a688 <_init>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	bf00      	nop
 800a68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68e:	bc08      	pop	{r3}
 800a690:	469e      	mov	lr, r3
 800a692:	4770      	bx	lr

0800a694 <_fini>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	bf00      	nop
 800a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69a:	bc08      	pop	{r3}
 800a69c:	469e      	mov	lr, r3
 800a69e:	4770      	bx	lr
