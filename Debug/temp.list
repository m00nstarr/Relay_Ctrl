
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb34  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800be04  0800be04  0001be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf68  0800bf68  0001bf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf70  0800bf70  0001bf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf74  0800bf74  0001bf74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800bf78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000253c  24000074  0800bfec  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240025b0  0800bfec  000225b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004442  00000000  00000000  00053b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  00057fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c18  00000000  00000000  00059d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c27  00000000  00000000  0005b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023398  00000000  00000000  00095557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017db39  00000000  00000000  000b88ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00236428  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000898c  00000000  00000000  0023647c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bdec 	.word	0x0800bdec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800bdec 	.word	0x0800bdec

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__io_putchar>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <__io_putchar+0x20>)
 80006ba:	f009 f9df 	bl	8009a7c <HAL_UART_Transmit>

  return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	24000158 	.word	0x24000158

080006cc <save_timestamp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void save_timestamp(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	timestamp[id] = TIM14->CNT;
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <save_timestamp+0x28>)
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <save_timestamp+0x2c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80006d8:	4908      	ldr	r1, [pc, #32]	; (80006fc <save_timestamp+0x30>)
 80006da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//timestamp[id] = uwTick;
	id++;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <save_timestamp+0x2c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <save_timestamp+0x2c>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40002000 	.word	0x40002000
 80006f8:	24000094 	.word	0x24000094
 80006fc:	240001e8 	.word	0x240001e8

08000700 <print_timestamp>:

void print_timestamp(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	int i, tmp;
	int k = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
	i = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
	for (i=0; i<id; i++){
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e031      	b.n	8000778 <print_timestamp+0x78>
		if (timestamp[i] <= timestamp[i-1])
 8000714:	4a1d      	ldr	r2, [pc, #116]	; (800078c <print_timestamp+0x8c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3b01      	subs	r3, #1
 8000720:	491a      	ldr	r1, [pc, #104]	; (800078c <print_timestamp+0x8c>)
 8000722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000726:	429a      	cmp	r2, r3
 8000728:	d80e      	bhi.n	8000748 <print_timestamp+0x48>
			tmp = 65535 + timestamp[i] - timestamp[i-1];
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <print_timestamp+0x8c>)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3b01      	subs	r3, #1
 8000736:	4915      	ldr	r1, [pc, #84]	; (800078c <print_timestamp+0x8c>)
 8000738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	4413      	add	r3, r2
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	e00a      	b.n	800075e <print_timestamp+0x5e>
		else
			tmp = timestamp[i] - timestamp[i-1];
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <print_timestamp+0x8c>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3b01      	subs	r3, #1
 8000754:	490d      	ldr	r1, [pc, #52]	; (800078c <print_timestamp+0x8c>)
 8000756:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	60bb      	str	r3, [r7, #8]
		printf("(%d) %ld us ellapsed after prev timestamp. \r\n", i+1, tmp);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	4619      	mov	r1, r3
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <print_timestamp+0x90>)
 8000768:	f00a fb74 	bl	800ae54 <iprintf>
		printf("--------------------\r\n");
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <print_timestamp+0x94>)
 800076e:	f00a fbf7 	bl	800af60 <puts>
	for (i=0; i<id; i++){
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <print_timestamp+0x98>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d3c8      	bcc.n	8000714 <print_timestamp+0x14>
	}

}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	240001e8 	.word	0x240001e8
 8000790:	0800be04 	.word	0x0800be04
 8000794:	0800be34 	.word	0x0800be34
 8000798:	24000094 	.word	0x24000094

0800079c <autostart>:

void autostart(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	if(timing_counter == 0){
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <autostart+0xcc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10b      	bne.n	80007c0 <autostart+0x24>
		HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2104      	movs	r1, #4
 80007ac:	482f      	ldr	r0, [pc, #188]	; (800086c <autostart+0xd0>)
 80007ae:	f004 fc03 	bl	8004fb8 <HAL_GPIO_WritePin>
		TIM14->CNT = 0;
 80007b2:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <autostart+0xd4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim14);
 80007b8:	482e      	ldr	r0, [pc, #184]	; (8000874 <autostart+0xd8>)
 80007ba:	f008 f82b 	bl	8008814 <HAL_TIM_Base_Start>
 80007be:	e04b      	b.n	8000858 <autostart+0xbc>
	}
	else if(timing_counter == 1){
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <autostart+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d107      	bne.n	80007d8 <autostart+0x3c>
		HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2108      	movs	r1, #8
 80007cc:	4827      	ldr	r0, [pc, #156]	; (800086c <autostart+0xd0>)
 80007ce:	f004 fbf3 	bl	8004fb8 <HAL_GPIO_WritePin>
		save_timestamp();
 80007d2:	f7ff ff7b 	bl	80006cc <save_timestamp>
 80007d6:	e03f      	b.n	8000858 <autostart+0xbc>
	}
	else if(timing_counter == 10){
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <autostart+0xcc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b0a      	cmp	r3, #10
 80007de:	d107      	bne.n	80007f0 <autostart+0x54>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <autostart+0xdc>)
 80007e6:	f004 fbe7 	bl	8004fb8 <HAL_GPIO_WritePin>
		save_timestamp();
 80007ea:	f7ff ff6f 	bl	80006cc <save_timestamp>
 80007ee:	e033      	b.n	8000858 <autostart+0xbc>
	}
	else if(timing_counter == 20){
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <autostart+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b14      	cmp	r3, #20
 80007f6:	d108      	bne.n	800080a <autostart+0x6e>
		HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <autostart+0xe0>)
 8000800:	f004 fbda 	bl	8004fb8 <HAL_GPIO_WritePin>
		save_timestamp();
 8000804:	f7ff ff62 	bl	80006cc <save_timestamp>
 8000808:	e026      	b.n	8000858 <autostart+0xbc>
	}
	else if(timing_counter == 21){
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <autostart+0xcc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b15      	cmp	r3, #21
 8000810:	d108      	bne.n	8000824 <autostart+0x88>
		HAL_GPIO_WritePin(GPIOA, MP_Relay_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	4819      	ldr	r0, [pc, #100]	; (8000880 <autostart+0xe4>)
 800081a:	f004 fbcd 	bl	8004fb8 <HAL_GPIO_WritePin>
		save_timestamp();
 800081e:	f7ff ff55 	bl	80006cc <save_timestamp>
 8000822:	e019      	b.n	8000858 <autostart+0xbc>
	}
	else if(timing_counter == 30){
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <autostart+0xcc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b1e      	cmp	r3, #30
 800082a:	d115      	bne.n	8000858 <autostart+0xbc>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <autostart+0xdc>)
 8000832:	f004 fbc1 	bl	8004fb8 <HAL_GPIO_WritePin>
		save_timestamp();
 8000836:	f7ff ff49 	bl	80006cc <save_timestamp>
		HAL_TIM_Base_Stop_IT(&htim13);
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <autostart+0xe8>)
 800083c:	f008 f916 	bl	8008a6c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim14);
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <autostart+0xd8>)
 8000842:	f008 f865 	bl	8008910 <HAL_TIM_Base_Stop>
		timing_counter = -1;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <autostart+0xcc>)
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	601a      	str	r2, [r3, #0]
		print_timestamp();
 800084e:	f7ff ff57 	bl	8000700 <print_timestamp>
		id = 0;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <autostart+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
	}
	timing_counter += 1;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <autostart+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a02      	ldr	r2, [pc, #8]	; (8000868 <autostart+0xcc>)
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24000090 	.word	0x24000090
 800086c:	58020800 	.word	0x58020800
 8000870:	40002000 	.word	0x40002000
 8000874:	240024b0 	.word	0x240024b0
 8000878:	58021400 	.word	0x58021400
 800087c:	58021800 	.word	0x58021800
 8000880:	58020000 	.word	0x58020000
 8000884:	240022c4 	.word	0x240022c4
 8000888:	24000094 	.word	0x24000094

0800088c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		autostart();
 800089e:	f7ff ff7d 	bl	800079c <autostart>
	}
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40001c00 	.word	0x40001c00

080008b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c0:	d105      	bne.n	80008ce <HAL_GPIO_EXTI_Callback+0x1e>
		TIM14->CNT = 0;
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_GPIO_EXTI_Callback+0x28>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim13);
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80008ca:	f008 f849 	bl	8008960 <HAL_TIM_Base_Start_IT>
	}
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40002000 	.word	0x40002000
 80008dc:	240022c4 	.word	0x240022c4

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f001 ffbc 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f838 	bl	800095c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008ec:	f000 f8b0 	bl	8000a50 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 fdf4 	bl	80014dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80008f4:	f000 f8d8 	bl	8000aa8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008f8:	f000 f94e 	bl	8000b98 <MX_ADC2_Init>
  MX_ADC3_Init();
 80008fc:	f000 f9ae 	bl	8000c5c <MX_ADC3_Init>
  MX_DAC1_Init();
 8000900:	f000 fa1e 	bl	8000d40 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000904:	f000 fa4e 	bl	8000da4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000908:	f000 fab0 	bl	8000e6c <MX_FDCAN2_Init>
  MX_I2C4_Init();
 800090c:	f000 fb12 	bl	8000f34 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000910:	f000 fbac 	bl	800106c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000914:	f000 fc38 	bl	8001188 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000918:	f000 fca6 	bl	8001268 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800091c:	f000 fd46 	bl	80013ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000920:	f000 fd90 	bl	8001444 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8000924:	f000 fcfa 	bl	800131c <MX_TIM13_Init>
  MX_RTC_Init();
 8000928:	f000 fb44 	bl	8000fb4 <MX_RTC_Init>
  MX_TIM14_Init();
 800092c:	f000 fd1a 	bl	8001364 <MX_TIM14_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2104      	movs	r1, #4
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <main+0x74>)
 8000936:	f004 fb3f 	bl	8004fb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2108      	movs	r1, #8
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <main+0x74>)
 8000940:	f004 fb3a 	bl	8004fb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <main+0x78>)
 800094c:	f004 fb34 	bl	8004fb8 <HAL_GPIO_WritePin>

  while (1)
 8000950:	e7fe      	b.n	8000950 <main+0x70>
 8000952:	bf00      	nop
 8000954:	58020800 	.word	0x58020800
 8000958:	58021800 	.word	0x58021800

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09c      	sub	sp, #112	; 0x70
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	224c      	movs	r2, #76	; 0x4c
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f00a fa6a 	bl	800ae44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2220      	movs	r2, #32
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00a fa64 	bl	800ae44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800097c:	2004      	movs	r0, #4
 800097e:	f004 fc77 	bl	8005270 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <SystemClock_Config+0xec>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <SystemClock_Config+0xec>)
 800098c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <SystemClock_Config+0xec>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800099e:	bf00      	nop
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemClock_Config+0xec>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ac:	d1f8      	bne.n	80009a0 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <SystemClock_Config+0xf0>)
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f023 0303 	bic.w	r3, r3, #3
 80009b6:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <SystemClock_Config+0xf0>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009be:	2309      	movs	r3, #9
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009d4:	2305      	movs	r3, #5
 80009d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80009d8:	236e      	movs	r3, #110	; 0x6e
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009e8:	2308      	movs	r3, #8
 80009ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 fc93 	bl	8005324 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a04:	f001 f8f8 	bl	8001bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	233f      	movs	r3, #63	; 0x3f
 8000a0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a14:	2308      	movs	r3, #8
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 f824 	bl	8005a7c <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a3a:	f001 f8dd 	bl	8001bf8 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3770      	adds	r7, #112	; 0x70
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58024800 	.word	0x58024800
 8000a4c:	58024400 	.word	0x58024400

08000a50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ae      	sub	sp, #184	; 0xb8
 8000a54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	22b4      	movs	r2, #180	; 0xb4
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00a f9f1 	bl	800ae44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a66:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000a68:	2305      	movs	r3, #5
 8000a6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000a6c:	2350      	movs	r3, #80	; 0x50
 8000a6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a70:	2305      	movs	r3, #5
 8000a72:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f005 fb7f 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000a9c:	f001 f8ac 	bl	8001bf8 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	37b8      	adds	r7, #184	; 0xb8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2224      	movs	r2, #36	; 0x24
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00a f9bf 	bl	800ae44 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000ac8:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <MX_ADC1_Init+0xe8>)
 8000aca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b26:	f002 f9ad 	bl	8002e84 <HAL_ADC_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f001 f862 	bl	8001bf8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b40:	f003 f9e6 	bl	8003f10 <HAL_ADCEx_MultiModeConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b4a:	f001 f855 	bl	8001bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_ADC1_Init+0xec>)
 8000b50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b52:	2306      	movs	r3, #6
 8000b54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b60:	2304      	movs	r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_ADC1_Init+0xe4>)
 8000b74:	f002 fb8e 	bl	8003294 <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b7e:	f001 f83b 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	240021e4 	.word	0x240021e4
 8000b90:	40022000 	.word	0x40022000
 8000b94:	04300002 	.word	0x04300002

08000b98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2224      	movs	r2, #36	; 0x24
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00a f94d 	bl	800ae44 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bac:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <MX_ADC2_Init+0xc0>)
 8000bae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000c0a:	f002 f93b 	bl	8002e84 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000c14:	f000 fff0 	bl	8001bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c28:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_ADC2_Init+0xbc>)
 8000c3e:	f002 fb29 	bl	8003294 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000c48:	f000 ffd6 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24002128 	.word	0x24002128
 8000c58:	40022100 	.word	0x40022100

08000c5c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2224      	movs	r2, #36	; 0x24
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00a f8eb 	bl	800ae44 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c70:	4a32      	ldr	r2, [pc, #200]	; (8000d3c <MX_ADC3_Init+0xe0>)
 8000c72:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000ce2:	f002 f8cf 	bl	8002e84 <HAL_ADC_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000cec:	f000 ff84 	bl	8001bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d02:	2304      	movs	r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_ADC3_Init+0xdc>)
 8000d20:	f002 fab8 	bl	8003294 <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000d2a:	f000 ff65 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24002254 	.word	0x24002254
 8000d3c:	58026000 	.word	0x58026000

08000d40 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2224      	movs	r2, #36	; 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00a f879 	bl	800ae44 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_DAC1_Init+0x5c>)
 8000d54:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_DAC1_Init+0x60>)
 8000d56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d58:	4810      	ldr	r0, [pc, #64]	; (8000d9c <MX_DAC1_Init+0x5c>)
 8000d5a:	f003 faca 	bl	80042f2 <HAL_DAC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d64:	f000 ff48 	bl	8001bf8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2210      	movs	r2, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_DAC1_Init+0x5c>)
 8000d84:	f003 fad8 	bl	8004338 <HAL_DAC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d8e:	f000 ff33 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000144 	.word	0x24000144
 8000da0:	40007400 	.word	0x40007400

08000da4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <MX_FDCAN1_Init+0xc4>)
 8000dac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_FDCAN1_Init+0xc0>)
 8000e52:	f003 fba1 	bl	8004598 <HAL_FDCAN_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e5c:	f000 fecc 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240023c4 	.word	0x240023c4
 8000e68:	4000a000 	.word	0x4000a000

08000e6c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <MX_FDCAN2_Init+0xc4>)
 8000e74:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ede:	2204      	movs	r2, #4
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000eea:	2204      	movs	r2, #4
 8000eec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_FDCAN2_Init+0xc0>)
 8000f1a:	f003 fb3d 	bl	8004598 <HAL_FDCAN_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000f24:	f000 fe68 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	240024fc 	.word	0x240024fc
 8000f30:	4000a400 	.word	0x4000a400

08000f34 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <MX_I2C4_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_I2C4_Init+0x7c>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f70:	f004 f856 	bl	8005020 <HAL_I2C_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f7a:	f000 fe3d 	bl	8001bf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f82:	f004 f8dd 	bl	8005140 <HAL_I2CEx_ConfigAnalogFilter>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f000 fe34 	bl	8001bf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_I2C4_Init+0x74>)
 8000f94:	f004 f91f 	bl	80051d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 fe2b 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	240000ac 	.word	0x240000ac
 8000fac:	58001c00 	.word	0x58001c00
 8000fb0:	60404e72 	.word	0x60404e72

08000fb4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <MX_RTC_Init+0xb0>)
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <MX_RTC_Init+0xb4>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_RTC_Init+0xb0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_RTC_Init+0xb0>)
 8000fda:	227f      	movs	r2, #127	; 0x7f
 8000fdc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_RTC_Init+0xb0>)
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_RTC_Init+0xb0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_RTC_Init+0xb0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_RTC_Init+0xb0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_RTC_Init+0xb0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffc:	4819      	ldr	r0, [pc, #100]	; (8001064 <MX_RTC_Init+0xb0>)
 8000ffe:	f007 f95b 	bl	80082b8 <HAL_RTC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 fdf6 	bl	8001bf8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 800100c:	2322      	movs	r3, #34	; 0x22
 800100e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22;
 8001010:	2322      	movs	r3, #34	; 0x22
 8001012:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x22;
 8001014:	2322      	movs	r3, #34	; 0x22
 8001016:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2201      	movs	r2, #1
 8001024:	4619      	mov	r1, r3
 8001026:	480f      	ldr	r0, [pc, #60]	; (8001064 <MX_RTC_Init+0xb0>)
 8001028:	f007 f9be 	bl	80083a8 <HAL_RTC_SetTime>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001032:	f000 fde1 	bl	8001bf8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001036:	2304      	movs	r3, #4
 8001038:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800103a:	2302      	movs	r3, #2
 800103c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 800103e:	2310      	movs	r3, #16
 8001040:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001042:	2322      	movs	r3, #34	; 0x22
 8001044:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_RTC_Init+0xb0>)
 800104e:	f007 fa49 	bl	80084e4 <HAL_RTC_SetDate>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001058:	f000 fdce 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	240023a0 	.word	0x240023a0
 8001068:	58004000 	.word	0x58004000

0800106c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b098      	sub	sp, #96	; 0x60
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2234      	movs	r2, #52	; 0x34
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f009 fed3 	bl	800ae44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <MX_TIM1_Init+0x114>)
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <MX_TIM1_Init+0x118>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <MX_TIM1_Init+0x114>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_TIM1_Init+0x114>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <MX_TIM1_Init+0x114>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_TIM1_Init+0x114>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_TIM1_Init+0x114>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_TIM1_Init+0x114>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ca:	482d      	ldr	r0, [pc, #180]	; (8001180 <MX_TIM1_Init+0x114>)
 80010cc:	f007 fcfd 	bl	8008aca <HAL_TIM_PWM_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f000 fd8f 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ea:	4619      	mov	r1, r3
 80010ec:	4824      	ldr	r0, [pc, #144]	; (8001180 <MX_TIM1_Init+0x114>)
 80010ee:	f008 fb1b 	bl	8009728 <HAL_TIMEx_MasterConfigSynchronization>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010f8:	f000 fd7e 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fc:	2360      	movs	r3, #96	; 0x60
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001104:	2300      	movs	r3, #0
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001114:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001118:	220c      	movs	r2, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4818      	ldr	r0, [pc, #96]	; (8001180 <MX_TIM1_Init+0x114>)
 800111e:	f007 fe4b 	bl	8008db8 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001128:	f000 fd66 	bl	8001bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800114e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM1_Init+0x114>)
 8001162:	f008 fb7d 	bl	8009860 <HAL_TIMEx_ConfigBreakDeadTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800116c:	f000 fd44 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM1_Init+0x114>)
 8001172:	f001 f88d 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3760      	adds	r7, #96	; 0x60
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	24002464 	.word	0x24002464
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011ae:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <MX_TIM4_Init+0xdc>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d2:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011d4:	f007 fc79 	bl	8008aca <HAL_TIM_PWM_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80011de:	f000 fd0b 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	481b      	ldr	r0, [pc, #108]	; (8001260 <MX_TIM4_Init+0xd8>)
 80011f2:	f008 fa99 	bl	8009728 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80011fc:	f000 fcfc 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001200:	2360      	movs	r3, #96	; 0x60
 8001202:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2204      	movs	r2, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_TIM4_Init+0xd8>)
 8001218:	f007 fdce 	bl	8008db8 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001222:	f000 fce9 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	2208      	movs	r2, #8
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_TIM4_Init+0xd8>)
 800122e:	f007 fdc3 	bl	8008db8 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001238:	f000 fcde 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	220c      	movs	r2, #12
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM4_Init+0xd8>)
 8001244:	f007 fdb8 	bl	8008db8 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800124e:	f000 fcd3 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM4_Init+0xd8>)
 8001254:	f001 f81c 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	240000f8 	.word	0x240000f8
 8001264:	40000800 	.word	0x40000800

08001268 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_TIM5_Init+0xac>)
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <MX_TIM5_Init+0xb0>)
 8001290:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_TIM5_Init+0xac>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_TIM5_Init+0xac>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM5_Init+0xac>)
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM5_Init+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_TIM5_Init+0xac>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM5_Init+0xac>)
 80012b4:	f007 fc09 	bl	8008aca <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80012be:	f000 fc9b 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4810      	ldr	r0, [pc, #64]	; (8001314 <MX_TIM5_Init+0xac>)
 80012d2:	f008 fa29 	bl	8009728 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80012dc:	f000 fc8c 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM5_Init+0xac>)
 80012f8:	f007 fd5e 	bl	8008db8 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001302:	f000 fc79 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM5_Init+0xac>)
 8001308:	f000 ffc2 	bl	8002290 <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24002198 	.word	0x24002198
 8001318:	40000c00 	.word	0x40000c00

0800131c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_TIM13_Init+0x40>)
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <MX_TIM13_Init+0x44>)
 8001324:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2750 -1;
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_TIM13_Init+0x40>)
 8001328:	f640 22bd 	movw	r2, #2749	; 0xabd
 800132c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_TIM13_Init+0x40>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5000-1;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_TIM13_Init+0x40>)
 8001336:	f241 3287 	movw	r2, #4999	; 0x1387
 800133a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_TIM13_Init+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_TIM13_Init+0x40>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_TIM13_Init+0x40>)
 800134a:	f007 fa0b 	bl	8008764 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001354:	f000 fc50 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  /* USER CODE END TIM13_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	240022c4 	.word	0x240022c4
 8001360:	40001c00 	.word	0x40001c00

08001364 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_TIM14_Init+0x40>)
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <MX_TIM14_Init+0x44>)
 800136c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2750-1;
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_TIM14_Init+0x40>)
 8001370:	f640 22bd 	movw	r2, #2749	; 0xabd
 8001374:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_TIM14_Init+0x40>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_TIM14_Init+0x40>)
 800137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001382:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_TIM14_Init+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_TIM14_Init+0x40>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_TIM14_Init+0x40>)
 8001392:	f007 f9e7 	bl	8008764 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800139c:	f000 fc2c 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	240024b0 	.word	0x240024b0
 80013a8:	40002000 	.word	0x40002000

080013ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013f6:	f008 faf1 	bl	80099dc <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 fbfa 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_USART1_UART_Init+0x90>)
 8001408:	f009 fc1a 	bl	800ac40 <HAL_UARTEx_SetTxFifoThreshold>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001412:	f000 fbf1 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_USART1_UART_Init+0x90>)
 800141a:	f009 fc4f 	bl	800acbc <HAL_UARTEx_SetRxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001424:	f000 fbe8 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_USART1_UART_Init+0x90>)
 800142a:	f009 fbd0 	bl	800abce <HAL_UARTEx_DisableFifoMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 fbe0 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	24002310 	.word	0x24002310
 8001440:	40011000 	.word	0x40011000

08001444 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_USART3_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800148e:	f008 faa5 	bl	80099dc <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 fbae 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 80014a0:	f009 fbce 	bl	800ac40 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 fba5 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 80014b2:	f009 fc03 	bl	800acbc <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 fb9c 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 80014c2:	f009 fb84 	bl	800abce <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 fb94 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	24000158 	.word	0x24000158
 80014d8:	40004800 	.word	0x40004800

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4bbf      	ldr	r3, [pc, #764]	; (80017f0 <MX_GPIO_Init+0x314>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4abd      	ldr	r2, [pc, #756]	; (80017f0 <MX_GPIO_Init+0x314>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4bbb      	ldr	r3, [pc, #748]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	623b      	str	r3, [r7, #32]
 800150e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001510:	4bb7      	ldr	r3, [pc, #732]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4ab6      	ldr	r2, [pc, #728]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4bb3      	ldr	r3, [pc, #716]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4bb0      	ldr	r3, [pc, #704]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4aae      	ldr	r2, [pc, #696]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4bac      	ldr	r3, [pc, #688]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <MX_GPIO_Init+0x314>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4aa7      	ldr	r2, [pc, #668]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4ba4      	ldr	r3, [pc, #656]	; (80017f0 <MX_GPIO_Init+0x314>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	4ba1      	ldr	r3, [pc, #644]	; (80017f0 <MX_GPIO_Init+0x314>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b9d      	ldr	r3, [pc, #628]	; (80017f0 <MX_GPIO_Init+0x314>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <MX_GPIO_Init+0x314>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <MX_GPIO_Init+0x314>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001598:	4b95      	ldr	r3, [pc, #596]	; (80017f0 <MX_GPIO_Init+0x314>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <MX_GPIO_Init+0x314>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	4a90      	ldr	r2, [pc, #576]	; (80017f0 <MX_GPIO_Init+0x314>)
 80015ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b6:	4b8e      	ldr	r3, [pc, #568]	; (80017f0 <MX_GPIO_Init+0x314>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c4:	4b8a      	ldr	r3, [pc, #552]	; (80017f0 <MX_GPIO_Init+0x314>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	4a89      	ldr	r2, [pc, #548]	; (80017f0 <MX_GPIO_Init+0x314>)
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d4:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <MX_GPIO_Init+0x314>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f240 4102 	movw	r1, #1026	; 0x402
 80015e8:	4882      	ldr	r0, [pc, #520]	; (80017f4 <MX_GPIO_Init+0x318>)
 80015ea:	f003 fce5 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 80015f4:	4880      	ldr	r0, [pc, #512]	; (80017f8 <MX_GPIO_Init+0x31c>)
 80015f6:	f003 fcdf 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 80015fa:	2200      	movs	r2, #0
 80015fc:	f24a 1138 	movw	r1, #41272	; 0xa138
 8001600:	487e      	ldr	r0, [pc, #504]	; (80017fc <MX_GPIO_Init+0x320>)
 8001602:	f003 fcd9 	bl	8004fb8 <HAL_GPIO_WritePin>
                          |ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MP_Relay_GPIO_Port, MP_Relay_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160c:	487c      	ldr	r0, [pc, #496]	; (8001800 <MX_GPIO_Init+0x324>)
 800160e:	f003 fcd3 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8001618:	487a      	ldr	r0, [pc, #488]	; (8001804 <MX_GPIO_Init+0x328>)
 800161a:	f003 fccd 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin|MN_Relay_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	210c      	movs	r1, #12
 8001622:	4879      	ldr	r0, [pc, #484]	; (8001808 <MX_GPIO_Init+0x32c>)
 8001624:	f003 fcc8 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2160      	movs	r1, #96	; 0x60
 800162c:	4877      	ldr	r0, [pc, #476]	; (800180c <MX_GPIO_Init+0x330>)
 800162e:	f003 fcc3 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001632:	f240 3303 	movw	r3, #771	; 0x303
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001644:	230e      	movs	r3, #14
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	4870      	ldr	r0, [pc, #448]	; (8001810 <MX_GPIO_Init+0x334>)
 8001650:	f003 fb0a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001654:	f640 0303 	movw	r3, #2051	; 0x803
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001666:	2309      	movs	r3, #9
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4862      	ldr	r0, [pc, #392]	; (80017fc <MX_GPIO_Init+0x320>)
 8001672:	f003 faf9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001688:	2309      	movs	r3, #9
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	485a      	ldr	r0, [pc, #360]	; (80017fc <MX_GPIO_Init+0x320>)
 8001694:	f003 fae8 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001698:	2349      	movs	r3, #73	; 0x49
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016a8:	230e      	movs	r3, #14
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4850      	ldr	r0, [pc, #320]	; (80017f4 <MX_GPIO_Init+0x318>)
 80016b4:	f003 fad8 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 80016b8:	f240 4302 	movw	r3, #1026	; 0x402
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4848      	ldr	r0, [pc, #288]	; (80017f4 <MX_GPIO_Init+0x318>)
 80016d2:	f003 fac9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80016d6:	2330      	movs	r3, #48	; 0x30
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016e6:	230a      	movs	r3, #10
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4841      	ldr	r0, [pc, #260]	; (80017f8 <MX_GPIO_Init+0x31c>)
 80016f2:	f003 fab9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 80016f6:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	483a      	ldr	r0, [pc, #232]	; (80017f8 <MX_GPIO_Init+0x31c>)
 8001710:	f003 faaa 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001714:	f64b 0303 	movw	r3, #47107	; 0xb803
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001726:	230e      	movs	r3, #14
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4831      	ldr	r0, [pc, #196]	; (80017f8 <MX_GPIO_Init+0x31c>)
 8001732:	f003 fa99 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP_IGBT_Pin LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 8001736:	f24a 1338 	movw	r3, #41272	; 0xa138
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	482b      	ldr	r0, [pc, #172]	; (80017fc <MX_GPIO_Init+0x320>)
 8001750:	f003 fa8a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001754:	23b0      	movs	r3, #176	; 0xb0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001764:	230a      	movs	r3, #10
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4821      	ldr	r0, [pc, #132]	; (80017f4 <MX_GPIO_Init+0x318>)
 8001770:	f003 fa7a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001774:	2304      	movs	r3, #4
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001784:	230c      	movs	r3, #12
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <MX_GPIO_Init+0x318>)
 8001790:	f003 fa6a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 8001794:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017a6:	230c      	movs	r3, #12
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	4815      	ldr	r0, [pc, #84]	; (8001808 <MX_GPIO_Init+0x32c>)
 80017b2:	f003 fa59 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80017c8:	230d      	movs	r3, #13
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <MX_GPIO_Init+0x324>)
 80017d4:	f003 fa48 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 80017d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	e011      	b.n	8001814 <MX_GPIO_Init+0x338>
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58020c00 	.word	0x58020c00
 80017f8:	58021000 	.word	0x58021000
 80017fc:	58021800 	.word	0x58021800
 8001800:	58020000 	.word	0x58020000
 8001804:	58021400 	.word	0x58021400
 8001808:	58020800 	.word	0x58020800
 800180c:	58021c00 	.word	0x58021c00
 8001810:	58020400 	.word	0x58020400
 8001814:	4619      	mov	r1, r3
 8001816:	48bc      	ldr	r0, [pc, #752]	; (8001b08 <MX_GPIO_Init+0x62c>)
 8001818:	f003 fa26 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	48b6      	ldr	r0, [pc, #728]	; (8001b0c <MX_GPIO_Init+0x630>)
 8001834:	f003 fa18 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8001838:	2304      	movs	r3, #4
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001848:	2309      	movs	r3, #9
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	48af      	ldr	r0, [pc, #700]	; (8001b10 <MX_GPIO_Init+0x634>)
 8001854:	f003 fa08 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001858:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800186a:	230e      	movs	r3, #14
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	48a7      	ldr	r0, [pc, #668]	; (8001b14 <MX_GPIO_Init+0x638>)
 8001876:	f003 f9f7 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 800187a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800188c:	2303      	movs	r3, #3
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	489f      	ldr	r0, [pc, #636]	; (8001b14 <MX_GPIO_Init+0x638>)
 8001898:	f003 f9e6 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800189c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80018ae:	230a      	movs	r3, #10
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4893      	ldr	r0, [pc, #588]	; (8001b08 <MX_GPIO_Init+0x62c>)
 80018ba:	f003 f9d5 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 80018be:	f648 7308 	movw	r3, #36616	; 0x8f08
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018d0:	230e      	movs	r3, #14
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	488f      	ldr	r0, [pc, #572]	; (8001b18 <MX_GPIO_Init+0x63c>)
 80018dc:	f003 f9c4 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MP_Relay_Pin */
  GPIO_InitStruct.Pin = MP_Relay_Pin;
 80018e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MP_Relay_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	4883      	ldr	r0, [pc, #524]	; (8001b08 <MX_GPIO_Init+0x62c>)
 80018fa:	f003 f9b5 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800190e:	230e      	movs	r3, #14
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	487c      	ldr	r0, [pc, #496]	; (8001b0c <MX_GPIO_Init+0x630>)
 800191a:	f003 f9a5 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800192e:	2306      	movs	r3, #6
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4875      	ldr	r0, [pc, #468]	; (8001b10 <MX_GPIO_Init+0x634>)
 800193a:	f003 f995 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 800193e:	f241 031f 	movw	r3, #4127	; 0x101f
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001950:	2309      	movs	r3, #9
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4870      	ldr	r0, [pc, #448]	; (8001b1c <MX_GPIO_Init+0x640>)
 800195c:	f003 f984 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001970:	230a      	movs	r3, #10
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4866      	ldr	r0, [pc, #408]	; (8001b14 <MX_GPIO_Init+0x638>)
 800197c:	f003 f974 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001980:	2304      	movs	r3, #4
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001984:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	485f      	ldr	r0, [pc, #380]	; (8001b14 <MX_GPIO_Init+0x638>)
 8001996:	f003 f967 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_FS_B_Pin;
 800199a:	f44f 7350 	mov.w	r3, #832	; 0x340
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019ac:	2306      	movs	r3, #6
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	4619      	mov	r1, r3
 80019b6:	4859      	ldr	r0, [pc, #356]	; (8001b1c <MX_GPIO_Init+0x640>)
 80019b8:	f003 f956 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019bc:	2320      	movs	r3, #32
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	4619      	mov	r1, r3
 80019d0:	4852      	ldr	r0, [pc, #328]	; (8001b1c <MX_GPIO_Init+0x640>)
 80019d2:	f003 f949 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 80019d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019e8:	2309      	movs	r3, #9
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	484b      	ldr	r0, [pc, #300]	; (8001b20 <MX_GPIO_Init+0x644>)
 80019f4:	f003 f938 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_IGBT_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = PC_IGBT_Pin|STMOD_20_Pin;
 80019f8:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4842      	ldr	r0, [pc, #264]	; (8001b1c <MX_GPIO_Init+0x640>)
 8001a12:	f003 f929 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a28:	2309      	movs	r3, #9
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	483a      	ldr	r0, [pc, #232]	; (8001b1c <MX_GPIO_Init+0x640>)
 8001a34:	f003 f918 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001a38:	2332      	movs	r3, #50	; 0x32
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a48:	230b      	movs	r3, #11
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a50:	4619      	mov	r1, r3
 8001a52:	482e      	ldr	r0, [pc, #184]	; (8001b0c <MX_GPIO_Init+0x630>)
 8001a54:	f003 f908 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001a58:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a6a:	230b      	movs	r3, #11
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	482b      	ldr	r0, [pc, #172]	; (8001b24 <MX_GPIO_Init+0x648>)
 8001a76:	f003 f8f7 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_IGBT_Pin MN_Relay_Pin */
  GPIO_InitStruct.Pin = MN_IGBT_Pin|MN_Relay_Pin;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <MX_GPIO_Init+0x630>)
 8001a92:	f003 f8e9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4819      	ldr	r0, [pc, #100]	; (8001b18 <MX_GPIO_Init+0x63c>)
 8001ab2:	f003 f8d9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 8001ab6:	2318      	movs	r3, #24
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_GPIO_Init+0x62c>)
 8001ad2:	f003 f8c9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001ad6:	2386      	movs	r3, #134	; 0x86
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae6:	230b      	movs	r3, #11
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_GPIO_Init+0x62c>)
 8001af2:	f003 f8b9 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	e010      	b.n	8001b28 <MX_GPIO_Init+0x64c>
 8001b06:	bf00      	nop
 8001b08:	58020000 	.word	0x58020000
 8001b0c:	58020800 	.word	0x58020800
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58021800 	.word	0x58021800
 8001b18:	58021c00 	.word	0x58021c00
 8001b1c:	58021400 	.word	0x58021400
 8001b20:	58020c00 	.word	0x58020c00
 8001b24:	58020400 	.word	0x58020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	482c      	ldr	r0, [pc, #176]	; (8001be8 <MX_GPIO_Init+0x70c>)
 8001b38:	f003 f896 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	4619      	mov	r1, r3
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <MX_GPIO_Init+0x710>)
 8001b54:	f003 f888 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4820      	ldr	r0, [pc, #128]	; (8001bf0 <MX_GPIO_Init+0x714>)
 8001b70:	f003 f87a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001b74:	2310      	movs	r3, #16
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b84:	2309      	movs	r3, #9
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <MX_GPIO_Init+0x714>)
 8001b90:	f003 f86a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8001b94:	2304      	movs	r3, #4
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <MX_GPIO_Init+0x718>)
 8001bb0:	f003 f85a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <MX_GPIO_Init+0x714>)
 8001bcc:	f003 f84c 	bl	8004c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f002 fb58 	bl	800428a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bda:	2028      	movs	r0, #40	; 0x28
 8001bdc:	f002 fb6f 	bl	80042be <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	3738      	adds	r7, #56	; 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58021400 	.word	0x58021400
 8001bec:	58021000 	.word	0x58021000
 8001bf0:	58021c00 	.word	0x58021c00
 8001bf4:	58020400 	.word	0x58020400

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>
	...

08001c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_MspInit+0x30>)
 8001c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x30>)
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x30>)
 8001c1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	58024400 	.word	0x58024400

08001c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b090      	sub	sp, #64	; 0x40
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6c      	ldr	r2, [pc, #432]	; (8001e08 <HAL_ADC_MspInit+0x1d0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d14e      	bne.n	8001cf8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c5a:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <HAL_ADC_MspInit+0x1d4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_ADC_MspInit+0x1d4>)
 8001c62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c64:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_ADC_MspInit+0x1d4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10e      	bne.n	8001c8a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c72:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c7c:	4b64      	ldr	r3, [pc, #400]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	4a5f      	ldr	r2, [pc, #380]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb8:	4b55      	ldr	r3, [pc, #340]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	484e      	ldr	r0, [pc, #312]	; (8001e14 <HAL_ADC_MspInit+0x1dc>)
 8001cda:	f002 ffc5 	bl	8004c68 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001cde:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ce6:	f000 fe71 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001cea:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001cee:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001cf2:	f000 fe6b 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cf6:	e082      	b.n	8001dfe <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a46      	ldr	r2, [pc, #280]	; (8001e18 <HAL_ADC_MspInit+0x1e0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d133      	bne.n	8001d6a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_ADC_MspInit+0x1d4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_ADC_MspInit+0x1d4>)
 8001d0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_ADC_MspInit+0x1d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10e      	bne.n	8001d32 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d14:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001d50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d54:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001d58:	f000 fe38 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001d5c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001d60:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001d64:	f000 fe32 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001d68:	e049      	b.n	8001dfe <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <HAL_ADC_MspInit+0x1e4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d144      	bne.n	8001dfe <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_ADC_MspInit+0x1d8>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001dce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001dd2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001dd6:	f000 fdf9 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001dda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001dde:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001de2:	f000 fdf3 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001de6:	2304      	movs	r3, #4
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dea:	2303      	movs	r3, #3
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4809      	ldr	r0, [pc, #36]	; (8001e20 <HAL_ADC_MspInit+0x1e8>)
 8001dfa:	f002 ff35 	bl	8004c68 <HAL_GPIO_Init>
}
 8001dfe:	bf00      	nop
 8001e00:	3740      	adds	r7, #64	; 0x40
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	24000098 	.word	0x24000098
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58020800 	.word	0x58020800
 8001e18:	40022100 	.word	0x40022100
 8001e1c:	58026000 	.word	0x58026000
 8001e20:	58021c00 	.word	0x58021c00

08001e24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_DAC_MspInit+0x80>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d129      	bne.n	8001e9a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_DAC_MspInit+0x84>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_DAC_MspInit+0x84>)
 8001e4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_DAC_MspInit+0x84>)
 8001e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_DAC_MspInit+0x84>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_DAC_MspInit+0x84>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_DAC_MspInit+0x84>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001e82:	2320      	movs	r3, #32
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_DAC_MspInit+0x88>)
 8001e96:	f002 fee7 	bl	8004c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40007400 	.word	0x40007400
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020000 	.word	0x58020000

08001eb0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0b8      	sub	sp, #224	; 0xe0
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	22b4      	movs	r2, #180	; 0xb4
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f008 ffb7 	bl	800ae44 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a54      	ldr	r2, [pc, #336]	; (800202c <HAL_FDCAN_MspInit+0x17c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d14e      	bne.n	8001f7e <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ee6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 f94e 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001efe:	f7ff fe7b 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f02:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <HAL_FDCAN_MspInit+0x180>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a49      	ldr	r2, [pc, #292]	; (8002030 <HAL_FDCAN_MspInit+0x180>)
 8001f0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f0c:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_FDCAN_MspInit+0x180>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10e      	bne.n	8001f32 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001f16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f1a:	4a46      	ldr	r2, [pc, #280]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001f26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f38:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001f50:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f6a:	2309      	movs	r3, #9
 8001f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f74:	4619      	mov	r1, r3
 8001f76:	4830      	ldr	r0, [pc, #192]	; (8002038 <HAL_FDCAN_MspInit+0x188>)
 8001f78:	f002 fe76 	bl	8004c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f7c:	e051      	b.n	8002022 <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_FDCAN_MspInit+0x18c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d14c      	bne.n	8002022 <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f8fa 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001fa6:	f7ff fe27 	bl	8001bf8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_FDCAN_MspInit+0x180>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_FDCAN_MspInit+0x180>)
 8001fb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_FDCAN_MspInit+0x180>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10e      	bne.n	8001fda <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001fbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001fce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_FDCAN_MspInit+0x184>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001ff8:	2360      	movs	r3, #96	; 0x60
 8001ffa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002010:	2309      	movs	r3, #9
 8002012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800201a:	4619      	mov	r1, r3
 800201c:	4808      	ldr	r0, [pc, #32]	; (8002040 <HAL_FDCAN_MspInit+0x190>)
 800201e:	f002 fe23 	bl	8004c68 <HAL_GPIO_Init>
}
 8002022:	bf00      	nop
 8002024:	37e0      	adds	r7, #224	; 0xe0
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	4000a000 	.word	0x4000a000
 8002030:	2400009c 	.word	0x2400009c
 8002034:	58024400 	.word	0x58024400
 8002038:	58021c00 	.word	0x58021c00
 800203c:	4000a400 	.word	0x4000a400
 8002040:	58020400 	.word	0x58020400

08002044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0b6      	sub	sp, #216	; 0xd8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	22b4      	movs	r2, #180	; 0xb4
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f008 feed 	bl	800ae44 <memset>
  if(hi2c->Instance==I2C4)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_I2C_MspInit+0xc0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d142      	bne.n	80020fa <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002074:	2310      	movs	r3, #16
 8002076:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4618      	mov	r0, r3
 8002084:	f004 f886 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800208e:	f7ff fdb3 	bl	8001bf8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_I2C_MspInit+0xc4>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_I2C_MspInit+0xc4>)
 800209a:	f043 0320 	orr.w	r3, r3, #32
 800209e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_I2C_MspInit+0xc4>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80020b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b8:	2312      	movs	r3, #18
 80020ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020be:	2301      	movs	r3, #1
 80020c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80020ca:	2304      	movs	r3, #4
 80020cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <HAL_I2C_MspInit+0xc8>)
 80020d8:	f002 fdc6 	bl	8004c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_I2C_MspInit+0xc4>)
 80020de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_I2C_MspInit+0xc4>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_I2C_MspInit+0xc4>)
 80020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	37d8      	adds	r7, #216	; 0xd8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58001c00 	.word	0x58001c00
 8002108:	58024400 	.word	0x58024400
 800210c:	58021400 	.word	0x58021400

08002110 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0b0      	sub	sp, #192	; 0xc0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	22b4      	movs	r2, #180	; 0xb4
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f008 fe8f 	bl	800ae44 <memset>
  if(hrtc->Instance==RTC)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_RTC_MspInit+0x58>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d116      	bne.n	800215e <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002134:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	4618      	mov	r0, r3
 8002144:	f004 f826 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800214e:	f7ff fd53 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RTC_MspInit+0x5c>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <HAL_RTC_MspInit+0x5c>)
 8002158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	37c0      	adds	r7, #192	; 0xc0
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	58004000 	.word	0x58004000
 800216c:	58024400 	.word	0x58024400

08002170 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_TIM_PWM_MspInit+0x90>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10f      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 8002184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 8002194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021a0:	e028      	b.n	80021f4 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_TIM_PWM_MspInit+0x98>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d10f      	bne.n	80021cc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 80021ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b2:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 80021be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
}
 80021ca:	e013      	b.n	80021f4 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_TIM_PWM_MspInit+0x9c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 80021d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_TIM_PWM_MspInit+0x94>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40010000 	.word	0x40010000
 8002204:	58024400 	.word	0x58024400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00

08002210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_TIM_Base_MspInit+0x74>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d117      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_TIM_Base_MspInit+0x78>)
 8002224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002228:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_TIM_Base_MspInit+0x78>)
 800222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_TIM_Base_MspInit+0x78>)
 8002234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	202c      	movs	r0, #44	; 0x2c
 8002246:	f002 f820 	bl	800428a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800224a:	202c      	movs	r0, #44	; 0x2c
 800224c:	f002 f837 	bl	80042be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002250:	e013      	b.n	800227a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM14)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a0d      	ldr	r2, [pc, #52]	; (800228c <HAL_TIM_Base_MspInit+0x7c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d10e      	bne.n	800227a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_TIM_Base_MspInit+0x78>)
 800225e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x78>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_TIM_Base_MspInit+0x78>)
 800226e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40001c00 	.word	0x40001c00
 8002288:	58024400 	.word	0x58024400
 800228c:	40002000 	.word	0x40002000

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a48      	ldr	r2, [pc, #288]	; (80023d0 <HAL_TIM_MspPostInit+0x140>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d120      	bne.n	80022f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b8:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 80022d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	483a      	ldr	r0, [pc, #232]	; (80023d8 <HAL_TIM_MspPostInit+0x148>)
 80022ee:	f002 fcbb 	bl	8004c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80022f2:	e068      	b.n	80023c6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_TIM_MspPostInit+0x14c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d13f      	bne.n	800237e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	4a33      	ldr	r2, [pc, #204]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 800231e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002322:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800234a:	2302      	movs	r3, #2
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4822      	ldr	r0, [pc, #136]	; (80023e0 <HAL_TIM_MspPostInit+0x150>)
 8002356:	f002 fc87 	bl	8004c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 800235a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800236c:	2302      	movs	r3, #2
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	481b      	ldr	r0, [pc, #108]	; (80023e4 <HAL_TIM_MspPostInit+0x154>)
 8002378:	f002 fc76 	bl	8004c68 <HAL_GPIO_Init>
}
 800237c:	e023      	b.n	80023c6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_TIM_MspPostInit+0x158>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d11e      	bne.n	80023c6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_TIM_MspPostInit+0x144>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023b6:	2302      	movs	r3, #2
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <HAL_TIM_MspPostInit+0x15c>)
 80023c2:	f002 fc51 	bl	8004c68 <HAL_GPIO_Init>
}
 80023c6:	bf00      	nop
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40010000 	.word	0x40010000
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58021000 	.word	0x58021000
 80023dc:	40000800 	.word	0x40000800
 80023e0:	58020400 	.word	0x58020400
 80023e4:	58020c00 	.word	0x58020c00
 80023e8:	40000c00 	.word	0x40000c00
 80023ec:	58020000 	.word	0x58020000

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0b8      	sub	sp, #224	; 0xe0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002408:	f107 0318 	add.w	r3, r7, #24
 800240c:	22b4      	movs	r2, #180	; 0xb4
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f008 fd17 	bl	800ae44 <memset>
  if(huart->Instance==USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_UART_MspInit+0x150>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d143      	bne.n	80024a8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	4618      	mov	r0, r3
 8002430:	f003 feb0 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800243a:	f7ff fbdd 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002444:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	4b39      	ldr	r3, [pc, #228]	; (8002544 <HAL_UART_MspInit+0x154>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	4a38      	ldr	r2, [pc, #224]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_UART_MspInit+0x154>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800247a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800247e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002494:	2304      	movs	r3, #4
 8002496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800249e:	4619      	mov	r1, r3
 80024a0:	4829      	ldr	r0, [pc, #164]	; (8002548 <HAL_UART_MspInit+0x158>)
 80024a2:	f002 fbe1 	bl	8004c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a6:	e047      	b.n	8002538 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a27      	ldr	r2, [pc, #156]	; (800254c <HAL_UART_MspInit+0x15c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d142      	bne.n	8002538 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fe67 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80024cc:	f7ff fb94 	bl	8001bf8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_UART_MspInit+0x154>)
 80024d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d6:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_UART_MspInit+0x154>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_UART_MspInit+0x154>)
 80024e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_UART_MspInit+0x154>)
 80024f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <HAL_UART_MspInit+0x154>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800250c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002526:	2307      	movs	r3, #7
 8002528:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002530:	4619      	mov	r1, r3
 8002532:	4807      	ldr	r0, [pc, #28]	; (8002550 <HAL_UART_MspInit+0x160>)
 8002534:	f002 fb98 	bl	8004c68 <HAL_GPIO_Init>
}
 8002538:	bf00      	nop
 800253a:	37e0      	adds	r7, #224	; 0xe0
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40011000 	.word	0x40011000
 8002544:	58024400 	.word	0x58024400
 8002548:	58020400 	.word	0x58020400
 800254c:	40004800 	.word	0x40004800
 8002550:	58020c00 	.word	0x58020c00

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a0:	f000 f9d0 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80025ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025b0:	f002 fd1b 	bl	8004fea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025b8:	f002 fd17 	bl	8004fea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80025c6:	f006 fad7 	bl	8008b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	240022c4 	.word	0x240022c4

080025d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00a      	b.n	80025fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025e6:	f3af 8000 	nop.w
 80025ea:	4601      	mov	r1, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	60ba      	str	r2, [r7, #8]
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf0      	blt.n	80025e6 <_read+0x12>
	}

return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e009      	b.n	8002634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	60ba      	str	r2, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe f83d 	bl	80006a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf1      	blt.n	8002620 <_write+0x12>
	}
	return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_close>:

int _close(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266e:	605a      	str	r2, [r3, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_isatty>:

int _isatty(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f008 fb78 	bl	800add4 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	220c      	movs	r2, #12
 80026e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	24050000 	.word	0x24050000
 8002710:	00000400 	.word	0x00000400
 8002714:	240000a0 	.word	0x240000a0
 8002718:	240025b0 	.word	0x240025b0

0800271c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <SystemInit+0xd0>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	4a31      	ldr	r2, [pc, #196]	; (80027ec <SystemInit+0xd0>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002730:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <SystemInit+0xd4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2b06      	cmp	r3, #6
 800273a:	d807      	bhi.n	800274c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <SystemInit+0xd4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 030f 	bic.w	r3, r3, #15
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <SystemInit+0xd4>)
 8002746:	f043 0307 	orr.w	r3, r3, #7
 800274a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800274c:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <SystemInit+0xd8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <SystemInit+0xd8>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <SystemInit+0xd8>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <SystemInit+0xd8>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4924      	ldr	r1, [pc, #144]	; (80027f4 <SystemInit+0xd8>)
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <SystemInit+0xdc>)
 8002766:	4013      	ands	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <SystemInit+0xd4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <SystemInit+0xd4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <SystemInit+0xd4>)
 8002780:	f043 0307 	orr.w	r3, r3, #7
 8002784:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <SystemInit+0xd8>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <SystemInit+0xd8>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <SystemInit+0xd8>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <SystemInit+0xd8>)
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <SystemInit+0xe0>)
 800279c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <SystemInit+0xd8>)
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <SystemInit+0xe4>)
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027a4:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <SystemInit+0xd8>)
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <SystemInit+0xe8>)
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <SystemInit+0xd8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <SystemInit+0xd8>)
 80027b2:	4a14      	ldr	r2, [pc, #80]	; (8002804 <SystemInit+0xe8>)
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <SystemInit+0xd8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <SystemInit+0xd8>)
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <SystemInit+0xe8>)
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <SystemInit+0xd8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <SystemInit+0xd8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <SystemInit+0xd8>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <SystemInit+0xd8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <SystemInit+0xec>)
 80027dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027e0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00
 80027f0:	52002000 	.word	0x52002000
 80027f4:	58024400 	.word	0x58024400
 80027f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027fc:	02020200 	.word	0x02020200
 8002800:	01ff0000 	.word	0x01ff0000
 8002804:	01010280 	.word	0x01010280
 8002808:	52004000 	.word	0x52004000

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002810:	f7ff ff84 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002816:	490d      	ldr	r1, [pc, #52]	; (800284c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800283a:	f008 fad1 	bl	800ade0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7fe f84f 	bl	80008e0 <main>
  bx  lr
 8002842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002844:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800284c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002850:	0800bf78 	.word	0x0800bf78
  ldr r2, =_sbss
 8002854:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8002858:	240025b0 	.word	0x240025b0

0800285c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC3_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002866:	2003      	movs	r0, #3
 8002868:	f001 fd04 	bl	8004274 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800286c:	f003 fabc 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_Init+0x68>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	4913      	ldr	r1, [pc, #76]	; (80028cc <HAL_Init+0x6c>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_Init+0x68>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_Init+0x6c>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <HAL_Init+0x70>)
 80028a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028a4:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <HAL_Init+0x74>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028aa:	2000      	movs	r0, #0
 80028ac:	f000 f814 	bl	80028d8 <HAL_InitTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e002      	b.n	80028c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ba:	f7ff f9a3 	bl	8001c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	58024400 	.word	0x58024400
 80028cc:	0800be98 	.word	0x0800be98
 80028d0:	24000004 	.word	0x24000004
 80028d4:	24000000 	.word	0x24000000

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_InitTick+0x60>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e021      	b.n	8002930 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_InitTick+0x64>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_InitTick+0x60>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fce9 	bl	80042da <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f001 fcb3 	bl	800428a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x68>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2400000c 	.word	0x2400000c
 800293c:	24000000 	.word	0x24000000
 8002940:	24000008 	.word	0x24000008

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2400000c 	.word	0x2400000c
 8002968:	2400259c 	.word	0x2400259c

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2400259c 	.word	0x2400259c

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2400000c 	.word	0x2400000c

080029cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58000400 	.word	0x58000400

080029f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3360      	adds	r3, #96	; 0x60
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <LL_ADC_SetOffset+0x60>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10b      	bne.n	8002a9c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a9a:	e00b      	b.n	8002ab4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	58026000 	.word	0x58026000

08002ac4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	611a      	str	r2, [r3, #16]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	601a      	str	r2, [r3, #0]
  }
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	58026000 	.word	0x58026000

08002b68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10e      	bne.n	8002b9a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3360      	adds	r3, #96	; 0x60
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	58026000 	.word	0x58026000

08002bac <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <LL_ADC_SetOffsetSign+0x40>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10e      	bne.n	8002bde <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	58026000 	.word	0x58026000

08002bf0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <LL_ADC_SetOffsetState+0x50>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002c22:	e007      	b.n	8002c34 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	58026000 	.word	0x58026000

08002c44 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3330      	adds	r3, #48	; 0x30
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	4413      	add	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	211f      	movs	r1, #31
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 011f 	and.w	r1, r3, #31
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3314      	adds	r3, #20
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0e5b      	lsrs	r3, r3, #25
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	0d1b      	lsrs	r3, r3, #20
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2107      	movs	r1, #7
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	0d1b      	lsrs	r3, r3, #20
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d115      	bne.n	8002d34 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0318 	and.w	r3, r3, #24
 8002d1e:	4914      	ldr	r1, [pc, #80]	; (8002d70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d20:	40d9      	lsrs	r1, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	400b      	ands	r3, r1
 8002d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d32:	e014      	b.n	8002d5e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0318 	and.w	r3, r3, #24
 8002d4a:	4909      	ldr	r1, [pc, #36]	; (8002d70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d4c:	40d9      	lsrs	r1, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	400b      	ands	r3, r1
 8002d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	58026000 	.word	0x58026000
 8002d70:	000fffff 	.word	0x000fffff

08002d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6093      	str	r3, [r2, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	5fffffc0 	.word	0x5fffffc0

08002d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	6fffffc0 	.word	0x6fffffc0

08002de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dfc:	d101      	bne.n	8002e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <LL_ADC_IsEnabled+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_ADC_IsEnabled+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1ee      	b.n	800327c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fe fec3 	bl	8001c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff67 	bl	8002d98 <LL_ADC_IsDeepPowerDownEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff4d 	bl	8002d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff82 	bl	8002de8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d114      	bne.n	8002f14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff66 	bl	8002dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ef4:	4b8e      	ldr	r3, [pc, #568]	; (8003130 <HAL_ADC_Init+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	4a8e      	ldr	r2, [pc, #568]	; (8003134 <HAL_ADC_Init+0x2b0>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f06:	e002      	b.n	8002f0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff65 	bl	8002de8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	f043 0210 	orr.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff76 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002f4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 8188 	bne.w	800326a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 8184 	bne.w	800326a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff4a 	bl	8002e10 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d136      	bne.n	8002ff0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6c      	ldr	r2, [pc, #432]	; (8003138 <HAL_ADC_Init+0x2b4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_ADC_Init+0x112>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_ADC_Init+0x2b8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10e      	bne.n	8002fb4 <HAL_ADC_Init+0x130>
 8002f96:	4868      	ldr	r0, [pc, #416]	; (8003138 <HAL_ADC_Init+0x2b4>)
 8002f98:	f7ff ff3a 	bl	8002e10 <LL_ADC_IsEnabled>
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	4867      	ldr	r0, [pc, #412]	; (800313c <HAL_ADC_Init+0x2b8>)
 8002fa0:	f7ff ff36 	bl	8002e10 <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e008      	b.n	8002fc6 <HAL_ADC_Init+0x142>
 8002fb4:	4862      	ldr	r0, [pc, #392]	; (8003140 <HAL_ADC_Init+0x2bc>)
 8002fb6:	f7ff ff2b 	bl	8002e10 <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5a      	ldr	r2, [pc, #360]	; (8003138 <HAL_ADC_Init+0x2b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_Init+0x15a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_ADC_Init+0x2b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_Init+0x15e>
 8002fde:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_ADC_Init+0x2c0>)
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_Init+0x160>
 8002fe2:	4a59      	ldr	r2, [pc, #356]	; (8003148 <HAL_ADC_Init+0x2c4>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7ff fd04 	bl	80029f8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_ADC_Init+0x2bc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d129      	bne.n	800304e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7e5b      	ldrb	r3, [r3, #25]
 8002ffe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003004:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800300a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d013      	beq.n	800303c <HAL_ADC_Init+0x1b8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d00d      	beq.n	8003038 <HAL_ADC_Init+0x1b4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b1c      	cmp	r3, #28
 8003022:	d007      	beq.n	8003034 <HAL_ADC_Init+0x1b0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b18      	cmp	r3, #24
 800302a:	d101      	bne.n	8003030 <HAL_ADC_Init+0x1ac>
 800302c:	2318      	movs	r3, #24
 800302e:	e006      	b.n	800303e <HAL_ADC_Init+0x1ba>
 8003030:	2300      	movs	r3, #0
 8003032:	e004      	b.n	800303e <HAL_ADC_Init+0x1ba>
 8003034:	2310      	movs	r3, #16
 8003036:	e002      	b.n	800303e <HAL_ADC_Init+0x1ba>
 8003038:	2308      	movs	r3, #8
 800303a:	e000      	b.n	800303e <HAL_ADC_Init+0x1ba>
 800303c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800303e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003046:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e00e      	b.n	800306c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7e5b      	ldrb	r3, [r3, #25]
 8003052:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003058:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800305e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003066:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d106      	bne.n	8003084 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	3b01      	subs	r3, #1
 800307c:	045b      	lsls	r3, r3, #17
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_ADC_Init+0x2bc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d115      	bne.n	80030d6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4b26      	ldr	r3, [pc, #152]	; (800314c <HAL_ADC_Init+0x2c8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	69b9      	ldr	r1, [r7, #24]
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	611a      	str	r2, [r3, #16]
 80030d4:	e009      	b.n	80030ea <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_ADC_Init+0x2cc>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	69b9      	ldr	r1, [r7, #24]
 80030e6:	430b      	orrs	r3, r1
 80030e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fea1 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 80030f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff feae 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003100:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 808e 	bne.w	8003226 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 808a 	bne.w	8003226 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_ADC_Init+0x2bc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d11b      	bne.n	8003154 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7e1b      	ldrb	r3, [r3, #24]
 8003120:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003128:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e018      	b.n	8003162 <HAL_ADC_Init+0x2de>
 8003130:	24000000 	.word	0x24000000
 8003134:	053e2d63 	.word	0x053e2d63
 8003138:	40022000 	.word	0x40022000
 800313c:	40022100 	.word	0x40022100
 8003140:	58026000 	.word	0x58026000
 8003144:	40022300 	.word	0x40022300
 8003148:	58026300 	.word	0x58026300
 800314c:	fff04007 	.word	0xfff04007
 8003150:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7e1b      	ldrb	r3, [r3, #24]
 8003158:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_ADC_Init+0x400>)
 800316a:	4013      	ands	r3, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	69b9      	ldr	r1, [r7, #24]
 8003172:	430b      	orrs	r3, r1
 8003174:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800317c:	2b01      	cmp	r3, #1
 800317e:	d137      	bne.n	80031f0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3f      	ldr	r2, [pc, #252]	; (8003288 <HAL_ADC_Init+0x404>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d116      	bne.n	80031be <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	4b3d      	ldr	r3, [pc, #244]	; (800328c <HAL_ADC_Init+0x408>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80031ae:	430a      	orrs	r2, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	611a      	str	r2, [r3, #16]
 80031bc:	e020      	b.n	8003200 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_ADC_Init+0x40c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0411      	lsls	r1, r2, #16
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031da:	4311      	orrs	r1, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80031e0:	430a      	orrs	r2, r1
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	611a      	str	r2, [r3, #16]
 80031ee:	e007      	b.n	8003200 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <HAL_ADC_Init+0x404>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d002      	beq.n	8003226 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fd63 	bl	8003cec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10c      	bne.n	8003248 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f023 010f 	bic.w	r1, r3, #15
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
 8003246:	e007      	b.n	8003258 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020f 	bic.w	r2, r2, #15
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	f023 0303 	bic.w	r3, r3, #3
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
 8003268:	e007      	b.n	800327a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800327a:	7ffb      	ldrb	r3, [r7, #31]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3724      	adds	r7, #36	; 0x24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	ffffbffc 	.word	0xffffbffc
 8003288:	58026000 	.word	0x58026000
 800328c:	fc00f81f 	.word	0xfc00f81f
 8003290:	fc00f81e 	.word	0xfc00f81e

08003294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b0b9      	sub	sp, #228	; 0xe4
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ae:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4ab3      	ldr	r2, [pc, #716]	; (8003584 <HAL_ADC_ConfigChannel+0x2f0>)
 80032b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d102      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x34>
 80032c2:	2302      	movs	r3, #2
 80032c4:	f000 bcfa 	b.w	8003cbc <HAL_ADC_ConfigChannel+0xa28>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fdae 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 84de 	bne.w	8003c9e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4aa8      	ldr	r2, [pc, #672]	; (8003588 <HAL_ADC_ConfigChannel+0x2f4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d033      	beq.n	8003354 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <HAL_ADC_ConfigChannel+0x76>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2201      	movs	r2, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	e01d      	b.n	8003346 <HAL_ADC_ConfigChannel+0xb2>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800331e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003322:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e004      	b.n	800333c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	69d1      	ldr	r1, [r2, #28]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	f7ff fc6f 	bl	8002c44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fd63 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8003370:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fd6f 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 800337e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 8270 	bne.w	800386c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800338c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 826b 	bne.w	800386c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7ff fc7a 	bl	8002c9c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_ADC_ConfigChannel+0x2f4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10d      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033cc:	e032      	b.n	8003434 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033ce:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_ADC_ConfigChannel+0x2f8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033da:	d10b      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x160>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	e01d      	b.n	8003430 <HAL_ADC_ConfigChannel+0x19c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_ADC_ConfigChannel+0x186>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	e00a      	b.n	8003430 <HAL_ADC_ConfigChannel+0x19c>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d048      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6919      	ldr	r1, [r3, #16]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800344c:	f7ff fb08 	bl	8002a60 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <HAL_ADC_ConfigChannel+0x2f4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d119      	bne.n	800348e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	461a      	mov	r2, r3
 8003468:	f7ff fba0 	bl	8002bac <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1f0>
 800347e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003482:	e000      	b.n	8003486 <HAL_ADC_ConfigChannel+0x1f2>
 8003484:	2300      	movs	r3, #0
 8003486:	461a      	mov	r2, r3
 8003488:	f7ff fb6e 	bl	8002b68 <LL_ADC_SetOffsetSaturation>
 800348c:	e1ee      	b.n	800386c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6919      	ldr	r1, [r3, #16]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x212>
 80034a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034a4:	e000      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x214>
 80034a6:	2300      	movs	r3, #0
 80034a8:	461a      	mov	r2, r3
 80034aa:	f7ff fb3b 	bl	8002b24 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6919      	ldr	r1, [r3, #16]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	7e1b      	ldrb	r3, [r3, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x230>
 80034be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c2:	e000      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x232>
 80034c4:	2300      	movs	r3, #0
 80034c6:	461a      	mov	r2, r3
 80034c8:	f7ff fb12 	bl	8002af0 <LL_ADC_SetDataRightShift>
 80034cc:	e1ce      	b.n	800386c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2d      	ldr	r2, [pc, #180]	; (8003588 <HAL_ADC_ConfigChannel+0x2f4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	f040 8181 	bne.w	80037dc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff faef 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x272>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fae4 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 80034fc:	4603      	mov	r3, r0
 80034fe:	0e9b      	lsrs	r3, r3, #26
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	e01e      	b.n	8003544 <HAL_ADC_ConfigChannel+0x2b0>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fad9 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 8003512:	4603      	mov	r3, r0
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800352c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003534:	2320      	movs	r3, #32
 8003536:	e004      	b.n	8003542 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_ADC_ConfigChannel+0x2c8>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	e01e      	b.n	800359a <HAL_ADC_ConfigChannel+0x306>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e00a      	b.n	800359a <HAL_ADC_ConfigChannel+0x306>
 8003584:	47ff0000 	.word	0x47ff0000
 8003588:	58026000 	.word	0x58026000
 800358c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	429a      	cmp	r2, r3
 800359c:	d106      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fb22 	bl	8002bf0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fa86 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x344>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fa7b 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 80035ce:	4603      	mov	r3, r0
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	f003 021f 	and.w	r2, r3, #31
 80035d6:	e01e      	b.n	8003616 <HAL_ADC_ConfigChannel+0x382>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fa70 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80035f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80035fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003606:	2320      	movs	r3, #32
 8003608:	e004      	b.n	8003614 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800360a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_ConfigChannel+0x39a>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	e018      	b.n	8003660 <HAL_ADC_ConfigChannel+0x3cc>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800364a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e004      	b.n	8003660 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	429a      	cmp	r2, r3
 8003662:	d106      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2200      	movs	r2, #0
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fabf 	bl	8002bf0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fa23 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 800367e:	4603      	mov	r3, r0
 8003680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_ADC_ConfigChannel+0x40a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fa18 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	e01e      	b.n	80036dc <HAL_ADC_ConfigChannel+0x448>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2102      	movs	r1, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fa0d 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80036bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80036c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e004      	b.n	80036da <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80036d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x460>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	e014      	b.n	800371e <HAL_ADC_ConfigChannel+0x48a>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e004      	b.n	800371e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	429a      	cmp	r2, r3
 8003720:	d106      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fa60 	bl	8002bf0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2103      	movs	r1, #3
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f9c4 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 800373c:	4603      	mov	r3, r0
 800373e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_ADC_ConfigChannel+0x4c8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2103      	movs	r1, #3
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f9b9 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 8003752:	4603      	mov	r3, r0
 8003754:	0e9b      	lsrs	r3, r3, #26
 8003756:	f003 021f 	and.w	r2, r3, #31
 800375a:	e017      	b.n	800378c <HAL_ADC_ConfigChannel+0x4f8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2103      	movs	r1, #3
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f9ae 	bl	8002ac4 <LL_ADC_GetOffsetChannel>
 8003768:	4603      	mov	r3, r0
 800376a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e003      	b.n	800378a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x510>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	e011      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x534>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80037b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80037b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80037c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d14f      	bne.n	800386c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2103      	movs	r1, #3
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fa0b 	bl	8002bf0 <LL_ADC_SetOffsetState>
 80037da:	e047      	b.n	800386c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	069b      	lsls	r3, r3, #26
 8003810:	429a      	cmp	r2, r3
 8003812:	d107      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003822:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	069b      	lsls	r3, r3, #26
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003846:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	069b      	lsls	r3, r3, #26
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800386a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff facd 	bl	8002e10 <LL_ADC_IsEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 8219 	bne.w	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	461a      	mov	r2, r3
 800388c:	f7ff fa32 	bl	8002cf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4aa1      	ldr	r2, [pc, #644]	; (8003b1c <HAL_ADC_ConfigChannel+0x888>)
 8003896:	4293      	cmp	r3, r2
 8003898:	f040 812e 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x630>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	bf94      	ite	ls
 80038bc:	2301      	movls	r3, #1
 80038be:	2300      	movhi	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e019      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x664>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80038d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80038d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80038e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	bf94      	ite	ls
 80038f2:	2301      	movls	r3, #1
 80038f4:	2300      	movhi	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d079      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x684>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	3301      	adds	r3, #1
 8003910:	069b      	lsls	r3, r3, #26
 8003912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003916:	e015      	b.n	8003944 <HAL_ADC_ConfigChannel+0x6b0>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003928:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003930:	2320      	movs	r3, #32
 8003932:	e003      	b.n	800393c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3301      	adds	r3, #1
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x6d0>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0e9b      	lsrs	r3, r3, #26
 8003956:	3301      	adds	r3, #1
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	e017      	b.n	8003994 <HAL_ADC_ConfigChannel+0x700>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	ea42 0103 	orr.w	r1, r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x726>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	3301      	adds	r3, #1
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	051b      	lsls	r3, r3, #20
 80039b8:	e018      	b.n	80039ec <HAL_ADC_ConfigChannel+0x758>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e003      	b.n	80039de <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f003 021f 	and.w	r2, r3, #31
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ec:	430b      	orrs	r3, r1
 80039ee:	e07e      	b.n	8003aee <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x778>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	069b      	lsls	r3, r3, #26
 8003a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a0a:	e015      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x7a4>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e003      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	069b      	lsls	r3, r3, #26
 8003a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x7c4>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0e9b      	lsrs	r3, r3, #26
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	e017      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x7f4>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	61bb      	str	r3, [r7, #24]
  return result;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	ea42 0103 	orr.w	r1, r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x820>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0e9b      	lsrs	r3, r3, #26
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b1e      	subs	r3, #30
 8003aac:	051b      	lsls	r3, r3, #20
 8003aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	e01b      	b.n	8003aec <HAL_ADC_ConfigChannel+0x858>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
  return result;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f003 021f 	and.w	r2, r3, #31
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	051b      	lsls	r3, r3, #20
 8003ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aec:	430b      	orrs	r3, r1
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7ff f8d2 	bl	8002c9c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f280 80d7 	bge.w	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <HAL_ADC_ConfigChannel+0x88c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_ADC_ConfigChannel+0x882>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_ADC_ConfigChannel+0x890>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10a      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x898>
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <HAL_ADC_ConfigChannel+0x894>)
 8003b18:	e009      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x89a>
 8003b1a:	bf00      	nop
 8003b1c:	47ff0000 	.word	0x47ff0000
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40022100 	.word	0x40022100
 8003b28:	40022300 	.word	0x40022300
 8003b2c:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe ff88 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8003b34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a62      	ldr	r2, [pc, #392]	; (8003cc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x8b8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a61      	ldr	r2, [pc, #388]	; (8003ccc <HAL_ADC_ConfigChannel+0xa38>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10e      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x8d6>
 8003b4c:	485e      	ldr	r0, [pc, #376]	; (8003cc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003b4e:	f7ff f95f 	bl	8002e10 <LL_ADC_IsEnabled>
 8003b52:	4604      	mov	r4, r0
 8003b54:	485d      	ldr	r0, [pc, #372]	; (8003ccc <HAL_ADC_ConfigChannel+0xa38>)
 8003b56:	f7ff f95b 	bl	8002e10 <LL_ADC_IsEnabled>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4323      	orrs	r3, r4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e008      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x8e8>
 8003b6a:	4859      	ldr	r0, [pc, #356]	; (8003cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003b6c:	f7ff f950 	bl	8002e10 <LL_ADC_IsEnabled>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8084 	beq.w	8003c8a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a53      	ldr	r2, [pc, #332]	; (8003cd4 <HAL_ADC_ConfigChannel+0xa40>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d132      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x95e>
 8003b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d12c      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4c      	ldr	r2, [pc, #304]	; (8003cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f040 8086 	bne.w	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_ADC_ConfigChannel+0x924>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a46      	ldr	r2, [pc, #280]	; (8003ccc <HAL_ADC_ConfigChannel+0xa38>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x928>
 8003bb8:	4a47      	ldr	r2, [pc, #284]	; (8003cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8003bba:	e000      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x92a>
 8003bbc:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7fe ff28 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <HAL_ADC_ConfigChannel+0xa48>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	4a42      	ldr	r2, [pc, #264]	; (8003ce0 <HAL_ADC_ConfigChannel+0xa4c>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	3301      	adds	r3, #1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003be2:	e002      	b.n	8003bea <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f9      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bf0:	e05e      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <HAL_ADC_ConfigChannel+0xa50>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d120      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x9aa>
 8003bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11a      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d14e      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0x992>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_ADC_ConfigChannel+0xa38>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x996>
 8003c26:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8003c28:	e000      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x998>
 8003c2a:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f7fe fef1 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c3c:	e038      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a29      	ldr	r2, [pc, #164]	; (8003ce8 <HAL_ADC_ConfigChannel+0xa54>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d133      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
 8003c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d12d      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d128      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_ConfigChannel+0x9de>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_ADC_ConfigChannel+0xa38>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x9e2>
 8003c72:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x9e4>
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f7fe fecb 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
 8003c88:	e012      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003c9c:	e008      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003cb8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	37e4      	adds	r7, #228	; 0xe4
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}
 8003cc4:	58026300 	.word	0x58026300
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40022100 	.word	0x40022100
 8003cd0:	58026000 	.word	0x58026000
 8003cd4:	c7520000 	.word	0xc7520000
 8003cd8:	40022300 	.word	0x40022300
 8003cdc:	24000000 	.word	0x24000000
 8003ce0:	053e2d63 	.word	0x053e2d63
 8003ce4:	c3210000 	.word	0xc3210000
 8003ce8:	cb840000 	.word	0xcb840000

08003cec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6b      	ldr	r2, [pc, #428]	; (8003ea8 <ADC_ConfigureBoostMode+0x1bc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <ADC_ConfigureBoostMode+0x1c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6a      	ldr	r2, [pc, #424]	; (8003eac <ADC_ConfigureBoostMode+0x1c0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d109      	bne.n	8003d1c <ADC_ConfigureBoostMode+0x30>
 8003d08:	4b69      	ldr	r3, [pc, #420]	; (8003eb0 <ADC_ConfigureBoostMode+0x1c4>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e008      	b.n	8003d2e <ADC_ConfigureBoostMode+0x42>
 8003d1c:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <ADC_ConfigureBoostMode+0x1c8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01c      	beq.n	8003d6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d32:	f002 f9d3 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8003d36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d40:	d010      	beq.n	8003d64 <ADC_ConfigureBoostMode+0x78>
 8003d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d46:	d871      	bhi.n	8003e2c <ADC_ConfigureBoostMode+0x140>
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d002      	beq.n	8003d54 <ADC_ConfigureBoostMode+0x68>
 8003d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d52:	d16b      	bne.n	8003e2c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	60fb      	str	r3, [r7, #12]
        break;
 8003d62:	e066      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	60fb      	str	r3, [r7, #12]
        break;
 8003d6a:	e062      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d70:	f003 f90a 	bl	8006f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d7e:	d051      	beq.n	8003e24 <ADC_ConfigureBoostMode+0x138>
 8003d80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d84:	d854      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003d86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d8a:	d047      	beq.n	8003e1c <ADC_ConfigureBoostMode+0x130>
 8003d8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d90:	d84e      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003d92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d96:	d03d      	beq.n	8003e14 <ADC_ConfigureBoostMode+0x128>
 8003d98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d9c:	d848      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da2:	d033      	beq.n	8003e0c <ADC_ConfigureBoostMode+0x120>
 8003da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da8:	d842      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003daa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dae:	d029      	beq.n	8003e04 <ADC_ConfigureBoostMode+0x118>
 8003db0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003db4:	d83c      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003db6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dba:	d01a      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x106>
 8003dbc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dc0:	d836      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003dc2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dc6:	d014      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x106>
 8003dc8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dcc:	d830      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d00e      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x106>
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d82a      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003dda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dde:	d008      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x106>
 8003de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003de4:	d824      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x144>
 8003de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dea:	d002      	beq.n	8003df2 <ADC_ConfigureBoostMode+0x106>
 8003dec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003df0:	d11e      	bne.n	8003e30 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0c9b      	lsrs	r3, r3, #18
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	60fb      	str	r3, [r7, #12]
        break;
 8003e02:	e016      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
        break;
 8003e0a:	e012      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	60fb      	str	r3, [r7, #12]
        break;
 8003e12:	e00e      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	60fb      	str	r3, [r7, #12]
        break;
 8003e1a:	e00a      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	09db      	lsrs	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
        break;
 8003e22:	e006      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	60fb      	str	r3, [r7, #12]
        break;
 8003e2a:	e002      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003e30:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <ADC_ConfigureBoostMode+0x1cc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d808      	bhi.n	8003e52 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e4e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e50:	e025      	b.n	8003e9e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <ADC_ConfigureBoostMode+0x1d0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d80a      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	e016      	b.n	8003e9e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <ADC_ConfigureBoostMode+0x1d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d80a      	bhi.n	8003e8e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	e007      	b.n	8003e9e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e9c:	609a      	str	r2, [r3, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40022100 	.word	0x40022100
 8003eb0:	40022300 	.word	0x40022300
 8003eb4:	58026300 	.word	0x58026300
 8003eb8:	005f5e10 	.word	0x005f5e10
 8003ebc:	00bebc20 	.word	0x00bebc20
 8003ec0:	017d7840 	.word	0x017d7840

08003ec4 <LL_ADC_IsEnabled>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <LL_ADC_IsEnabled+0x18>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_ADC_IsEnabled+0x1a>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_ADC_REG_IsConversionOngoing>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b0a3      	sub	sp, #140	; 0x8c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0c1      	b.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a5e      	ldr	r2, [pc, #376]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d102      	bne.n	8003f4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f48:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e001      	b.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0a0      	b.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffb9 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 8003f78:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ffb2 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 8081 	bne.w	8004090 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d17c      	bne.n	8004090 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a48      	ldr	r2, [pc, #288]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003faa:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003fac:	e000      	b.n	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003fae:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003fb0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d039      	beq.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3a      	ldr	r2, [pc, #232]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10e      	bne.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003fe0:	4836      	ldr	r0, [pc, #216]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fe2:	f7ff ff6f 	bl	8003ec4 <LL_ADC_IsEnabled>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4835      	ldr	r0, [pc, #212]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fea:	f7ff ff6b 	bl	8003ec4 <LL_ADC_IsEnabled>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4323      	orrs	r3, r4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e008      	b.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003ffe:	4833      	ldr	r0, [pc, #204]	; (80040cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004000:	f7ff ff60 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d047      	beq.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800401a:	4013      	ands	r3, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	6811      	ldr	r1, [r2, #0]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	430a      	orrs	r2, r1
 8004026:	431a      	orrs	r2, r3
 8004028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800402a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800402c:	e03a      	b.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800402e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004036:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004038:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1f      	ldr	r2, [pc, #124]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10e      	bne.n	800406c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800404e:	481b      	ldr	r0, [pc, #108]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004050:	f7ff ff38 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004054:	4604      	mov	r4, r0
 8004056:	481a      	ldr	r0, [pc, #104]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004058:	f7ff ff34 	bl	8003ec4 <LL_ADC_IsEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	4323      	orrs	r3, r4
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e008      	b.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800406c:	4817      	ldr	r0, [pc, #92]	; (80040cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800406e:	f7ff ff29 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004088:	4013      	ands	r3, r2
 800408a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800408c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800408e:	e009      	b.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80040a2:	e000      	b.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80040ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	378c      	adds	r7, #140	; 0x8c
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd90      	pop	{r4, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40022100 	.word	0x40022100
 80040c4:	40022300 	.word	0x40022300
 80040c8:	58026300 	.word	0x58026300
 80040cc:	58026000 	.word	0x58026000
 80040d0:	fffff0e0 	.word	0xfffff0e0

080040d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <__NVIC_SetPriorityGrouping+0x40>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040f0:	4013      	ands	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <__NVIC_SetPriorityGrouping+0x44>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <__NVIC_SetPriorityGrouping+0x40>)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	60d3      	str	r3, [r2, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00
 8004118:	05fa0000 	.word	0x05fa0000

0800411c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <__NVIC_GetPriorityGrouping+0x18>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 0307 	and.w	r3, r3, #7
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004146:	2b00      	cmp	r3, #0
 8004148:	db0b      	blt.n	8004162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	4907      	ldr	r1, [pc, #28]	; (8004170 <__NVIC_EnableIRQ+0x38>)
 8004152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2001      	movs	r0, #1
 800415a:	fa00 f202 	lsl.w	r2, r0, r2
 800415e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000e100 	.word	0xe000e100

08004174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	db0a      	blt.n	800419e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	490c      	ldr	r1, [pc, #48]	; (80041c0 <__NVIC_SetPriority+0x4c>)
 800418e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004192:	0112      	lsls	r2, r2, #4
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	440b      	add	r3, r1
 8004198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800419c:	e00a      	b.n	80041b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	4908      	ldr	r1, [pc, #32]	; (80041c4 <__NVIC_SetPriority+0x50>)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	3b04      	subs	r3, #4
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	440b      	add	r3, r1
 80041b2:	761a      	strb	r2, [r3, #24]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000e100 	.word	0xe000e100
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f1c3 0307 	rsb	r3, r3, #7
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	bf28      	it	cs
 80041e6:	2304      	movcs	r3, #4
 80041e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2b06      	cmp	r3, #6
 80041f0:	d902      	bls.n	80041f8 <NVIC_EncodePriority+0x30>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3b03      	subs	r3, #3
 80041f6:	e000      	b.n	80041fa <NVIC_EncodePriority+0x32>
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	401a      	ands	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004210:	f04f 31ff 	mov.w	r1, #4294967295
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	43d9      	mvns	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004220:	4313      	orrs	r3, r2
         );
}
 8004222:	4618      	mov	r0, r3
 8004224:	3724      	adds	r7, #36	; 0x24
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004240:	d301      	bcc.n	8004246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004242:	2301      	movs	r3, #1
 8004244:	e00f      	b.n	8004266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <SysTick_Config+0x40>)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800424e:	210f      	movs	r1, #15
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	f7ff ff8e 	bl	8004174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <SysTick_Config+0x40>)
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <SysTick_Config+0x40>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	e000e010 	.word	0xe000e010

08004274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff29 	bl	80040d4 <__NVIC_SetPriorityGrouping>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	4603      	mov	r3, r0
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004298:	f7ff ff40 	bl	800411c <__NVIC_GetPriorityGrouping>
 800429c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	6978      	ldr	r0, [r7, #20]
 80042a4:	f7ff ff90 	bl	80041c8 <NVIC_EncodePriority>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff5f 	bl	8004174 <__NVIC_SetPriority>
}
 80042b6:	bf00      	nop
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4603      	mov	r3, r0
 80042c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff33 	bl	8004138 <__NVIC_EnableIRQ>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ffa4 	bl	8004230 <SysTick_Config>
 80042e8:	4603      	mov	r3, r0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e014      	b.n	800432e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	791b      	ldrb	r3, [r3, #4]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fd fd85 	bl	8001e24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	795b      	ldrb	r3, [r3, #5]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_DAC_ConfigChannel+0x18>
 800434c:	2302      	movs	r3, #2
 800434e:	e11d      	b.n	800458c <HAL_DAC_ConfigChannel+0x254>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2202      	movs	r2, #2
 800435a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d174      	bne.n	800444e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004364:	f7fe fb02 	bl	800296c <HAL_GetTick>
 8004368:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d134      	bne.n	80043da <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004370:	e011      	b.n	8004396 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004372:	f7fe fafb 	bl	800296c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d90a      	bls.n	8004396 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f043 0208 	orr.w	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2203      	movs	r2, #3
 8004390:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0fa      	b.n	800458c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439c:	4b7d      	ldr	r3, [pc, #500]	; (8004594 <HAL_DAC_ConfigChannel+0x25c>)
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e6      	bne.n	8004372 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80043a4:	2001      	movs	r0, #1
 80043a6:	f7fe faed 	bl	8002984 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	6992      	ldr	r2, [r2, #24]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
 80043b4:	e01e      	b.n	80043f4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043b6:	f7fe fad9 	bl	800296c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d90a      	bls.n	80043da <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f043 0208 	orr.w	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2203      	movs	r2, #3
 80043d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e0d8      	b.n	800458c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	dbe8      	blt.n	80043b6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80043e4:	2001      	movs	r0, #1
 80043e6:	f7fe facd 	bl	8002984 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	6992      	ldr	r2, [r2, #24]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	ea02 0103 	and.w	r1, r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	21ff      	movs	r1, #255	; 0xff
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	ea02 0103 	and.w	r1, r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	409a      	lsls	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d11d      	bne.n	8004492 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	221f      	movs	r2, #31
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4013      	ands	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2207      	movs	r2, #7
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4013      	ands	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	e00f      	b.n	80044dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d102      	bne.n	80044ca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80044c4:	2301      	movs	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e008      	b.n	80044dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e001      	b.n	80044dc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43da      	mvns	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	400a      	ands	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4013      	ands	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	22c0      	movs	r2, #192	; 0xc0
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43da      	mvns	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	400a      	ands	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20008000 	.word	0x20008000

08004598 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b098      	sub	sp, #96	; 0x60
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80045a0:	4a84      	ldr	r2, [pc, #528]	; (80047b4 <HAL_FDCAN_Init+0x21c>)
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4611      	mov	r1, r2
 80045a8:	224c      	movs	r2, #76	; 0x4c
 80045aa:	4618      	mov	r0, r3
 80045ac:	f006 fc3c 	bl	800ae28 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1ca      	b.n	8004950 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7e      	ldr	r2, [pc, #504]	; (80047b8 <HAL_FDCAN_Init+0x220>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d106      	bne.n	80045d2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd fc62 	bl	8001eb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0210 	bic.w	r2, r2, #16
 80045fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045fc:	f7fe f9b6 	bl	800296c <HAL_GetTick>
 8004600:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004602:	e014      	b.n	800462e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004604:	f7fe f9b2 	bl	800296c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b0a      	cmp	r3, #10
 8004610:	d90d      	bls.n	800462e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2203      	movs	r2, #3
 8004626:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e190      	b.n	8004950 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b08      	cmp	r3, #8
 800463a:	d0e3      	beq.n	8004604 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800464c:	f7fe f98e 	bl	800296c <HAL_GetTick>
 8004650:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004652:	e014      	b.n	800467e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004654:	f7fe f98a 	bl	800296c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b0a      	cmp	r3, #10
 8004660:	d90d      	bls.n	800467e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e168      	b.n	8004950 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0e3      	beq.n	8004654 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0202 	orr.w	r2, r2, #2
 800469a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7c1b      	ldrb	r3, [r3, #16]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d108      	bne.n	80046b6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	619a      	str	r2, [r3, #24]
 80046b4:	e007      	b.n	80046c6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7c5b      	ldrb	r3, [r3, #17]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046dc:	619a      	str	r2, [r3, #24]
 80046de:	e007      	b.n	80046f0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7c9b      	ldrb	r3, [r3, #18]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d108      	bne.n	800470a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004706:	619a      	str	r2, [r3, #24]
 8004708:	e007      	b.n	800471a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699a      	ldr	r2, [r3, #24]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004718:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800473e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0210 	bic.w	r2, r2, #16
 800474e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0204 	orr.w	r2, r2, #4
 8004766:	619a      	str	r2, [r3, #24]
 8004768:	e030      	b.n	80047cc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02c      	beq.n	80047cc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d020      	beq.n	80047bc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004788:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0210 	orr.w	r2, r2, #16
 8004798:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d114      	bne.n	80047cc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0220 	orr.w	r2, r2, #32
 80047b0:	619a      	str	r2, [r3, #24]
 80047b2:	e00b      	b.n	80047cc <HAL_FDCAN_Init+0x234>
 80047b4:	0800be4c 	.word	0x0800be4c
 80047b8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0220 	orr.w	r2, r2, #32
 80047ca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	3b01      	subs	r3, #1
 80047da:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047dc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047f4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047f6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004800:	d115      	bne.n	800482e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	3b01      	subs	r3, #1
 800480e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004810:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	3b01      	subs	r3, #1
 8004818:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800481a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	3b01      	subs	r3, #1
 8004824:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800482a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800482c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	4413      	add	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004862:	f023 0107 	bic.w	r1, r3, #7
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004870:	4413      	add	r3, r2
 8004872:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004890:	f023 0107 	bic.w	r1, r3, #7
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800489e:	4413      	add	r3, r2
 80048a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d013      	beq.n	80048de <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048be:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048cc:	4413      	add	r3, r2
 80048ce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048d2:	011a      	lsls	r2, r3, #4
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d013      	beq.n	800490e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048ee:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048fc:	4413      	add	r3, r2
 80048fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a11      	ldr	r2, [pc, #68]	; (8004958 <HAL_FDCAN_Init+0x3c0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d107      	bne.n	8004928 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f022 0203 	bic.w	r2, r2, #3
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f80b 	bl	800495c <FDCAN_CalcultateRamBlockAddresses>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800494c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004950:	4618      	mov	r0, r3
 8004952:	3760      	adds	r7, #96	; 0x60
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	4000a000 	.word	0x4000a000

0800495c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004972:	4ba7      	ldr	r3, [pc, #668]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0091      	lsls	r1, r2, #2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	430b      	orrs	r3, r1
 8004980:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	041a      	lsls	r2, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4413      	add	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049b2:	4b97      	ldr	r3, [pc, #604]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	0091      	lsls	r1, r2, #2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	430b      	orrs	r3, r1
 80049c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	041a      	lsls	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049f4:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	0091      	lsls	r1, r2, #2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	041a      	lsls	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4413      	add	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a3c:	4b74      	ldr	r3, [pc, #464]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	0091      	lsls	r1, r2, #2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a56:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	041a      	lsls	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a84:	4b62      	ldr	r3, [pc, #392]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	0091      	lsls	r1, r2, #2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004ab0:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	0091      	lsls	r1, r2, #2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004aca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	041a      	lsls	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0091      	lsls	r1, r2, #2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b0c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b14:	041a      	lsls	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b28:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b30:	061a      	lsls	r2, r3, #24
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	4b34      	ldr	r3, [pc, #208]	; (8004c14 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004b42:	4413      	add	r3, r2
 8004b44:	009a      	lsls	r2, r3, #2
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	441a      	add	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d915      	bls.n	8004c38 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c0c:	e006      	b.n	8004c1c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c0e:	bf00      	nop
 8004c10:	ffff0003 	.word	0xffff0003
 8004c14:	10002b00 	.word	0x10002b00
 8004c18:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e010      	b.n	8004c5a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e005      	b.n	8004c4c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3f3      	bcc.n	8004c40 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c76:	4b86      	ldr	r3, [pc, #536]	; (8004e90 <HAL_GPIO_Init+0x228>)
 8004c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c7a:	e18c      	b.n	8004f96 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	2101      	movs	r1, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa01 f303 	lsl.w	r3, r1, r3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 817e 	beq.w	8004f90 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d005      	beq.n	8004cac <HAL_GPIO_Init+0x44>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d130      	bne.n	8004d0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 0201 	and.w	r2, r3, #1
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d017      	beq.n	8004d4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	2203      	movs	r2, #3
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d123      	bne.n	8004d9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	08da      	lsrs	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3208      	adds	r2, #8
 8004d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	220f      	movs	r2, #15
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	08da      	lsrs	r2, r3, #3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3208      	adds	r2, #8
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0203 	and.w	r2, r3, #3
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80d8 	beq.w	8004f90 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de0:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <HAL_GPIO_Init+0x22c>)
 8004de2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004de6:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <HAL_GPIO_Init+0x22c>)
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_GPIO_Init+0x22c>)
 8004df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfe:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <HAL_GPIO_Init+0x230>)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	3302      	adds	r3, #2
 8004e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	220f      	movs	r2, #15
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_GPIO_Init+0x234>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <HAL_GPIO_Init+0x258>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <HAL_GPIO_Init+0x238>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02b      	beq.n	8004e8a <HAL_GPIO_Init+0x222>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <HAL_GPIO_Init+0x23c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d025      	beq.n	8004e86 <HAL_GPIO_Init+0x21e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <HAL_GPIO_Init+0x240>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <HAL_GPIO_Init+0x21a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_GPIO_Init+0x244>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d019      	beq.n	8004e7e <HAL_GPIO_Init+0x216>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_GPIO_Init+0x248>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <HAL_GPIO_Init+0x24c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00d      	beq.n	8004e76 <HAL_GPIO_Init+0x20e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <HAL_GPIO_Init+0x250>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <HAL_GPIO_Init+0x20a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <HAL_GPIO_Init+0x254>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_GPIO_Init+0x206>
 8004e6a:	2309      	movs	r3, #9
 8004e6c:	e029      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e6e:	230a      	movs	r3, #10
 8004e70:	e027      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e72:	2307      	movs	r3, #7
 8004e74:	e025      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e76:	2306      	movs	r3, #6
 8004e78:	e023      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	e021      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e01f      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e82:	2303      	movs	r3, #3
 8004e84:	e01d      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e01b      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e019      	b.n	8004ec2 <HAL_GPIO_Init+0x25a>
 8004e8e:	bf00      	nop
 8004e90:	58000080 	.word	0x58000080
 8004e94:	58024400 	.word	0x58024400
 8004e98:	58000400 	.word	0x58000400
 8004e9c:	58020000 	.word	0x58020000
 8004ea0:	58020400 	.word	0x58020400
 8004ea4:	58020800 	.word	0x58020800
 8004ea8:	58020c00 	.word	0x58020c00
 8004eac:	58021000 	.word	0x58021000
 8004eb0:	58021400 	.word	0x58021400
 8004eb4:	58021800 	.word	0x58021800
 8004eb8:	58021c00 	.word	0x58021c00
 8004ebc:	58022400 	.word	0x58022400
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	f002 0203 	and.w	r2, r2, #3
 8004ec8:	0092      	lsls	r2, r2, #2
 8004eca:	4093      	lsls	r3, r2
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed2:	4938      	ldr	r1, [pc, #224]	; (8004fb4 <HAL_GPIO_Init+0x34c>)
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	3302      	adds	r3, #2
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	3301      	adds	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f47f ae6b 	bne.w	8004c7c <HAL_GPIO_Init+0x14>
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3724      	adds	r7, #36	; 0x24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	58000400 	.word	0x58000400

08004fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc8:	787b      	ldrb	r3, [r7, #1]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fd4:	e003      	b.n	8004fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	041a      	lsls	r2, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	619a      	str	r2, [r3, #24]
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fc4d 	bl	80008b0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e07f      	b.n	8005132 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc fffc 	bl	8002044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	; 0x24
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d107      	bne.n	800509a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	e006      	b.n	80050a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d104      	bne.n	80050ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HAL_I2C_Init+0x11c>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	02008000 	.word	0x02008000

08005140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	d138      	bne.n	80051c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005160:	2302      	movs	r3, #2
 8005162:	e032      	b.n	80051ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005192:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d139      	bne.n	8005260 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e033      	b.n	8005262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2224      	movs	r2, #36	; 0x24
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005228:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005278:	4b29      	ldr	r3, [pc, #164]	; (8005320 <HAL_PWREx_ConfigSupply+0xb0>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	2b06      	cmp	r3, #6
 8005282:	d00a      	beq.n	800529a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <HAL_PWREx_ConfigSupply+0xb0>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e03f      	b.n	8005316 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e03d      	b.n	8005316 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800529a:	4b21      	ldr	r3, [pc, #132]	; (8005320 <HAL_PWREx_ConfigSupply+0xb0>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80052a2:	491f      	ldr	r1, [pc, #124]	; (8005320 <HAL_PWREx_ConfigSupply+0xb0>)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052aa:	f7fd fb5f 	bl	800296c <HAL_GetTick>
 80052ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052b0:	e009      	b.n	80052c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052b2:	f7fd fb5b 	bl	800296c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c0:	d901      	bls.n	80052c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e027      	b.n	8005316 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c6:	4b16      	ldr	r3, [pc, #88]	; (8005320 <HAL_PWREx_ConfigSupply+0xb0>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d2:	d1ee      	bne.n	80052b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b1e      	cmp	r3, #30
 80052d8:	d008      	beq.n	80052ec <HAL_PWREx_ConfigSupply+0x7c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b2e      	cmp	r3, #46	; 0x2e
 80052de:	d005      	beq.n	80052ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b1d      	cmp	r3, #29
 80052e4:	d002      	beq.n	80052ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b2d      	cmp	r3, #45	; 0x2d
 80052ea:	d113      	bne.n	8005314 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80052ec:	f7fd fb3e 	bl	800296c <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80052f2:	e009      	b.n	8005308 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052f4:	f7fd fb3a 	bl	800296c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005302:	d901      	bls.n	8005308 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e006      	b.n	8005316 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_PWREx_ConfigSupply+0xb0>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0311 	and.w	r3, r3, #17
 8005310:	2b11      	cmp	r3, #17
 8005312:	d1ef      	bne.n	80052f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	58024800 	.word	0x58024800

08005324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e397      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8087 	beq.w	8005452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005344:	4b9e      	ldr	r3, [pc, #632]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800534e:	4b9c      	ldr	r3, [pc, #624]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	2b10      	cmp	r3, #16
 8005358:	d007      	beq.n	800536a <HAL_RCC_OscConfig+0x46>
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	2b18      	cmp	r3, #24
 800535e:	d110      	bne.n	8005382 <HAL_RCC_OscConfig+0x5e>
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d10b      	bne.n	8005382 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536a:	4b95      	ldr	r3, [pc, #596]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d06c      	beq.n	8005450 <HAL_RCC_OscConfig+0x12c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d168      	bne.n	8005450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e371      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538a:	d106      	bne.n	800539a <HAL_RCC_OscConfig+0x76>
 800538c:	4b8c      	ldr	r3, [pc, #560]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a8b      	ldr	r2, [pc, #556]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e02e      	b.n	80053f8 <HAL_RCC_OscConfig+0xd4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x98>
 80053a2:	4b87      	ldr	r3, [pc, #540]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a86      	ldr	r2, [pc, #536]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b84      	ldr	r3, [pc, #528]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a83      	ldr	r2, [pc, #524]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e01d      	b.n	80053f8 <HAL_RCC_OscConfig+0xd4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCC_OscConfig+0xbc>
 80053c6:	4b7e      	ldr	r3, [pc, #504]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a7d      	ldr	r2, [pc, #500]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7a      	ldr	r2, [pc, #488]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e00b      	b.n	80053f8 <HAL_RCC_OscConfig+0xd4>
 80053e0:	4b77      	ldr	r3, [pc, #476]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a76      	ldr	r2, [pc, #472]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b74      	ldr	r3, [pc, #464]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a73      	ldr	r2, [pc, #460]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80053f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fd fab4 	bl	800296c <HAL_GetTick>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fd fab0 	bl	800296c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e325      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800541a:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0xe4>
 8005426:	e014      	b.n	8005452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fd faa0 	bl	800296c <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005430:	f7fd fa9c 	bl	800296c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e311      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005442:	4b5f      	ldr	r3, [pc, #380]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x10c>
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 808a 	beq.w	8005574 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005460:	4b57      	ldr	r3, [pc, #348]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800546a:	4b55      	ldr	r3, [pc, #340]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_RCC_OscConfig+0x162>
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	2b18      	cmp	r3, #24
 800547a:	d137      	bne.n	80054ec <HAL_RCC_OscConfig+0x1c8>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d132      	bne.n	80054ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005486:	4b4e      	ldr	r3, [pc, #312]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x17a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e2e3      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800549e:	4b48      	ldr	r3, [pc, #288]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 0219 	bic.w	r2, r3, #25
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	4945      	ldr	r1, [pc, #276]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054b0:	f7fd fa5c 	bl	800296c <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b8:	f7fd fa58 	bl	800296c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e2cd      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	4936      	ldr	r1, [pc, #216]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ea:	e043      	b.n	8005574 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d026      	beq.n	8005542 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 0219 	bic.w	r2, r3, #25
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	492f      	ldr	r1, [pc, #188]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd fa31 	bl	800296c <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550e:	f7fd fa2d 	bl	800296c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e2a2      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	4921      	ldr	r1, [pc, #132]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
 8005540:	e018      	b.n	8005574 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005542:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fd fa0d 	bl	800296c <HAL_GetTick>
 8005552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005556:	f7fd fa09 	bl	800296c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e27e      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d06d      	beq.n	800565c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005580:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005588:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b08      	cmp	r3, #8
 8005594:	d007      	beq.n	80055a6 <HAL_RCC_OscConfig+0x282>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b18      	cmp	r3, #24
 800559a:	d11e      	bne.n	80055da <HAL_RCC_OscConfig+0x2b6>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d119      	bne.n	80055da <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCC_OscConfig+0x29c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_RCC_OscConfig+0x2a0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b80      	cmp	r3, #128	; 0x80
 80055b8:	d004      	beq.n	80055c4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e253      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c4:	4ba3      	ldr	r3, [pc, #652]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	49a0      	ldr	r1, [pc, #640]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d8:	e040      	b.n	800565c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d023      	beq.n	800562a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055e2:	4b9c      	ldr	r3, [pc, #624]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a9b      	ldr	r2, [pc, #620]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80055e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fd f9bd 	bl	800296c <HAL_GetTick>
 80055f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055f6:	f7fd f9b9 	bl	800296c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e22e      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005608:	4b92      	ldr	r3, [pc, #584]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005614:	4b8f      	ldr	r3, [pc, #572]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	061b      	lsls	r3, r3, #24
 8005622:	498c      	ldr	r1, [pc, #560]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005624:	4313      	orrs	r3, r2
 8005626:	60cb      	str	r3, [r1, #12]
 8005628:	e018      	b.n	800565c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800562a:	4b8a      	ldr	r3, [pc, #552]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a89      	ldr	r2, [pc, #548]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fd f999 	bl	800296c <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800563e:	f7fd f995 	bl	800296c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e20a      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005650:	4b80      	ldr	r3, [pc, #512]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d036      	beq.n	80056d6 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d019      	beq.n	80056a4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005670:	4b78      	ldr	r3, [pc, #480]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	4a77      	ldr	r2, [pc, #476]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fd f976 	bl	800296c <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005684:	f7fd f972 	bl	800296c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e1e7      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005696:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x360>
 80056a2:	e018      	b.n	80056d6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a4:	4b6b      	ldr	r3, [pc, #428]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a8:	4a6a      	ldr	r2, [pc, #424]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fd f95c 	bl	800296c <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fd f958 	bl	800296c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1cd      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ca:	4b62      	ldr	r3, [pc, #392]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d036      	beq.n	8005750 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d019      	beq.n	800571e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056ea:	4b5a      	ldr	r3, [pc, #360]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a59      	ldr	r2, [pc, #356]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80056f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f6:	f7fd f939 	bl	800296c <HAL_GetTick>
 80056fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056fe:	f7fd f935 	bl	800296c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1aa      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005710:	4b50      	ldr	r3, [pc, #320]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x3da>
 800571c:	e018      	b.n	8005750 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571e:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a4c      	ldr	r2, [pc, #304]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005728:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800572a:	f7fd f91f 	bl	800296c <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005732:	f7fd f91b 	bl	800296c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e190      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005744:	4b43      	ldr	r3, [pc, #268]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8085 	beq.w	8005868 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800575e:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <HAL_RCC_OscConfig+0x534>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a3d      	ldr	r2, [pc, #244]	; (8005858 <HAL_RCC_OscConfig+0x534>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800576a:	f7fd f8ff 	bl	800296c <HAL_GetTick>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005772:	f7fd f8fb 	bl	800296c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b64      	cmp	r3, #100	; 0x64
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e170      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005784:	4b34      	ldr	r3, [pc, #208]	; (8005858 <HAL_RCC_OscConfig+0x534>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d106      	bne.n	80057a6 <HAL_RCC_OscConfig+0x482>
 8005798:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	e02d      	b.n	8005802 <HAL_RCC_OscConfig+0x4de>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x4a4>
 80057ae:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a28      	ldr	r2, [pc, #160]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a25      	ldr	r2, [pc, #148]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
 80057c6:	e01c      	b.n	8005802 <HAL_RCC_OscConfig+0x4de>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b05      	cmp	r3, #5
 80057ce:	d10c      	bne.n	80057ea <HAL_RCC_OscConfig+0x4c6>
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057d6:	f043 0304 	orr.w	r3, r3, #4
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
 80057e8:	e00b      	b.n	8005802 <HAL_RCC_OscConfig+0x4de>
 80057ea:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	4b17      	ldr	r3, [pc, #92]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a16      	ldr	r2, [pc, #88]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fd f8af 	bl	800296c <HAL_GetTick>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005810:	e00a      	b.n	8005828 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7fd f8ab 	bl	800296c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e11e      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <HAL_RCC_OscConfig+0x530>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0ee      	beq.n	8005812 <HAL_RCC_OscConfig+0x4ee>
 8005834:	e018      	b.n	8005868 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005836:	f7fd f899 	bl	800296c <HAL_GetTick>
 800583a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800583c:	e00e      	b.n	800585c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7fd f895 	bl	800296c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d905      	bls.n	800585c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e108      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
 8005854:	58024400 	.word	0x58024400
 8005858:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800585c:	4b84      	ldr	r3, [pc, #528]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1ea      	bne.n	800583e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80f9 	beq.w	8005a64 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005872:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587a:	2b18      	cmp	r3, #24
 800587c:	f000 80b4 	beq.w	80059e8 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b02      	cmp	r3, #2
 8005886:	f040 8095 	bne.w	80059b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588a:	4b79      	ldr	r3, [pc, #484]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a78      	ldr	r2, [pc, #480]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fd f869 	bl	800296c <HAL_GetTick>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589e:	f7fd f865 	bl	800296c <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e0da      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b0:	4b6f      	ldr	r3, [pc, #444]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058bc:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80058be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c0:	4b6c      	ldr	r3, [pc, #432]	; (8005a74 <HAL_RCC_OscConfig+0x750>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058cc:	0112      	lsls	r2, r2, #4
 80058ce:	430a      	orrs	r2, r1
 80058d0:	4967      	ldr	r1, [pc, #412]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	628b      	str	r3, [r1, #40]	; 0x28
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	3b01      	subs	r3, #1
 80058dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	3b01      	subs	r3, #1
 80058e6:	025b      	lsls	r3, r3, #9
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	3b01      	subs	r3, #1
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	3b01      	subs	r3, #1
 8005900:	061b      	lsls	r3, r3, #24
 8005902:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005906:	495a      	ldr	r1, [pc, #360]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800590c:	4b58      	ldr	r3, [pc, #352]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4a57      	ldr	r2, [pc, #348]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005918:	4b55      	ldr	r3, [pc, #340]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800591a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800591c:	4b56      	ldr	r3, [pc, #344]	; (8005a78 <HAL_RCC_OscConfig+0x754>)
 800591e:	4013      	ands	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005924:	00d2      	lsls	r2, r2, #3
 8005926:	4952      	ldr	r1, [pc, #328]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005928:	4313      	orrs	r3, r2
 800592a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800592c:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	f023 020c 	bic.w	r2, r3, #12
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	494d      	ldr	r1, [pc, #308]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800593e:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f023 0202 	bic.w	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	4949      	ldr	r1, [pc, #292]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005950:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4a46      	ldr	r2, [pc, #280]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	4b44      	ldr	r3, [pc, #272]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a43      	ldr	r2, [pc, #268]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005968:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800596e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005974:	4b3e      	ldr	r3, [pc, #248]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a3d      	ldr	r2, [pc, #244]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005980:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a3a      	ldr	r2, [pc, #232]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 8005986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800598a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fc ffee 	bl	800296c <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005994:	f7fc ffea 	bl	800296c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e05f      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a6:	4b32      	ldr	r3, [pc, #200]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x670>
 80059b2:	e057      	b.n	8005a64 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b4:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fc ffd4 	bl	800296c <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fc ffd0 	bl	800296c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e045      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059da:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x6a4>
 80059e6:	e03d      	b.n	8005a64 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059e8:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <HAL_RCC_OscConfig+0x74c>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d031      	beq.n	8005a60 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f003 0203 	and.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d12a      	bne.n	8005a60 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d122      	bne.n	8005a60 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d11a      	bne.n	8005a60 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	0a5b      	lsrs	r3, r3, #9
 8005a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d111      	bne.n	8005a60 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d108      	bne.n	8005a60 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	0e1b      	lsrs	r3, r3, #24
 8005a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3730      	adds	r7, #48	; 0x30
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	58024400 	.word	0x58024400
 8005a74:	fffffc0c 	.word	0xfffffc0c
 8005a78:	ffff0007 	.word	0xffff0007

08005a7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e19c      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a90:	4b8a      	ldr	r3, [pc, #552]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d910      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b87      	ldr	r3, [pc, #540]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 020f 	bic.w	r2, r3, #15
 8005aa6:	4985      	ldr	r1, [pc, #532]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b83      	ldr	r3, [pc, #524]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e184      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	4b7b      	ldr	r3, [pc, #492]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d908      	bls.n	8005aee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005adc:	4b78      	ldr	r3, [pc, #480]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	4975      	ldr	r1, [pc, #468]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	4b70      	ldr	r3, [pc, #448]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d908      	bls.n	8005b1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b0a:	4b6d      	ldr	r3, [pc, #436]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	496a      	ldr	r1, [pc, #424]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	4b64      	ldr	r3, [pc, #400]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d908      	bls.n	8005b4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b38:	4b61      	ldr	r3, [pc, #388]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	495e      	ldr	r1, [pc, #376]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	4b59      	ldr	r3, [pc, #356]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d908      	bls.n	8005b78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b66:	4b56      	ldr	r3, [pc, #344]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	4953      	ldr	r1, [pc, #332]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	4b4d      	ldr	r3, [pc, #308]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d908      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b94:	4b4a      	ldr	r3, [pc, #296]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f023 020f 	bic.w	r2, r3, #15
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4947      	ldr	r1, [pc, #284]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d055      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bb2:	4b43      	ldr	r3, [pc, #268]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4940      	ldr	r1, [pc, #256]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d107      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bcc:	4b3c      	ldr	r3, [pc, #240]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d121      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0f6      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d115      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0ea      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bfc:	4b30      	ldr	r3, [pc, #192]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0de      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0d6      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c1c:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f023 0207 	bic.w	r2, r3, #7
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4925      	ldr	r1, [pc, #148]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2e:	f7fc fe9d 	bl	800296c <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c36:	f7fc fe99 	bl	800296c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0be      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d1eb      	bne.n	8005c36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d208      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f023 020f 	bic.w	r2, r3, #15
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	490e      	ldr	r1, [pc, #56]	; (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d214      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 020f 	bic.w	r2, r3, #15
 8005ca2:	4906      	ldr	r1, [pc, #24]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e086      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
 8005cbc:	52002000 	.word	0x52002000
 8005cc0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d208      	bcs.n	8005cf2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ce0:	4b3c      	ldr	r3, [pc, #240]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	4939      	ldr	r1, [pc, #228]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d208      	bcs.n	8005d20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d0e:	4b31      	ldr	r3, [pc, #196]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	492e      	ldr	r1, [pc, #184]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	4b28      	ldr	r3, [pc, #160]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d208      	bcs.n	8005d4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d3c:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	4922      	ldr	r1, [pc, #136]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d208      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4917      	ldr	r1, [pc, #92]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d7c:	f000 f834 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	4912      	ldr	r1, [pc, #72]	; (8005dd8 <HAL_RCC_ClockConfig+0x35c>)
 8005d8e:	5ccb      	ldrb	r3, [r1, r3]
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <HAL_RCC_ClockConfig+0x35c>)
 8005da4:	5cd3      	ldrb	r3, [r2, r3]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <HAL_RCC_ClockConfig+0x360>)
 8005db2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005db4:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <HAL_RCC_ClockConfig+0x364>)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <HAL_RCC_ClockConfig+0x368>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc fd8a 	bl	80028d8 <HAL_InitTick>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	0800be98 	.word	0x0800be98
 8005ddc:	24000004 	.word	0x24000004
 8005de0:	24000000 	.word	0x24000000
 8005de4:	24000008 	.word	0x24000008

08005de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dee:	4bb3      	ldr	r3, [pc, #716]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005df6:	2b18      	cmp	r3, #24
 8005df8:	f200 8155 	bhi.w	80060a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	080060a7 	.word	0x080060a7
 8005e0c:	080060a7 	.word	0x080060a7
 8005e10:	080060a7 	.word	0x080060a7
 8005e14:	080060a7 	.word	0x080060a7
 8005e18:	080060a7 	.word	0x080060a7
 8005e1c:	080060a7 	.word	0x080060a7
 8005e20:	080060a7 	.word	0x080060a7
 8005e24:	08005e8f 	.word	0x08005e8f
 8005e28:	080060a7 	.word	0x080060a7
 8005e2c:	080060a7 	.word	0x080060a7
 8005e30:	080060a7 	.word	0x080060a7
 8005e34:	080060a7 	.word	0x080060a7
 8005e38:	080060a7 	.word	0x080060a7
 8005e3c:	080060a7 	.word	0x080060a7
 8005e40:	080060a7 	.word	0x080060a7
 8005e44:	08005e95 	.word	0x08005e95
 8005e48:	080060a7 	.word	0x080060a7
 8005e4c:	080060a7 	.word	0x080060a7
 8005e50:	080060a7 	.word	0x080060a7
 8005e54:	080060a7 	.word	0x080060a7
 8005e58:	080060a7 	.word	0x080060a7
 8005e5c:	080060a7 	.word	0x080060a7
 8005e60:	080060a7 	.word	0x080060a7
 8005e64:	08005e9b 	.word	0x08005e9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e68:	4b94      	ldr	r3, [pc, #592]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e74:	4b91      	ldr	r3, [pc, #580]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	4a90      	ldr	r2, [pc, #576]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e86:	e111      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e88:	4b8d      	ldr	r3, [pc, #564]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e8a:	61bb      	str	r3, [r7, #24]
    break;
 8005e8c:	e10e      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e8e:	4b8d      	ldr	r3, [pc, #564]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e90:	61bb      	str	r3, [r7, #24]
    break;
 8005e92:	e10b      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e94:	4b8c      	ldr	r3, [pc, #560]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e96:	61bb      	str	r3, [r7, #24]
    break;
 8005e98:	e108      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9a:	4b88      	ldr	r3, [pc, #544]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ea4:	4b85      	ldr	r3, [pc, #532]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005eb0:	4b82      	ldr	r3, [pc, #520]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005eba:	4b80      	ldr	r3, [pc, #512]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80e1 	beq.w	80060a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	f000 8083 	beq.w	8005fec <HAL_RCC_GetSysClockFreq+0x204>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	f200 80a1 	bhi.w	8006030 <HAL_RCC_GetSysClockFreq+0x248>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x114>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d056      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005efa:	e099      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005efc:	4b6f      	ldr	r3, [pc, #444]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02d      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f08:	4b6c      	ldr	r3, [pc, #432]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	08db      	lsrs	r3, r3, #3
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	4a6b      	ldr	r2, [pc, #428]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
 8005f18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b62      	ldr	r3, [pc, #392]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f46:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f62:	e087      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f76:	4b51      	ldr	r3, [pc, #324]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fa6:	e065      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fba:	4b40      	ldr	r3, [pc, #256]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fea:	e043      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006012:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800602e:	e021      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a02 	vldr	s12, [r7, #8]
 8006056:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006072:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	0a5b      	lsrs	r3, r3, #9
 800607a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607e:	3301      	adds	r3, #1
 8006080:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800608c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006098:	ee17 3a90 	vmov	r3, s15
 800609c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800609e:	e005      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
    break;
 80060a4:	e002      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060a8:	61bb      	str	r3, [r7, #24]
    break;
 80060aa:	bf00      	nop
  }

  return sysclockfreq;
 80060ac:	69bb      	ldr	r3, [r7, #24]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	58024400 	.word	0x58024400
 80060c0:	03d09000 	.word	0x03d09000
 80060c4:	003d0900 	.word	0x003d0900
 80060c8:	017d7840 	.word	0x017d7840
 80060cc:	46000000 	.word	0x46000000
 80060d0:	4c742400 	.word	0x4c742400
 80060d4:	4a742400 	.word	0x4a742400
 80060d8:	4bbebc20 	.word	0x4bbebc20

080060dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060e2:	f7ff fe81 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_RCC_GetHCLKFreq+0x50>)
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	490f      	ldr	r1, [pc, #60]	; (8006130 <HAL_RCC_GetHCLKFreq+0x54>)
 80060f4:	5ccb      	ldrb	r3, [r1, r3]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	fa22 f303 	lsr.w	r3, r2, r3
 80060fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <HAL_RCC_GetHCLKFreq+0x50>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <HAL_RCC_GetHCLKFreq+0x54>)
 800610a:	5cd3      	ldrb	r3, [r2, r3]
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	4a07      	ldr	r2, [pc, #28]	; (8006134 <HAL_RCC_GetHCLKFreq+0x58>)
 8006118:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800611a:	4a07      	ldr	r2, [pc, #28]	; (8006138 <HAL_RCC_GetHCLKFreq+0x5c>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <HAL_RCC_GetHCLKFreq+0x58>)
 8006122:	681b      	ldr	r3, [r3, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	58024400 	.word	0x58024400
 8006130:	0800be98 	.word	0x0800be98
 8006134:	24000004 	.word	0x24000004
 8006138:	24000000 	.word	0x24000000

0800613c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006140:	f7ff ffcc 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	4904      	ldr	r1, [pc, #16]	; (8006164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006152:	5ccb      	ldrb	r3, [r1, r3]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	58024400 	.word	0x58024400
 8006164:	0800be98 	.word	0x0800be98

08006168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800616c:	f7ff ffb6 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006170:	4602      	mov	r2, r0
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	4904      	ldr	r1, [pc, #16]	; (8006190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800617e:	5ccb      	ldrb	r3, [r1, r3]
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006188:	4618      	mov	r0, r3
 800618a:	bd80      	pop	{r7, pc}
 800618c:	58024400 	.word	0x58024400
 8006190:	0800be98 	.word	0x0800be98

08006194 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061a0:	2300      	movs	r3, #0
 80061a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d03f      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b8:	d02a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061be:	d824      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c4:	d018      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ca:	d81e      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d4:	d007      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061d6:	e018      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4bab      	ldr	r3, [pc, #684]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4aaa      	ldr	r2, [pc, #680]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061e4:	e015      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	2102      	movs	r1, #2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 feff 	bl	8007ff0 <RCCEx_PLL2_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061f6:	e00c      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3324      	adds	r3, #36	; 0x24
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 ffa8 	bl	8008154 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
      break;
 800620e:	e000      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006218:	4b9b      	ldr	r3, [pc, #620]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006224:	4998      	ldr	r1, [pc, #608]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006226:	4313      	orrs	r3, r2
 8006228:	650b      	str	r3, [r1, #80]	; 0x50
 800622a:	e001      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d03d      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	2b04      	cmp	r3, #4
 8006242:	d826      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	08006261 	.word	0x08006261
 8006250:	0800626f 	.word	0x0800626f
 8006254:	08006281 	.word	0x08006281
 8006258:	08006299 	.word	0x08006299
 800625c:	08006299 	.word	0x08006299
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006260:	4b89      	ldr	r3, [pc, #548]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4a88      	ldr	r2, [pc, #544]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800626c:	e015      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3304      	adds	r3, #4
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 febb 	bl	8007ff0 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800627e:	e00c      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f001 ff64 	bl	8008154 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006290:	e003      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062a0:	4b79      	ldr	r3, [pc, #484]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a4:	f023 0207 	bic.w	r2, r3, #7
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	4976      	ldr	r1, [pc, #472]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	650b      	str	r3, [r1, #80]	; 0x50
 80062b2:	e001      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d051      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062ca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80062ce:	d036      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80062d0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80062d4:	d830      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062da:	d032      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80062dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062e0:	d82a      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062e6:	d02e      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80062e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ec:	d824      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f2:	d018      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f8:	d81e      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80062fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006302:	d007      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006304:	e018      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006306:	4b60      	ldr	r3, [pc, #384]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	4a5f      	ldr	r2, [pc, #380]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800630c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006312:	e019      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f001 fe68 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006324:	e010      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3324      	adds	r3, #36	; 0x24
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f001 ff11 	bl	8008154 <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006336:	e007      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
      break;
 800633c:	e004      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800634e:	4b4e      	ldr	r3, [pc, #312]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800635c:	494a      	ldr	r1, [pc, #296]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	658b      	str	r3, [r1, #88]	; 0x58
 8006362:	e001      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006370:	2b00      	cmp	r3, #0
 8006372:	d051      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800637a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800637e:	d036      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006380:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006384:	d830      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800638a:	d032      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800638c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006390:	d82a      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006392:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006396:	d02e      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006398:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800639c:	d824      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800639e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a2:	d018      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80063a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a8:	d81e      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80063ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063b2:	d007      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80063b4:	e018      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4b34      	ldr	r3, [pc, #208]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	4a33      	ldr	r2, [pc, #204]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c2:	e019      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fe10 	bl	8007ff0 <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063d4:	e010      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3324      	adds	r3, #36	; 0x24
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 feb9 	bl	8008154 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e6:	e007      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	e004      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80063ee:	bf00      	nop
 80063f0:	e002      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80063f2:	bf00      	nop
 80063f4:	e000      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80063f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063fe:	4b22      	ldr	r3, [pc, #136]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800640c:	491e      	ldr	r1, [pc, #120]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	658b      	str	r3, [r1, #88]	; 0x58
 8006412:	e001      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d035      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006428:	2b30      	cmp	r3, #48	; 0x30
 800642a:	d01c      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800642c:	2b30      	cmp	r3, #48	; 0x30
 800642e:	d817      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d00c      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006434:	2b20      	cmp	r3, #32
 8006436:	d813      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d016      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800643c:	2b10      	cmp	r3, #16
 800643e:	d10f      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006440:	4b11      	ldr	r3, [pc, #68]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4a10      	ldr	r2, [pc, #64]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800644c:	e00e      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3304      	adds	r3, #4
 8006452:	2102      	movs	r1, #2
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fdcb 	bl	8007ff0 <RCCEx_PLL2_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800645e:	e005      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	e002      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800646a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10c      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647e:	4902      	ldr	r1, [pc, #8]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006480:	4313      	orrs	r3, r2
 8006482:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006484:	e004      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006486:	bf00      	nop
 8006488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d047      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064a4:	d030      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80064a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064aa:	d82a      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80064ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064b0:	d02c      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x378>
 80064b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064b6:	d824      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064bc:	d018      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c2:	d81e      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064cc:	d007      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064ce:	e018      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d0:	4bac      	ldr	r3, [pc, #688]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	4aab      	ldr	r2, [pc, #684]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064dc:	e017      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3304      	adds	r3, #4
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fd83 	bl	8007ff0 <RCCEx_PLL2_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064ee:	e00e      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3324      	adds	r3, #36	; 0x24
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fe2c 	bl	8008154 <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006500:	e005      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
      break;
 8006506:	e002      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800650c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006514:	4b9b      	ldr	r3, [pc, #620]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	4998      	ldr	r1, [pc, #608]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006522:	4313      	orrs	r3, r2
 8006524:	650b      	str	r3, [r1, #80]	; 0x50
 8006526:	e001      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d049      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006540:	d02e      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006546:	d828      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800654c:	d02a      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800654e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006552:	d822      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006554:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006558:	d026      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800655a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800655e:	d81c      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006564:	d010      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800656a:	d816      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01d      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006574:	d111      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fd37 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006586:	e012      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3324      	adds	r3, #36	; 0x24
 800658c:	2101      	movs	r1, #1
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fde0 	bl	8008154 <RCCEx_PLL3_Config>
 8006594:	4603      	mov	r3, r0
 8006596:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006598:	e009      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
      break;
 800659e:	e006      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80065a0:	bf00      	nop
 80065a2:	e004      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80065ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065b4:	4b73      	ldr	r3, [pc, #460]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	4970      	ldr	r1, [pc, #448]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	650b      	str	r3, [r1, #80]	; 0x50
 80065c6:	e001      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d04b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065e2:	d02e      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80065e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065e8:	d828      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ee:	d02a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f4:	d822      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065fa:	d026      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80065fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006600:	d81c      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d010      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660c:	d816      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01d      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006616:	d111      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fce6 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006628:	e012      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3324      	adds	r3, #36	; 0x24
 800662e:	2101      	movs	r1, #1
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fd8f 	bl	8008154 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800663a:	e009      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	e006      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006642:	bf00      	nop
 8006644:	e004      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800664e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006656:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006664:	4947      	ldr	r1, [pc, #284]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006666:	4313      	orrs	r3, r2
 8006668:	658b      	str	r3, [r1, #88]	; 0x58
 800666a:	e001      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02f      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006684:	d00e      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668a:	d814      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006694:	d10f      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	4a3a      	ldr	r2, [pc, #232]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800669c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066a2:	e00c      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3304      	adds	r3, #4
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fca0 	bl	8007ff0 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066b4:	e003      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ba:	e000      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80066bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066c4:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d0:	492c      	ldr	r1, [pc, #176]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	650b      	str	r3, [r1, #80]	; 0x50
 80066d6:	e001      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d032      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d81b      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800672f 	.word	0x0800672f
 80066fc:	08006709 	.word	0x08006709
 8006700:	08006717 	.word	0x08006717
 8006704:	0800672f 	.word	0x0800672f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800670e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006714:	e00c      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3304      	adds	r3, #4
 800671a:	2102      	movs	r1, #2
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fc67 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006726:	e003      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
      break;
 800672c:	e000      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800672e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006736:	4b13      	ldr	r3, [pc, #76]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	f023 0203 	bic.w	r2, r3, #3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	4910      	ldr	r1, [pc, #64]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006744:	4313      	orrs	r3, r2
 8006746:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006748:	e001      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 808a 	beq.w	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a09      	ldr	r2, [pc, #36]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006768:	f7fc f900 	bl	800296c <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800676e:	e00d      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006770:	f7fc f8fc 	bl	800296c <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b64      	cmp	r3, #100	; 0x64
 800677c:	d906      	bls.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	75fb      	strb	r3, [r7, #23]
        break;
 8006782:	e009      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006784:	58024400 	.word	0x58024400
 8006788:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800678c:	4bb9      	ldr	r3, [pc, #740]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0eb      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d166      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800679e:	4bb6      	ldr	r3, [pc, #728]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067a8:	4053      	eors	r3, r2
 80067aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d013      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067b2:	4bb1      	ldr	r3, [pc, #708]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067bc:	4bae      	ldr	r3, [pc, #696]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	4aad      	ldr	r2, [pc, #692]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067c8:	4bab      	ldr	r3, [pc, #684]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	4aaa      	ldr	r2, [pc, #680]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067d4:	4aa8      	ldr	r2, [pc, #672]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e4:	d115      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e6:	f7fc f8c1 	bl	800296c <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ec:	e00b      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ee:	f7fc f8bd 	bl	800296c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d902      	bls.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	75fb      	strb	r3, [r7, #23]
            break;
 8006804:	e005      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006806:	4b9c      	ldr	r3, [pc, #624]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0ed      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d126      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800681e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006826:	d10d      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006828:	4b93      	ldr	r3, [pc, #588]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006836:	0919      	lsrs	r1, r3, #4
 8006838:	4b90      	ldr	r3, [pc, #576]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800683a:	400b      	ands	r3, r1
 800683c:	498e      	ldr	r1, [pc, #568]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800683e:	4313      	orrs	r3, r2
 8006840:	610b      	str	r3, [r1, #16]
 8006842:	e005      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006844:	4b8c      	ldr	r3, [pc, #560]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	4a8b      	ldr	r2, [pc, #556]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800684a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800684e:	6113      	str	r3, [r2, #16]
 8006850:	4b89      	ldr	r3, [pc, #548]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800685a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685e:	4986      	ldr	r1, [pc, #536]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006860:	4313      	orrs	r3, r2
 8006862:	670b      	str	r3, [r1, #112]	; 0x70
 8006864:	e004      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	75bb      	strb	r3, [r7, #22]
 800686a:	e001      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d07e      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006880:	2b28      	cmp	r3, #40	; 0x28
 8006882:	d867      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	0800695b 	.word	0x0800695b
 8006890:	08006955 	.word	0x08006955
 8006894:	08006955 	.word	0x08006955
 8006898:	08006955 	.word	0x08006955
 800689c:	08006955 	.word	0x08006955
 80068a0:	08006955 	.word	0x08006955
 80068a4:	08006955 	.word	0x08006955
 80068a8:	08006955 	.word	0x08006955
 80068ac:	08006931 	.word	0x08006931
 80068b0:	08006955 	.word	0x08006955
 80068b4:	08006955 	.word	0x08006955
 80068b8:	08006955 	.word	0x08006955
 80068bc:	08006955 	.word	0x08006955
 80068c0:	08006955 	.word	0x08006955
 80068c4:	08006955 	.word	0x08006955
 80068c8:	08006955 	.word	0x08006955
 80068cc:	08006943 	.word	0x08006943
 80068d0:	08006955 	.word	0x08006955
 80068d4:	08006955 	.word	0x08006955
 80068d8:	08006955 	.word	0x08006955
 80068dc:	08006955 	.word	0x08006955
 80068e0:	08006955 	.word	0x08006955
 80068e4:	08006955 	.word	0x08006955
 80068e8:	08006955 	.word	0x08006955
 80068ec:	0800695b 	.word	0x0800695b
 80068f0:	08006955 	.word	0x08006955
 80068f4:	08006955 	.word	0x08006955
 80068f8:	08006955 	.word	0x08006955
 80068fc:	08006955 	.word	0x08006955
 8006900:	08006955 	.word	0x08006955
 8006904:	08006955 	.word	0x08006955
 8006908:	08006955 	.word	0x08006955
 800690c:	0800695b 	.word	0x0800695b
 8006910:	08006955 	.word	0x08006955
 8006914:	08006955 	.word	0x08006955
 8006918:	08006955 	.word	0x08006955
 800691c:	08006955 	.word	0x08006955
 8006920:	08006955 	.word	0x08006955
 8006924:	08006955 	.word	0x08006955
 8006928:	08006955 	.word	0x08006955
 800692c:	0800695b 	.word	0x0800695b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fb5a 	bl	8007ff0 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3324      	adds	r3, #36	; 0x24
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fc03 	bl	8008154 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006952:	e003      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
      break;
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800695a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006962:	4b45      	ldr	r3, [pc, #276]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	4942      	ldr	r1, [pc, #264]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006970:	4313      	orrs	r3, r2
 8006972:	654b      	str	r3, [r1, #84]	; 0x54
 8006974:	e001      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d037      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	2b05      	cmp	r3, #5
 800698c:	d820      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069d7 	.word	0x080069d7
 8006998:	080069ad 	.word	0x080069ad
 800699c:	080069bf 	.word	0x080069bf
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	080069d7 	.word	0x080069d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 fb1c 	bl	8007ff0 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069bc:	e00c      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3324      	adds	r3, #36	; 0x24
 80069c2:	2101      	movs	r1, #1
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fbc5 	bl	8008154 <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069ce:	e003      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
      break;
 80069d4:	e000      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80069d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069de:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	f023 0207 	bic.w	r2, r3, #7
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	4923      	ldr	r1, [pc, #140]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	654b      	str	r3, [r1, #84]	; 0x54
 80069f0:	e001      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d040      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a08:	2b05      	cmp	r3, #5
 8006a0a:	d821      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a57 	.word	0x08006a57
 8006a18:	08006a2d 	.word	0x08006a2d
 8006a1c:	08006a3f 	.word	0x08006a3f
 8006a20:	08006a57 	.word	0x08006a57
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a57 	.word	0x08006a57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fadc 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a3c:	e00c      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3324      	adds	r3, #36	; 0x24
 8006a42:	2101      	movs	r1, #1
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fb85 	bl	8008154 <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a4e:	e003      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
      break;
 8006a54:	e000      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d110      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	f023 0207 	bic.w	r2, r3, #7
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a6c:	4902      	ldr	r1, [pc, #8]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	658b      	str	r3, [r1, #88]	; 0x58
 8006a72:	e007      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006a74:	58024800 	.word	0x58024800
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d04b      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9a:	d02e      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa0:	d828      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa6:	d02a      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d822      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006aae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab2:	d026      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab8:	d81c      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006abe:	d010      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac4:	d816      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01d      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ace:	d111      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 fa8a 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ae0:	e012      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3324      	adds	r3, #36	; 0x24
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 fb33 	bl	8008154 <RCCEx_PLL3_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006af2:	e009      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	75fb      	strb	r3, [r7, #23]
      break;
 8006af8:	e006      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006afa:	bf00      	nop
 8006afc:	e004      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006afe:	bf00      	nop
 8006b00:	e002      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b0e:	4bb2      	ldr	r3, [pc, #712]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	49ae      	ldr	r1, [pc, #696]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	654b      	str	r3, [r1, #84]	; 0x54
 8006b22:	e001      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d04b      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b3e:	d02e      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006b40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b44:	d828      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4a:	d02a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b50:	d822      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b56:	d026      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5c:	d81c      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b62:	d010      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d816      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01d      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b72:	d111      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fa38 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b84:	e012      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fae1 	bl	8008154 <RCCEx_PLL3_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b96:	e009      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b9c:	e006      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e004      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bb2:	4b89      	ldr	r3, [pc, #548]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc0:	4985      	ldr	r1, [pc, #532]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8006bc6:	e001      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d04b      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006be2:	d02e      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006be4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006be8:	d828      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bee:	d02a      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	d822      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006bf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bfa:	d026      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006bfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c00:	d81c      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c06:	d010      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0c:	d816      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01d      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c16:	d111      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 f9e6 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c28:	e012      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3324      	adds	r3, #36	; 0x24
 8006c2e:	2102      	movs	r1, #2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fa8f 	bl	8008154 <RCCEx_PLL3_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c3a:	e009      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c40:	e006      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c42:	bf00      	nop
 8006c44:	e004      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c56:	4b60      	ldr	r3, [pc, #384]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c64:	495c      	ldr	r1, [pc, #368]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	658b      	str	r3, [r1, #88]	; 0x58
 8006c6a:	e001      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d018      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c84:	d10a      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fa61 	bl	8008154 <RCCEx_PLL3_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c9c:	4b4e      	ldr	r3, [pc, #312]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca8:	494b      	ldr	r1, [pc, #300]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	d10a      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3324      	adds	r3, #36	; 0x24
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fa41 	bl	8008154 <RCCEx_PLL3_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cdc:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	493b      	ldr	r1, [pc, #236]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d034      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d06:	d01d      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0c:	d817      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d16:	d009      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d18:	e011      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f965 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d2a:	e00c      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3324      	adds	r3, #36	; 0x24
 8006d30:	2102      	movs	r1, #2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fa0e 	bl	8008154 <RCCEx_PLL3_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
      break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d4c:	4b22      	ldr	r3, [pc, #136]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d5a:	491f      	ldr	r1, [pc, #124]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	658b      	str	r3, [r1, #88]	; 0x58
 8006d60:	e001      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d036      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d7c:	d01c      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d82:	d816      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d88:	d003      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8e:	d007      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006d90:	e00f      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d9e:	e00c      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	2101      	movs	r1, #1
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f9d4 	bl	8008154 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006db0:	e003      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	e000      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10d      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dce:	4902      	ldr	r1, [pc, #8]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	654b      	str	r3, [r1, #84]	; 0x54
 8006dd4:	e004      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006dd6:	bf00      	nop
 8006dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d029      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d007      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006dfa:	e00f      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfc:	4b61      	ldr	r3, [pc, #388]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	4a60      	ldr	r2, [pc, #384]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e08:	e00b      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	2102      	movs	r1, #2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 f8ed 	bl	8007ff0 <RCCEx_PLL2_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e1a:	e002      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e28:	4b56      	ldr	r3, [pc, #344]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e34:	4953      	ldr	r1, [pc, #332]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e3a:	e001      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	2102      	movs	r1, #2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 f97e 	bl	8008154 <RCCEx_PLL3_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d030      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e76:	d017      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e7c:	d811      	bhi.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e82:	d013      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e88:	d80b      	bhi.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e92:	d106      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e94:	4b3b      	ldr	r3, [pc, #236]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	4a3a      	ldr	r2, [pc, #232]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006ea0:	e007      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea6:	e004      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006ea8:	bf00      	nop
 8006eaa:	e002      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006eac:	bf00      	nop
 8006eae:	e000      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006eb8:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec4:	492f      	ldr	r1, [pc, #188]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	654b      	str	r3, [r1, #84]	; 0x54
 8006eca:	e001      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d008      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006edc:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee8:	4926      	ldr	r1, [pc, #152]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006efa:	4b22      	ldr	r3, [pc, #136]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f06:	491f      	ldr	r1, [pc, #124]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00d      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f18:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	4a19      	ldr	r2, [pc, #100]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f22:	6113      	str	r3, [r2, #16]
 8006f24:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f2e:	4915      	ldr	r1, [pc, #84]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	da08      	bge.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f3c:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f48:	490e      	ldr	r1, [pc, #56]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f68:	4906      	ldr	r1, [pc, #24]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	58024400 	.word	0x58024400

08006f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b090      	sub	sp, #64	; 0x40
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f96:	f040 8089 	bne.w	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006f9a:	4b95      	ldr	r3, [pc, #596]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d87d      	bhi.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc5 	.word	0x08006fc5
 8006fb4:	08006fe9 	.word	0x08006fe9
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	080070a1 	.word	0x080070a1
 8006fc0:	08007031 	.word	0x08007031

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fc4:	4b8a      	ldr	r3, [pc, #552]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 feb8 	bl	8007d4c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fe0:	e3ed      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe6:	e3ea      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fe8:	4b81      	ldr	r3, [pc, #516]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff4:	d107      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff6:	f107 0318 	add.w	r3, r7, #24
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fbfe 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007004:	e3db      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800700a:	e3d8      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800700c:	4b78      	ldr	r3, [pc, #480]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007018:	d107      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800701a:	f107 030c 	add.w	r3, r7, #12
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd40 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007028:	e3c9      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702e:	e3c6      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007030:	4b6f      	ldr	r3, [pc, #444]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007038:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800703a:	4b6d      	ldr	r3, [pc, #436]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b04      	cmp	r3, #4
 8007044:	d10c      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800704c:	4b68      	ldr	r3, [pc, #416]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	08db      	lsrs	r3, r3, #3
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	4a67      	ldr	r2, [pc, #412]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007058:	fa22 f303 	lsr.w	r3, r2, r3
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800705e:	e01e      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007060:	4b63      	ldr	r3, [pc, #396]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706c:	d106      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007074:	d102      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007076:	4b60      	ldr	r3, [pc, #384]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800707a:	e010      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800707c:	4b5c      	ldr	r3, [pc, #368]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007088:	d106      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007090:	d102      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007092:	4b5a      	ldr	r3, [pc, #360]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007096:	e002      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800709c:	e38f      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800709e:	e38e      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070a0:	4b57      	ldr	r3, [pc, #348]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a4:	e38b      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070aa:	e388      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b2:	f040 80a7 	bne.w	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80070b6:	4b4e      	ldr	r3, [pc, #312]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80070be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070c6:	d054      	beq.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ce:	f200 808b 	bhi.w	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070d8:	f000 8083 	beq.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070e2:	f200 8081 	bhi.w	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ec:	d02f      	beq.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070f4:	d878      	bhi.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007102:	d012      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007104:	e070      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007106:	4b3a      	ldr	r3, [pc, #232]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007112:	d107      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fe17 	bl	8007d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007122:	e34c      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007128:	e349      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800712a:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007136:	d107      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007138:	f107 0318 	add.w	r3, r7, #24
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fb5d 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007146:	e33a      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714c:	e337      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800714e:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715a:	d107      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800715c:	f107 030c 	add.w	r3, r7, #12
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fc9f 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800716a:	e328      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007170:	e325      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007172:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800717a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800717c:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d10c      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800718e:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e01e      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071a2:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ae:	d106      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071bc:	e010      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071be:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80071de:	e2ee      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80071e0:	e2ed      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071e2:	4b07      	ldr	r3, [pc, #28]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e6:	e2ea      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ec:	e2e7      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80071ee:	bf00      	nop
 80071f0:	58024400 	.word	0x58024400
 80071f4:	03d09000 	.word	0x03d09000
 80071f8:	003d0900 	.word	0x003d0900
 80071fc:	017d7840 	.word	0x017d7840
 8007200:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	f040 809c 	bne.w	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800720e:	4b9e      	ldr	r3, [pc, #632]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007216:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800721e:	d054      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007226:	f200 808b 	bhi.w	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007230:	f000 8083 	beq.w	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800723a:	f200 8081 	bhi.w	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007244:	d02f      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724c:	d878      	bhi.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800725a:	d012      	beq.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800725c:	e070      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800725e:	4b8a      	ldr	r3, [pc, #552]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800726a:	d107      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800726c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fd6b 	bl	8007d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800727a:	e2a0      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007280:	e29d      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007282:	4b81      	ldr	r3, [pc, #516]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800728a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800728e:	d107      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007290:	f107 0318 	add.w	r3, r7, #24
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fab1 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800729e:	e28e      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a4:	e28b      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072a6:	4b78      	ldr	r3, [pc, #480]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b2:	d107      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b4:	f107 030c 	add.w	r3, r7, #12
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fbf3 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072c2:	e27c      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c8:	e279      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072ca:	4b6f      	ldr	r3, [pc, #444]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072d4:	4b6c      	ldr	r3, [pc, #432]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d10c      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072e6:	4b68      	ldr	r3, [pc, #416]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	08db      	lsrs	r3, r3, #3
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	4a66      	ldr	r2, [pc, #408]	; (800748c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80072f2:	fa22 f303 	lsr.w	r3, r2, r3
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f8:	e01e      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072fa:	4b63      	ldr	r3, [pc, #396]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007306:	d106      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730e:	d102      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007310:	4b5f      	ldr	r3, [pc, #380]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007314:	e010      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007316:	4b5c      	ldr	r3, [pc, #368]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007322:	d106      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800732a:	d102      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800732c:	4b59      	ldr	r3, [pc, #356]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007330:	e002      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007336:	e242      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007338:	e241      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800733a:	4b57      	ldr	r3, [pc, #348]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800733e:	e23e      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007344:	e23b      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734c:	f040 80a6 	bne.w	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007350:	4b4d      	ldr	r3, [pc, #308]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007354:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007358:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007360:	d054      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007368:	f200 808b 	bhi.w	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007372:	f000 8083 	beq.w	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800737c:	f200 8081 	bhi.w	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007386:	d02f      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	d878      	bhi.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739c:	d012      	beq.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800739e:	e070      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073a0:	4b39      	ldr	r3, [pc, #228]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ac:	d107      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fcca 	bl	8007d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073bc:	e1ff      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073c2:	e1fc      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073c4:	4b30      	ldr	r3, [pc, #192]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d0:	d107      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d2:	f107 0318 	add.w	r3, r7, #24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fa10 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073e0:	e1ed      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e6:	e1ea      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073e8:	4b27      	ldr	r3, [pc, #156]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f4:	d107      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fb52 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007404:	e1db      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740a:	e1d8      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800740c:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800740e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007414:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007416:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b04      	cmp	r3, #4
 8007420:	d10c      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007428:	4b17      	ldr	r3, [pc, #92]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	08db      	lsrs	r3, r3, #3
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743a:	e01e      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800743c:	4b12      	ldr	r3, [pc, #72]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007448:	d106      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007450:	d102      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007456:	e010      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007464:	d106      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800746c:	d102      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800746e:	4b09      	ldr	r3, [pc, #36]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007472:	e002      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007478:	e1a1      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800747a:	e1a0      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	e19d      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007486:	e19a      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007488:	58024400 	.word	0x58024400
 800748c:	03d09000 	.word	0x03d09000
 8007490:	003d0900 	.word	0x003d0900
 8007494:	017d7840 	.word	0x017d7840
 8007498:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074a2:	d173      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80074a4:	4b9a      	ldr	r3, [pc, #616]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074b4:	d02f      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074bc:	d863      	bhi.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d004      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ca:	d012      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80074cc:	e05b      	b.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074ce:	4b90      	ldr	r3, [pc, #576]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074da:	d107      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074dc:	f107 0318 	add.w	r3, r7, #24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 f98b 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074ea:	e168      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f0:	e165      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f2:	4b87      	ldr	r3, [pc, #540]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fe:	d107      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f000 facd 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800750e:	e156      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007514:	e153      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007516:	4b7e      	ldr	r3, [pc, #504]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800751e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007520:	4b7b      	ldr	r3, [pc, #492]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b04      	cmp	r3, #4
 800752a:	d10c      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007532:	4b77      	ldr	r3, [pc, #476]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	08db      	lsrs	r3, r3, #3
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	4a75      	ldr	r2, [pc, #468]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800753e:	fa22 f303 	lsr.w	r3, r2, r3
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007544:	e01e      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007546:	4b72      	ldr	r3, [pc, #456]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007552:	d106      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755a:	d102      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800755c:	4b6e      	ldr	r3, [pc, #440]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007560:	e010      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007562:	4b6b      	ldr	r3, [pc, #428]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800756e:	d106      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007576:	d102      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007578:	4b68      	ldr	r3, [pc, #416]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800757c:	e002      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007582:	e11c      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007584:	e11b      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800758a:	e118      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007592:	d133      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007594:	4b5e      	ldr	r3, [pc, #376]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075aa:	d012      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80075ac:	e023      	b.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075ae:	4b58      	ldr	r3, [pc, #352]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ba:	d107      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fbc3 	bl	8007d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075ca:	e0f8      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075d0:	e0f5      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075d2:	4b4f      	ldr	r3, [pc, #316]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075de:	d107      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e0:	f107 0318 	add.w	r3, r7, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f909 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075ee:	e0e6      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f4:	e0e3      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075fa:	e0e0      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007602:	f040 808d 	bne.w	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007606:	4b42      	ldr	r3, [pc, #264]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800760e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007616:	d06b      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800761e:	d874      	bhi.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d056      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762e:	d86c      	bhi.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007636:	d03b      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800763e:	d864      	bhi.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007646:	d021      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764e:	d85c      	bhi.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765c:	d004      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800765e:	e054      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007660:	f000 f8b6 	bl	80077d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007664:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007666:	e0aa      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007668:	4b29      	ldr	r3, [pc, #164]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007674:	d107      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007676:	f107 0318 	add.w	r3, r7, #24
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f8be 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007684:	e09b      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768a:	e098      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800768c:	4b20      	ldr	r3, [pc, #128]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007698:	d107      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fa00 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076a8:	e089      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ae:	e086      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076b0:	4b17      	ldr	r3, [pc, #92]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d109      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076bc:	4b14      	ldr	r3, [pc, #80]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	08db      	lsrs	r3, r3, #3
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	4a13      	ldr	r2, [pc, #76]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076ce:	e076      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076d4:	e073      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80076d6:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d102      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80076e4:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076e8:	e069      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ee:	e066      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076f0:	4b07      	ldr	r3, [pc, #28]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076fc:	d102      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007702:	e05c      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007708:	e059      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	e056      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007710:	58024400 	.word	0x58024400
 8007714:	03d09000 	.word	0x03d09000
 8007718:	003d0900 	.word	0x003d0900
 800771c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007726:	d148      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007728:	4b27      	ldr	r3, [pc, #156]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007738:	d02a      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007740:	d838      	bhi.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800774e:	d00d      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007750:	e030      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007752:	4b1d      	ldr	r3, [pc, #116]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775e:	d102      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007760:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007764:	e02b      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776a:	e028      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800776c:	4b16      	ldr	r3, [pc, #88]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007778:	d107      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800777a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fae4 	bl	8007d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007788:	e019      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778e:	e016      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800779c:	d107      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779e:	f107 0318 	add.w	r3, r7, #24
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f82a 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80077ac:	e007      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b2:	e004      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b8:	e001      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3740      	adds	r7, #64	; 0x40
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	58024400 	.word	0x58024400
 80077cc:	017d7840 	.word	0x017d7840

080077d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80077d4:	f7fe fc82 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	091b      	lsrs	r3, r3, #4
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4904      	ldr	r1, [pc, #16]	; (80077f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077e6:	5ccb      	ldrb	r3, [r1, r3]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	58024400 	.word	0x58024400
 80077f8:	0800be98 	.word	0x0800be98

080077fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b089      	sub	sp, #36	; 0x24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007804:	4ba1      	ldr	r3, [pc, #644]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800780e:	4b9f      	ldr	r3, [pc, #636]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	0b1b      	lsrs	r3, r3, #12
 8007814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007818:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800781a:	4b9c      	ldr	r3, [pc, #624]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	091b      	lsrs	r3, r3, #4
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007826:	4b99      	ldr	r3, [pc, #612]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782a:	08db      	lsrs	r3, r3, #3
 800782c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8111 	beq.w	8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b02      	cmp	r3, #2
 800784e:	f000 8083 	beq.w	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b02      	cmp	r3, #2
 8007856:	f200 80a1 	bhi.w	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d056      	beq.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007866:	e099      	b.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007868:	4b88      	ldr	r3, [pc, #544]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	2b00      	cmp	r3, #0
 8007872:	d02d      	beq.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007874:	4b85      	ldr	r3, [pc, #532]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	08db      	lsrs	r3, r3, #3
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	4a84      	ldr	r2, [pc, #528]	; (8007a90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
 8007884:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b7b      	ldr	r3, [pc, #492]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078ce:	e087      	b.n	80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b6a      	ldr	r3, [pc, #424]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007912:	e065      	b.n	80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007956:	e043      	b.n	80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b48      	ldr	r3, [pc, #288]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a03 	vldr	s12, [r7, #12]
 800797e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800799a:	e021      	b.n	80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80079e0:	4b2a      	ldr	r3, [pc, #168]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	0a5b      	lsrs	r3, r3, #9
 80079e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80079fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a06:	ee17 2a90 	vmov	r2, s15
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007a0e:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a34:	ee17 2a90 	vmov	r2, s15
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007a3c:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	0e1b      	lsrs	r3, r3, #24
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a62:	ee17 2a90 	vmov	r2, s15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a6a:	e008      	b.n	8007a7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	3724      	adds	r7, #36	; 0x24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	03d09000 	.word	0x03d09000
 8007a94:	46000000 	.word	0x46000000
 8007a98:	4c742400 	.word	0x4c742400
 8007a9c:	4a742400 	.word	0x4a742400
 8007aa0:	4bbebc20 	.word	0x4bbebc20

08007aa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b089      	sub	sp, #36	; 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aac:	4ba1      	ldr	r3, [pc, #644]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007ab6:	4b9f      	ldr	r3, [pc, #636]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	0d1b      	lsrs	r3, r3, #20
 8007abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ac2:	4b9c      	ldr	r3, [pc, #624]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ace:	4b99      	ldr	r3, [pc, #612]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	08db      	lsrs	r3, r3, #3
 8007ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8111 	beq.w	8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	f000 8083 	beq.w	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	f200 80a1 	bhi.w	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d056      	beq.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b0e:	e099      	b.n	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b10:	4b88      	ldr	r3, [pc, #544]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d02d      	beq.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b1c:	4b85      	ldr	r3, [pc, #532]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	08db      	lsrs	r3, r3, #3
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	4a84      	ldr	r2, [pc, #528]	; (8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b28:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b7b      	ldr	r3, [pc, #492]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b76:	e087      	b.n	8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b6a      	ldr	r3, [pc, #424]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bba:	e065      	b.n	8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bce:	4b59      	ldr	r3, [pc, #356]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bfe:	e043      	b.n	8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c12:	4b48      	ldr	r3, [pc, #288]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c42:	e021      	b.n	8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c56:	4b37      	ldr	r3, [pc, #220]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c88:	4b2a      	ldr	r3, [pc, #168]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	0a5b      	lsrs	r3, r3, #9
 8007c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cae:	ee17 2a90 	vmov	r2, s15
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007cb6:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	0c1b      	lsrs	r3, r3, #16
 8007cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc0:	ee07 3a90 	vmov	s15, r3
 8007cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cdc:	ee17 2a90 	vmov	r2, s15
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce8:	0e1b      	lsrs	r3, r3, #24
 8007cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d0a:	ee17 2a90 	vmov	r2, s15
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d12:	e008      	b.n	8007d26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	609a      	str	r2, [r3, #8]
}
 8007d26:	bf00      	nop
 8007d28:	3724      	adds	r7, #36	; 0x24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	58024400 	.word	0x58024400
 8007d38:	03d09000 	.word	0x03d09000
 8007d3c:	46000000 	.word	0x46000000
 8007d40:	4c742400 	.word	0x4c742400
 8007d44:	4a742400 	.word	0x4a742400
 8007d48:	4bbebc20 	.word	0x4bbebc20

08007d4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d54:	4ba0      	ldr	r3, [pc, #640]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007d5e:	4b9e      	ldr	r3, [pc, #632]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	091b      	lsrs	r3, r3, #4
 8007d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d6a:	4b9b      	ldr	r3, [pc, #620]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d74:	4b98      	ldr	r3, [pc, #608]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	08db      	lsrs	r3, r3, #3
 8007d7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8111 	beq.w	8007fba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	f000 8083 	beq.w	8007ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	f200 80a1 	bhi.w	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d056      	beq.n	8007e62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007db4:	e099      	b.n	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007db6:	4b88      	ldr	r3, [pc, #544]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d02d      	beq.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dc2:	4b85      	ldr	r3, [pc, #532]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	08db      	lsrs	r3, r3, #3
 8007dc8:	f003 0303 	and.w	r3, r3, #3
 8007dcc:	4a83      	ldr	r2, [pc, #524]	; (8007fdc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007dce:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	ee07 3a90 	vmov	s15, r3
 8007de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dec:	4b7a      	ldr	r3, [pc, #488]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e1c:	e087      	b.n	8007f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	ee07 3a90 	vmov	s15, r3
 8007e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e30:	4b69      	ldr	r3, [pc, #420]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e60:	e065      	b.n	8007f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e74:	4b58      	ldr	r3, [pc, #352]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ea4:	e043      	b.n	8007f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	ee07 3a90 	vmov	s15, r3
 8007eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007fec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb8:	4b47      	ldr	r3, [pc, #284]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ecc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee8:	e021      	b.n	8007f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	ee07 3a90 	vmov	s15, r3
 8007ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efc:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f04:	ee07 3a90 	vmov	s15, r3
 8007f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007f2e:	4b2a      	ldr	r3, [pc, #168]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	0a5b      	lsrs	r3, r3, #9
 8007f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f54:	ee17 2a90 	vmov	r2, s15
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007f5c:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	0c1b      	lsrs	r3, r3, #16
 8007f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f82:	ee17 2a90 	vmov	r2, s15
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f8a:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	0e1b      	lsrs	r3, r3, #24
 8007f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fb0:	ee17 2a90 	vmov	r2, s15
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007fb8:	e008      	b.n	8007fcc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	609a      	str	r2, [r3, #8]
}
 8007fcc:	bf00      	nop
 8007fce:	3724      	adds	r7, #36	; 0x24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	03d09000 	.word	0x03d09000
 8007fe0:	46000000 	.word	0x46000000
 8007fe4:	4c742400 	.word	0x4c742400
 8007fe8:	4a742400 	.word	0x4a742400
 8007fec:	4bbebc20 	.word	0x4bbebc20

08007ff0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ffe:	4b53      	ldr	r3, [pc, #332]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d101      	bne.n	800800e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e099      	b.n	8008142 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800800e:	4b4f      	ldr	r3, [pc, #316]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a4e      	ldr	r2, [pc, #312]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800801a:	f7fa fca7 	bl	800296c <HAL_GetTick>
 800801e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008020:	e008      	b.n	8008034 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008022:	f7fa fca3 	bl	800296c <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e086      	b.n	8008142 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008034:	4b45      	ldr	r3, [pc, #276]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f0      	bne.n	8008022 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008040:	4b42      	ldr	r3, [pc, #264]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	031b      	lsls	r3, r3, #12
 800804e:	493f      	ldr	r1, [pc, #252]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008050:	4313      	orrs	r3, r2
 8008052:	628b      	str	r3, [r1, #40]	; 0x28
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	3b01      	subs	r3, #1
 800805a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	3b01      	subs	r3, #1
 8008064:	025b      	lsls	r3, r3, #9
 8008066:	b29b      	uxth	r3, r3
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	3b01      	subs	r3, #1
 8008070:	041b      	lsls	r3, r3, #16
 8008072:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	3b01      	subs	r3, #1
 800807e:	061b      	lsls	r3, r3, #24
 8008080:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008084:	4931      	ldr	r1, [pc, #196]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008086:	4313      	orrs	r3, r2
 8008088:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800808a:	4b30      	ldr	r3, [pc, #192]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	492d      	ldr	r1, [pc, #180]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008098:	4313      	orrs	r3, r2
 800809a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800809c:	4b2b      	ldr	r3, [pc, #172]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	f023 0220 	bic.w	r2, r3, #32
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	4928      	ldr	r1, [pc, #160]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080ae:	4b27      	ldr	r3, [pc, #156]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	4a26      	ldr	r2, [pc, #152]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080b4:	f023 0310 	bic.w	r3, r3, #16
 80080b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080ba:	4b24      	ldr	r3, [pc, #144]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080be:	4b24      	ldr	r3, [pc, #144]	; (8008150 <RCCEx_PLL2_Config+0x160>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	69d2      	ldr	r2, [r2, #28]
 80080c6:	00d2      	lsls	r2, r2, #3
 80080c8:	4920      	ldr	r1, [pc, #128]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080ce:	4b1f      	ldr	r3, [pc, #124]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	4a1e      	ldr	r2, [pc, #120]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080d4:	f043 0310 	orr.w	r3, r3, #16
 80080d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080e0:	4b1a      	ldr	r3, [pc, #104]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	4a19      	ldr	r2, [pc, #100]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080ec:	e00f      	b.n	800810e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d106      	bne.n	8008102 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080f4:	4b15      	ldr	r3, [pc, #84]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	4a14      	ldr	r2, [pc, #80]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 80080fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008100:	e005      	b.n	800810e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008102:	4b12      	ldr	r3, [pc, #72]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	4a11      	ldr	r2, [pc, #68]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800810c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a0e      	ldr	r2, [pc, #56]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811a:	f7fa fc27 	bl	800296c <HAL_GetTick>
 800811e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008120:	e008      	b.n	8008134 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008122:	f7fa fc23 	bl	800296c <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e006      	b.n	8008142 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <RCCEx_PLL2_Config+0x15c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f0      	beq.n	8008122 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	58024400 	.word	0x58024400
 8008150:	ffff0007 	.word	0xffff0007

08008154 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008162:	4b53      	ldr	r3, [pc, #332]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b03      	cmp	r3, #3
 800816c:	d101      	bne.n	8008172 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e099      	b.n	80082a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008172:	4b4f      	ldr	r3, [pc, #316]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a4e      	ldr	r2, [pc, #312]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800817c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800817e:	f7fa fbf5 	bl	800296c <HAL_GetTick>
 8008182:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008184:	e008      	b.n	8008198 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008186:	f7fa fbf1 	bl	800296c <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d901      	bls.n	8008198 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e086      	b.n	80082a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008198:	4b45      	ldr	r3, [pc, #276]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f0      	bne.n	8008186 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081a4:	4b42      	ldr	r3, [pc, #264]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	051b      	lsls	r3, r3, #20
 80081b2:	493f      	ldr	r1, [pc, #252]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	628b      	str	r3, [r1, #40]	; 0x28
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	3b01      	subs	r3, #1
 80081be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	025b      	lsls	r3, r3, #9
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	041b      	lsls	r3, r3, #16
 80081d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	061b      	lsls	r3, r3, #24
 80081e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081e8:	4931      	ldr	r1, [pc, #196]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081ee:	4b30      	ldr	r3, [pc, #192]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	492d      	ldr	r1, [pc, #180]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008200:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	4928      	ldr	r1, [pc, #160]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800820e:	4313      	orrs	r3, r2
 8008210:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008212:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	4a26      	ldr	r2, [pc, #152]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800821c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800821e:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008222:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <RCCEx_PLL3_Config+0x160>)
 8008224:	4013      	ands	r3, r2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	69d2      	ldr	r2, [r2, #28]
 800822a:	00d2      	lsls	r2, r2, #3
 800822c:	4920      	ldr	r1, [pc, #128]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800822e:	4313      	orrs	r3, r2
 8008230:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008232:	4b1f      	ldr	r3, [pc, #124]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800823c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008244:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	4a19      	ldr	r2, [pc, #100]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800824a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800824e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008250:	e00f      	b.n	8008272 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d106      	bne.n	8008266 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a14      	ldr	r2, [pc, #80]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800825e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008262:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008264:	e005      	b.n	8008272 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008266:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	4a11      	ldr	r2, [pc, #68]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800826c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008270:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008272:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a0e      	ldr	r2, [pc, #56]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 8008278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800827c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800827e:	f7fa fb75 	bl	800296c <HAL_GetTick>
 8008282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008284:	e008      	b.n	8008298 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008286:	f7fa fb71 	bl	800296c <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e006      	b.n	80082a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <RCCEx_PLL3_Config+0x15c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0f0      	beq.n	8008286 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	58024400 	.word	0x58024400
 80082b4:	ffff0007 	.word	0xffff0007

080082b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d067      	beq.n	800839a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7f9 ff16 	bl	8002110 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	22ca      	movs	r2, #202	; 0xca
 80082f2:	625a      	str	r2, [r3, #36]	; 0x24
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2253      	movs	r2, #83	; 0x53
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f99f 	bl	8008640 <RTC_EnterInitMode>
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d13b      	bne.n	8008384 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6899      	ldr	r1, [r3, #8]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b23      	ldr	r3, [pc, #140]	; (80083a4 <HAL_RTC_Init+0xec>)
 8008318:	400b      	ands	r3, r1
 800831a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6899      	ldr	r1, [r3, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	0419      	lsls	r1, r3, #16
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9ab 	bl	80086a8 <RTC_ExitInitMode>
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d113      	bne.n	8008384 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0203 	bic.w	r2, r2, #3
 800836a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69da      	ldr	r2, [r3, #28]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	22ff      	movs	r2, #255	; 0xff
 800838a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	ff8fffbf 	.word	0xff8fffbf

080083a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_RTC_SetTime+0x1a>
 80083be:	2302      	movs	r3, #2
 80083c0:	e089      	b.n	80084d6 <HAL_RTC_SetTime+0x12e>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	22ca      	movs	r2, #202	; 0xca
 80083d8:	625a      	str	r2, [r3, #36]	; 0x24
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2253      	movs	r2, #83	; 0x53
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 f92c 	bl	8008640 <RTC_EnterInitMode>
 80083e8:	4603      	mov	r3, r0
 80083ea:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80083ec:	7cfb      	ldrb	r3, [r7, #19]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d161      	bne.n	80084b6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d126      	bne.n	8008446 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2200      	movs	r2, #0
 800840a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f987 	bl	8008724 <RTC_ByteToBcd2>
 8008416:	4603      	mov	r3, r0
 8008418:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f980 	bl	8008724 <RTC_ByteToBcd2>
 8008424:	4603      	mov	r3, r0
 8008426:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008428:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	789b      	ldrb	r3, [r3, #2]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f978 	bl	8008724 <RTC_ByteToBcd2>
 8008434:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008436:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	78db      	ldrb	r3, [r3, #3]
 800843e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008440:	4313      	orrs	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	e018      	b.n	8008478 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2200      	movs	r2, #0
 8008458:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008466:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800846c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	78db      	ldrb	r3, [r3, #3]
 8008472:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	6979      	ldr	r1, [r7, #20]
 800847e:	4b18      	ldr	r3, [pc, #96]	; (80084e0 <HAL_RTC_SetTime+0x138>)
 8008480:	400b      	ands	r3, r1
 8008482:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008492:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6899      	ldr	r1, [r3, #8]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f8fb 	bl	80086a8 <RTC_ExitInitMode>
 80084b2:	4603      	mov	r3, r0
 80084b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	22ff      	movs	r2, #255	; 0xff
 80084bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80084be:	7cfb      	ldrb	r3, [r7, #19]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d103      	bne.n	80084cc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80084d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd90      	pop	{r4, r7, pc}
 80084de:	bf00      	nop
 80084e0:	007f7f7f 	.word	0x007f7f7f

080084e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_RTC_SetDate+0x1a>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e073      	b.n	80085e6 <HAL_RTC_SetDate+0x102>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10e      	bne.n	8008532 <HAL_RTC_SetDate+0x4e>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	785b      	ldrb	r3, [r3, #1]
 8008524:	f023 0310 	bic.w	r3, r3, #16
 8008528:	b2db      	uxtb	r3, r3
 800852a:	330a      	adds	r3, #10
 800852c:	b2da      	uxtb	r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d11c      	bne.n	8008572 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	78db      	ldrb	r3, [r3, #3]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f8f1 	bl	8008724 <RTC_ByteToBcd2>
 8008542:	4603      	mov	r3, r0
 8008544:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f8ea 	bl	8008724 <RTC_ByteToBcd2>
 8008550:	4603      	mov	r3, r0
 8008552:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008554:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	789b      	ldrb	r3, [r3, #2]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f8e2 	bl	8008724 <RTC_ByteToBcd2>
 8008560:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008562:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e00e      	b.n	8008590 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	78db      	ldrb	r3, [r3, #3]
 8008576:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800857e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008584:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	22ca      	movs	r2, #202	; 0xca
 8008596:	625a      	str	r2, [r3, #36]	; 0x24
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2253      	movs	r2, #83	; 0x53
 800859e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f84d 	bl	8008640 <RTC_EnterInitMode>
 80085a6:	4603      	mov	r3, r0
 80085a8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80085aa:	7cfb      	ldrb	r3, [r7, #19]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	6979      	ldr	r1, [r7, #20]
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <HAL_RTC_SetDate+0x10c>)
 80085b8:	400b      	ands	r3, r1
 80085ba:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 f873 	bl	80086a8 <RTC_ExitInitMode>
 80085c2:	4603      	mov	r3, r0
 80085c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	22ff      	movs	r2, #255	; 0xff
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80085ce:	7cfb      	ldrb	r3, [r7, #19]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80085e4:	7cfb      	ldrb	r3, [r7, #19]


}
 80085e6:	4618      	mov	r0, r3
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd90      	pop	{r4, r7, pc}
 80085ee:	bf00      	nop
 80085f0:	00ffff3f 	.word	0x00ffff3f

080085f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800860a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800860c:	f7fa f9ae 	bl	800296c <HAL_GetTick>
 8008610:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008612:	e009      	b.n	8008628 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008614:	f7fa f9aa 	bl	800296c <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008622:	d901      	bls.n	8008628 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e007      	b.n	8008638 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0ee      	beq.n	8008614 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d120      	bne.n	800869c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f04f 32ff 	mov.w	r2, #4294967295
 8008662:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008664:	f7fa f982 	bl	800296c <HAL_GetTick>
 8008668:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800866a:	e00d      	b.n	8008688 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800866c:	f7fa f97e 	bl	800296c <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800867a:	d905      	bls.n	8008688 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2203      	movs	r2, #3
 8008684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <RTC_EnterInitMode+0x5c>
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b03      	cmp	r3, #3
 800869a:	d1e7      	bne.n	800866c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <RTC_ExitInitMode+0x78>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <RTC_ExitInitMode+0x78>)
 80086ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086be:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <RTC_ExitInitMode+0x78>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10c      	bne.n	80086e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ff91 	bl	80085f4 <HAL_RTC_WaitForSynchro>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01e      	beq.n	8008716 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2203      	movs	r2, #3
 80086dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	e017      	b.n	8008716 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <RTC_ExitInitMode+0x78>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4a0d      	ldr	r2, [pc, #52]	; (8008720 <RTC_ExitInitMode+0x78>)
 80086ec:	f023 0320 	bic.w	r3, r3, #32
 80086f0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff ff7e 	bl	80085f4 <HAL_RTC_WaitForSynchro>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2203      	movs	r2, #3
 8008702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <RTC_ExitInitMode+0x78>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	4a04      	ldr	r2, [pc, #16]	; (8008720 <RTC_ExitInitMode+0x78>)
 8008710:	f043 0320 	orr.w	r3, r3, #32
 8008714:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	58004000 	.word	0x58004000

08008724 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008736:	e005      	b.n	8008744 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	3b0a      	subs	r3, #10
 8008742:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	2b09      	cmp	r3, #9
 8008748:	d8f6      	bhi.n	8008738 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	b2da      	uxtb	r2, r3
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	4313      	orrs	r3, r2
 8008756:	b2db      	uxtb	r3, r3
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e049      	b.n	800880a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7f9 fd40 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f000 fc44 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	d001      	beq.n	800882c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e056      	b.n	80088da <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <HAL_TIM_Base_Start+0xd4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d02c      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008846:	d027      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a27      	ldr	r2, [pc, #156]	; (80088ec <HAL_TIM_Base_Start+0xd8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d022      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a26      	ldr	r2, [pc, #152]	; (80088f0 <HAL_TIM_Base_Start+0xdc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d01d      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a24      	ldr	r2, [pc, #144]	; (80088f4 <HAL_TIM_Base_Start+0xe0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a23      	ldr	r2, [pc, #140]	; (80088f8 <HAL_TIM_Base_Start+0xe4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a21      	ldr	r2, [pc, #132]	; (80088fc <HAL_TIM_Base_Start+0xe8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a20      	ldr	r2, [pc, #128]	; (8008900 <HAL_TIM_Base_Start+0xec>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1e      	ldr	r2, [pc, #120]	; (8008904 <HAL_TIM_Base_Start+0xf0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIM_Base_Start+0x84>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1d      	ldr	r2, [pc, #116]	; (8008908 <HAL_TIM_Base_Start+0xf4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d115      	bne.n	80088c4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	4b1b      	ldr	r3, [pc, #108]	; (800890c <HAL_TIM_Base_Start+0xf8>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b06      	cmp	r3, #6
 80088a8:	d015      	beq.n	80088d6 <HAL_TIM_Base_Start+0xc2>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b0:	d011      	beq.n	80088d6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c2:	e008      	b.n	80088d6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e000      	b.n	80088d8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40000400 	.word	0x40000400
 80088f0:	40000800 	.word	0x40000800
 80088f4:	40000c00 	.word	0x40000c00
 80088f8:	40010400 	.word	0x40010400
 80088fc:	40001800 	.word	0x40001800
 8008900:	40014000 	.word	0x40014000
 8008904:	4000e000 	.word	0x4000e000
 8008908:	4000e400 	.word	0x4000e400
 800890c:	00010007 	.word	0x00010007

08008910 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10f      	bne.n	8008948 <HAL_TIM_Base_Stop+0x38>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6a1a      	ldr	r2, [r3, #32]
 800892e:	f240 4344 	movw	r3, #1092	; 0x444
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <HAL_TIM_Base_Stop+0x38>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0201 	bic.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	d001      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e05e      	b.n	8008a36 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a2b      	ldr	r2, [pc, #172]	; (8008a44 <HAL_TIM_Base_Start_IT+0xe4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d02c      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d027      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a27      	ldr	r2, [pc, #156]	; (8008a48 <HAL_TIM_Base_Start_IT+0xe8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d022      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <HAL_TIM_Base_Start_IT+0xec>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d01d      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a24      	ldr	r2, [pc, #144]	; (8008a50 <HAL_TIM_Base_Start_IT+0xf0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d018      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a23      	ldr	r2, [pc, #140]	; (8008a54 <HAL_TIM_Base_Start_IT+0xf4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d013      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a21      	ldr	r2, [pc, #132]	; (8008a58 <HAL_TIM_Base_Start_IT+0xf8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00e      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a20      	ldr	r2, [pc, #128]	; (8008a5c <HAL_TIM_Base_Start_IT+0xfc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d009      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1e      	ldr	r2, [pc, #120]	; (8008a60 <HAL_TIM_Base_Start_IT+0x100>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d004      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x94>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1d      	ldr	r2, [pc, #116]	; (8008a64 <HAL_TIM_Base_Start_IT+0x104>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d115      	bne.n	8008a20 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <HAL_TIM_Base_Start_IT+0x108>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b06      	cmp	r3, #6
 8008a04:	d015      	beq.n	8008a32 <HAL_TIM_Base_Start_IT+0xd2>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0c:	d011      	beq.n	8008a32 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a1e:	e008      	b.n	8008a32 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e000      	b.n	8008a34 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40000400 	.word	0x40000400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00
 8008a54:	40010400 	.word	0x40010400
 8008a58:	40001800 	.word	0x40001800
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	4000e000 	.word	0x4000e000
 8008a64:	4000e400 	.word	0x4000e400
 8008a68:	00010007 	.word	0x00010007

08008a6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10f      	bne.n	8008ab4 <HAL_TIM_Base_Stop_IT+0x48>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	f240 4344 	movw	r3, #1092	; 0x444
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d107      	bne.n	8008ab4 <HAL_TIM_Base_Stop_IT+0x48>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0201 	bic.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e049      	b.n	8008b70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d106      	bne.n	8008af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7f9 fb3d 	bl	8002170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f000 fa91 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d122      	bne.n	8008bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d11b      	bne.n	8008bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0202 	mvn.w	r2, #2
 8008ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa1a 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa0c 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa1d 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d122      	bne.n	8008c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d11b      	bne.n	8008c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f06f 0204 	mvn.w	r2, #4
 8008bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9f0 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008c14:	e005      	b.n	8008c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9e2 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f9f3 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d122      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0308 	and.w	r3, r3, #8
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d11b      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f06f 0208 	mvn.w	r2, #8
 8008c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2204      	movs	r2, #4
 8008c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9c6 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008c68:	e005      	b.n	8008c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9b8 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f9c9 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b10      	cmp	r3, #16
 8008c88:	d122      	bne.n	8008cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d11b      	bne.n	8008cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0210 	mvn.w	r2, #16
 8008ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f99c 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008cbc:	e005      	b.n	8008cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f98e 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f99f 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d10e      	bne.n	8008cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d107      	bne.n	8008cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0201 	mvn.w	r2, #1
 8008cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7f7 fdc8 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d06:	2b80      	cmp	r3, #128	; 0x80
 8008d08:	d10e      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d14:	2b80      	cmp	r3, #128	; 0x80
 8008d16:	d107      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fe46 	bl	80099b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d36:	d10e      	bne.n	8008d56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d42:	2b80      	cmp	r3, #128	; 0x80
 8008d44:	d107      	bne.n	8008d56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fe39 	bl	80099c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d10e      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d107      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f94d 	bl	800901c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d10e      	bne.n	8008dae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	d107      	bne.n	8008dae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f06f 0220 	mvn.w	r2, #32
 8008da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fdf9 	bl	80099a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e0ff      	b.n	8008fd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b14      	cmp	r3, #20
 8008de2:	f200 80f0 	bhi.w	8008fc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008fc7 	.word	0x08008fc7
 8008df4:	08008fc7 	.word	0x08008fc7
 8008df8:	08008fc7 	.word	0x08008fc7
 8008dfc:	08008e81 	.word	0x08008e81
 8008e00:	08008fc7 	.word	0x08008fc7
 8008e04:	08008fc7 	.word	0x08008fc7
 8008e08:	08008fc7 	.word	0x08008fc7
 8008e0c:	08008ec3 	.word	0x08008ec3
 8008e10:	08008fc7 	.word	0x08008fc7
 8008e14:	08008fc7 	.word	0x08008fc7
 8008e18:	08008fc7 	.word	0x08008fc7
 8008e1c:	08008f03 	.word	0x08008f03
 8008e20:	08008fc7 	.word	0x08008fc7
 8008e24:	08008fc7 	.word	0x08008fc7
 8008e28:	08008fc7 	.word	0x08008fc7
 8008e2c:	08008f45 	.word	0x08008f45
 8008e30:	08008fc7 	.word	0x08008fc7
 8008e34:	08008fc7 	.word	0x08008fc7
 8008e38:	08008fc7 	.word	0x08008fc7
 8008e3c:	08008f85 	.word	0x08008f85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f998 	bl	800917c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699a      	ldr	r2, [r3, #24]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0208 	orr.w	r2, r2, #8
 8008e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0204 	bic.w	r2, r2, #4
 8008e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6999      	ldr	r1, [r3, #24]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	619a      	str	r2, [r3, #24]
      break;
 8008e7e:	e0a5      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fa08 	bl	800929c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6999      	ldr	r1, [r3, #24]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	021a      	lsls	r2, r3, #8
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	619a      	str	r2, [r3, #24]
      break;
 8008ec0:	e084      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fa71 	bl	80093b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	69da      	ldr	r2, [r3, #28]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0208 	orr.w	r2, r2, #8
 8008edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69da      	ldr	r2, [r3, #28]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0204 	bic.w	r2, r2, #4
 8008eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69d9      	ldr	r1, [r3, #28]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	61da      	str	r2, [r3, #28]
      break;
 8008f00:	e064      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fad9 	bl	80094c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69da      	ldr	r2, [r3, #28]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69d9      	ldr	r1, [r3, #28]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	021a      	lsls	r2, r3, #8
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	61da      	str	r2, [r3, #28]
      break;
 8008f42:	e043      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fb22 	bl	8009594 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f042 0208 	orr.w	r2, r2, #8
 8008f5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0204 	bic.w	r2, r2, #4
 8008f6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691a      	ldr	r2, [r3, #16]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f82:	e023      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fb66 	bl	800965c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	021a      	lsls	r2, r3, #8
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fc4:	e002      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop

08008fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a44      	ldr	r2, [pc, #272]	; (8009154 <TIM_Base_SetConfig+0x124>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d00f      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a41      	ldr	r2, [pc, #260]	; (8009158 <TIM_Base_SetConfig+0x128>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00b      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a40      	ldr	r2, [pc, #256]	; (800915c <TIM_Base_SetConfig+0x12c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d007      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a3f      	ldr	r2, [pc, #252]	; (8009160 <TIM_Base_SetConfig+0x130>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a3e      	ldr	r2, [pc, #248]	; (8009164 <TIM_Base_SetConfig+0x134>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d108      	bne.n	8009082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a33      	ldr	r2, [pc, #204]	; (8009154 <TIM_Base_SetConfig+0x124>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d027      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009090:	d023      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a30      	ldr	r2, [pc, #192]	; (8009158 <TIM_Base_SetConfig+0x128>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d01f      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a2f      	ldr	r2, [pc, #188]	; (800915c <TIM_Base_SetConfig+0x12c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d01b      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a2e      	ldr	r2, [pc, #184]	; (8009160 <TIM_Base_SetConfig+0x130>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d017      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a2d      	ldr	r2, [pc, #180]	; (8009164 <TIM_Base_SetConfig+0x134>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d013      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a2c      	ldr	r2, [pc, #176]	; (8009168 <TIM_Base_SetConfig+0x138>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00f      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2b      	ldr	r2, [pc, #172]	; (800916c <TIM_Base_SetConfig+0x13c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00b      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a2a      	ldr	r2, [pc, #168]	; (8009170 <TIM_Base_SetConfig+0x140>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d007      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a29      	ldr	r2, [pc, #164]	; (8009174 <TIM_Base_SetConfig+0x144>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d003      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a28      	ldr	r2, [pc, #160]	; (8009178 <TIM_Base_SetConfig+0x148>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d108      	bne.n	80090ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a10      	ldr	r2, [pc, #64]	; (8009154 <TIM_Base_SetConfig+0x124>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00f      	beq.n	8009138 <TIM_Base_SetConfig+0x108>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a12      	ldr	r2, [pc, #72]	; (8009164 <TIM_Base_SetConfig+0x134>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00b      	beq.n	8009138 <TIM_Base_SetConfig+0x108>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a11      	ldr	r2, [pc, #68]	; (8009168 <TIM_Base_SetConfig+0x138>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d007      	beq.n	8009138 <TIM_Base_SetConfig+0x108>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a10      	ldr	r2, [pc, #64]	; (800916c <TIM_Base_SetConfig+0x13c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d003      	beq.n	8009138 <TIM_Base_SetConfig+0x108>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <TIM_Base_SetConfig+0x140>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d103      	bne.n	8009140 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	615a      	str	r2, [r3, #20]
}
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40010000 	.word	0x40010000
 8009158:	40000400 	.word	0x40000400
 800915c:	40000800 	.word	0x40000800
 8009160:	40000c00 	.word	0x40000c00
 8009164:	40010400 	.word	0x40010400
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800
 8009174:	4000e000 	.word	0x4000e000
 8009178:	4000e400 	.word	0x4000e400

0800917c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	f023 0201 	bic.w	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4b37      	ldr	r3, [pc, #220]	; (8009284 <TIM_OC1_SetConfig+0x108>)
 80091a8:	4013      	ands	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0303 	bic.w	r3, r3, #3
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f023 0302 	bic.w	r3, r3, #2
 80091c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a2d      	ldr	r2, [pc, #180]	; (8009288 <TIM_OC1_SetConfig+0x10c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00f      	beq.n	80091f8 <TIM_OC1_SetConfig+0x7c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a2c      	ldr	r2, [pc, #176]	; (800928c <TIM_OC1_SetConfig+0x110>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00b      	beq.n	80091f8 <TIM_OC1_SetConfig+0x7c>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a2b      	ldr	r2, [pc, #172]	; (8009290 <TIM_OC1_SetConfig+0x114>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d007      	beq.n	80091f8 <TIM_OC1_SetConfig+0x7c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a2a      	ldr	r2, [pc, #168]	; (8009294 <TIM_OC1_SetConfig+0x118>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_OC1_SetConfig+0x7c>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a29      	ldr	r2, [pc, #164]	; (8009298 <TIM_OC1_SetConfig+0x11c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d10c      	bne.n	8009212 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 0308 	bic.w	r3, r3, #8
 80091fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f023 0304 	bic.w	r3, r3, #4
 8009210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a1c      	ldr	r2, [pc, #112]	; (8009288 <TIM_OC1_SetConfig+0x10c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <TIM_OC1_SetConfig+0xbe>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1b      	ldr	r2, [pc, #108]	; (800928c <TIM_OC1_SetConfig+0x110>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00b      	beq.n	800923a <TIM_OC1_SetConfig+0xbe>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <TIM_OC1_SetConfig+0x114>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_OC1_SetConfig+0xbe>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a19      	ldr	r2, [pc, #100]	; (8009294 <TIM_OC1_SetConfig+0x118>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_OC1_SetConfig+0xbe>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a18      	ldr	r2, [pc, #96]	; (8009298 <TIM_OC1_SetConfig+0x11c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d111      	bne.n	800925e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	4313      	orrs	r3, r2
 8009252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	621a      	str	r2, [r3, #32]
}
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	fffeff8f 	.word	0xfffeff8f
 8009288:	40010000 	.word	0x40010000
 800928c:	40010400 	.word	0x40010400
 8009290:	40014000 	.word	0x40014000
 8009294:	40014400 	.word	0x40014400
 8009298:	40014800 	.word	0x40014800

0800929c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f023 0210 	bic.w	r2, r3, #16
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4b34      	ldr	r3, [pc, #208]	; (8009398 <TIM_OC2_SetConfig+0xfc>)
 80092c8:	4013      	ands	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	4313      	orrs	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f023 0320 	bic.w	r3, r3, #32
 80092e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a29      	ldr	r2, [pc, #164]	; (800939c <TIM_OC2_SetConfig+0x100>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d003      	beq.n	8009304 <TIM_OC2_SetConfig+0x68>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a28      	ldr	r2, [pc, #160]	; (80093a0 <TIM_OC2_SetConfig+0x104>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d10d      	bne.n	8009320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800930a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800931e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a1e      	ldr	r2, [pc, #120]	; (800939c <TIM_OC2_SetConfig+0x100>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00f      	beq.n	8009348 <TIM_OC2_SetConfig+0xac>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <TIM_OC2_SetConfig+0x104>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d00b      	beq.n	8009348 <TIM_OC2_SetConfig+0xac>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a1c      	ldr	r2, [pc, #112]	; (80093a4 <TIM_OC2_SetConfig+0x108>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d007      	beq.n	8009348 <TIM_OC2_SetConfig+0xac>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a1b      	ldr	r2, [pc, #108]	; (80093a8 <TIM_OC2_SetConfig+0x10c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d003      	beq.n	8009348 <TIM_OC2_SetConfig+0xac>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a1a      	ldr	r2, [pc, #104]	; (80093ac <TIM_OC2_SetConfig+0x110>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d113      	bne.n	8009370 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800934e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	621a      	str	r2, [r3, #32]
}
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	feff8fff 	.word	0xfeff8fff
 800939c:	40010000 	.word	0x40010000
 80093a0:	40010400 	.word	0x40010400
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40014400 	.word	0x40014400
 80093ac:	40014800 	.word	0x40014800

080093b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4b33      	ldr	r3, [pc, #204]	; (80094a8 <TIM_OC3_SetConfig+0xf8>)
 80093dc:	4013      	ands	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	4313      	orrs	r3, r2
 8009404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a28      	ldr	r2, [pc, #160]	; (80094ac <TIM_OC3_SetConfig+0xfc>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d003      	beq.n	8009416 <TIM_OC3_SetConfig+0x66>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a27      	ldr	r2, [pc, #156]	; (80094b0 <TIM_OC3_SetConfig+0x100>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d10d      	bne.n	8009432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800941c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a1d      	ldr	r2, [pc, #116]	; (80094ac <TIM_OC3_SetConfig+0xfc>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00f      	beq.n	800945a <TIM_OC3_SetConfig+0xaa>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1c      	ldr	r2, [pc, #112]	; (80094b0 <TIM_OC3_SetConfig+0x100>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00b      	beq.n	800945a <TIM_OC3_SetConfig+0xaa>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1b      	ldr	r2, [pc, #108]	; (80094b4 <TIM_OC3_SetConfig+0x104>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d007      	beq.n	800945a <TIM_OC3_SetConfig+0xaa>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a1a      	ldr	r2, [pc, #104]	; (80094b8 <TIM_OC3_SetConfig+0x108>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d003      	beq.n	800945a <TIM_OC3_SetConfig+0xaa>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a19      	ldr	r2, [pc, #100]	; (80094bc <TIM_OC3_SetConfig+0x10c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d113      	bne.n	8009482 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	621a      	str	r2, [r3, #32]
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	fffeff8f 	.word	0xfffeff8f
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40010400 	.word	0x40010400
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800

080094c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	4b24      	ldr	r3, [pc, #144]	; (800957c <TIM_OC4_SetConfig+0xbc>)
 80094ec:	4013      	ands	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800950a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	031b      	lsls	r3, r3, #12
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	4313      	orrs	r3, r2
 8009516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a19      	ldr	r2, [pc, #100]	; (8009580 <TIM_OC4_SetConfig+0xc0>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00f      	beq.n	8009540 <TIM_OC4_SetConfig+0x80>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a18      	ldr	r2, [pc, #96]	; (8009584 <TIM_OC4_SetConfig+0xc4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00b      	beq.n	8009540 <TIM_OC4_SetConfig+0x80>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a17      	ldr	r2, [pc, #92]	; (8009588 <TIM_OC4_SetConfig+0xc8>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <TIM_OC4_SetConfig+0x80>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a16      	ldr	r2, [pc, #88]	; (800958c <TIM_OC4_SetConfig+0xcc>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_OC4_SetConfig+0x80>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a15      	ldr	r2, [pc, #84]	; (8009590 <TIM_OC4_SetConfig+0xd0>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d109      	bne.n	8009554 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	019b      	lsls	r3, r3, #6
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	621a      	str	r2, [r3, #32]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	feff8fff 	.word	0xfeff8fff
 8009580:	40010000 	.word	0x40010000
 8009584:	40010400 	.word	0x40010400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4b21      	ldr	r3, [pc, #132]	; (8009644 <TIM_OC5_SetConfig+0xb0>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	4313      	orrs	r3, r2
 80095e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a18      	ldr	r2, [pc, #96]	; (8009648 <TIM_OC5_SetConfig+0xb4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00f      	beq.n	800960a <TIM_OC5_SetConfig+0x76>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a17      	ldr	r2, [pc, #92]	; (800964c <TIM_OC5_SetConfig+0xb8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00b      	beq.n	800960a <TIM_OC5_SetConfig+0x76>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a16      	ldr	r2, [pc, #88]	; (8009650 <TIM_OC5_SetConfig+0xbc>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d007      	beq.n	800960a <TIM_OC5_SetConfig+0x76>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a15      	ldr	r2, [pc, #84]	; (8009654 <TIM_OC5_SetConfig+0xc0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <TIM_OC5_SetConfig+0x76>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a14      	ldr	r2, [pc, #80]	; (8009658 <TIM_OC5_SetConfig+0xc4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d109      	bne.n	800961e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009610:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	621a      	str	r2, [r3, #32]
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	fffeff8f 	.word	0xfffeff8f
 8009648:	40010000 	.word	0x40010000
 800964c:	40010400 	.word	0x40010400
 8009650:	40014000 	.word	0x40014000
 8009654:	40014400 	.word	0x40014400
 8009658:	40014800 	.word	0x40014800

0800965c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4b22      	ldr	r3, [pc, #136]	; (8009710 <TIM_OC6_SetConfig+0xb4>)
 8009688:	4013      	ands	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	021b      	lsls	r3, r3, #8
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800969e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	051b      	lsls	r3, r3, #20
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a19      	ldr	r2, [pc, #100]	; (8009714 <TIM_OC6_SetConfig+0xb8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00f      	beq.n	80096d4 <TIM_OC6_SetConfig+0x78>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a18      	ldr	r2, [pc, #96]	; (8009718 <TIM_OC6_SetConfig+0xbc>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00b      	beq.n	80096d4 <TIM_OC6_SetConfig+0x78>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a17      	ldr	r2, [pc, #92]	; (800971c <TIM_OC6_SetConfig+0xc0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <TIM_OC6_SetConfig+0x78>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a16      	ldr	r2, [pc, #88]	; (8009720 <TIM_OC6_SetConfig+0xc4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_OC6_SetConfig+0x78>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a15      	ldr	r2, [pc, #84]	; (8009724 <TIM_OC6_SetConfig+0xc8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d109      	bne.n	80096e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	621a      	str	r2, [r3, #32]
}
 8009702:	bf00      	nop
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	feff8fff 	.word	0xfeff8fff
 8009714:	40010000 	.word	0x40010000
 8009718:	40010400 	.word	0x40010400
 800971c:	40014000 	.word	0x40014000
 8009720:	40014400 	.word	0x40014400
 8009724:	40014800 	.word	0x40014800

08009728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009738:	2b01      	cmp	r3, #1
 800973a:	d101      	bne.n	8009740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800973c:	2302      	movs	r3, #2
 800973e:	e077      	b.n	8009830 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a35      	ldr	r2, [pc, #212]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d004      	beq.n	8009774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a34      	ldr	r2, [pc, #208]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d108      	bne.n	8009786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800977a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a25      	ldr	r2, [pc, #148]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d02c      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b2:	d027      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a22      	ldr	r2, [pc, #136]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d022      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a21      	ldr	r2, [pc, #132]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d01d      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a1f      	ldr	r2, [pc, #124]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d018      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a1a      	ldr	r2, [pc, #104]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d013      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1b      	ldr	r2, [pc, #108]	; (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00e      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a1a      	ldr	r2, [pc, #104]	; (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d009      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a18      	ldr	r2, [pc, #96]	; (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d004      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a17      	ldr	r2, [pc, #92]	; (800985c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d10c      	bne.n	800981e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800980a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	4313      	orrs	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	40010000 	.word	0x40010000
 8009840:	40010400 	.word	0x40010400
 8009844:	40000400 	.word	0x40000400
 8009848:	40000800 	.word	0x40000800
 800984c:	40000c00 	.word	0x40000c00
 8009850:	40001800 	.word	0x40001800
 8009854:	40014000 	.word	0x40014000
 8009858:	4000e000 	.word	0x4000e000
 800985c:	4000e400 	.word	0x4000e400

08009860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009878:	2302      	movs	r3, #2
 800987a:	e087      	b.n	800998c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	4313      	orrs	r3, r2
 8009890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	4313      	orrs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	4313      	orrs	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	041b      	lsls	r3, r3, #16
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a27      	ldr	r2, [pc, #156]	; (8009998 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d004      	beq.n	800990a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a25      	ldr	r2, [pc, #148]	; (800999c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d106      	bne.n	8009918 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1e      	ldr	r2, [pc, #120]	; (8009998 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d004      	beq.n	800992c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a1d      	ldr	r2, [pc, #116]	; (800999c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d126      	bne.n	800997a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009936:	051b      	lsls	r3, r3, #20
 8009938:	4313      	orrs	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	4313      	orrs	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	4313      	orrs	r3, r2
 8009956:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a0e      	ldr	r2, [pc, #56]	; (8009998 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d004      	beq.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a0d      	ldr	r2, [pc, #52]	; (800999c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d106      	bne.n	800997a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	40010000 	.word	0x40010000
 800999c:	40010400 	.word	0x40010400

080099a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e042      	b.n	8009a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7f8 fcf5 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2224      	movs	r2, #36	; 0x24
 8009a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 0201 	bic.w	r2, r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f8c2 	bl	8009ba8 <UART_SetConfig>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e022      	b.n	8009a74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 ff14 	bl	800a864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 ff9b 	bl	800a9a8 <UART_CheckIdleState>
 8009a72:	4603      	mov	r3, r0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	f040 8083 	bne.w	8009b9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <HAL_UART_Transmit+0x28>
 8009a9e:	88fb      	ldrh	r3, [r7, #6]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e07b      	b.n	8009ba0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_UART_Transmit+0x3a>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e074      	b.n	8009ba0 <HAL_UART_Transmit+0x124>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2221      	movs	r2, #33	; 0x21
 8009aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ace:	f7f8 ff4d 	bl	800296c <HAL_GetTick>
 8009ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	88fa      	ldrh	r2, [r7, #6]
 8009ad8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	88fa      	ldrh	r2, [r7, #6]
 8009ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aec:	d108      	bne.n	8009b00 <HAL_UART_Transmit+0x84>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	61bb      	str	r3, [r7, #24]
 8009afe:	e003      	b.n	8009b08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009b10:	e02c      	b.n	8009b6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2180      	movs	r1, #128	; 0x80
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 ff8e 	bl	800aa3e <UART_WaitOnFlagUntilTimeout>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e039      	b.n	8009ba0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10b      	bne.n	8009b4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	3302      	adds	r3, #2
 8009b46:	61bb      	str	r3, [r7, #24]
 8009b48:	e007      	b.n	8009b5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	3301      	adds	r3, #1
 8009b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1cc      	bne.n	8009b12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2140      	movs	r1, #64	; 0x40
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 ff5b 	bl	800aa3e <UART_WaitOnFlagUntilTimeout>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e006      	b.n	8009ba0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	e000      	b.n	8009ba0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009b9e:	2302      	movs	r3, #2
  }
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba8:	b5b0      	push	{r4, r5, r7, lr}
 8009baa:	b08e      	sub	sp, #56	; 0x38
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689a      	ldr	r2, [r3, #8]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	4bbf      	ldr	r3, [pc, #764]	; (8009ed4 <UART_SetConfig+0x32c>)
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6812      	ldr	r2, [r2, #0]
 8009bdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bde:	430b      	orrs	r3, r1
 8009be0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4ab5      	ldr	r2, [pc, #724]	; (8009ed8 <UART_SetConfig+0x330>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d004      	beq.n	8009c12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	4bb0      	ldr	r3, [pc, #704]	; (8009edc <UART_SetConfig+0x334>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c22:	430b      	orrs	r3, r1
 8009c24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	f023 010f 	bic.w	r1, r3, #15
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4aa7      	ldr	r2, [pc, #668]	; (8009ee0 <UART_SetConfig+0x338>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d176      	bne.n	8009d34 <UART_SetConfig+0x18c>
 8009c46:	4ba7      	ldr	r3, [pc, #668]	; (8009ee4 <UART_SetConfig+0x33c>)
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4e:	2b28      	cmp	r3, #40	; 0x28
 8009c50:	d86c      	bhi.n	8009d2c <UART_SetConfig+0x184>
 8009c52:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <UART_SetConfig+0xb0>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009cfd 	.word	0x08009cfd
 8009c5c:	08009d2d 	.word	0x08009d2d
 8009c60:	08009d2d 	.word	0x08009d2d
 8009c64:	08009d2d 	.word	0x08009d2d
 8009c68:	08009d2d 	.word	0x08009d2d
 8009c6c:	08009d2d 	.word	0x08009d2d
 8009c70:	08009d2d 	.word	0x08009d2d
 8009c74:	08009d2d 	.word	0x08009d2d
 8009c78:	08009d05 	.word	0x08009d05
 8009c7c:	08009d2d 	.word	0x08009d2d
 8009c80:	08009d2d 	.word	0x08009d2d
 8009c84:	08009d2d 	.word	0x08009d2d
 8009c88:	08009d2d 	.word	0x08009d2d
 8009c8c:	08009d2d 	.word	0x08009d2d
 8009c90:	08009d2d 	.word	0x08009d2d
 8009c94:	08009d2d 	.word	0x08009d2d
 8009c98:	08009d0d 	.word	0x08009d0d
 8009c9c:	08009d2d 	.word	0x08009d2d
 8009ca0:	08009d2d 	.word	0x08009d2d
 8009ca4:	08009d2d 	.word	0x08009d2d
 8009ca8:	08009d2d 	.word	0x08009d2d
 8009cac:	08009d2d 	.word	0x08009d2d
 8009cb0:	08009d2d 	.word	0x08009d2d
 8009cb4:	08009d2d 	.word	0x08009d2d
 8009cb8:	08009d15 	.word	0x08009d15
 8009cbc:	08009d2d 	.word	0x08009d2d
 8009cc0:	08009d2d 	.word	0x08009d2d
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009d2d 	.word	0x08009d2d
 8009ccc:	08009d2d 	.word	0x08009d2d
 8009cd0:	08009d2d 	.word	0x08009d2d
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d1d 	.word	0x08009d1d
 8009cdc:	08009d2d 	.word	0x08009d2d
 8009ce0:	08009d2d 	.word	0x08009d2d
 8009ce4:	08009d2d 	.word	0x08009d2d
 8009ce8:	08009d2d 	.word	0x08009d2d
 8009cec:	08009d2d 	.word	0x08009d2d
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d2d 	.word	0x08009d2d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d02:	e326      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0a:	e322      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d12:	e31e      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1a:	e31a      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e316      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d24:	2340      	movs	r3, #64	; 0x40
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e312      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d2c:	2380      	movs	r3, #128	; 0x80
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e30e      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a6b      	ldr	r2, [pc, #428]	; (8009ee8 <UART_SetConfig+0x340>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d130      	bne.n	8009da0 <UART_SetConfig+0x1f8>
 8009d3e:	4b69      	ldr	r3, [pc, #420]	; (8009ee4 <UART_SetConfig+0x33c>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d826      	bhi.n	8009d98 <UART_SetConfig+0x1f0>
 8009d4a:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x1a8>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6e:	e2f0      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e2ec      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e2e8      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e2e4      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e2e0      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d90:	2340      	movs	r3, #64	; 0x40
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e2dc      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e2d8      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a51      	ldr	r2, [pc, #324]	; (8009eec <UART_SetConfig+0x344>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d130      	bne.n	8009e0c <UART_SetConfig+0x264>
 8009daa:	4b4e      	ldr	r3, [pc, #312]	; (8009ee4 <UART_SetConfig+0x33c>)
 8009dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d826      	bhi.n	8009e04 <UART_SetConfig+0x25c>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <UART_SetConfig+0x214>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dd5 	.word	0x08009dd5
 8009dc0:	08009ddd 	.word	0x08009ddd
 8009dc4:	08009de5 	.word	0x08009de5
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009df5 	.word	0x08009df5
 8009dd0:	08009dfd 	.word	0x08009dfd
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dda:	e2ba      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de2:	e2b6      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dea:	e2b2      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df2:	e2ae      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009df4:	2320      	movs	r3, #32
 8009df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfa:	e2aa      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009dfc:	2340      	movs	r3, #64	; 0x40
 8009dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e02:	e2a6      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0a:	e2a2      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a37      	ldr	r2, [pc, #220]	; (8009ef0 <UART_SetConfig+0x348>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d130      	bne.n	8009e78 <UART_SetConfig+0x2d0>
 8009e16:	4b33      	ldr	r3, [pc, #204]	; (8009ee4 <UART_SetConfig+0x33c>)
 8009e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	2b05      	cmp	r3, #5
 8009e20:	d826      	bhi.n	8009e70 <UART_SetConfig+0x2c8>
 8009e22:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x280>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e41 	.word	0x08009e41
 8009e2c:	08009e49 	.word	0x08009e49
 8009e30:	08009e51 	.word	0x08009e51
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	2300      	movs	r3, #0
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e284      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4e:	e280      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e56:	e27c      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5e:	e278      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e60:	2320      	movs	r3, #32
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e274      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e68:	2340      	movs	r3, #64	; 0x40
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e270      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e70:	2380      	movs	r3, #128	; 0x80
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e26c      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ef4 <UART_SetConfig+0x34c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d142      	bne.n	8009f08 <UART_SetConfig+0x360>
 8009e82:	4b18      	ldr	r3, [pc, #96]	; (8009ee4 <UART_SetConfig+0x33c>)
 8009e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d838      	bhi.n	8009f00 <UART_SetConfig+0x358>
 8009e8e:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0x2ec>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ead 	.word	0x08009ead
 8009e98:	08009eb5 	.word	0x08009eb5
 8009e9c:	08009ebd 	.word	0x08009ebd
 8009ea0:	08009ec5 	.word	0x08009ec5
 8009ea4:	08009ecd 	.word	0x08009ecd
 8009ea8:	08009ef9 	.word	0x08009ef9
 8009eac:	2300      	movs	r3, #0
 8009eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb2:	e24e      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eba:	e24a      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec2:	e246      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eca:	e242      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed2:	e23e      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ed4:	cfff69f3 	.word	0xcfff69f3
 8009ed8:	58000c00 	.word	0x58000c00
 8009edc:	11fff4ff 	.word	0x11fff4ff
 8009ee0:	40011000 	.word	0x40011000
 8009ee4:	58024400 	.word	0x58024400
 8009ee8:	40004400 	.word	0x40004400
 8009eec:	40004800 	.word	0x40004800
 8009ef0:	40004c00 	.word	0x40004c00
 8009ef4:	40005000 	.word	0x40005000
 8009ef8:	2340      	movs	r3, #64	; 0x40
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efe:	e228      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009f00:	2380      	movs	r3, #128	; 0x80
 8009f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f06:	e224      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4ab1      	ldr	r2, [pc, #708]	; (800a1d4 <UART_SetConfig+0x62c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d176      	bne.n	800a000 <UART_SetConfig+0x458>
 8009f12:	4bb1      	ldr	r3, [pc, #708]	; (800a1d8 <UART_SetConfig+0x630>)
 8009f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f1a:	2b28      	cmp	r3, #40	; 0x28
 8009f1c:	d86c      	bhi.n	8009ff8 <UART_SetConfig+0x450>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <UART_SetConfig+0x37c>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009fc9 	.word	0x08009fc9
 8009f28:	08009ff9 	.word	0x08009ff9
 8009f2c:	08009ff9 	.word	0x08009ff9
 8009f30:	08009ff9 	.word	0x08009ff9
 8009f34:	08009ff9 	.word	0x08009ff9
 8009f38:	08009ff9 	.word	0x08009ff9
 8009f3c:	08009ff9 	.word	0x08009ff9
 8009f40:	08009ff9 	.word	0x08009ff9
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009ff9 	.word	0x08009ff9
 8009f4c:	08009ff9 	.word	0x08009ff9
 8009f50:	08009ff9 	.word	0x08009ff9
 8009f54:	08009ff9 	.word	0x08009ff9
 8009f58:	08009ff9 	.word	0x08009ff9
 8009f5c:	08009ff9 	.word	0x08009ff9
 8009f60:	08009ff9 	.word	0x08009ff9
 8009f64:	08009fd9 	.word	0x08009fd9
 8009f68:	08009ff9 	.word	0x08009ff9
 8009f6c:	08009ff9 	.word	0x08009ff9
 8009f70:	08009ff9 	.word	0x08009ff9
 8009f74:	08009ff9 	.word	0x08009ff9
 8009f78:	08009ff9 	.word	0x08009ff9
 8009f7c:	08009ff9 	.word	0x08009ff9
 8009f80:	08009ff9 	.word	0x08009ff9
 8009f84:	08009fe1 	.word	0x08009fe1
 8009f88:	08009ff9 	.word	0x08009ff9
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	08009ff9 	.word	0x08009ff9
 8009f94:	08009ff9 	.word	0x08009ff9
 8009f98:	08009ff9 	.word	0x08009ff9
 8009f9c:	08009ff9 	.word	0x08009ff9
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009ff9 	.word	0x08009ff9
 8009fac:	08009ff9 	.word	0x08009ff9
 8009fb0:	08009ff9 	.word	0x08009ff9
 8009fb4:	08009ff9 	.word	0x08009ff9
 8009fb8:	08009ff9 	.word	0x08009ff9
 8009fbc:	08009ff9 	.word	0x08009ff9
 8009fc0:	08009ff9 	.word	0x08009ff9
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e1c0      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e1bc      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	e1b8      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe6:	e1b4      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009fe8:	2320      	movs	r3, #32
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e1b0      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ff0:	2340      	movs	r3, #64	; 0x40
 8009ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff6:	e1ac      	b.n	800a352 <UART_SetConfig+0x7aa>
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffe:	e1a8      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a75      	ldr	r2, [pc, #468]	; (800a1dc <UART_SetConfig+0x634>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d130      	bne.n	800a06c <UART_SetConfig+0x4c4>
 800a00a:	4b73      	ldr	r3, [pc, #460]	; (800a1d8 <UART_SetConfig+0x630>)
 800a00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b05      	cmp	r3, #5
 800a014:	d826      	bhi.n	800a064 <UART_SetConfig+0x4bc>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <UART_SetConfig+0x474>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a035 	.word	0x0800a035
 800a020:	0800a03d 	.word	0x0800a03d
 800a024:	0800a045 	.word	0x0800a045
 800a028:	0800a04d 	.word	0x0800a04d
 800a02c:	0800a055 	.word	0x0800a055
 800a030:	0800a05d 	.word	0x0800a05d
 800a034:	2300      	movs	r3, #0
 800a036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03a:	e18a      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a03c:	2304      	movs	r3, #4
 800a03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a042:	e186      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a044:	2308      	movs	r3, #8
 800a046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04a:	e182      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a04c:	2310      	movs	r3, #16
 800a04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a052:	e17e      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a054:	2320      	movs	r3, #32
 800a056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05a:	e17a      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a062:	e176      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a064:	2380      	movs	r3, #128	; 0x80
 800a066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06a:	e172      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a5b      	ldr	r2, [pc, #364]	; (800a1e0 <UART_SetConfig+0x638>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d130      	bne.n	800a0d8 <UART_SetConfig+0x530>
 800a076:	4b58      	ldr	r3, [pc, #352]	; (800a1d8 <UART_SetConfig+0x630>)
 800a078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d826      	bhi.n	800a0d0 <UART_SetConfig+0x528>
 800a082:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <UART_SetConfig+0x4e0>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a0a1 	.word	0x0800a0a1
 800a08c:	0800a0a9 	.word	0x0800a0a9
 800a090:	0800a0b1 	.word	0x0800a0b1
 800a094:	0800a0b9 	.word	0x0800a0b9
 800a098:	0800a0c1 	.word	0x0800a0c1
 800a09c:	0800a0c9 	.word	0x0800a0c9
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a6:	e154      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ae:	e150      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e14c      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0be:	e148      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0c0:	2320      	movs	r3, #32
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c6:	e144      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ce:	e140      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0d0:	2380      	movs	r3, #128	; 0x80
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d6:	e13c      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a41      	ldr	r2, [pc, #260]	; (800a1e4 <UART_SetConfig+0x63c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	f040 8082 	bne.w	800a1e8 <UART_SetConfig+0x640>
 800a0e4:	4b3c      	ldr	r3, [pc, #240]	; (800a1d8 <UART_SetConfig+0x630>)
 800a0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0ec:	2b28      	cmp	r3, #40	; 0x28
 800a0ee:	d86d      	bhi.n	800a1cc <UART_SetConfig+0x624>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <UART_SetConfig+0x550>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a19d 	.word	0x0800a19d
 800a0fc:	0800a1cd 	.word	0x0800a1cd
 800a100:	0800a1cd 	.word	0x0800a1cd
 800a104:	0800a1cd 	.word	0x0800a1cd
 800a108:	0800a1cd 	.word	0x0800a1cd
 800a10c:	0800a1cd 	.word	0x0800a1cd
 800a110:	0800a1cd 	.word	0x0800a1cd
 800a114:	0800a1cd 	.word	0x0800a1cd
 800a118:	0800a1a5 	.word	0x0800a1a5
 800a11c:	0800a1cd 	.word	0x0800a1cd
 800a120:	0800a1cd 	.word	0x0800a1cd
 800a124:	0800a1cd 	.word	0x0800a1cd
 800a128:	0800a1cd 	.word	0x0800a1cd
 800a12c:	0800a1cd 	.word	0x0800a1cd
 800a130:	0800a1cd 	.word	0x0800a1cd
 800a134:	0800a1cd 	.word	0x0800a1cd
 800a138:	0800a1ad 	.word	0x0800a1ad
 800a13c:	0800a1cd 	.word	0x0800a1cd
 800a140:	0800a1cd 	.word	0x0800a1cd
 800a144:	0800a1cd 	.word	0x0800a1cd
 800a148:	0800a1cd 	.word	0x0800a1cd
 800a14c:	0800a1cd 	.word	0x0800a1cd
 800a150:	0800a1cd 	.word	0x0800a1cd
 800a154:	0800a1cd 	.word	0x0800a1cd
 800a158:	0800a1b5 	.word	0x0800a1b5
 800a15c:	0800a1cd 	.word	0x0800a1cd
 800a160:	0800a1cd 	.word	0x0800a1cd
 800a164:	0800a1cd 	.word	0x0800a1cd
 800a168:	0800a1cd 	.word	0x0800a1cd
 800a16c:	0800a1cd 	.word	0x0800a1cd
 800a170:	0800a1cd 	.word	0x0800a1cd
 800a174:	0800a1cd 	.word	0x0800a1cd
 800a178:	0800a1bd 	.word	0x0800a1bd
 800a17c:	0800a1cd 	.word	0x0800a1cd
 800a180:	0800a1cd 	.word	0x0800a1cd
 800a184:	0800a1cd 	.word	0x0800a1cd
 800a188:	0800a1cd 	.word	0x0800a1cd
 800a18c:	0800a1cd 	.word	0x0800a1cd
 800a190:	0800a1cd 	.word	0x0800a1cd
 800a194:	0800a1cd 	.word	0x0800a1cd
 800a198:	0800a1c5 	.word	0x0800a1c5
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a2:	e0d6      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1aa:	e0d2      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1ac:	2308      	movs	r3, #8
 800a1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b2:	e0ce      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ba:	e0ca      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1bc:	2320      	movs	r3, #32
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e0c6      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e0c2      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e0be      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a1d4:	40011400 	.word	0x40011400
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	40007800 	.word	0x40007800
 800a1e0:	40007c00 	.word	0x40007c00
 800a1e4:	40011800 	.word	0x40011800
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4aad      	ldr	r2, [pc, #692]	; (800a4a4 <UART_SetConfig+0x8fc>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d176      	bne.n	800a2e0 <UART_SetConfig+0x738>
 800a1f2:	4bad      	ldr	r3, [pc, #692]	; (800a4a8 <UART_SetConfig+0x900>)
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1fa:	2b28      	cmp	r3, #40	; 0x28
 800a1fc:	d86c      	bhi.n	800a2d8 <UART_SetConfig+0x730>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0x65c>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a2a9 	.word	0x0800a2a9
 800a208:	0800a2d9 	.word	0x0800a2d9
 800a20c:	0800a2d9 	.word	0x0800a2d9
 800a210:	0800a2d9 	.word	0x0800a2d9
 800a214:	0800a2d9 	.word	0x0800a2d9
 800a218:	0800a2d9 	.word	0x0800a2d9
 800a21c:	0800a2d9 	.word	0x0800a2d9
 800a220:	0800a2d9 	.word	0x0800a2d9
 800a224:	0800a2b1 	.word	0x0800a2b1
 800a228:	0800a2d9 	.word	0x0800a2d9
 800a22c:	0800a2d9 	.word	0x0800a2d9
 800a230:	0800a2d9 	.word	0x0800a2d9
 800a234:	0800a2d9 	.word	0x0800a2d9
 800a238:	0800a2d9 	.word	0x0800a2d9
 800a23c:	0800a2d9 	.word	0x0800a2d9
 800a240:	0800a2d9 	.word	0x0800a2d9
 800a244:	0800a2b9 	.word	0x0800a2b9
 800a248:	0800a2d9 	.word	0x0800a2d9
 800a24c:	0800a2d9 	.word	0x0800a2d9
 800a250:	0800a2d9 	.word	0x0800a2d9
 800a254:	0800a2d9 	.word	0x0800a2d9
 800a258:	0800a2d9 	.word	0x0800a2d9
 800a25c:	0800a2d9 	.word	0x0800a2d9
 800a260:	0800a2d9 	.word	0x0800a2d9
 800a264:	0800a2c1 	.word	0x0800a2c1
 800a268:	0800a2d9 	.word	0x0800a2d9
 800a26c:	0800a2d9 	.word	0x0800a2d9
 800a270:	0800a2d9 	.word	0x0800a2d9
 800a274:	0800a2d9 	.word	0x0800a2d9
 800a278:	0800a2d9 	.word	0x0800a2d9
 800a27c:	0800a2d9 	.word	0x0800a2d9
 800a280:	0800a2d9 	.word	0x0800a2d9
 800a284:	0800a2c9 	.word	0x0800a2c9
 800a288:	0800a2d9 	.word	0x0800a2d9
 800a28c:	0800a2d9 	.word	0x0800a2d9
 800a290:	0800a2d9 	.word	0x0800a2d9
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2d9 	.word	0x0800a2d9
 800a29c:	0800a2d9 	.word	0x0800a2d9
 800a2a0:	0800a2d9 	.word	0x0800a2d9
 800a2a4:	0800a2d1 	.word	0x0800a2d1
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ae:	e050      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2b0:	2304      	movs	r3, #4
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b6:	e04c      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2b8:	2308      	movs	r3, #8
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e048      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e044      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e040      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e03c      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2d8:	2380      	movs	r3, #128	; 0x80
 800a2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2de:	e038      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a71      	ldr	r2, [pc, #452]	; (800a4ac <UART_SetConfig+0x904>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d130      	bne.n	800a34c <UART_SetConfig+0x7a4>
 800a2ea:	4b6f      	ldr	r3, [pc, #444]	; (800a4a8 <UART_SetConfig+0x900>)
 800a2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	d826      	bhi.n	800a344 <UART_SetConfig+0x79c>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <UART_SetConfig+0x754>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a315 	.word	0x0800a315
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	0800a325 	.word	0x0800a325
 800a308:	0800a32d 	.word	0x0800a32d
 800a30c:	0800a335 	.word	0x0800a335
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	2302      	movs	r3, #2
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e01a      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	e016      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a324:	2308      	movs	r3, #8
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32a:	e012      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a32c:	2310      	movs	r3, #16
 800a32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a332:	e00e      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a334:	2320      	movs	r3, #32
 800a336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33a:	e00a      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a342:	e006      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a344:	2380      	movs	r3, #128	; 0x80
 800a346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34a:	e002      	b.n	800a352 <UART_SetConfig+0x7aa>
 800a34c:	2380      	movs	r3, #128	; 0x80
 800a34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a55      	ldr	r2, [pc, #340]	; (800a4ac <UART_SetConfig+0x904>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	f040 80f0 	bne.w	800a53e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a35e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a362:	2b20      	cmp	r3, #32
 800a364:	dc46      	bgt.n	800a3f4 <UART_SetConfig+0x84c>
 800a366:	2b02      	cmp	r3, #2
 800a368:	db75      	blt.n	800a456 <UART_SetConfig+0x8ae>
 800a36a:	3b02      	subs	r3, #2
 800a36c:	2b1e      	cmp	r3, #30
 800a36e:	d872      	bhi.n	800a456 <UART_SetConfig+0x8ae>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <UART_SetConfig+0x7d0>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a3fb 	.word	0x0800a3fb
 800a37c:	0800a457 	.word	0x0800a457
 800a380:	0800a403 	.word	0x0800a403
 800a384:	0800a457 	.word	0x0800a457
 800a388:	0800a457 	.word	0x0800a457
 800a38c:	0800a457 	.word	0x0800a457
 800a390:	0800a413 	.word	0x0800a413
 800a394:	0800a457 	.word	0x0800a457
 800a398:	0800a457 	.word	0x0800a457
 800a39c:	0800a457 	.word	0x0800a457
 800a3a0:	0800a457 	.word	0x0800a457
 800a3a4:	0800a457 	.word	0x0800a457
 800a3a8:	0800a457 	.word	0x0800a457
 800a3ac:	0800a457 	.word	0x0800a457
 800a3b0:	0800a423 	.word	0x0800a423
 800a3b4:	0800a457 	.word	0x0800a457
 800a3b8:	0800a457 	.word	0x0800a457
 800a3bc:	0800a457 	.word	0x0800a457
 800a3c0:	0800a457 	.word	0x0800a457
 800a3c4:	0800a457 	.word	0x0800a457
 800a3c8:	0800a457 	.word	0x0800a457
 800a3cc:	0800a457 	.word	0x0800a457
 800a3d0:	0800a457 	.word	0x0800a457
 800a3d4:	0800a457 	.word	0x0800a457
 800a3d8:	0800a457 	.word	0x0800a457
 800a3dc:	0800a457 	.word	0x0800a457
 800a3e0:	0800a457 	.word	0x0800a457
 800a3e4:	0800a457 	.word	0x0800a457
 800a3e8:	0800a457 	.word	0x0800a457
 800a3ec:	0800a457 	.word	0x0800a457
 800a3f0:	0800a449 	.word	0x0800a449
 800a3f4:	2b40      	cmp	r3, #64	; 0x40
 800a3f6:	d02a      	beq.n	800a44e <UART_SetConfig+0x8a6>
 800a3f8:	e02d      	b.n	800a456 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3fa:	f7fd f9e9 	bl	80077d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a400:	e02f      	b.n	800a462 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a402:	f107 0314 	add.w	r3, r7, #20
 800a406:	4618      	mov	r0, r3
 800a408:	f7fd f9f8 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a410:	e027      	b.n	800a462 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a412:	f107 0308 	add.w	r3, r7, #8
 800a416:	4618      	mov	r0, r3
 800a418:	f7fd fb44 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a420:	e01f      	b.n	800a462 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a422:	4b21      	ldr	r3, [pc, #132]	; (800a4a8 <UART_SetConfig+0x900>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a42e:	4b1e      	ldr	r3, [pc, #120]	; (800a4a8 <UART_SetConfig+0x900>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	08db      	lsrs	r3, r3, #3
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <UART_SetConfig+0x908>)
 800a43a:	fa22 f303 	lsr.w	r3, r2, r3
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a440:	e00f      	b.n	800a462 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a442:	4b1b      	ldr	r3, [pc, #108]	; (800a4b0 <UART_SetConfig+0x908>)
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a446:	e00c      	b.n	800a462 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a448:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <UART_SetConfig+0x90c>)
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a44c:	e009      	b.n	800a462 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a44e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a454:	e005      	b.n	800a462 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 81e6 	beq.w	800a836 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	4a12      	ldr	r2, [pc, #72]	; (800a4b8 <UART_SetConfig+0x910>)
 800a470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a474:	461a      	mov	r2, r3
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4613      	mov	r3, r2
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4413      	add	r3, r2
 800a488:	6a3a      	ldr	r2, [r7, #32]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d305      	bcc.n	800a49a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a494:	6a3a      	ldr	r2, [r7, #32]
 800a496:	429a      	cmp	r2, r3
 800a498:	d910      	bls.n	800a4bc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a4a0:	e1c9      	b.n	800a836 <UART_SetConfig+0xc8e>
 800a4a2:	bf00      	nop
 800a4a4:	40011c00 	.word	0x40011c00
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	58000c00 	.word	0x58000c00
 800a4b0:	03d09000 	.word	0x03d09000
 800a4b4:	003d0900 	.word	0x003d0900
 800a4b8:	0800bea8 	.word	0x0800bea8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f04f 0100 	mov.w	r1, #0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	4ac1      	ldr	r2, [pc, #772]	; (800a7d0 <UART_SetConfig+0xc28>)
 800a4ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	f7f5 ff6c 	bl	80003b0 <__aeabi_uldivmod>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	f04f 0300 	mov.w	r3, #0
 800a4e8:	020b      	lsls	r3, r1, #8
 800a4ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4ee:	0202      	lsls	r2, r0, #8
 800a4f0:	6879      	ldr	r1, [r7, #4]
 800a4f2:	6849      	ldr	r1, [r1, #4]
 800a4f4:	0849      	lsrs	r1, r1, #1
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	f04f 0100 	mov.w	r1, #0
 800a4fc:	1814      	adds	r4, r2, r0
 800a4fe:	eb43 0501 	adc.w	r5, r3, r1
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	461a      	mov	r2, r3
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	f7f5 ff4e 	bl	80003b0 <__aeabi_uldivmod>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4613      	mov	r3, r2
 800a51a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a522:	d308      	bcc.n	800a536 <UART_SetConfig+0x98e>
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52a:	d204      	bcs.n	800a536 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a532:	60da      	str	r2, [r3, #12]
 800a534:	e17f      	b.n	800a836 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a53c:	e17b      	b.n	800a836 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a546:	f040 80bd 	bne.w	800a6c4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a54a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a54e:	2b20      	cmp	r3, #32
 800a550:	dc48      	bgt.n	800a5e4 <UART_SetConfig+0xa3c>
 800a552:	2b00      	cmp	r3, #0
 800a554:	db7b      	blt.n	800a64e <UART_SetConfig+0xaa6>
 800a556:	2b20      	cmp	r3, #32
 800a558:	d879      	bhi.n	800a64e <UART_SetConfig+0xaa6>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x9b8>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a5eb 	.word	0x0800a5eb
 800a564:	0800a5f3 	.word	0x0800a5f3
 800a568:	0800a64f 	.word	0x0800a64f
 800a56c:	0800a64f 	.word	0x0800a64f
 800a570:	0800a5fb 	.word	0x0800a5fb
 800a574:	0800a64f 	.word	0x0800a64f
 800a578:	0800a64f 	.word	0x0800a64f
 800a57c:	0800a64f 	.word	0x0800a64f
 800a580:	0800a60b 	.word	0x0800a60b
 800a584:	0800a64f 	.word	0x0800a64f
 800a588:	0800a64f 	.word	0x0800a64f
 800a58c:	0800a64f 	.word	0x0800a64f
 800a590:	0800a64f 	.word	0x0800a64f
 800a594:	0800a64f 	.word	0x0800a64f
 800a598:	0800a64f 	.word	0x0800a64f
 800a59c:	0800a64f 	.word	0x0800a64f
 800a5a0:	0800a61b 	.word	0x0800a61b
 800a5a4:	0800a64f 	.word	0x0800a64f
 800a5a8:	0800a64f 	.word	0x0800a64f
 800a5ac:	0800a64f 	.word	0x0800a64f
 800a5b0:	0800a64f 	.word	0x0800a64f
 800a5b4:	0800a64f 	.word	0x0800a64f
 800a5b8:	0800a64f 	.word	0x0800a64f
 800a5bc:	0800a64f 	.word	0x0800a64f
 800a5c0:	0800a64f 	.word	0x0800a64f
 800a5c4:	0800a64f 	.word	0x0800a64f
 800a5c8:	0800a64f 	.word	0x0800a64f
 800a5cc:	0800a64f 	.word	0x0800a64f
 800a5d0:	0800a64f 	.word	0x0800a64f
 800a5d4:	0800a64f 	.word	0x0800a64f
 800a5d8:	0800a64f 	.word	0x0800a64f
 800a5dc:	0800a64f 	.word	0x0800a64f
 800a5e0:	0800a641 	.word	0x0800a641
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d02e      	beq.n	800a646 <UART_SetConfig+0xa9e>
 800a5e8:	e031      	b.n	800a64e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5ea:	f7fb fda7 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 800a5ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5f0:	e033      	b.n	800a65a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f2:	f7fb fdb9 	bl	8006168 <HAL_RCC_GetPCLK2Freq>
 800a5f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5f8:	e02f      	b.n	800a65a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fd f8fc 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a608:	e027      	b.n	800a65a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd fa48 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a618:	e01f      	b.n	800a65a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a61a:	4b6e      	ldr	r3, [pc, #440]	; (800a7d4 <UART_SetConfig+0xc2c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a626:	4b6b      	ldr	r3, [pc, #428]	; (800a7d4 <UART_SetConfig+0xc2c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	08db      	lsrs	r3, r3, #3
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	4a69      	ldr	r2, [pc, #420]	; (800a7d8 <UART_SetConfig+0xc30>)
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a638:	e00f      	b.n	800a65a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a63a:	4b67      	ldr	r3, [pc, #412]	; (800a7d8 <UART_SetConfig+0xc30>)
 800a63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a63e:	e00c      	b.n	800a65a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a640:	4b66      	ldr	r3, [pc, #408]	; (800a7dc <UART_SetConfig+0xc34>)
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a644:	e009      	b.n	800a65a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a64c:	e005      	b.n	800a65a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 80ea 	beq.w	800a836 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	4a5a      	ldr	r2, [pc, #360]	; (800a7d0 <UART_SetConfig+0xc28>)
 800a668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a66c:	461a      	mov	r2, r3
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	fbb3 f3f2 	udiv	r3, r3, r2
 800a674:	005a      	lsls	r2, r3, #1
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	441a      	add	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	fbb2 f3f3 	udiv	r3, r2, r3
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	2b0f      	cmp	r3, #15
 800a68c:	d916      	bls.n	800a6bc <UART_SetConfig+0xb14>
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a694:	d212      	bcs.n	800a6bc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	b29b      	uxth	r3, r3
 800a69a:	f023 030f 	bic.w	r3, r3, #15
 800a69e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a6b8:	60da      	str	r2, [r3, #12]
 800a6ba:	e0bc      	b.n	800a836 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a6c2:	e0b8      	b.n	800a836 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	dc4b      	bgt.n	800a764 <UART_SetConfig+0xbbc>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f2c0 8087 	blt.w	800a7e0 <UART_SetConfig+0xc38>
 800a6d2:	2b20      	cmp	r3, #32
 800a6d4:	f200 8084 	bhi.w	800a7e0 <UART_SetConfig+0xc38>
 800a6d8:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <UART_SetConfig+0xb38>)
 800a6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6de:	bf00      	nop
 800a6e0:	0800a76b 	.word	0x0800a76b
 800a6e4:	0800a773 	.word	0x0800a773
 800a6e8:	0800a7e1 	.word	0x0800a7e1
 800a6ec:	0800a7e1 	.word	0x0800a7e1
 800a6f0:	0800a77b 	.word	0x0800a77b
 800a6f4:	0800a7e1 	.word	0x0800a7e1
 800a6f8:	0800a7e1 	.word	0x0800a7e1
 800a6fc:	0800a7e1 	.word	0x0800a7e1
 800a700:	0800a78b 	.word	0x0800a78b
 800a704:	0800a7e1 	.word	0x0800a7e1
 800a708:	0800a7e1 	.word	0x0800a7e1
 800a70c:	0800a7e1 	.word	0x0800a7e1
 800a710:	0800a7e1 	.word	0x0800a7e1
 800a714:	0800a7e1 	.word	0x0800a7e1
 800a718:	0800a7e1 	.word	0x0800a7e1
 800a71c:	0800a7e1 	.word	0x0800a7e1
 800a720:	0800a79b 	.word	0x0800a79b
 800a724:	0800a7e1 	.word	0x0800a7e1
 800a728:	0800a7e1 	.word	0x0800a7e1
 800a72c:	0800a7e1 	.word	0x0800a7e1
 800a730:	0800a7e1 	.word	0x0800a7e1
 800a734:	0800a7e1 	.word	0x0800a7e1
 800a738:	0800a7e1 	.word	0x0800a7e1
 800a73c:	0800a7e1 	.word	0x0800a7e1
 800a740:	0800a7e1 	.word	0x0800a7e1
 800a744:	0800a7e1 	.word	0x0800a7e1
 800a748:	0800a7e1 	.word	0x0800a7e1
 800a74c:	0800a7e1 	.word	0x0800a7e1
 800a750:	0800a7e1 	.word	0x0800a7e1
 800a754:	0800a7e1 	.word	0x0800a7e1
 800a758:	0800a7e1 	.word	0x0800a7e1
 800a75c:	0800a7e1 	.word	0x0800a7e1
 800a760:	0800a7c1 	.word	0x0800a7c1
 800a764:	2b40      	cmp	r3, #64	; 0x40
 800a766:	d02e      	beq.n	800a7c6 <UART_SetConfig+0xc1e>
 800a768:	e03a      	b.n	800a7e0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a76a:	f7fb fce7 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 800a76e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a770:	e03c      	b.n	800a7ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a772:	f7fb fcf9 	bl	8006168 <HAL_RCC_GetPCLK2Freq>
 800a776:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a778:	e038      	b.n	800a7ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a77a:	f107 0314 	add.w	r3, r7, #20
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd f83c 	bl	80077fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a788:	e030      	b.n	800a7ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a78a:	f107 0308 	add.w	r3, r7, #8
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd f988 	bl	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a798:	e028      	b.n	800a7ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a79a:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <UART_SetConfig+0xc2c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7a6:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <UART_SetConfig+0xc2c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	08db      	lsrs	r3, r3, #3
 800a7ac:	f003 0303 	and.w	r3, r3, #3
 800a7b0:	4a09      	ldr	r2, [pc, #36]	; (800a7d8 <UART_SetConfig+0xc30>)
 800a7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7b8:	e018      	b.n	800a7ec <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <UART_SetConfig+0xc30>)
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7be:	e015      	b.n	800a7ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <UART_SetConfig+0xc34>)
 800a7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7c4:	e012      	b.n	800a7ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7cc:	e00e      	b.n	800a7ec <UART_SetConfig+0xc44>
 800a7ce:	bf00      	nop
 800a7d0:	0800bea8 	.word	0x0800bea8
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	03d09000 	.word	0x03d09000
 800a7dc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7ea:	bf00      	nop
    }

    if (pclk != 0U)
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d021      	beq.n	800a836 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	4a1a      	ldr	r2, [pc, #104]	; (800a860 <UART_SetConfig+0xcb8>)
 800a7f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	fbb3 f2f2 	udiv	r2, r3, r2
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	085b      	lsrs	r3, r3, #1
 800a80a:	441a      	add	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	fbb2 f3f3 	udiv	r3, r2, r3
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	2b0f      	cmp	r3, #15
 800a81a:	d909      	bls.n	800a830 <UART_SetConfig+0xc88>
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a822:	d205      	bcs.n	800a830 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	60da      	str	r2, [r3, #12]
 800a82e:	e002      	b.n	800a836 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a852:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a856:	4618      	mov	r0, r3
 800a858:	3738      	adds	r7, #56	; 0x38
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bdb0      	pop	{r4, r5, r7, pc}
 800a85e:	bf00      	nop
 800a860:	0800bea8 	.word	0x0800bea8

0800a864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00a      	beq.n	800a88e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00a      	beq.n	800a8d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f8:	f003 0310 	and.w	r3, r3, #16
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00a      	beq.n	800a916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00a      	beq.n	800a938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01a      	beq.n	800a97a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	430a      	orrs	r2, r1
 800a958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a962:	d10a      	bne.n	800a97a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	605a      	str	r2, [r3, #4]
  }
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af02      	add	r7, sp, #8
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9b8:	f7f7 ffd8 	bl	800296c <HAL_GetTick>
 800a9bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d10e      	bne.n	800a9ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f82f 	bl	800aa3e <UART_WaitOnFlagUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e025      	b.n	800aa36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	d10e      	bne.n	800aa16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f819 	bl	800aa3e <UART_WaitOnFlagUntilTimeout>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e00f      	b.n	800aa36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b09c      	sub	sp, #112	; 0x70
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	603b      	str	r3, [r7, #0]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa4e:	e0a9      	b.n	800aba4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa56:	f000 80a5 	beq.w	800aba4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa5a:	f7f7 ff87 	bl	800296c <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d302      	bcc.n	800aa70 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d140      	bne.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa84:	667b      	str	r3, [r7, #100]	; 0x64
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e6      	bne.n	800aa70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	663b      	str	r3, [r7, #96]	; 0x60
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aac2:	64ba      	str	r2, [r7, #72]	; 0x48
 800aac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e5      	bne.n	800aaa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2220      	movs	r2, #32
 800aada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e069      	b.n	800abc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0304 	and.w	r3, r3, #4
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d051      	beq.n	800aba4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab0e:	d149      	bne.n	800aba4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34
 800ab3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e6      	bne.n	800ab1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3308      	adds	r3, #8
 800ab52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	e853 3f00 	ldrex	r3, [r3]
 800ab5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f023 0301 	bic.w	r3, r3, #1
 800ab62:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab6c:	623a      	str	r2, [r7, #32]
 800ab6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	6a3a      	ldr	r2, [r7, #32]
 800ab74:	e841 2300 	strex	r3, r2, [r1]
 800ab78:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e5      	bne.n	800ab4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2220      	movs	r2, #32
 800ab84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e010      	b.n	800abc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	69da      	ldr	r2, [r3, #28]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4013      	ands	r3, r2
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	bf0c      	ite	eq
 800abb4:	2301      	moveq	r3, #1
 800abb6:	2300      	movne	r3, #0
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	461a      	mov	r2, r3
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	f43f af46 	beq.w	800aa50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3770      	adds	r7, #112	; 0x70
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <HAL_UARTEx_DisableFifoMode+0x16>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e027      	b.n	800ac34 <HAL_UARTEx_DisableFifoMode+0x66>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2224      	movs	r2, #36	; 0x24
 800abf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0201 	bic.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2220      	movs	r2, #32
 800ac26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d101      	bne.n	800ac58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac54:	2302      	movs	r3, #2
 800ac56:	e02d      	b.n	800acb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2224      	movs	r2, #36	; 0x24
 800ac64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0201 	bic.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f84f 	bl	800ad38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2220      	movs	r2, #32
 800aca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800accc:	2b01      	cmp	r3, #1
 800acce:	d101      	bne.n	800acd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e02d      	b.n	800ad30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2224      	movs	r2, #36	; 0x24
 800ace0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f022 0201 	bic.w	r2, r2, #1
 800acfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f811 	bl	800ad38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2220      	movs	r2, #32
 800ad22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d108      	bne.n	800ad5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad58:	e031      	b.n	800adbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad5a:	2310      	movs	r3, #16
 800ad5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad5e:	2310      	movs	r3, #16
 800ad60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	0e5b      	lsrs	r3, r3, #25
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	f003 0307 	and.w	r3, r3, #7
 800ad70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	0f5b      	lsrs	r3, r3, #29
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	f003 0307 	and.w	r3, r3, #7
 800ad80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	7b3a      	ldrb	r2, [r7, #12]
 800ad86:	4911      	ldr	r1, [pc, #68]	; (800adcc <UARTEx_SetNbDataToProcess+0x94>)
 800ad88:	5c8a      	ldrb	r2, [r1, r2]
 800ad8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad8e:	7b3a      	ldrb	r2, [r7, #12]
 800ad90:	490f      	ldr	r1, [pc, #60]	; (800add0 <UARTEx_SetNbDataToProcess+0x98>)
 800ad92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad94:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	7b7a      	ldrb	r2, [r7, #13]
 800ada4:	4909      	ldr	r1, [pc, #36]	; (800adcc <UARTEx_SetNbDataToProcess+0x94>)
 800ada6:	5c8a      	ldrb	r2, [r1, r2]
 800ada8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adac:	7b7a      	ldrb	r2, [r7, #13]
 800adae:	4908      	ldr	r1, [pc, #32]	; (800add0 <UARTEx_SetNbDataToProcess+0x98>)
 800adb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800adbe:	bf00      	nop
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	0800bec0 	.word	0x0800bec0
 800add0:	0800bec8 	.word	0x0800bec8

0800add4 <__errno>:
 800add4:	4b01      	ldr	r3, [pc, #4]	; (800addc <__errno+0x8>)
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	24000010 	.word	0x24000010

0800ade0 <__libc_init_array>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4d0d      	ldr	r5, [pc, #52]	; (800ae18 <__libc_init_array+0x38>)
 800ade4:	4c0d      	ldr	r4, [pc, #52]	; (800ae1c <__libc_init_array+0x3c>)
 800ade6:	1b64      	subs	r4, r4, r5
 800ade8:	10a4      	asrs	r4, r4, #2
 800adea:	2600      	movs	r6, #0
 800adec:	42a6      	cmp	r6, r4
 800adee:	d109      	bne.n	800ae04 <__libc_init_array+0x24>
 800adf0:	4d0b      	ldr	r5, [pc, #44]	; (800ae20 <__libc_init_array+0x40>)
 800adf2:	4c0c      	ldr	r4, [pc, #48]	; (800ae24 <__libc_init_array+0x44>)
 800adf4:	f000 fffa 	bl	800bdec <_init>
 800adf8:	1b64      	subs	r4, r4, r5
 800adfa:	10a4      	asrs	r4, r4, #2
 800adfc:	2600      	movs	r6, #0
 800adfe:	42a6      	cmp	r6, r4
 800ae00:	d105      	bne.n	800ae0e <__libc_init_array+0x2e>
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae08:	4798      	blx	r3
 800ae0a:	3601      	adds	r6, #1
 800ae0c:	e7ee      	b.n	800adec <__libc_init_array+0xc>
 800ae0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae12:	4798      	blx	r3
 800ae14:	3601      	adds	r6, #1
 800ae16:	e7f2      	b.n	800adfe <__libc_init_array+0x1e>
 800ae18:	0800bf70 	.word	0x0800bf70
 800ae1c:	0800bf70 	.word	0x0800bf70
 800ae20:	0800bf70 	.word	0x0800bf70
 800ae24:	0800bf74 	.word	0x0800bf74

0800ae28 <memcpy>:
 800ae28:	440a      	add	r2, r1
 800ae2a:	4291      	cmp	r1, r2
 800ae2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae30:	d100      	bne.n	800ae34 <memcpy+0xc>
 800ae32:	4770      	bx	lr
 800ae34:	b510      	push	{r4, lr}
 800ae36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae3e:	4291      	cmp	r1, r2
 800ae40:	d1f9      	bne.n	800ae36 <memcpy+0xe>
 800ae42:	bd10      	pop	{r4, pc}

0800ae44 <memset>:
 800ae44:	4402      	add	r2, r0
 800ae46:	4603      	mov	r3, r0
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d100      	bne.n	800ae4e <memset+0xa>
 800ae4c:	4770      	bx	lr
 800ae4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae52:	e7f9      	b.n	800ae48 <memset+0x4>

0800ae54 <iprintf>:
 800ae54:	b40f      	push	{r0, r1, r2, r3}
 800ae56:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <iprintf+0x2c>)
 800ae58:	b513      	push	{r0, r1, r4, lr}
 800ae5a:	681c      	ldr	r4, [r3, #0]
 800ae5c:	b124      	cbz	r4, 800ae68 <iprintf+0x14>
 800ae5e:	69a3      	ldr	r3, [r4, #24]
 800ae60:	b913      	cbnz	r3, 800ae68 <iprintf+0x14>
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fa5e 	bl	800b324 <__sinit>
 800ae68:	ab05      	add	r3, sp, #20
 800ae6a:	9a04      	ldr	r2, [sp, #16]
 800ae6c:	68a1      	ldr	r1, [r4, #8]
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fc2f 	bl	800b6d4 <_vfiprintf_r>
 800ae76:	b002      	add	sp, #8
 800ae78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae7c:	b004      	add	sp, #16
 800ae7e:	4770      	bx	lr
 800ae80:	24000010 	.word	0x24000010

0800ae84 <_puts_r>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	460e      	mov	r6, r1
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b118      	cbz	r0, 800ae94 <_puts_r+0x10>
 800ae8c:	6983      	ldr	r3, [r0, #24]
 800ae8e:	b90b      	cbnz	r3, 800ae94 <_puts_r+0x10>
 800ae90:	f000 fa48 	bl	800b324 <__sinit>
 800ae94:	69ab      	ldr	r3, [r5, #24]
 800ae96:	68ac      	ldr	r4, [r5, #8]
 800ae98:	b913      	cbnz	r3, 800aea0 <_puts_r+0x1c>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f000 fa42 	bl	800b324 <__sinit>
 800aea0:	4b2c      	ldr	r3, [pc, #176]	; (800af54 <_puts_r+0xd0>)
 800aea2:	429c      	cmp	r4, r3
 800aea4:	d120      	bne.n	800aee8 <_puts_r+0x64>
 800aea6:	686c      	ldr	r4, [r5, #4]
 800aea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeaa:	07db      	lsls	r3, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_puts_r+0x36>
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	0598      	lsls	r0, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_puts_r+0x36>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb6:	f000 fad3 	bl	800b460 <__retarget_lock_acquire_recursive>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	0719      	lsls	r1, r3, #28
 800aebe:	d51d      	bpl.n	800aefc <_puts_r+0x78>
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	b1db      	cbz	r3, 800aefc <_puts_r+0x78>
 800aec4:	3e01      	subs	r6, #1
 800aec6:	68a3      	ldr	r3, [r4, #8]
 800aec8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aecc:	3b01      	subs	r3, #1
 800aece:	60a3      	str	r3, [r4, #8]
 800aed0:	bb39      	cbnz	r1, 800af22 <_puts_r+0x9e>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da38      	bge.n	800af48 <_puts_r+0xc4>
 800aed6:	4622      	mov	r2, r4
 800aed8:	210a      	movs	r1, #10
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 f848 	bl	800af70 <__swbuf_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d011      	beq.n	800af08 <_puts_r+0x84>
 800aee4:	250a      	movs	r5, #10
 800aee6:	e011      	b.n	800af0c <_puts_r+0x88>
 800aee8:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <_puts_r+0xd4>)
 800aeea:	429c      	cmp	r4, r3
 800aeec:	d101      	bne.n	800aef2 <_puts_r+0x6e>
 800aeee:	68ac      	ldr	r4, [r5, #8]
 800aef0:	e7da      	b.n	800aea8 <_puts_r+0x24>
 800aef2:	4b1a      	ldr	r3, [pc, #104]	; (800af5c <_puts_r+0xd8>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	bf08      	it	eq
 800aef8:	68ec      	ldreq	r4, [r5, #12]
 800aefa:	e7d5      	b.n	800aea8 <_puts_r+0x24>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f888 	bl	800b014 <__swsetup_r>
 800af04:	2800      	cmp	r0, #0
 800af06:	d0dd      	beq.n	800aec4 <_puts_r+0x40>
 800af08:	f04f 35ff 	mov.w	r5, #4294967295
 800af0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af0e:	07da      	lsls	r2, r3, #31
 800af10:	d405      	bmi.n	800af1e <_puts_r+0x9a>
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	059b      	lsls	r3, r3, #22
 800af16:	d402      	bmi.n	800af1e <_puts_r+0x9a>
 800af18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af1a:	f000 faa2 	bl	800b462 <__retarget_lock_release_recursive>
 800af1e:	4628      	mov	r0, r5
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	2b00      	cmp	r3, #0
 800af24:	da04      	bge.n	800af30 <_puts_r+0xac>
 800af26:	69a2      	ldr	r2, [r4, #24]
 800af28:	429a      	cmp	r2, r3
 800af2a:	dc06      	bgt.n	800af3a <_puts_r+0xb6>
 800af2c:	290a      	cmp	r1, #10
 800af2e:	d004      	beq.n	800af3a <_puts_r+0xb6>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	6022      	str	r2, [r4, #0]
 800af36:	7019      	strb	r1, [r3, #0]
 800af38:	e7c5      	b.n	800aec6 <_puts_r+0x42>
 800af3a:	4622      	mov	r2, r4
 800af3c:	4628      	mov	r0, r5
 800af3e:	f000 f817 	bl	800af70 <__swbuf_r>
 800af42:	3001      	adds	r0, #1
 800af44:	d1bf      	bne.n	800aec6 <_puts_r+0x42>
 800af46:	e7df      	b.n	800af08 <_puts_r+0x84>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	250a      	movs	r5, #10
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	6022      	str	r2, [r4, #0]
 800af50:	701d      	strb	r5, [r3, #0]
 800af52:	e7db      	b.n	800af0c <_puts_r+0x88>
 800af54:	0800bef4 	.word	0x0800bef4
 800af58:	0800bf14 	.word	0x0800bf14
 800af5c:	0800bed4 	.word	0x0800bed4

0800af60 <puts>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <puts+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f7ff bf8d 	b.w	800ae84 <_puts_r>
 800af6a:	bf00      	nop
 800af6c:	24000010 	.word	0x24000010

0800af70 <__swbuf_r>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	460e      	mov	r6, r1
 800af74:	4614      	mov	r4, r2
 800af76:	4605      	mov	r5, r0
 800af78:	b118      	cbz	r0, 800af82 <__swbuf_r+0x12>
 800af7a:	6983      	ldr	r3, [r0, #24]
 800af7c:	b90b      	cbnz	r3, 800af82 <__swbuf_r+0x12>
 800af7e:	f000 f9d1 	bl	800b324 <__sinit>
 800af82:	4b21      	ldr	r3, [pc, #132]	; (800b008 <__swbuf_r+0x98>)
 800af84:	429c      	cmp	r4, r3
 800af86:	d12b      	bne.n	800afe0 <__swbuf_r+0x70>
 800af88:	686c      	ldr	r4, [r5, #4]
 800af8a:	69a3      	ldr	r3, [r4, #24]
 800af8c:	60a3      	str	r3, [r4, #8]
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	071a      	lsls	r2, r3, #28
 800af92:	d52f      	bpl.n	800aff4 <__swbuf_r+0x84>
 800af94:	6923      	ldr	r3, [r4, #16]
 800af96:	b36b      	cbz	r3, 800aff4 <__swbuf_r+0x84>
 800af98:	6923      	ldr	r3, [r4, #16]
 800af9a:	6820      	ldr	r0, [r4, #0]
 800af9c:	1ac0      	subs	r0, r0, r3
 800af9e:	6963      	ldr	r3, [r4, #20]
 800afa0:	b2f6      	uxtb	r6, r6
 800afa2:	4283      	cmp	r3, r0
 800afa4:	4637      	mov	r7, r6
 800afa6:	dc04      	bgt.n	800afb2 <__swbuf_r+0x42>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f926 	bl	800b1fc <_fflush_r>
 800afb0:	bb30      	cbnz	r0, 800b000 <__swbuf_r+0x90>
 800afb2:	68a3      	ldr	r3, [r4, #8]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	60a3      	str	r3, [r4, #8]
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	6022      	str	r2, [r4, #0]
 800afbe:	701e      	strb	r6, [r3, #0]
 800afc0:	6963      	ldr	r3, [r4, #20]
 800afc2:	3001      	adds	r0, #1
 800afc4:	4283      	cmp	r3, r0
 800afc6:	d004      	beq.n	800afd2 <__swbuf_r+0x62>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	07db      	lsls	r3, r3, #31
 800afcc:	d506      	bpl.n	800afdc <__swbuf_r+0x6c>
 800afce:	2e0a      	cmp	r6, #10
 800afd0:	d104      	bne.n	800afdc <__swbuf_r+0x6c>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 f911 	bl	800b1fc <_fflush_r>
 800afda:	b988      	cbnz	r0, 800b000 <__swbuf_r+0x90>
 800afdc:	4638      	mov	r0, r7
 800afde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <__swbuf_r+0x9c>)
 800afe2:	429c      	cmp	r4, r3
 800afe4:	d101      	bne.n	800afea <__swbuf_r+0x7a>
 800afe6:	68ac      	ldr	r4, [r5, #8]
 800afe8:	e7cf      	b.n	800af8a <__swbuf_r+0x1a>
 800afea:	4b09      	ldr	r3, [pc, #36]	; (800b010 <__swbuf_r+0xa0>)
 800afec:	429c      	cmp	r4, r3
 800afee:	bf08      	it	eq
 800aff0:	68ec      	ldreq	r4, [r5, #12]
 800aff2:	e7ca      	b.n	800af8a <__swbuf_r+0x1a>
 800aff4:	4621      	mov	r1, r4
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 f80c 	bl	800b014 <__swsetup_r>
 800affc:	2800      	cmp	r0, #0
 800affe:	d0cb      	beq.n	800af98 <__swbuf_r+0x28>
 800b000:	f04f 37ff 	mov.w	r7, #4294967295
 800b004:	e7ea      	b.n	800afdc <__swbuf_r+0x6c>
 800b006:	bf00      	nop
 800b008:	0800bef4 	.word	0x0800bef4
 800b00c:	0800bf14 	.word	0x0800bf14
 800b010:	0800bed4 	.word	0x0800bed4

0800b014 <__swsetup_r>:
 800b014:	4b32      	ldr	r3, [pc, #200]	; (800b0e0 <__swsetup_r+0xcc>)
 800b016:	b570      	push	{r4, r5, r6, lr}
 800b018:	681d      	ldr	r5, [r3, #0]
 800b01a:	4606      	mov	r6, r0
 800b01c:	460c      	mov	r4, r1
 800b01e:	b125      	cbz	r5, 800b02a <__swsetup_r+0x16>
 800b020:	69ab      	ldr	r3, [r5, #24]
 800b022:	b913      	cbnz	r3, 800b02a <__swsetup_r+0x16>
 800b024:	4628      	mov	r0, r5
 800b026:	f000 f97d 	bl	800b324 <__sinit>
 800b02a:	4b2e      	ldr	r3, [pc, #184]	; (800b0e4 <__swsetup_r+0xd0>)
 800b02c:	429c      	cmp	r4, r3
 800b02e:	d10f      	bne.n	800b050 <__swsetup_r+0x3c>
 800b030:	686c      	ldr	r4, [r5, #4]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b038:	0719      	lsls	r1, r3, #28
 800b03a:	d42c      	bmi.n	800b096 <__swsetup_r+0x82>
 800b03c:	06dd      	lsls	r5, r3, #27
 800b03e:	d411      	bmi.n	800b064 <__swsetup_r+0x50>
 800b040:	2309      	movs	r3, #9
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	f04f 30ff 	mov.w	r0, #4294967295
 800b04e:	e03e      	b.n	800b0ce <__swsetup_r+0xba>
 800b050:	4b25      	ldr	r3, [pc, #148]	; (800b0e8 <__swsetup_r+0xd4>)
 800b052:	429c      	cmp	r4, r3
 800b054:	d101      	bne.n	800b05a <__swsetup_r+0x46>
 800b056:	68ac      	ldr	r4, [r5, #8]
 800b058:	e7eb      	b.n	800b032 <__swsetup_r+0x1e>
 800b05a:	4b24      	ldr	r3, [pc, #144]	; (800b0ec <__swsetup_r+0xd8>)
 800b05c:	429c      	cmp	r4, r3
 800b05e:	bf08      	it	eq
 800b060:	68ec      	ldreq	r4, [r5, #12]
 800b062:	e7e6      	b.n	800b032 <__swsetup_r+0x1e>
 800b064:	0758      	lsls	r0, r3, #29
 800b066:	d512      	bpl.n	800b08e <__swsetup_r+0x7a>
 800b068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b06a:	b141      	cbz	r1, 800b07e <__swsetup_r+0x6a>
 800b06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b070:	4299      	cmp	r1, r3
 800b072:	d002      	beq.n	800b07a <__swsetup_r+0x66>
 800b074:	4630      	mov	r0, r6
 800b076:	f000 fa59 	bl	800b52c <_free_r>
 800b07a:	2300      	movs	r3, #0
 800b07c:	6363      	str	r3, [r4, #52]	; 0x34
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	2300      	movs	r3, #0
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f043 0308 	orr.w	r3, r3, #8
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	6923      	ldr	r3, [r4, #16]
 800b098:	b94b      	cbnz	r3, 800b0ae <__swsetup_r+0x9a>
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0a4:	d003      	beq.n	800b0ae <__swsetup_r+0x9a>
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 f9ff 	bl	800b4ac <__smakebuf_r>
 800b0ae:	89a0      	ldrh	r0, [r4, #12]
 800b0b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0b4:	f010 0301 	ands.w	r3, r0, #1
 800b0b8:	d00a      	beq.n	800b0d0 <__swsetup_r+0xbc>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60a3      	str	r3, [r4, #8]
 800b0be:	6963      	ldr	r3, [r4, #20]
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	61a3      	str	r3, [r4, #24]
 800b0c4:	6923      	ldr	r3, [r4, #16]
 800b0c6:	b943      	cbnz	r3, 800b0da <__swsetup_r+0xc6>
 800b0c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0cc:	d1ba      	bne.n	800b044 <__swsetup_r+0x30>
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	0781      	lsls	r1, r0, #30
 800b0d2:	bf58      	it	pl
 800b0d4:	6963      	ldrpl	r3, [r4, #20]
 800b0d6:	60a3      	str	r3, [r4, #8]
 800b0d8:	e7f4      	b.n	800b0c4 <__swsetup_r+0xb0>
 800b0da:	2000      	movs	r0, #0
 800b0dc:	e7f7      	b.n	800b0ce <__swsetup_r+0xba>
 800b0de:	bf00      	nop
 800b0e0:	24000010 	.word	0x24000010
 800b0e4:	0800bef4 	.word	0x0800bef4
 800b0e8:	0800bf14 	.word	0x0800bf14
 800b0ec:	0800bed4 	.word	0x0800bed4

0800b0f0 <__sflush_r>:
 800b0f0:	898a      	ldrh	r2, [r1, #12]
 800b0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	0710      	lsls	r0, r2, #28
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	d458      	bmi.n	800b1b0 <__sflush_r+0xc0>
 800b0fe:	684b      	ldr	r3, [r1, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc05      	bgt.n	800b110 <__sflush_r+0x20>
 800b104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	dc02      	bgt.n	800b110 <__sflush_r+0x20>
 800b10a:	2000      	movs	r0, #0
 800b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b112:	2e00      	cmp	r6, #0
 800b114:	d0f9      	beq.n	800b10a <__sflush_r+0x1a>
 800b116:	2300      	movs	r3, #0
 800b118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b11c:	682f      	ldr	r7, [r5, #0]
 800b11e:	602b      	str	r3, [r5, #0]
 800b120:	d032      	beq.n	800b188 <__sflush_r+0x98>
 800b122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	075a      	lsls	r2, r3, #29
 800b128:	d505      	bpl.n	800b136 <__sflush_r+0x46>
 800b12a:	6863      	ldr	r3, [r4, #4]
 800b12c:	1ac0      	subs	r0, r0, r3
 800b12e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b130:	b10b      	cbz	r3, 800b136 <__sflush_r+0x46>
 800b132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b134:	1ac0      	subs	r0, r0, r3
 800b136:	2300      	movs	r3, #0
 800b138:	4602      	mov	r2, r0
 800b13a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b13c:	6a21      	ldr	r1, [r4, #32]
 800b13e:	4628      	mov	r0, r5
 800b140:	47b0      	blx	r6
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	d106      	bne.n	800b156 <__sflush_r+0x66>
 800b148:	6829      	ldr	r1, [r5, #0]
 800b14a:	291d      	cmp	r1, #29
 800b14c:	d82c      	bhi.n	800b1a8 <__sflush_r+0xb8>
 800b14e:	4a2a      	ldr	r2, [pc, #168]	; (800b1f8 <__sflush_r+0x108>)
 800b150:	40ca      	lsrs	r2, r1
 800b152:	07d6      	lsls	r6, r2, #31
 800b154:	d528      	bpl.n	800b1a8 <__sflush_r+0xb8>
 800b156:	2200      	movs	r2, #0
 800b158:	6062      	str	r2, [r4, #4]
 800b15a:	04d9      	lsls	r1, r3, #19
 800b15c:	6922      	ldr	r2, [r4, #16]
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	d504      	bpl.n	800b16c <__sflush_r+0x7c>
 800b162:	1c42      	adds	r2, r0, #1
 800b164:	d101      	bne.n	800b16a <__sflush_r+0x7a>
 800b166:	682b      	ldr	r3, [r5, #0]
 800b168:	b903      	cbnz	r3, 800b16c <__sflush_r+0x7c>
 800b16a:	6560      	str	r0, [r4, #84]	; 0x54
 800b16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b16e:	602f      	str	r7, [r5, #0]
 800b170:	2900      	cmp	r1, #0
 800b172:	d0ca      	beq.n	800b10a <__sflush_r+0x1a>
 800b174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b178:	4299      	cmp	r1, r3
 800b17a:	d002      	beq.n	800b182 <__sflush_r+0x92>
 800b17c:	4628      	mov	r0, r5
 800b17e:	f000 f9d5 	bl	800b52c <_free_r>
 800b182:	2000      	movs	r0, #0
 800b184:	6360      	str	r0, [r4, #52]	; 0x34
 800b186:	e7c1      	b.n	800b10c <__sflush_r+0x1c>
 800b188:	6a21      	ldr	r1, [r4, #32]
 800b18a:	2301      	movs	r3, #1
 800b18c:	4628      	mov	r0, r5
 800b18e:	47b0      	blx	r6
 800b190:	1c41      	adds	r1, r0, #1
 800b192:	d1c7      	bne.n	800b124 <__sflush_r+0x34>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0c4      	beq.n	800b124 <__sflush_r+0x34>
 800b19a:	2b1d      	cmp	r3, #29
 800b19c:	d001      	beq.n	800b1a2 <__sflush_r+0xb2>
 800b19e:	2b16      	cmp	r3, #22
 800b1a0:	d101      	bne.n	800b1a6 <__sflush_r+0xb6>
 800b1a2:	602f      	str	r7, [r5, #0]
 800b1a4:	e7b1      	b.n	800b10a <__sflush_r+0x1a>
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	e7ad      	b.n	800b10c <__sflush_r+0x1c>
 800b1b0:	690f      	ldr	r7, [r1, #16]
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	d0a9      	beq.n	800b10a <__sflush_r+0x1a>
 800b1b6:	0793      	lsls	r3, r2, #30
 800b1b8:	680e      	ldr	r6, [r1, #0]
 800b1ba:	bf08      	it	eq
 800b1bc:	694b      	ldreq	r3, [r1, #20]
 800b1be:	600f      	str	r7, [r1, #0]
 800b1c0:	bf18      	it	ne
 800b1c2:	2300      	movne	r3, #0
 800b1c4:	eba6 0807 	sub.w	r8, r6, r7
 800b1c8:	608b      	str	r3, [r1, #8]
 800b1ca:	f1b8 0f00 	cmp.w	r8, #0
 800b1ce:	dd9c      	ble.n	800b10a <__sflush_r+0x1a>
 800b1d0:	6a21      	ldr	r1, [r4, #32]
 800b1d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1d4:	4643      	mov	r3, r8
 800b1d6:	463a      	mov	r2, r7
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b0      	blx	r6
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	dc06      	bgt.n	800b1ee <__sflush_r+0xfe>
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e78e      	b.n	800b10c <__sflush_r+0x1c>
 800b1ee:	4407      	add	r7, r0
 800b1f0:	eba8 0800 	sub.w	r8, r8, r0
 800b1f4:	e7e9      	b.n	800b1ca <__sflush_r+0xda>
 800b1f6:	bf00      	nop
 800b1f8:	20400001 	.word	0x20400001

0800b1fc <_fflush_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	690b      	ldr	r3, [r1, #16]
 800b200:	4605      	mov	r5, r0
 800b202:	460c      	mov	r4, r1
 800b204:	b913      	cbnz	r3, 800b20c <_fflush_r+0x10>
 800b206:	2500      	movs	r5, #0
 800b208:	4628      	mov	r0, r5
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	b118      	cbz	r0, 800b216 <_fflush_r+0x1a>
 800b20e:	6983      	ldr	r3, [r0, #24]
 800b210:	b90b      	cbnz	r3, 800b216 <_fflush_r+0x1a>
 800b212:	f000 f887 	bl	800b324 <__sinit>
 800b216:	4b14      	ldr	r3, [pc, #80]	; (800b268 <_fflush_r+0x6c>)
 800b218:	429c      	cmp	r4, r3
 800b21a:	d11b      	bne.n	800b254 <_fflush_r+0x58>
 800b21c:	686c      	ldr	r4, [r5, #4]
 800b21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0ef      	beq.n	800b206 <_fflush_r+0xa>
 800b226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b228:	07d0      	lsls	r0, r2, #31
 800b22a:	d404      	bmi.n	800b236 <_fflush_r+0x3a>
 800b22c:	0599      	lsls	r1, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_fflush_r+0x3a>
 800b230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b232:	f000 f915 	bl	800b460 <__retarget_lock_acquire_recursive>
 800b236:	4628      	mov	r0, r5
 800b238:	4621      	mov	r1, r4
 800b23a:	f7ff ff59 	bl	800b0f0 <__sflush_r>
 800b23e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b240:	07da      	lsls	r2, r3, #31
 800b242:	4605      	mov	r5, r0
 800b244:	d4e0      	bmi.n	800b208 <_fflush_r+0xc>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	059b      	lsls	r3, r3, #22
 800b24a:	d4dd      	bmi.n	800b208 <_fflush_r+0xc>
 800b24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24e:	f000 f908 	bl	800b462 <__retarget_lock_release_recursive>
 800b252:	e7d9      	b.n	800b208 <_fflush_r+0xc>
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <_fflush_r+0x70>)
 800b256:	429c      	cmp	r4, r3
 800b258:	d101      	bne.n	800b25e <_fflush_r+0x62>
 800b25a:	68ac      	ldr	r4, [r5, #8]
 800b25c:	e7df      	b.n	800b21e <_fflush_r+0x22>
 800b25e:	4b04      	ldr	r3, [pc, #16]	; (800b270 <_fflush_r+0x74>)
 800b260:	429c      	cmp	r4, r3
 800b262:	bf08      	it	eq
 800b264:	68ec      	ldreq	r4, [r5, #12]
 800b266:	e7da      	b.n	800b21e <_fflush_r+0x22>
 800b268:	0800bef4 	.word	0x0800bef4
 800b26c:	0800bf14 	.word	0x0800bf14
 800b270:	0800bed4 	.word	0x0800bed4

0800b274 <std>:
 800b274:	2300      	movs	r3, #0
 800b276:	b510      	push	{r4, lr}
 800b278:	4604      	mov	r4, r0
 800b27a:	e9c0 3300 	strd	r3, r3, [r0]
 800b27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b282:	6083      	str	r3, [r0, #8]
 800b284:	8181      	strh	r1, [r0, #12]
 800b286:	6643      	str	r3, [r0, #100]	; 0x64
 800b288:	81c2      	strh	r2, [r0, #14]
 800b28a:	6183      	str	r3, [r0, #24]
 800b28c:	4619      	mov	r1, r3
 800b28e:	2208      	movs	r2, #8
 800b290:	305c      	adds	r0, #92	; 0x5c
 800b292:	f7ff fdd7 	bl	800ae44 <memset>
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <std+0x38>)
 800b298:	6263      	str	r3, [r4, #36]	; 0x24
 800b29a:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <std+0x3c>)
 800b29c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b29e:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <std+0x40>)
 800b2a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2a2:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <std+0x44>)
 800b2a4:	6224      	str	r4, [r4, #32]
 800b2a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b2a8:	bd10      	pop	{r4, pc}
 800b2aa:	bf00      	nop
 800b2ac:	0800bc7d 	.word	0x0800bc7d
 800b2b0:	0800bc9f 	.word	0x0800bc9f
 800b2b4:	0800bcd7 	.word	0x0800bcd7
 800b2b8:	0800bcfb 	.word	0x0800bcfb

0800b2bc <_cleanup_r>:
 800b2bc:	4901      	ldr	r1, [pc, #4]	; (800b2c4 <_cleanup_r+0x8>)
 800b2be:	f000 b8af 	b.w	800b420 <_fwalk_reent>
 800b2c2:	bf00      	nop
 800b2c4:	0800b1fd 	.word	0x0800b1fd

0800b2c8 <__sfmoreglue>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	1e4a      	subs	r2, r1, #1
 800b2cc:	2568      	movs	r5, #104	; 0x68
 800b2ce:	4355      	muls	r5, r2
 800b2d0:	460e      	mov	r6, r1
 800b2d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2d6:	f000 f979 	bl	800b5cc <_malloc_r>
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b140      	cbz	r0, 800b2f0 <__sfmoreglue+0x28>
 800b2de:	2100      	movs	r1, #0
 800b2e0:	e9c0 1600 	strd	r1, r6, [r0]
 800b2e4:	300c      	adds	r0, #12
 800b2e6:	60a0      	str	r0, [r4, #8]
 800b2e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2ec:	f7ff fdaa 	bl	800ae44 <memset>
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}

0800b2f4 <__sfp_lock_acquire>:
 800b2f4:	4801      	ldr	r0, [pc, #4]	; (800b2fc <__sfp_lock_acquire+0x8>)
 800b2f6:	f000 b8b3 	b.w	800b460 <__retarget_lock_acquire_recursive>
 800b2fa:	bf00      	nop
 800b2fc:	240025a8 	.word	0x240025a8

0800b300 <__sfp_lock_release>:
 800b300:	4801      	ldr	r0, [pc, #4]	; (800b308 <__sfp_lock_release+0x8>)
 800b302:	f000 b8ae 	b.w	800b462 <__retarget_lock_release_recursive>
 800b306:	bf00      	nop
 800b308:	240025a8 	.word	0x240025a8

0800b30c <__sinit_lock_acquire>:
 800b30c:	4801      	ldr	r0, [pc, #4]	; (800b314 <__sinit_lock_acquire+0x8>)
 800b30e:	f000 b8a7 	b.w	800b460 <__retarget_lock_acquire_recursive>
 800b312:	bf00      	nop
 800b314:	240025a3 	.word	0x240025a3

0800b318 <__sinit_lock_release>:
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <__sinit_lock_release+0x8>)
 800b31a:	f000 b8a2 	b.w	800b462 <__retarget_lock_release_recursive>
 800b31e:	bf00      	nop
 800b320:	240025a3 	.word	0x240025a3

0800b324 <__sinit>:
 800b324:	b510      	push	{r4, lr}
 800b326:	4604      	mov	r4, r0
 800b328:	f7ff fff0 	bl	800b30c <__sinit_lock_acquire>
 800b32c:	69a3      	ldr	r3, [r4, #24]
 800b32e:	b11b      	cbz	r3, 800b338 <__sinit+0x14>
 800b330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b334:	f7ff bff0 	b.w	800b318 <__sinit_lock_release>
 800b338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b33c:	6523      	str	r3, [r4, #80]	; 0x50
 800b33e:	4b13      	ldr	r3, [pc, #76]	; (800b38c <__sinit+0x68>)
 800b340:	4a13      	ldr	r2, [pc, #76]	; (800b390 <__sinit+0x6c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	62a2      	str	r2, [r4, #40]	; 0x28
 800b346:	42a3      	cmp	r3, r4
 800b348:	bf04      	itt	eq
 800b34a:	2301      	moveq	r3, #1
 800b34c:	61a3      	streq	r3, [r4, #24]
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f820 	bl	800b394 <__sfp>
 800b354:	6060      	str	r0, [r4, #4]
 800b356:	4620      	mov	r0, r4
 800b358:	f000 f81c 	bl	800b394 <__sfp>
 800b35c:	60a0      	str	r0, [r4, #8]
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 f818 	bl	800b394 <__sfp>
 800b364:	2200      	movs	r2, #0
 800b366:	60e0      	str	r0, [r4, #12]
 800b368:	2104      	movs	r1, #4
 800b36a:	6860      	ldr	r0, [r4, #4]
 800b36c:	f7ff ff82 	bl	800b274 <std>
 800b370:	68a0      	ldr	r0, [r4, #8]
 800b372:	2201      	movs	r2, #1
 800b374:	2109      	movs	r1, #9
 800b376:	f7ff ff7d 	bl	800b274 <std>
 800b37a:	68e0      	ldr	r0, [r4, #12]
 800b37c:	2202      	movs	r2, #2
 800b37e:	2112      	movs	r1, #18
 800b380:	f7ff ff78 	bl	800b274 <std>
 800b384:	2301      	movs	r3, #1
 800b386:	61a3      	str	r3, [r4, #24]
 800b388:	e7d2      	b.n	800b330 <__sinit+0xc>
 800b38a:	bf00      	nop
 800b38c:	0800bed0 	.word	0x0800bed0
 800b390:	0800b2bd 	.word	0x0800b2bd

0800b394 <__sfp>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	4607      	mov	r7, r0
 800b398:	f7ff ffac 	bl	800b2f4 <__sfp_lock_acquire>
 800b39c:	4b1e      	ldr	r3, [pc, #120]	; (800b418 <__sfp+0x84>)
 800b39e:	681e      	ldr	r6, [r3, #0]
 800b3a0:	69b3      	ldr	r3, [r6, #24]
 800b3a2:	b913      	cbnz	r3, 800b3aa <__sfp+0x16>
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff ffbd 	bl	800b324 <__sinit>
 800b3aa:	3648      	adds	r6, #72	; 0x48
 800b3ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	d503      	bpl.n	800b3bc <__sfp+0x28>
 800b3b4:	6833      	ldr	r3, [r6, #0]
 800b3b6:	b30b      	cbz	r3, 800b3fc <__sfp+0x68>
 800b3b8:	6836      	ldr	r6, [r6, #0]
 800b3ba:	e7f7      	b.n	800b3ac <__sfp+0x18>
 800b3bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3c0:	b9d5      	cbnz	r5, 800b3f8 <__sfp+0x64>
 800b3c2:	4b16      	ldr	r3, [pc, #88]	; (800b41c <__sfp+0x88>)
 800b3c4:	60e3      	str	r3, [r4, #12]
 800b3c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3ca:	6665      	str	r5, [r4, #100]	; 0x64
 800b3cc:	f000 f847 	bl	800b45e <__retarget_lock_init_recursive>
 800b3d0:	f7ff ff96 	bl	800b300 <__sfp_lock_release>
 800b3d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3dc:	6025      	str	r5, [r4, #0]
 800b3de:	61a5      	str	r5, [r4, #24]
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3e8:	f7ff fd2c 	bl	800ae44 <memset>
 800b3ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f8:	3468      	adds	r4, #104	; 0x68
 800b3fa:	e7d9      	b.n	800b3b0 <__sfp+0x1c>
 800b3fc:	2104      	movs	r1, #4
 800b3fe:	4638      	mov	r0, r7
 800b400:	f7ff ff62 	bl	800b2c8 <__sfmoreglue>
 800b404:	4604      	mov	r4, r0
 800b406:	6030      	str	r0, [r6, #0]
 800b408:	2800      	cmp	r0, #0
 800b40a:	d1d5      	bne.n	800b3b8 <__sfp+0x24>
 800b40c:	f7ff ff78 	bl	800b300 <__sfp_lock_release>
 800b410:	230c      	movs	r3, #12
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	e7ee      	b.n	800b3f4 <__sfp+0x60>
 800b416:	bf00      	nop
 800b418:	0800bed0 	.word	0x0800bed0
 800b41c:	ffff0001 	.word	0xffff0001

0800b420 <_fwalk_reent>:
 800b420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b424:	4606      	mov	r6, r0
 800b426:	4688      	mov	r8, r1
 800b428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b42c:	2700      	movs	r7, #0
 800b42e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b432:	f1b9 0901 	subs.w	r9, r9, #1
 800b436:	d505      	bpl.n	800b444 <_fwalk_reent+0x24>
 800b438:	6824      	ldr	r4, [r4, #0]
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d1f7      	bne.n	800b42e <_fwalk_reent+0xe>
 800b43e:	4638      	mov	r0, r7
 800b440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b444:	89ab      	ldrh	r3, [r5, #12]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d907      	bls.n	800b45a <_fwalk_reent+0x3a>
 800b44a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b44e:	3301      	adds	r3, #1
 800b450:	d003      	beq.n	800b45a <_fwalk_reent+0x3a>
 800b452:	4629      	mov	r1, r5
 800b454:	4630      	mov	r0, r6
 800b456:	47c0      	blx	r8
 800b458:	4307      	orrs	r7, r0
 800b45a:	3568      	adds	r5, #104	; 0x68
 800b45c:	e7e9      	b.n	800b432 <_fwalk_reent+0x12>

0800b45e <__retarget_lock_init_recursive>:
 800b45e:	4770      	bx	lr

0800b460 <__retarget_lock_acquire_recursive>:
 800b460:	4770      	bx	lr

0800b462 <__retarget_lock_release_recursive>:
 800b462:	4770      	bx	lr

0800b464 <__swhatbuf_r>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	460e      	mov	r6, r1
 800b468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46c:	2900      	cmp	r1, #0
 800b46e:	b096      	sub	sp, #88	; 0x58
 800b470:	4614      	mov	r4, r2
 800b472:	461d      	mov	r5, r3
 800b474:	da07      	bge.n	800b486 <__swhatbuf_r+0x22>
 800b476:	2300      	movs	r3, #0
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	89b3      	ldrh	r3, [r6, #12]
 800b47c:	061a      	lsls	r2, r3, #24
 800b47e:	d410      	bmi.n	800b4a2 <__swhatbuf_r+0x3e>
 800b480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b484:	e00e      	b.n	800b4a4 <__swhatbuf_r+0x40>
 800b486:	466a      	mov	r2, sp
 800b488:	f000 fc5e 	bl	800bd48 <_fstat_r>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	dbf2      	blt.n	800b476 <__swhatbuf_r+0x12>
 800b490:	9a01      	ldr	r2, [sp, #4]
 800b492:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b496:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b49a:	425a      	negs	r2, r3
 800b49c:	415a      	adcs	r2, r3
 800b49e:	602a      	str	r2, [r5, #0]
 800b4a0:	e7ee      	b.n	800b480 <__swhatbuf_r+0x1c>
 800b4a2:	2340      	movs	r3, #64	; 0x40
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	b016      	add	sp, #88	; 0x58
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}

0800b4ac <__smakebuf_r>:
 800b4ac:	898b      	ldrh	r3, [r1, #12]
 800b4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4b0:	079d      	lsls	r5, r3, #30
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	d507      	bpl.n	800b4c8 <__smakebuf_r+0x1c>
 800b4b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	6163      	str	r3, [r4, #20]
 800b4c4:	b002      	add	sp, #8
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	ab01      	add	r3, sp, #4
 800b4ca:	466a      	mov	r2, sp
 800b4cc:	f7ff ffca 	bl	800b464 <__swhatbuf_r>
 800b4d0:	9900      	ldr	r1, [sp, #0]
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	f000 f879 	bl	800b5cc <_malloc_r>
 800b4da:	b948      	cbnz	r0, 800b4f0 <__smakebuf_r+0x44>
 800b4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e0:	059a      	lsls	r2, r3, #22
 800b4e2:	d4ef      	bmi.n	800b4c4 <__smakebuf_r+0x18>
 800b4e4:	f023 0303 	bic.w	r3, r3, #3
 800b4e8:	f043 0302 	orr.w	r3, r3, #2
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	e7e3      	b.n	800b4b8 <__smakebuf_r+0xc>
 800b4f0:	4b0d      	ldr	r3, [pc, #52]	; (800b528 <__smakebuf_r+0x7c>)
 800b4f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	6020      	str	r0, [r4, #0]
 800b4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	9b00      	ldr	r3, [sp, #0]
 800b500:	6163      	str	r3, [r4, #20]
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	6120      	str	r0, [r4, #16]
 800b506:	b15b      	cbz	r3, 800b520 <__smakebuf_r+0x74>
 800b508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b50c:	4630      	mov	r0, r6
 800b50e:	f000 fc2d 	bl	800bd6c <_isatty_r>
 800b512:	b128      	cbz	r0, 800b520 <__smakebuf_r+0x74>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	f023 0303 	bic.w	r3, r3, #3
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	89a0      	ldrh	r0, [r4, #12]
 800b522:	4305      	orrs	r5, r0
 800b524:	81a5      	strh	r5, [r4, #12]
 800b526:	e7cd      	b.n	800b4c4 <__smakebuf_r+0x18>
 800b528:	0800b2bd 	.word	0x0800b2bd

0800b52c <_free_r>:
 800b52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b52e:	2900      	cmp	r1, #0
 800b530:	d048      	beq.n	800b5c4 <_free_r+0x98>
 800b532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b536:	9001      	str	r0, [sp, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f1a1 0404 	sub.w	r4, r1, #4
 800b53e:	bfb8      	it	lt
 800b540:	18e4      	addlt	r4, r4, r3
 800b542:	f000 fc35 	bl	800bdb0 <__malloc_lock>
 800b546:	4a20      	ldr	r2, [pc, #128]	; (800b5c8 <_free_r+0x9c>)
 800b548:	9801      	ldr	r0, [sp, #4]
 800b54a:	6813      	ldr	r3, [r2, #0]
 800b54c:	4615      	mov	r5, r2
 800b54e:	b933      	cbnz	r3, 800b55e <_free_r+0x32>
 800b550:	6063      	str	r3, [r4, #4]
 800b552:	6014      	str	r4, [r2, #0]
 800b554:	b003      	add	sp, #12
 800b556:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b55a:	f000 bc2f 	b.w	800bdbc <__malloc_unlock>
 800b55e:	42a3      	cmp	r3, r4
 800b560:	d90b      	bls.n	800b57a <_free_r+0x4e>
 800b562:	6821      	ldr	r1, [r4, #0]
 800b564:	1862      	adds	r2, r4, r1
 800b566:	4293      	cmp	r3, r2
 800b568:	bf04      	itt	eq
 800b56a:	681a      	ldreq	r2, [r3, #0]
 800b56c:	685b      	ldreq	r3, [r3, #4]
 800b56e:	6063      	str	r3, [r4, #4]
 800b570:	bf04      	itt	eq
 800b572:	1852      	addeq	r2, r2, r1
 800b574:	6022      	streq	r2, [r4, #0]
 800b576:	602c      	str	r4, [r5, #0]
 800b578:	e7ec      	b.n	800b554 <_free_r+0x28>
 800b57a:	461a      	mov	r2, r3
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b10b      	cbz	r3, 800b584 <_free_r+0x58>
 800b580:	42a3      	cmp	r3, r4
 800b582:	d9fa      	bls.n	800b57a <_free_r+0x4e>
 800b584:	6811      	ldr	r1, [r2, #0]
 800b586:	1855      	adds	r5, r2, r1
 800b588:	42a5      	cmp	r5, r4
 800b58a:	d10b      	bne.n	800b5a4 <_free_r+0x78>
 800b58c:	6824      	ldr	r4, [r4, #0]
 800b58e:	4421      	add	r1, r4
 800b590:	1854      	adds	r4, r2, r1
 800b592:	42a3      	cmp	r3, r4
 800b594:	6011      	str	r1, [r2, #0]
 800b596:	d1dd      	bne.n	800b554 <_free_r+0x28>
 800b598:	681c      	ldr	r4, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	6053      	str	r3, [r2, #4]
 800b59e:	4421      	add	r1, r4
 800b5a0:	6011      	str	r1, [r2, #0]
 800b5a2:	e7d7      	b.n	800b554 <_free_r+0x28>
 800b5a4:	d902      	bls.n	800b5ac <_free_r+0x80>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	e7d3      	b.n	800b554 <_free_r+0x28>
 800b5ac:	6825      	ldr	r5, [r4, #0]
 800b5ae:	1961      	adds	r1, r4, r5
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	bf04      	itt	eq
 800b5b4:	6819      	ldreq	r1, [r3, #0]
 800b5b6:	685b      	ldreq	r3, [r3, #4]
 800b5b8:	6063      	str	r3, [r4, #4]
 800b5ba:	bf04      	itt	eq
 800b5bc:	1949      	addeq	r1, r1, r5
 800b5be:	6021      	streq	r1, [r4, #0]
 800b5c0:	6054      	str	r4, [r2, #4]
 800b5c2:	e7c7      	b.n	800b554 <_free_r+0x28>
 800b5c4:	b003      	add	sp, #12
 800b5c6:	bd30      	pop	{r4, r5, pc}
 800b5c8:	240000a4 	.word	0x240000a4

0800b5cc <_malloc_r>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	1ccd      	adds	r5, r1, #3
 800b5d0:	f025 0503 	bic.w	r5, r5, #3
 800b5d4:	3508      	adds	r5, #8
 800b5d6:	2d0c      	cmp	r5, #12
 800b5d8:	bf38      	it	cc
 800b5da:	250c      	movcc	r5, #12
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	4606      	mov	r6, r0
 800b5e0:	db01      	blt.n	800b5e6 <_malloc_r+0x1a>
 800b5e2:	42a9      	cmp	r1, r5
 800b5e4:	d903      	bls.n	800b5ee <_malloc_r+0x22>
 800b5e6:	230c      	movs	r3, #12
 800b5e8:	6033      	str	r3, [r6, #0]
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ee:	f000 fbdf 	bl	800bdb0 <__malloc_lock>
 800b5f2:	4921      	ldr	r1, [pc, #132]	; (800b678 <_malloc_r+0xac>)
 800b5f4:	680a      	ldr	r2, [r1, #0]
 800b5f6:	4614      	mov	r4, r2
 800b5f8:	b99c      	cbnz	r4, 800b622 <_malloc_r+0x56>
 800b5fa:	4f20      	ldr	r7, [pc, #128]	; (800b67c <_malloc_r+0xb0>)
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	b923      	cbnz	r3, 800b60a <_malloc_r+0x3e>
 800b600:	4621      	mov	r1, r4
 800b602:	4630      	mov	r0, r6
 800b604:	f000 fb2a 	bl	800bc5c <_sbrk_r>
 800b608:	6038      	str	r0, [r7, #0]
 800b60a:	4629      	mov	r1, r5
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 fb25 	bl	800bc5c <_sbrk_r>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	d123      	bne.n	800b65e <_malloc_r+0x92>
 800b616:	230c      	movs	r3, #12
 800b618:	6033      	str	r3, [r6, #0]
 800b61a:	4630      	mov	r0, r6
 800b61c:	f000 fbce 	bl	800bdbc <__malloc_unlock>
 800b620:	e7e3      	b.n	800b5ea <_malloc_r+0x1e>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	1b5b      	subs	r3, r3, r5
 800b626:	d417      	bmi.n	800b658 <_malloc_r+0x8c>
 800b628:	2b0b      	cmp	r3, #11
 800b62a:	d903      	bls.n	800b634 <_malloc_r+0x68>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	441c      	add	r4, r3
 800b630:	6025      	str	r5, [r4, #0]
 800b632:	e004      	b.n	800b63e <_malloc_r+0x72>
 800b634:	6863      	ldr	r3, [r4, #4]
 800b636:	42a2      	cmp	r2, r4
 800b638:	bf0c      	ite	eq
 800b63a:	600b      	streq	r3, [r1, #0]
 800b63c:	6053      	strne	r3, [r2, #4]
 800b63e:	4630      	mov	r0, r6
 800b640:	f000 fbbc 	bl	800bdbc <__malloc_unlock>
 800b644:	f104 000b 	add.w	r0, r4, #11
 800b648:	1d23      	adds	r3, r4, #4
 800b64a:	f020 0007 	bic.w	r0, r0, #7
 800b64e:	1ac2      	subs	r2, r0, r3
 800b650:	d0cc      	beq.n	800b5ec <_malloc_r+0x20>
 800b652:	1a1b      	subs	r3, r3, r0
 800b654:	50a3      	str	r3, [r4, r2]
 800b656:	e7c9      	b.n	800b5ec <_malloc_r+0x20>
 800b658:	4622      	mov	r2, r4
 800b65a:	6864      	ldr	r4, [r4, #4]
 800b65c:	e7cc      	b.n	800b5f8 <_malloc_r+0x2c>
 800b65e:	1cc4      	adds	r4, r0, #3
 800b660:	f024 0403 	bic.w	r4, r4, #3
 800b664:	42a0      	cmp	r0, r4
 800b666:	d0e3      	beq.n	800b630 <_malloc_r+0x64>
 800b668:	1a21      	subs	r1, r4, r0
 800b66a:	4630      	mov	r0, r6
 800b66c:	f000 faf6 	bl	800bc5c <_sbrk_r>
 800b670:	3001      	adds	r0, #1
 800b672:	d1dd      	bne.n	800b630 <_malloc_r+0x64>
 800b674:	e7cf      	b.n	800b616 <_malloc_r+0x4a>
 800b676:	bf00      	nop
 800b678:	240000a4 	.word	0x240000a4
 800b67c:	240000a8 	.word	0x240000a8

0800b680 <__sfputc_r>:
 800b680:	6893      	ldr	r3, [r2, #8]
 800b682:	3b01      	subs	r3, #1
 800b684:	2b00      	cmp	r3, #0
 800b686:	b410      	push	{r4}
 800b688:	6093      	str	r3, [r2, #8]
 800b68a:	da08      	bge.n	800b69e <__sfputc_r+0x1e>
 800b68c:	6994      	ldr	r4, [r2, #24]
 800b68e:	42a3      	cmp	r3, r4
 800b690:	db01      	blt.n	800b696 <__sfputc_r+0x16>
 800b692:	290a      	cmp	r1, #10
 800b694:	d103      	bne.n	800b69e <__sfputc_r+0x1e>
 800b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b69a:	f7ff bc69 	b.w	800af70 <__swbuf_r>
 800b69e:	6813      	ldr	r3, [r2, #0]
 800b6a0:	1c58      	adds	r0, r3, #1
 800b6a2:	6010      	str	r0, [r2, #0]
 800b6a4:	7019      	strb	r1, [r3, #0]
 800b6a6:	4608      	mov	r0, r1
 800b6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <__sfputs_r>:
 800b6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	18d5      	adds	r5, r2, r3
 800b6b8:	42ac      	cmp	r4, r5
 800b6ba:	d101      	bne.n	800b6c0 <__sfputs_r+0x12>
 800b6bc:	2000      	movs	r0, #0
 800b6be:	e007      	b.n	800b6d0 <__sfputs_r+0x22>
 800b6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c4:	463a      	mov	r2, r7
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f7ff ffda 	bl	800b680 <__sfputc_r>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d1f3      	bne.n	800b6b8 <__sfputs_r+0xa>
 800b6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6d4 <_vfiprintf_r>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	460d      	mov	r5, r1
 800b6da:	b09d      	sub	sp, #116	; 0x74
 800b6dc:	4614      	mov	r4, r2
 800b6de:	4698      	mov	r8, r3
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	b118      	cbz	r0, 800b6ec <_vfiprintf_r+0x18>
 800b6e4:	6983      	ldr	r3, [r0, #24]
 800b6e6:	b90b      	cbnz	r3, 800b6ec <_vfiprintf_r+0x18>
 800b6e8:	f7ff fe1c 	bl	800b324 <__sinit>
 800b6ec:	4b89      	ldr	r3, [pc, #548]	; (800b914 <_vfiprintf_r+0x240>)
 800b6ee:	429d      	cmp	r5, r3
 800b6f0:	d11b      	bne.n	800b72a <_vfiprintf_r+0x56>
 800b6f2:	6875      	ldr	r5, [r6, #4]
 800b6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6f6:	07d9      	lsls	r1, r3, #31
 800b6f8:	d405      	bmi.n	800b706 <_vfiprintf_r+0x32>
 800b6fa:	89ab      	ldrh	r3, [r5, #12]
 800b6fc:	059a      	lsls	r2, r3, #22
 800b6fe:	d402      	bmi.n	800b706 <_vfiprintf_r+0x32>
 800b700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b702:	f7ff fead 	bl	800b460 <__retarget_lock_acquire_recursive>
 800b706:	89ab      	ldrh	r3, [r5, #12]
 800b708:	071b      	lsls	r3, r3, #28
 800b70a:	d501      	bpl.n	800b710 <_vfiprintf_r+0x3c>
 800b70c:	692b      	ldr	r3, [r5, #16]
 800b70e:	b9eb      	cbnz	r3, 800b74c <_vfiprintf_r+0x78>
 800b710:	4629      	mov	r1, r5
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff fc7e 	bl	800b014 <__swsetup_r>
 800b718:	b1c0      	cbz	r0, 800b74c <_vfiprintf_r+0x78>
 800b71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b71c:	07dc      	lsls	r4, r3, #31
 800b71e:	d50e      	bpl.n	800b73e <_vfiprintf_r+0x6a>
 800b720:	f04f 30ff 	mov.w	r0, #4294967295
 800b724:	b01d      	add	sp, #116	; 0x74
 800b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72a:	4b7b      	ldr	r3, [pc, #492]	; (800b918 <_vfiprintf_r+0x244>)
 800b72c:	429d      	cmp	r5, r3
 800b72e:	d101      	bne.n	800b734 <_vfiprintf_r+0x60>
 800b730:	68b5      	ldr	r5, [r6, #8]
 800b732:	e7df      	b.n	800b6f4 <_vfiprintf_r+0x20>
 800b734:	4b79      	ldr	r3, [pc, #484]	; (800b91c <_vfiprintf_r+0x248>)
 800b736:	429d      	cmp	r5, r3
 800b738:	bf08      	it	eq
 800b73a:	68f5      	ldreq	r5, [r6, #12]
 800b73c:	e7da      	b.n	800b6f4 <_vfiprintf_r+0x20>
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	0598      	lsls	r0, r3, #22
 800b742:	d4ed      	bmi.n	800b720 <_vfiprintf_r+0x4c>
 800b744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b746:	f7ff fe8c 	bl	800b462 <__retarget_lock_release_recursive>
 800b74a:	e7e9      	b.n	800b720 <_vfiprintf_r+0x4c>
 800b74c:	2300      	movs	r3, #0
 800b74e:	9309      	str	r3, [sp, #36]	; 0x24
 800b750:	2320      	movs	r3, #32
 800b752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b756:	f8cd 800c 	str.w	r8, [sp, #12]
 800b75a:	2330      	movs	r3, #48	; 0x30
 800b75c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b920 <_vfiprintf_r+0x24c>
 800b760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b764:	f04f 0901 	mov.w	r9, #1
 800b768:	4623      	mov	r3, r4
 800b76a:	469a      	mov	sl, r3
 800b76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b770:	b10a      	cbz	r2, 800b776 <_vfiprintf_r+0xa2>
 800b772:	2a25      	cmp	r2, #37	; 0x25
 800b774:	d1f9      	bne.n	800b76a <_vfiprintf_r+0x96>
 800b776:	ebba 0b04 	subs.w	fp, sl, r4
 800b77a:	d00b      	beq.n	800b794 <_vfiprintf_r+0xc0>
 800b77c:	465b      	mov	r3, fp
 800b77e:	4622      	mov	r2, r4
 800b780:	4629      	mov	r1, r5
 800b782:	4630      	mov	r0, r6
 800b784:	f7ff ff93 	bl	800b6ae <__sfputs_r>
 800b788:	3001      	adds	r0, #1
 800b78a:	f000 80aa 	beq.w	800b8e2 <_vfiprintf_r+0x20e>
 800b78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b790:	445a      	add	r2, fp
 800b792:	9209      	str	r2, [sp, #36]	; 0x24
 800b794:	f89a 3000 	ldrb.w	r3, [sl]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 80a2 	beq.w	800b8e2 <_vfiprintf_r+0x20e>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a8:	f10a 0a01 	add.w	sl, sl, #1
 800b7ac:	9304      	str	r3, [sp, #16]
 800b7ae:	9307      	str	r3, [sp, #28]
 800b7b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b7b6:	4654      	mov	r4, sl
 800b7b8:	2205      	movs	r2, #5
 800b7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7be:	4858      	ldr	r0, [pc, #352]	; (800b920 <_vfiprintf_r+0x24c>)
 800b7c0:	f7f4 fda6 	bl	8000310 <memchr>
 800b7c4:	9a04      	ldr	r2, [sp, #16]
 800b7c6:	b9d8      	cbnz	r0, 800b800 <_vfiprintf_r+0x12c>
 800b7c8:	06d1      	lsls	r1, r2, #27
 800b7ca:	bf44      	itt	mi
 800b7cc:	2320      	movmi	r3, #32
 800b7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d2:	0713      	lsls	r3, r2, #28
 800b7d4:	bf44      	itt	mi
 800b7d6:	232b      	movmi	r3, #43	; 0x2b
 800b7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e2:	d015      	beq.n	800b810 <_vfiprintf_r+0x13c>
 800b7e4:	9a07      	ldr	r2, [sp, #28]
 800b7e6:	4654      	mov	r4, sl
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	f04f 0c0a 	mov.w	ip, #10
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f4:	3b30      	subs	r3, #48	; 0x30
 800b7f6:	2b09      	cmp	r3, #9
 800b7f8:	d94e      	bls.n	800b898 <_vfiprintf_r+0x1c4>
 800b7fa:	b1b0      	cbz	r0, 800b82a <_vfiprintf_r+0x156>
 800b7fc:	9207      	str	r2, [sp, #28]
 800b7fe:	e014      	b.n	800b82a <_vfiprintf_r+0x156>
 800b800:	eba0 0308 	sub.w	r3, r0, r8
 800b804:	fa09 f303 	lsl.w	r3, r9, r3
 800b808:	4313      	orrs	r3, r2
 800b80a:	9304      	str	r3, [sp, #16]
 800b80c:	46a2      	mov	sl, r4
 800b80e:	e7d2      	b.n	800b7b6 <_vfiprintf_r+0xe2>
 800b810:	9b03      	ldr	r3, [sp, #12]
 800b812:	1d19      	adds	r1, r3, #4
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	9103      	str	r1, [sp, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	bfbb      	ittet	lt
 800b81c:	425b      	neglt	r3, r3
 800b81e:	f042 0202 	orrlt.w	r2, r2, #2
 800b822:	9307      	strge	r3, [sp, #28]
 800b824:	9307      	strlt	r3, [sp, #28]
 800b826:	bfb8      	it	lt
 800b828:	9204      	strlt	r2, [sp, #16]
 800b82a:	7823      	ldrb	r3, [r4, #0]
 800b82c:	2b2e      	cmp	r3, #46	; 0x2e
 800b82e:	d10c      	bne.n	800b84a <_vfiprintf_r+0x176>
 800b830:	7863      	ldrb	r3, [r4, #1]
 800b832:	2b2a      	cmp	r3, #42	; 0x2a
 800b834:	d135      	bne.n	800b8a2 <_vfiprintf_r+0x1ce>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	1d1a      	adds	r2, r3, #4
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	9203      	str	r2, [sp, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bfb8      	it	lt
 800b842:	f04f 33ff 	movlt.w	r3, #4294967295
 800b846:	3402      	adds	r4, #2
 800b848:	9305      	str	r3, [sp, #20]
 800b84a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b930 <_vfiprintf_r+0x25c>
 800b84e:	7821      	ldrb	r1, [r4, #0]
 800b850:	2203      	movs	r2, #3
 800b852:	4650      	mov	r0, sl
 800b854:	f7f4 fd5c 	bl	8000310 <memchr>
 800b858:	b140      	cbz	r0, 800b86c <_vfiprintf_r+0x198>
 800b85a:	2340      	movs	r3, #64	; 0x40
 800b85c:	eba0 000a 	sub.w	r0, r0, sl
 800b860:	fa03 f000 	lsl.w	r0, r3, r0
 800b864:	9b04      	ldr	r3, [sp, #16]
 800b866:	4303      	orrs	r3, r0
 800b868:	3401      	adds	r4, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b870:	482c      	ldr	r0, [pc, #176]	; (800b924 <_vfiprintf_r+0x250>)
 800b872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b876:	2206      	movs	r2, #6
 800b878:	f7f4 fd4a 	bl	8000310 <memchr>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d03f      	beq.n	800b900 <_vfiprintf_r+0x22c>
 800b880:	4b29      	ldr	r3, [pc, #164]	; (800b928 <_vfiprintf_r+0x254>)
 800b882:	bb1b      	cbnz	r3, 800b8cc <_vfiprintf_r+0x1f8>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	3307      	adds	r3, #7
 800b888:	f023 0307 	bic.w	r3, r3, #7
 800b88c:	3308      	adds	r3, #8
 800b88e:	9303      	str	r3, [sp, #12]
 800b890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b892:	443b      	add	r3, r7
 800b894:	9309      	str	r3, [sp, #36]	; 0x24
 800b896:	e767      	b.n	800b768 <_vfiprintf_r+0x94>
 800b898:	fb0c 3202 	mla	r2, ip, r2, r3
 800b89c:	460c      	mov	r4, r1
 800b89e:	2001      	movs	r0, #1
 800b8a0:	e7a5      	b.n	800b7ee <_vfiprintf_r+0x11a>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	9305      	str	r3, [sp, #20]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f04f 0c0a 	mov.w	ip, #10
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b4:	3a30      	subs	r2, #48	; 0x30
 800b8b6:	2a09      	cmp	r2, #9
 800b8b8:	d903      	bls.n	800b8c2 <_vfiprintf_r+0x1ee>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0c5      	beq.n	800b84a <_vfiprintf_r+0x176>
 800b8be:	9105      	str	r1, [sp, #20]
 800b8c0:	e7c3      	b.n	800b84a <_vfiprintf_r+0x176>
 800b8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e7f0      	b.n	800b8ae <_vfiprintf_r+0x1da>
 800b8cc:	ab03      	add	r3, sp, #12
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4b16      	ldr	r3, [pc, #88]	; (800b92c <_vfiprintf_r+0x258>)
 800b8d4:	a904      	add	r1, sp, #16
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f3af 8000 	nop.w
 800b8dc:	4607      	mov	r7, r0
 800b8de:	1c78      	adds	r0, r7, #1
 800b8e0:	d1d6      	bne.n	800b890 <_vfiprintf_r+0x1bc>
 800b8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8e4:	07d9      	lsls	r1, r3, #31
 800b8e6:	d405      	bmi.n	800b8f4 <_vfiprintf_r+0x220>
 800b8e8:	89ab      	ldrh	r3, [r5, #12]
 800b8ea:	059a      	lsls	r2, r3, #22
 800b8ec:	d402      	bmi.n	800b8f4 <_vfiprintf_r+0x220>
 800b8ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8f0:	f7ff fdb7 	bl	800b462 <__retarget_lock_release_recursive>
 800b8f4:	89ab      	ldrh	r3, [r5, #12]
 800b8f6:	065b      	lsls	r3, r3, #25
 800b8f8:	f53f af12 	bmi.w	800b720 <_vfiprintf_r+0x4c>
 800b8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8fe:	e711      	b.n	800b724 <_vfiprintf_r+0x50>
 800b900:	ab03      	add	r3, sp, #12
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	462a      	mov	r2, r5
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <_vfiprintf_r+0x258>)
 800b908:	a904      	add	r1, sp, #16
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 f880 	bl	800ba10 <_printf_i>
 800b910:	e7e4      	b.n	800b8dc <_vfiprintf_r+0x208>
 800b912:	bf00      	nop
 800b914:	0800bef4 	.word	0x0800bef4
 800b918:	0800bf14 	.word	0x0800bf14
 800b91c:	0800bed4 	.word	0x0800bed4
 800b920:	0800bf34 	.word	0x0800bf34
 800b924:	0800bf3e 	.word	0x0800bf3e
 800b928:	00000000 	.word	0x00000000
 800b92c:	0800b6af 	.word	0x0800b6af
 800b930:	0800bf3a 	.word	0x0800bf3a

0800b934 <_printf_common>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	4616      	mov	r6, r2
 800b93a:	4699      	mov	r9, r3
 800b93c:	688a      	ldr	r2, [r1, #8]
 800b93e:	690b      	ldr	r3, [r1, #16]
 800b940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b944:	4293      	cmp	r3, r2
 800b946:	bfb8      	it	lt
 800b948:	4613      	movlt	r3, r2
 800b94a:	6033      	str	r3, [r6, #0]
 800b94c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b950:	4607      	mov	r7, r0
 800b952:	460c      	mov	r4, r1
 800b954:	b10a      	cbz	r2, 800b95a <_printf_common+0x26>
 800b956:	3301      	adds	r3, #1
 800b958:	6033      	str	r3, [r6, #0]
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	0699      	lsls	r1, r3, #26
 800b95e:	bf42      	ittt	mi
 800b960:	6833      	ldrmi	r3, [r6, #0]
 800b962:	3302      	addmi	r3, #2
 800b964:	6033      	strmi	r3, [r6, #0]
 800b966:	6825      	ldr	r5, [r4, #0]
 800b968:	f015 0506 	ands.w	r5, r5, #6
 800b96c:	d106      	bne.n	800b97c <_printf_common+0x48>
 800b96e:	f104 0a19 	add.w	sl, r4, #25
 800b972:	68e3      	ldr	r3, [r4, #12]
 800b974:	6832      	ldr	r2, [r6, #0]
 800b976:	1a9b      	subs	r3, r3, r2
 800b978:	42ab      	cmp	r3, r5
 800b97a:	dc26      	bgt.n	800b9ca <_printf_common+0x96>
 800b97c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b980:	1e13      	subs	r3, r2, #0
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	bf18      	it	ne
 800b986:	2301      	movne	r3, #1
 800b988:	0692      	lsls	r2, r2, #26
 800b98a:	d42b      	bmi.n	800b9e4 <_printf_common+0xb0>
 800b98c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b990:	4649      	mov	r1, r9
 800b992:	4638      	mov	r0, r7
 800b994:	47c0      	blx	r8
 800b996:	3001      	adds	r0, #1
 800b998:	d01e      	beq.n	800b9d8 <_printf_common+0xa4>
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	68e5      	ldr	r5, [r4, #12]
 800b99e:	6832      	ldr	r2, [r6, #0]
 800b9a0:	f003 0306 	and.w	r3, r3, #6
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	bf08      	it	eq
 800b9a8:	1aad      	subeq	r5, r5, r2
 800b9aa:	68a3      	ldr	r3, [r4, #8]
 800b9ac:	6922      	ldr	r2, [r4, #16]
 800b9ae:	bf0c      	ite	eq
 800b9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9b4:	2500      	movne	r5, #0
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	bfc4      	itt	gt
 800b9ba:	1a9b      	subgt	r3, r3, r2
 800b9bc:	18ed      	addgt	r5, r5, r3
 800b9be:	2600      	movs	r6, #0
 800b9c0:	341a      	adds	r4, #26
 800b9c2:	42b5      	cmp	r5, r6
 800b9c4:	d11a      	bne.n	800b9fc <_printf_common+0xc8>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	e008      	b.n	800b9dc <_printf_common+0xa8>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	4652      	mov	r2, sl
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	47c0      	blx	r8
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d103      	bne.n	800b9e0 <_printf_common+0xac>
 800b9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e0:	3501      	adds	r5, #1
 800b9e2:	e7c6      	b.n	800b972 <_printf_common+0x3e>
 800b9e4:	18e1      	adds	r1, r4, r3
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	2030      	movs	r0, #48	; 0x30
 800b9ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9ee:	4422      	add	r2, r4
 800b9f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9f8:	3302      	adds	r3, #2
 800b9fa:	e7c7      	b.n	800b98c <_printf_common+0x58>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	4622      	mov	r2, r4
 800ba00:	4649      	mov	r1, r9
 800ba02:	4638      	mov	r0, r7
 800ba04:	47c0      	blx	r8
 800ba06:	3001      	adds	r0, #1
 800ba08:	d0e6      	beq.n	800b9d8 <_printf_common+0xa4>
 800ba0a:	3601      	adds	r6, #1
 800ba0c:	e7d9      	b.n	800b9c2 <_printf_common+0x8e>
	...

0800ba10 <_printf_i>:
 800ba10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	4691      	mov	r9, r2
 800ba18:	7e27      	ldrb	r7, [r4, #24]
 800ba1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba1c:	2f78      	cmp	r7, #120	; 0x78
 800ba1e:	4680      	mov	r8, r0
 800ba20:	469a      	mov	sl, r3
 800ba22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba26:	d807      	bhi.n	800ba38 <_printf_i+0x28>
 800ba28:	2f62      	cmp	r7, #98	; 0x62
 800ba2a:	d80a      	bhi.n	800ba42 <_printf_i+0x32>
 800ba2c:	2f00      	cmp	r7, #0
 800ba2e:	f000 80d8 	beq.w	800bbe2 <_printf_i+0x1d2>
 800ba32:	2f58      	cmp	r7, #88	; 0x58
 800ba34:	f000 80a3 	beq.w	800bb7e <_printf_i+0x16e>
 800ba38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba40:	e03a      	b.n	800bab8 <_printf_i+0xa8>
 800ba42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba46:	2b15      	cmp	r3, #21
 800ba48:	d8f6      	bhi.n	800ba38 <_printf_i+0x28>
 800ba4a:	a001      	add	r0, pc, #4	; (adr r0, 800ba50 <_printf_i+0x40>)
 800ba4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba50:	0800baa9 	.word	0x0800baa9
 800ba54:	0800babd 	.word	0x0800babd
 800ba58:	0800ba39 	.word	0x0800ba39
 800ba5c:	0800ba39 	.word	0x0800ba39
 800ba60:	0800ba39 	.word	0x0800ba39
 800ba64:	0800ba39 	.word	0x0800ba39
 800ba68:	0800babd 	.word	0x0800babd
 800ba6c:	0800ba39 	.word	0x0800ba39
 800ba70:	0800ba39 	.word	0x0800ba39
 800ba74:	0800ba39 	.word	0x0800ba39
 800ba78:	0800ba39 	.word	0x0800ba39
 800ba7c:	0800bbc9 	.word	0x0800bbc9
 800ba80:	0800baed 	.word	0x0800baed
 800ba84:	0800bbab 	.word	0x0800bbab
 800ba88:	0800ba39 	.word	0x0800ba39
 800ba8c:	0800ba39 	.word	0x0800ba39
 800ba90:	0800bbeb 	.word	0x0800bbeb
 800ba94:	0800ba39 	.word	0x0800ba39
 800ba98:	0800baed 	.word	0x0800baed
 800ba9c:	0800ba39 	.word	0x0800ba39
 800baa0:	0800ba39 	.word	0x0800ba39
 800baa4:	0800bbb3 	.word	0x0800bbb3
 800baa8:	680b      	ldr	r3, [r1, #0]
 800baaa:	1d1a      	adds	r2, r3, #4
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	600a      	str	r2, [r1, #0]
 800bab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bab8:	2301      	movs	r3, #1
 800baba:	e0a3      	b.n	800bc04 <_printf_i+0x1f4>
 800babc:	6825      	ldr	r5, [r4, #0]
 800babe:	6808      	ldr	r0, [r1, #0]
 800bac0:	062e      	lsls	r6, r5, #24
 800bac2:	f100 0304 	add.w	r3, r0, #4
 800bac6:	d50a      	bpl.n	800bade <_printf_i+0xce>
 800bac8:	6805      	ldr	r5, [r0, #0]
 800baca:	600b      	str	r3, [r1, #0]
 800bacc:	2d00      	cmp	r5, #0
 800bace:	da03      	bge.n	800bad8 <_printf_i+0xc8>
 800bad0:	232d      	movs	r3, #45	; 0x2d
 800bad2:	426d      	negs	r5, r5
 800bad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bad8:	485e      	ldr	r0, [pc, #376]	; (800bc54 <_printf_i+0x244>)
 800bada:	230a      	movs	r3, #10
 800badc:	e019      	b.n	800bb12 <_printf_i+0x102>
 800bade:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bae2:	6805      	ldr	r5, [r0, #0]
 800bae4:	600b      	str	r3, [r1, #0]
 800bae6:	bf18      	it	ne
 800bae8:	b22d      	sxthne	r5, r5
 800baea:	e7ef      	b.n	800bacc <_printf_i+0xbc>
 800baec:	680b      	ldr	r3, [r1, #0]
 800baee:	6825      	ldr	r5, [r4, #0]
 800baf0:	1d18      	adds	r0, r3, #4
 800baf2:	6008      	str	r0, [r1, #0]
 800baf4:	0628      	lsls	r0, r5, #24
 800baf6:	d501      	bpl.n	800bafc <_printf_i+0xec>
 800baf8:	681d      	ldr	r5, [r3, #0]
 800bafa:	e002      	b.n	800bb02 <_printf_i+0xf2>
 800bafc:	0669      	lsls	r1, r5, #25
 800bafe:	d5fb      	bpl.n	800baf8 <_printf_i+0xe8>
 800bb00:	881d      	ldrh	r5, [r3, #0]
 800bb02:	4854      	ldr	r0, [pc, #336]	; (800bc54 <_printf_i+0x244>)
 800bb04:	2f6f      	cmp	r7, #111	; 0x6f
 800bb06:	bf0c      	ite	eq
 800bb08:	2308      	moveq	r3, #8
 800bb0a:	230a      	movne	r3, #10
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb12:	6866      	ldr	r6, [r4, #4]
 800bb14:	60a6      	str	r6, [r4, #8]
 800bb16:	2e00      	cmp	r6, #0
 800bb18:	bfa2      	ittt	ge
 800bb1a:	6821      	ldrge	r1, [r4, #0]
 800bb1c:	f021 0104 	bicge.w	r1, r1, #4
 800bb20:	6021      	strge	r1, [r4, #0]
 800bb22:	b90d      	cbnz	r5, 800bb28 <_printf_i+0x118>
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	d04d      	beq.n	800bbc4 <_printf_i+0x1b4>
 800bb28:	4616      	mov	r6, r2
 800bb2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb2e:	fb03 5711 	mls	r7, r3, r1, r5
 800bb32:	5dc7      	ldrb	r7, [r0, r7]
 800bb34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb38:	462f      	mov	r7, r5
 800bb3a:	42bb      	cmp	r3, r7
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	d9f4      	bls.n	800bb2a <_printf_i+0x11a>
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d10b      	bne.n	800bb5c <_printf_i+0x14c>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	07df      	lsls	r7, r3, #31
 800bb48:	d508      	bpl.n	800bb5c <_printf_i+0x14c>
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	6861      	ldr	r1, [r4, #4]
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	bfde      	ittt	le
 800bb52:	2330      	movle	r3, #48	; 0x30
 800bb54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb5c:	1b92      	subs	r2, r2, r6
 800bb5e:	6122      	str	r2, [r4, #16]
 800bb60:	f8cd a000 	str.w	sl, [sp]
 800bb64:	464b      	mov	r3, r9
 800bb66:	aa03      	add	r2, sp, #12
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	f7ff fee2 	bl	800b934 <_printf_common>
 800bb70:	3001      	adds	r0, #1
 800bb72:	d14c      	bne.n	800bc0e <_printf_i+0x1fe>
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	b004      	add	sp, #16
 800bb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7e:	4835      	ldr	r0, [pc, #212]	; (800bc54 <_printf_i+0x244>)
 800bb80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	680e      	ldr	r6, [r1, #0]
 800bb88:	061f      	lsls	r7, r3, #24
 800bb8a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb8e:	600e      	str	r6, [r1, #0]
 800bb90:	d514      	bpl.n	800bbbc <_printf_i+0x1ac>
 800bb92:	07d9      	lsls	r1, r3, #31
 800bb94:	bf44      	itt	mi
 800bb96:	f043 0320 	orrmi.w	r3, r3, #32
 800bb9a:	6023      	strmi	r3, [r4, #0]
 800bb9c:	b91d      	cbnz	r5, 800bba6 <_printf_i+0x196>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	f023 0320 	bic.w	r3, r3, #32
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	2310      	movs	r3, #16
 800bba8:	e7b0      	b.n	800bb0c <_printf_i+0xfc>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	f043 0320 	orr.w	r3, r3, #32
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	2378      	movs	r3, #120	; 0x78
 800bbb4:	4828      	ldr	r0, [pc, #160]	; (800bc58 <_printf_i+0x248>)
 800bbb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbba:	e7e3      	b.n	800bb84 <_printf_i+0x174>
 800bbbc:	065e      	lsls	r6, r3, #25
 800bbbe:	bf48      	it	mi
 800bbc0:	b2ad      	uxthmi	r5, r5
 800bbc2:	e7e6      	b.n	800bb92 <_printf_i+0x182>
 800bbc4:	4616      	mov	r6, r2
 800bbc6:	e7bb      	b.n	800bb40 <_printf_i+0x130>
 800bbc8:	680b      	ldr	r3, [r1, #0]
 800bbca:	6826      	ldr	r6, [r4, #0]
 800bbcc:	6960      	ldr	r0, [r4, #20]
 800bbce:	1d1d      	adds	r5, r3, #4
 800bbd0:	600d      	str	r5, [r1, #0]
 800bbd2:	0635      	lsls	r5, r6, #24
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	d501      	bpl.n	800bbdc <_printf_i+0x1cc>
 800bbd8:	6018      	str	r0, [r3, #0]
 800bbda:	e002      	b.n	800bbe2 <_printf_i+0x1d2>
 800bbdc:	0671      	lsls	r1, r6, #25
 800bbde:	d5fb      	bpl.n	800bbd8 <_printf_i+0x1c8>
 800bbe0:	8018      	strh	r0, [r3, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	4616      	mov	r6, r2
 800bbe8:	e7ba      	b.n	800bb60 <_printf_i+0x150>
 800bbea:	680b      	ldr	r3, [r1, #0]
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	600a      	str	r2, [r1, #0]
 800bbf0:	681e      	ldr	r6, [r3, #0]
 800bbf2:	6862      	ldr	r2, [r4, #4]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f7f4 fb8a 	bl	8000310 <memchr>
 800bbfc:	b108      	cbz	r0, 800bc02 <_printf_i+0x1f2>
 800bbfe:	1b80      	subs	r0, r0, r6
 800bc00:	6060      	str	r0, [r4, #4]
 800bc02:	6863      	ldr	r3, [r4, #4]
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	2300      	movs	r3, #0
 800bc08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc0c:	e7a8      	b.n	800bb60 <_printf_i+0x150>
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	4632      	mov	r2, r6
 800bc12:	4649      	mov	r1, r9
 800bc14:	4640      	mov	r0, r8
 800bc16:	47d0      	blx	sl
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d0ab      	beq.n	800bb74 <_printf_i+0x164>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	079b      	lsls	r3, r3, #30
 800bc20:	d413      	bmi.n	800bc4a <_printf_i+0x23a>
 800bc22:	68e0      	ldr	r0, [r4, #12]
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	4298      	cmp	r0, r3
 800bc28:	bfb8      	it	lt
 800bc2a:	4618      	movlt	r0, r3
 800bc2c:	e7a4      	b.n	800bb78 <_printf_i+0x168>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	4632      	mov	r2, r6
 800bc32:	4649      	mov	r1, r9
 800bc34:	4640      	mov	r0, r8
 800bc36:	47d0      	blx	sl
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d09b      	beq.n	800bb74 <_printf_i+0x164>
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	68e3      	ldr	r3, [r4, #12]
 800bc40:	9903      	ldr	r1, [sp, #12]
 800bc42:	1a5b      	subs	r3, r3, r1
 800bc44:	42ab      	cmp	r3, r5
 800bc46:	dcf2      	bgt.n	800bc2e <_printf_i+0x21e>
 800bc48:	e7eb      	b.n	800bc22 <_printf_i+0x212>
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	f104 0619 	add.w	r6, r4, #25
 800bc50:	e7f5      	b.n	800bc3e <_printf_i+0x22e>
 800bc52:	bf00      	nop
 800bc54:	0800bf45 	.word	0x0800bf45
 800bc58:	0800bf56 	.word	0x0800bf56

0800bc5c <_sbrk_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d06      	ldr	r5, [pc, #24]	; (800bc78 <_sbrk_r+0x1c>)
 800bc60:	2300      	movs	r3, #0
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	602b      	str	r3, [r5, #0]
 800bc68:	f7f6 fd22 	bl	80026b0 <_sbrk>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	d102      	bne.n	800bc76 <_sbrk_r+0x1a>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	b103      	cbz	r3, 800bc76 <_sbrk_r+0x1a>
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	240025ac 	.word	0x240025ac

0800bc7c <__sread>:
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	460c      	mov	r4, r1
 800bc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc84:	f000 f8a0 	bl	800bdc8 <_read_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	bfab      	itete	ge
 800bc8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc8e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc90:	181b      	addge	r3, r3, r0
 800bc92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc96:	bfac      	ite	ge
 800bc98:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc9a:	81a3      	strhlt	r3, [r4, #12]
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <__swrite>:
 800bc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca2:	461f      	mov	r7, r3
 800bca4:	898b      	ldrh	r3, [r1, #12]
 800bca6:	05db      	lsls	r3, r3, #23
 800bca8:	4605      	mov	r5, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	4616      	mov	r6, r2
 800bcae:	d505      	bpl.n	800bcbc <__swrite+0x1e>
 800bcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f000 f868 	bl	800bd8c <_lseek_r>
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcc6:	81a3      	strh	r3, [r4, #12]
 800bcc8:	4632      	mov	r2, r6
 800bcca:	463b      	mov	r3, r7
 800bccc:	4628      	mov	r0, r5
 800bcce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd2:	f000 b817 	b.w	800bd04 <_write_r>

0800bcd6 <__sseek>:
 800bcd6:	b510      	push	{r4, lr}
 800bcd8:	460c      	mov	r4, r1
 800bcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcde:	f000 f855 	bl	800bd8c <_lseek_r>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	bf15      	itete	ne
 800bce8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcf2:	81a3      	strheq	r3, [r4, #12]
 800bcf4:	bf18      	it	ne
 800bcf6:	81a3      	strhne	r3, [r4, #12]
 800bcf8:	bd10      	pop	{r4, pc}

0800bcfa <__sclose>:
 800bcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfe:	f000 b813 	b.w	800bd28 <_close_r>
	...

0800bd04 <_write_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4d07      	ldr	r5, [pc, #28]	; (800bd24 <_write_r+0x20>)
 800bd08:	4604      	mov	r4, r0
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	602a      	str	r2, [r5, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	f7f6 fc7b 	bl	800260e <_write>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_write_r+0x1e>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_write_r+0x1e>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	240025ac 	.word	0x240025ac

0800bd28 <_close_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d06      	ldr	r5, [pc, #24]	; (800bd44 <_close_r+0x1c>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f6 fc87 	bl	8002646 <_close>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d102      	bne.n	800bd42 <_close_r+0x1a>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	b103      	cbz	r3, 800bd42 <_close_r+0x1a>
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	bd38      	pop	{r3, r4, r5, pc}
 800bd44:	240025ac 	.word	0x240025ac

0800bd48 <_fstat_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_fstat_r+0x20>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	f7f6 fc82 	bl	800265e <_fstat>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d102      	bne.n	800bd64 <_fstat_r+0x1c>
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	b103      	cbz	r3, 800bd64 <_fstat_r+0x1c>
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	bf00      	nop
 800bd68:	240025ac 	.word	0x240025ac

0800bd6c <_isatty_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d06      	ldr	r5, [pc, #24]	; (800bd88 <_isatty_r+0x1c>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	f7f6 fc81 	bl	800267e <_isatty>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_isatty_r+0x1a>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_isatty_r+0x1a>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	240025ac 	.word	0x240025ac

0800bd8c <_lseek_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	; (800bdac <_lseek_r+0x20>)
 800bd90:	4604      	mov	r4, r0
 800bd92:	4608      	mov	r0, r1
 800bd94:	4611      	mov	r1, r2
 800bd96:	2200      	movs	r2, #0
 800bd98:	602a      	str	r2, [r5, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f7f6 fc7a 	bl	8002694 <_lseek>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_lseek_r+0x1e>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_lseek_r+0x1e>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	240025ac 	.word	0x240025ac

0800bdb0 <__malloc_lock>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	; (800bdb8 <__malloc_lock+0x8>)
 800bdb2:	f7ff bb55 	b.w	800b460 <__retarget_lock_acquire_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	240025a4 	.word	0x240025a4

0800bdbc <__malloc_unlock>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	; (800bdc4 <__malloc_unlock+0x8>)
 800bdbe:	f7ff bb50 	b.w	800b462 <__retarget_lock_release_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	240025a4 	.word	0x240025a4

0800bdc8 <_read_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	; (800bde8 <_read_r+0x20>)
 800bdcc:	4604      	mov	r4, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	602a      	str	r2, [r5, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f7f6 fbfc 	bl	80025d4 <_read>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_read_r+0x1e>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_read_r+0x1e>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	240025ac 	.word	0x240025ac

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
