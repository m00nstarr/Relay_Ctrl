
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9bc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800bc8c  0800bc8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be10  0800be10  0001be10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be14  0800be14  0001be14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800be18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000253c  24000074  0800be8c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240025b0  0800be8c  000225b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ab7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004442  00000000  00000000  00053b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  00057fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c18  00000000  00000000  00059d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c27  00000000  00000000  0005b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023367  00000000  00000000  0009553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017db39  00000000  00000000  000b88a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002363df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000898c  00000000  00000000  00236434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bc74 	.word	0x0800bc74

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800bc74 	.word	0x0800bc74

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__io_putchar>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <__io_putchar+0x20>)
 80006ba:	f009 f923 	bl	8009904 <HAL_UART_Transmit>

  return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	24000158 	.word	0x24000158

080006cc <save_timestamp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void save_timestamp(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	timestamp[id] = TIM14->CNT / 10;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <save_timestamp+0x30>)
 80006d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <save_timestamp+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	490a      	ldr	r1, [pc, #40]	; (8000704 <save_timestamp+0x38>)
 80006da:	fba1 1202 	umull	r1, r2, r1, r2
 80006de:	08d2      	lsrs	r2, r2, #3
 80006e0:	4909      	ldr	r1, [pc, #36]	; (8000708 <save_timestamp+0x3c>)
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//timestamp[id] = uwTick;
	id++;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <save_timestamp+0x34>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <save_timestamp+0x34>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40002000 	.word	0x40002000
 8000700:	24000094 	.word	0x24000094
 8000704:	cccccccd 	.word	0xcccccccd
 8000708:	240001e8 	.word	0x240001e8

0800070c <print_timestamp>:

void print_timestamp(){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

	//timestamp = HAL_GetTick();
	int i;
	for (i=0; i<id; i++){
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	e01f      	b.n	8000758 <print_timestamp+0x4c>
		printf("timing_counter(%d): %ld\r\n", i, timestamp[i]);
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <print_timestamp+0x60>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000720:	461a      	mov	r2, r3
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <print_timestamp+0x64>)
 8000726:	f00a fad9 	bl	800acdc <iprintf>
		if(i > 0){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dd0d      	ble.n	800074c <print_timestamp+0x40>
				printf("%ld ms ellapsed after prev timestamp. \r\n", timestamp[i] - timestamp[i-1]);
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <print_timestamp+0x60>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	490b      	ldr	r1, [pc, #44]	; (800076c <print_timestamp+0x60>)
 800073e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	4619      	mov	r1, r3
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <print_timestamp+0x68>)
 8000748:	f00a fac8 	bl	800acdc <iprintf>
			}
		printf("--------------------\r\n");
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <print_timestamp+0x6c>)
 800074e:	f00a fb4b 	bl	800ade8 <puts>
	for (i=0; i<id; i++){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3301      	adds	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <print_timestamp+0x70>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d3da      	bcc.n	8000718 <print_timestamp+0xc>
	}

}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	240001e8 	.word	0x240001e8
 8000770:	0800bc8c 	.word	0x0800bc8c
 8000774:	0800bca8 	.word	0x0800bca8
 8000778:	0800bcd4 	.word	0x0800bcd4
 800077c:	24000094 	.word	0x24000094

08000780 <autostart>:

void autostart(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	if(timing_counter == 0){
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <autostart+0xbc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d107      	bne.n	800079c <autostart+0x1c>
		HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	482b      	ldr	r0, [pc, #172]	; (8000840 <autostart+0xc0>)
 8000792:	f004 fbfb 	bl	8004f8c <HAL_GPIO_WritePin>
		save_timestamp();
 8000796:	f7ff ff99 	bl	80006cc <save_timestamp>
 800079a:	e048      	b.n	800082e <autostart+0xae>
	}
	else if(timing_counter == 1){
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <autostart+0xbc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d107      	bne.n	80007b4 <autostart+0x34>
		HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <autostart+0xc0>)
 80007aa:	f004 fbef 	bl	8004f8c <HAL_GPIO_WritePin>
		save_timestamp();
 80007ae:	f7ff ff8d 	bl	80006cc <save_timestamp>
 80007b2:	e03c      	b.n	800082e <autostart+0xae>
	}
	else if(timing_counter == 10){
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <autostart+0xbc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b0a      	cmp	r3, #10
 80007ba:	d107      	bne.n	80007cc <autostart+0x4c>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	4820      	ldr	r0, [pc, #128]	; (8000844 <autostart+0xc4>)
 80007c2:	f004 fbe3 	bl	8004f8c <HAL_GPIO_WritePin>
		save_timestamp();
 80007c6:	f7ff ff81 	bl	80006cc <save_timestamp>
 80007ca:	e030      	b.n	800082e <autostart+0xae>
	}
	else if(timing_counter == 20){
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <autostart+0xbc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b14      	cmp	r3, #20
 80007d2:	d108      	bne.n	80007e6 <autostart+0x66>
		HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <autostart+0xc8>)
 80007dc:	f004 fbd6 	bl	8004f8c <HAL_GPIO_WritePin>
		save_timestamp();
 80007e0:	f7ff ff74 	bl	80006cc <save_timestamp>
 80007e4:	e023      	b.n	800082e <autostart+0xae>
	}
	else if(timing_counter == 21){
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <autostart+0xbc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b15      	cmp	r3, #21
 80007ec:	d108      	bne.n	8000800 <autostart+0x80>
		HAL_GPIO_WritePin(GPIOA, MP_Relay_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	4815      	ldr	r0, [pc, #84]	; (800084c <autostart+0xcc>)
 80007f6:	f004 fbc9 	bl	8004f8c <HAL_GPIO_WritePin>
		save_timestamp();
 80007fa:	f7ff ff67 	bl	80006cc <save_timestamp>
 80007fe:	e016      	b.n	800082e <autostart+0xae>
	}
	else if(timing_counter == 30){
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <autostart+0xbc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b1e      	cmp	r3, #30
 8000806:	d112      	bne.n	800082e <autostart+0xae>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <autostart+0xc4>)
 800080e:	f004 fbbd 	bl	8004f8c <HAL_GPIO_WritePin>
		save_timestamp();
 8000812:	f7ff ff5b 	bl	80006cc <save_timestamp>
		HAL_TIM_Base_Stop_IT(&htim13);
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <autostart+0xd0>)
 8000818:	f008 f86c 	bl	80088f4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim14);
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <autostart+0xd4>)
 800081e:	f008 f869 	bl	80088f4 <HAL_TIM_Base_Stop_IT>
		timing_counter = -1;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <autostart+0xbc>)
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	601a      	str	r2, [r3, #0]
		print_timestamp();
 800082a:	f7ff ff6f 	bl	800070c <print_timestamp>
	}
	timing_counter += 1;
 800082e:	4b03      	ldr	r3, [pc, #12]	; (800083c <autostart+0xbc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a01      	ldr	r2, [pc, #4]	; (800083c <autostart+0xbc>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000090 	.word	0x24000090
 8000840:	58020800 	.word	0x58020800
 8000844:	58021400 	.word	0x58021400
 8000848:	58021800 	.word	0x58021800
 800084c:	58020000 	.word	0x58020000
 8000850:	240022c4 	.word	0x240022c4
 8000854:	240024b0 	.word	0x240024b0

08000858 <HAL_TIM_PeriodElapsedCallback>:

//Timer interrupted every 0.4s
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
		autostart();
 800086a:	f7ff ff89 	bl	8000780 <autostart>
	}
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40001c00 	.word	0x40001c00

0800087c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088c:	d108      	bne.n	80008a0 <HAL_GPIO_EXTI_Callback+0x24>
		TIM14->CNT = 0;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim14);
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_GPIO_EXTI_Callback+0x30>)
 8000896:	f007 ffa7 	bl	80087e8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim13);
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x34>)
 800089c:	f007 ffa4 	bl	80087e8 <HAL_TIM_Base_Start_IT>
		// step 1: turn on MN IGBT & Relay
		//HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
		//HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
	}
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40002000 	.word	0x40002000
 80008ac:	240024b0 	.word	0x240024b0
 80008b0:	240022c4 	.word	0x240022c4

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f001 ffbc 	bl	8002834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f838 	bl	8000930 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008c0:	f000 f8b0 	bl	8000a24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c4:	f000 fdf4 	bl	80014b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008c8:	f000 f8d8 	bl	8000a7c <MX_ADC1_Init>
  MX_ADC2_Init();
 80008cc:	f000 f94e 	bl	8000b6c <MX_ADC2_Init>
  MX_ADC3_Init();
 80008d0:	f000 f9ae 	bl	8000c30 <MX_ADC3_Init>
  MX_DAC1_Init();
 80008d4:	f000 fa1e 	bl	8000d14 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80008d8:	f000 fa4e 	bl	8000d78 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008dc:	f000 fab0 	bl	8000e40 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 80008e0:	f000 fb12 	bl	8000f08 <MX_I2C4_Init>
  MX_TIM1_Init();
 80008e4:	f000 fbac 	bl	8001040 <MX_TIM1_Init>
  MX_TIM4_Init();
 80008e8:	f000 fc38 	bl	800115c <MX_TIM4_Init>
  MX_TIM5_Init();
 80008ec:	f000 fca6 	bl	800123c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80008f0:	f000 fd46 	bl	8001380 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80008f4:	f000 fd90 	bl	8001418 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 80008f8:	f000 fcfa 	bl	80012f0 <MX_TIM13_Init>
  MX_RTC_Init();
 80008fc:	f000 fb44 	bl	8000f88 <MX_RTC_Init>
  MX_TIM14_Init();
 8000900:	f000 fd1a 	bl	8001338 <MX_TIM14_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <main+0x74>)
 800090a:	f004 fb3f 	bl	8004f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2108      	movs	r1, #8
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <main+0x74>)
 8000914:	f004 fb3a 	bl	8004f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <main+0x78>)
 8000920:	f004 fb34 	bl	8004f8c <HAL_GPIO_WritePin>

  while (1)
 8000924:	e7fe      	b.n	8000924 <main+0x70>
 8000926:	bf00      	nop
 8000928:	58020800 	.word	0x58020800
 800092c:	58021800 	.word	0x58021800

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09c      	sub	sp, #112	; 0x70
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	224c      	movs	r2, #76	; 0x4c
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00a f9c4 	bl	800accc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2220      	movs	r2, #32
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f00a f9be 	bl	800accc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000950:	2004      	movs	r0, #4
 8000952:	f004 fc77 	bl	8005244 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <SystemClock_Config+0xec>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <SystemClock_Config+0xec>)
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <SystemClock_Config+0xec>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	bf00      	nop
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <SystemClock_Config+0xec>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000980:	d1f8      	bne.n	8000974 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <SystemClock_Config+0xf0>)
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	f023 0303 	bic.w	r3, r3, #3
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <SystemClock_Config+0xf0>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000992:	2309      	movs	r3, #9
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009a8:	2305      	movs	r3, #5
 80009aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80009ac:	236e      	movs	r3, #110	; 0x6e
 80009ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b4:	2304      	movs	r3, #4
 80009b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009bc:	2308      	movs	r3, #8
 80009be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f004 fc93 	bl	80052f8 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009d8:	f001 f8f8 	bl	8001bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	233f      	movs	r3, #63	; 0x3f
 80009de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2303      	movs	r3, #3
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e8:	2308      	movs	r3, #8
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2103      	movs	r1, #3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 f824 	bl	8005a50 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a0e:	f001 f8dd 	bl	8001bcc <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	; 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58024800 	.word	0x58024800
 8000a20:	58024400 	.word	0x58024400

08000a24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ae      	sub	sp, #184	; 0xb8
 8000a28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	22b4      	movs	r2, #180	; 0xb4
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f00a f94b 	bl	800accc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a3a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000a40:	2350      	movs	r3, #80	; 0x50
 8000a42:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a44:	2305      	movs	r3, #5
 8000a46:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 fb7f 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000a70:	f001 f8ac 	bl	8001bcc <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	37b8      	adds	r7, #184	; 0xb8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2224      	movs	r2, #36	; 0x24
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00a f919 	bl	800accc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <MX_ADC1_Init+0xe8>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000afa:	f002 f9ad 	bl	8002e58 <HAL_ADC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f001 f862 	bl	8001bcc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000b14:	f003 f9e6 	bl	8003ee4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b1e:	f001 f855 	bl	8001bcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_ADC1_Init+0xec>)
 8000b24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b26:	2306      	movs	r3, #6
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b32:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b34:	2304      	movs	r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_ADC1_Init+0xe4>)
 8000b48:	f002 fb8e 	bl	8003268 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b52:	f001 f83b 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	240021e4 	.word	0x240021e4
 8000b64:	40022000 	.word	0x40022000
 8000b68:	04300002 	.word	0x04300002

08000b6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2224      	movs	r2, #36	; 0x24
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00a f8a7 	bl	800accc <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000b80:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <MX_ADC2_Init+0xc0>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000b98:	2204      	movs	r2, #4
 8000b9a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000bde:	f002 f93b 	bl	8002e58 <HAL_ADC_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000be8:	f000 fff0 	bl	8001bcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bec:	2301      	movs	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bf8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bfc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_ADC2_Init+0xbc>)
 8000c12:	f002 fb29 	bl	8003268 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000c1c:	f000 ffd6 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	24002128 	.word	0x24002128
 8000c2c:	40022100 	.word	0x40022100

08000c30 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2224      	movs	r2, #36	; 0x24
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00a f845 	bl	800accc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c44:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <MX_ADC3_Init+0xe0>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cb4:	4815      	ldr	r0, [pc, #84]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000cb6:	f002 f8cf 	bl	8002e58 <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000cc0:	f000 ff84 	bl	8001bcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc8:	2306      	movs	r3, #6
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cd4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_ADC3_Init+0xdc>)
 8000cf4:	f002 fab8 	bl	8003268 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000cfe:	f000 ff65 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	24002254 	.word	0x24002254
 8000d10:	58026000 	.word	0x58026000

08000d14 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2224      	movs	r2, #36	; 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f009 ffd3 	bl	800accc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_DAC1_Init+0x5c>)
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_DAC1_Init+0x60>)
 8000d2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_DAC1_Init+0x5c>)
 8000d2e:	f003 faca 	bl	80042c6 <HAL_DAC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d38:	f000 ff48 	bl	8001bcc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2210      	movs	r2, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_DAC1_Init+0x5c>)
 8000d58:	f003 fad8 	bl	800430c <HAL_DAC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 ff33 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	24000144 	.word	0x24000144
 8000d74:	40007400 	.word	0x40007400

08000d78 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <MX_FDCAN1_Init+0xc4>)
 8000d80:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d88:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e26:	f003 fba1 	bl	800456c <HAL_FDCAN_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e30:	f000 fecc 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240023c4 	.word	0x240023c4
 8000e3c:	4000a000 	.word	0x4000a000

08000e40 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <MX_FDCAN2_Init+0xc4>)
 8000e48:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ee8:	2204      	movs	r2, #4
 8000eea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eee:	f003 fb3d 	bl	800456c <HAL_FDCAN_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ef8:	f000 fe68 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	240024fc 	.word	0x240024fc
 8000f04:	4000a400 	.word	0x4000a400

08000f08 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <MX_I2C4_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <MX_I2C4_Init+0x7c>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f44:	f004 f856 	bl	8004ff4 <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 fe3d 	bl	8001bcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f56:	f004 f8dd 	bl	8005114 <HAL_I2CEx_ConfigAnalogFilter>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f000 fe34 	bl	8001bcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_I2C4_Init+0x74>)
 8000f68:	f004 f91f 	bl	80051aa <HAL_I2CEx_ConfigDigitalFilter>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fe2b 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240000ac 	.word	0x240000ac
 8000f80:	58001c00 	.word	0x58001c00
 8000f84:	60404e72 	.word	0x60404e72

08000f88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fa2:	4a26      	ldr	r2, [pc, #152]	; (800103c <MX_RTC_Init+0xb4>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fae:	227f      	movs	r2, #127	; 0x7f
 8000fb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <MX_RTC_Init+0xb0>)
 8000fd2:	f007 f95b 	bl	800828c <HAL_RTC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000fdc:	f000 fdf6 	bl	8001bcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8000fe0:	2322      	movs	r3, #34	; 0x22
 8000fe2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22;
 8000fe4:	2322      	movs	r3, #34	; 0x22
 8000fe6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x22;
 8000fe8:	2322      	movs	r3, #34	; 0x22
 8000fea:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <MX_RTC_Init+0xb0>)
 8000ffc:	f007 f9be 	bl	800837c <HAL_RTC_SetTime>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001006:	f000 fde1 	bl	8001bcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800100a:	2304      	movs	r3, #4
 800100c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800100e:	2302      	movs	r3, #2
 8001010:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8001012:	2310      	movs	r3, #16
 8001014:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001016:	2322      	movs	r3, #34	; 0x22
 8001018:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_RTC_Init+0xb0>)
 8001022:	f007 fa49 	bl	80084b8 <HAL_RTC_SetDate>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800102c:	f000 fdce 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	240023a0 	.word	0x240023a0
 800103c:	58004000 	.word	0x58004000

08001040 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b098      	sub	sp, #96	; 0x60
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2234      	movs	r2, #52	; 0x34
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fe2d 	bl	800accc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <MX_TIM1_Init+0x114>)
 8001074:	4a38      	ldr	r2, [pc, #224]	; (8001158 <MX_TIM1_Init+0x118>)
 8001076:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_TIM1_Init+0x114>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b35      	ldr	r3, [pc, #212]	; (8001154 <MX_TIM1_Init+0x114>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_TIM1_Init+0x114>)
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_TIM1_Init+0x114>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <MX_TIM1_Init+0x114>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <MX_TIM1_Init+0x114>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800109e:	482d      	ldr	r0, [pc, #180]	; (8001154 <MX_TIM1_Init+0x114>)
 80010a0:	f007 fc57 	bl	8008952 <HAL_TIM_PWM_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 fd8f 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010be:	4619      	mov	r1, r3
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <MX_TIM1_Init+0x114>)
 80010c2:	f008 fa75 	bl	80095b0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010cc:	f000 fd7e 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d0:	2360      	movs	r3, #96	; 0x60
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d8:	2300      	movs	r3, #0
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ec:	220c      	movs	r2, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM1_Init+0x114>)
 80010f2:	f007 fda5 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80010fc:	f000 fd66 	bl	8001bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001118:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM1_Init+0x114>)
 8001136:	f008 fad7 	bl	80096e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001140:	f000 fd44 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM1_Init+0x114>)
 8001146:	f001 f88d 	bl	8002264 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3760      	adds	r7, #96	; 0x60
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24002464 	.word	0x24002464
 8001158:	40010000 	.word	0x40010000

0800115c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_TIM4_Init+0xd8>)
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <MX_TIM4_Init+0xdc>)
 8001184:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_TIM4_Init+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_TIM4_Init+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_TIM4_Init+0xd8>)
 8001194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001198:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_TIM4_Init+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_TIM4_Init+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_TIM4_Init+0xd8>)
 80011a8:	f007 fbd3 	bl	8008952 <HAL_TIM_PWM_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80011b2:	f000 fd0b 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <MX_TIM4_Init+0xd8>)
 80011c6:	f008 f9f3 	bl	80095b0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80011d0:	f000 fcfc 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d4:	2360      	movs	r3, #96	; 0x60
 80011d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2204      	movs	r2, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <MX_TIM4_Init+0xd8>)
 80011ec:	f007 fd28 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80011f6:	f000 fce9 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2208      	movs	r2, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_TIM4_Init+0xd8>)
 8001202:	f007 fd1d 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800120c:	f000 fcde 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	220c      	movs	r2, #12
 8001214:	4619      	mov	r1, r3
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM4_Init+0xd8>)
 8001218:	f007 fd12 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001222:	f000 fcd3 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM4_Init+0xd8>)
 8001228:	f001 f81c 	bl	8002264 <HAL_TIM_MspPostInit>

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	240000f8 	.word	0x240000f8
 8001238:	40000800 	.word	0x40000800

0800123c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_TIM5_Init+0xac>)
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <MX_TIM5_Init+0xb0>)
 8001264:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_TIM5_Init+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_TIM5_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM5_Init+0xac>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_TIM5_Init+0xac>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM5_Init+0xac>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <MX_TIM5_Init+0xac>)
 8001288:	f007 fb63 	bl	8008952 <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001292:	f000 fc9b 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_TIM5_Init+0xac>)
 80012a6:	f008 f983 	bl	80095b0 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80012b0:	f000 fc8c 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM5_Init+0xac>)
 80012cc:	f007 fcb8 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80012d6:	f000 fc79 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM5_Init+0xac>)
 80012dc:	f000 ffc2 	bl	8002264 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	24002198 	.word	0x24002198
 80012ec:	40000c00 	.word	0x40000c00

080012f0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_TIM13_Init+0x40>)
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <MX_TIM13_Init+0x44>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2750 -1;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_TIM13_Init+0x40>)
 80012fc:	f640 22bd 	movw	r2, #2749	; 0xabd
 8001300:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_TIM13_Init+0x40>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5000-1;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_TIM13_Init+0x40>)
 800130a:	f241 3287 	movw	r2, #4999	; 0x1387
 800130e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_TIM13_Init+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_TIM13_Init+0x40>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_TIM13_Init+0x40>)
 800131e:	f007 fa0b 	bl	8008738 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001328:	f000 fc50 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  /* USER CODE END TIM13_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	240022c4 	.word	0x240022c4
 8001334:	40001c00 	.word	0x40001c00

08001338 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_TIM14_Init+0x40>)
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_TIM14_Init+0x44>)
 8001340:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 27500-1;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_TIM14_Init+0x40>)
 8001344:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8001348:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_TIM14_Init+0x40>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_TIM14_Init+0x40>)
 8001352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001356:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_TIM14_Init+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_TIM14_Init+0x40>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_TIM14_Init+0x40>)
 8001366:	f007 f9e7 	bl	8008738 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001370:	f000 fc2c 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	240024b0 	.word	0x240024b0
 800137c:	40002000 	.word	0x40002000

08001380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_USART1_UART_Init+0x90>)
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <MX_USART1_UART_Init+0x94>)
 8001388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_USART1_UART_Init+0x90>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_USART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_USART1_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013ca:	f008 fa4b 	bl	8009864 <HAL_UART_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013d4:	f000 fbfa 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013dc:	f009 fb74 	bl	800aac8 <HAL_UARTEx_SetTxFifoThreshold>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013e6:	f000 fbf1 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013ee:	f009 fba9 	bl	800ab44 <HAL_UARTEx_SetRxFifoThreshold>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f000 fbe8 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_USART1_UART_Init+0x90>)
 80013fe:	f009 fb2a 	bl	800aa56 <HAL_UARTEx_DisableFifoMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001408:	f000 fbe0 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	24002310 	.word	0x24002310
 8001414:	40011000 	.word	0x40011000

08001418 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <MX_USART3_UART_Init+0x94>)
 8001420:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001462:	f008 f9ff 	bl	8009864 <HAL_UART_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800146c:	f000 fbae 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001474:	f009 fb28 	bl	800aac8 <HAL_UARTEx_SetTxFifoThreshold>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800147e:	f000 fba5 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001486:	f009 fb5d 	bl	800ab44 <HAL_UARTEx_SetRxFifoThreshold>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001490:	f000 fb9c 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_USART3_UART_Init+0x90>)
 8001496:	f009 fade 	bl	800aa56 <HAL_UARTEx_DisableFifoMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 fb94 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	24000158 	.word	0x24000158
 80014ac:	40004800 	.word	0x40004800

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4bbf      	ldr	r3, [pc, #764]	; (80017c4 <MX_GPIO_Init+0x314>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	4abd      	ldr	r2, [pc, #756]	; (80017c4 <MX_GPIO_Init+0x314>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d6:	4bbb      	ldr	r3, [pc, #748]	; (80017c4 <MX_GPIO_Init+0x314>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e4:	4bb7      	ldr	r3, [pc, #732]	; (80017c4 <MX_GPIO_Init+0x314>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	4ab6      	ldr	r2, [pc, #728]	; (80017c4 <MX_GPIO_Init+0x314>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f4:	4bb3      	ldr	r3, [pc, #716]	; (80017c4 <MX_GPIO_Init+0x314>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	4bb0      	ldr	r3, [pc, #704]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	4aae      	ldr	r2, [pc, #696]	; (80017c4 <MX_GPIO_Init+0x314>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001512:	4bac      	ldr	r3, [pc, #688]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4ba8      	ldr	r3, [pc, #672]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	4aa7      	ldr	r2, [pc, #668]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001530:	4ba4      	ldr	r3, [pc, #656]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	4ba1      	ldr	r3, [pc, #644]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	4a9f      	ldr	r2, [pc, #636]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154e:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <MX_GPIO_Init+0x314>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	4a98      	ldr	r2, [pc, #608]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156c:	4b95      	ldr	r3, [pc, #596]	; (80017c4 <MX_GPIO_Init+0x314>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157a:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <MX_GPIO_Init+0x314>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	4a90      	ldr	r2, [pc, #576]	; (80017c4 <MX_GPIO_Init+0x314>)
 8001582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158a:	4b8e      	ldr	r3, [pc, #568]	; (80017c4 <MX_GPIO_Init+0x314>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001598:	4b8a      	ldr	r3, [pc, #552]	; (80017c4 <MX_GPIO_Init+0x314>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	4a89      	ldr	r2, [pc, #548]	; (80017c4 <MX_GPIO_Init+0x314>)
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a8:	4b86      	ldr	r3, [pc, #536]	; (80017c4 <MX_GPIO_Init+0x314>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f240 4102 	movw	r1, #1026	; 0x402
 80015bc:	4882      	ldr	r0, [pc, #520]	; (80017c8 <MX_GPIO_Init+0x318>)
 80015be:	f003 fce5 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 80015c8:	4880      	ldr	r0, [pc, #512]	; (80017cc <MX_GPIO_Init+0x31c>)
 80015ca:	f003 fcdf 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 80015ce:	2200      	movs	r2, #0
 80015d0:	f24a 1138 	movw	r1, #41272	; 0xa138
 80015d4:	487e      	ldr	r0, [pc, #504]	; (80017d0 <MX_GPIO_Init+0x320>)
 80015d6:	f003 fcd9 	bl	8004f8c <HAL_GPIO_WritePin>
                          |ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MP_Relay_GPIO_Port, MP_Relay_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e0:	487c      	ldr	r0, [pc, #496]	; (80017d4 <MX_GPIO_Init+0x324>)
 80015e2:	f003 fcd3 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80015ec:	487a      	ldr	r0, [pc, #488]	; (80017d8 <MX_GPIO_Init+0x328>)
 80015ee:	f003 fccd 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin|MN_Relay_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	210c      	movs	r1, #12
 80015f6:	4879      	ldr	r0, [pc, #484]	; (80017dc <MX_GPIO_Init+0x32c>)
 80015f8:	f003 fcc8 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2160      	movs	r1, #96	; 0x60
 8001600:	4877      	ldr	r0, [pc, #476]	; (80017e0 <MX_GPIO_Init+0x330>)
 8001602:	f003 fcc3 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001606:	f240 3303 	movw	r3, #771	; 0x303
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001618:	230e      	movs	r3, #14
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4870      	ldr	r0, [pc, #448]	; (80017e4 <MX_GPIO_Init+0x334>)
 8001624:	f003 fb0a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001628:	f640 0303 	movw	r3, #2051	; 0x803
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800163a:	2309      	movs	r3, #9
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4862      	ldr	r0, [pc, #392]	; (80017d0 <MX_GPIO_Init+0x320>)
 8001646:	f003 faf9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800165c:	2309      	movs	r3, #9
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	485a      	ldr	r0, [pc, #360]	; (80017d0 <MX_GPIO_Init+0x320>)
 8001668:	f003 fae8 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 800166c:	2349      	movs	r3, #73	; 0x49
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167c:	230e      	movs	r3, #14
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4850      	ldr	r0, [pc, #320]	; (80017c8 <MX_GPIO_Init+0x318>)
 8001688:	f003 fad8 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 800168c:	f240 4302 	movw	r3, #1026	; 0x402
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	4619      	mov	r1, r3
 80016a4:	4848      	ldr	r0, [pc, #288]	; (80017c8 <MX_GPIO_Init+0x318>)
 80016a6:	f003 fac9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80016aa:	2330      	movs	r3, #48	; 0x30
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016ba:	230a      	movs	r3, #10
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4841      	ldr	r0, [pc, #260]	; (80017cc <MX_GPIO_Init+0x31c>)
 80016c6:	f003 fab9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 80016ca:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	483a      	ldr	r0, [pc, #232]	; (80017cc <MX_GPIO_Init+0x31c>)
 80016e4:	f003 faaa 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 80016e8:	f64b 0303 	movw	r3, #47107	; 0xb803
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016fa:	230e      	movs	r3, #14
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	4831      	ldr	r0, [pc, #196]	; (80017cc <MX_GPIO_Init+0x31c>)
 8001706:	f003 fa99 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : MP_IGBT_Pin LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 800170a:	f24a 1338 	movw	r3, #41272	; 0xa138
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	482b      	ldr	r0, [pc, #172]	; (80017d0 <MX_GPIO_Init+0x320>)
 8001724:	f003 fa8a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001728:	23b0      	movs	r3, #176	; 0xb0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001738:	230a      	movs	r3, #10
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4821      	ldr	r0, [pc, #132]	; (80017c8 <MX_GPIO_Init+0x318>)
 8001744:	f003 fa7a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001748:	2304      	movs	r3, #4
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001758:	230c      	movs	r3, #12
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <MX_GPIO_Init+0x318>)
 8001764:	f003 fa6a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 8001768:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800177a:	230c      	movs	r3, #12
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <MX_GPIO_Init+0x32c>)
 8001786:	f003 fa59 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800179c:	230d      	movs	r3, #13
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <MX_GPIO_Init+0x324>)
 80017a8:	f003 fa48 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 80017ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	e011      	b.n	80017e8 <MX_GPIO_Init+0x338>
 80017c4:	58024400 	.word	0x58024400
 80017c8:	58020c00 	.word	0x58020c00
 80017cc:	58021000 	.word	0x58021000
 80017d0:	58021800 	.word	0x58021800
 80017d4:	58020000 	.word	0x58020000
 80017d8:	58021400 	.word	0x58021400
 80017dc:	58020800 	.word	0x58020800
 80017e0:	58021c00 	.word	0x58021c00
 80017e4:	58020400 	.word	0x58020400
 80017e8:	4619      	mov	r1, r3
 80017ea:	48bc      	ldr	r0, [pc, #752]	; (8001adc <MX_GPIO_Init+0x62c>)
 80017ec:	f003 fa26 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	48b6      	ldr	r0, [pc, #728]	; (8001ae0 <MX_GPIO_Init+0x630>)
 8001808:	f003 fa18 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 800180c:	2304      	movs	r3, #4
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800181c:	2309      	movs	r3, #9
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	48af      	ldr	r0, [pc, #700]	; (8001ae4 <MX_GPIO_Init+0x634>)
 8001828:	f003 fa08 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 800182c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800183e:	230e      	movs	r3, #14
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	48a7      	ldr	r0, [pc, #668]	; (8001ae8 <MX_GPIO_Init+0x638>)
 800184a:	f003 f9f7 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 800184e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001860:	2303      	movs	r3, #3
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	489f      	ldr	r0, [pc, #636]	; (8001ae8 <MX_GPIO_Init+0x638>)
 800186c:	f003 f9e6 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001882:	230a      	movs	r3, #10
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4893      	ldr	r0, [pc, #588]	; (8001adc <MX_GPIO_Init+0x62c>)
 800188e:	f003 f9d5 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001892:	f648 7308 	movw	r3, #36616	; 0x8f08
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018a4:	230e      	movs	r3, #14
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	488f      	ldr	r0, [pc, #572]	; (8001aec <MX_GPIO_Init+0x63c>)
 80018b0:	f003 f9c4 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MP_Relay_Pin */
  GPIO_InitStruct.Pin = MP_Relay_Pin;
 80018b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MP_Relay_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4883      	ldr	r0, [pc, #524]	; (8001adc <MX_GPIO_Init+0x62c>)
 80018ce:	f003 f9b5 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80018d2:	23c0      	movs	r3, #192	; 0xc0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018e2:	230e      	movs	r3, #14
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	487c      	ldr	r0, [pc, #496]	; (8001ae0 <MX_GPIO_Init+0x630>)
 80018ee:	f003 f9a5 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 80018f2:	2340      	movs	r3, #64	; 0x40
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001902:	2306      	movs	r3, #6
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4875      	ldr	r0, [pc, #468]	; (8001ae4 <MX_GPIO_Init+0x634>)
 800190e:	f003 f995 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 8001912:	f241 031f 	movw	r3, #4127	; 0x101f
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001924:	2309      	movs	r3, #9
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	4619      	mov	r1, r3
 800192e:	4870      	ldr	r0, [pc, #448]	; (8001af0 <MX_GPIO_Init+0x640>)
 8001930:	f003 f984 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001934:	2340      	movs	r3, #64	; 0x40
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001944:	230a      	movs	r3, #10
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	4866      	ldr	r0, [pc, #408]	; (8001ae8 <MX_GPIO_Init+0x638>)
 8001950:	f003 f974 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001954:	2304      	movs	r3, #4
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	485f      	ldr	r0, [pc, #380]	; (8001ae8 <MX_GPIO_Init+0x638>)
 800196a:	f003 f967 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_FS_B_Pin;
 800196e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001980:	2306      	movs	r3, #6
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4859      	ldr	r0, [pc, #356]	; (8001af0 <MX_GPIO_Init+0x640>)
 800198c:	f003 f956 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001990:	2320      	movs	r3, #32
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	4852      	ldr	r0, [pc, #328]	; (8001af0 <MX_GPIO_Init+0x640>)
 80019a6:	f003 f949 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 80019aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019bc:	2309      	movs	r3, #9
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	484b      	ldr	r0, [pc, #300]	; (8001af4 <MX_GPIO_Init+0x644>)
 80019c8:	f003 f938 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_IGBT_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = PC_IGBT_Pin|STMOD_20_Pin;
 80019cc:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	4842      	ldr	r0, [pc, #264]	; (8001af0 <MX_GPIO_Init+0x640>)
 80019e6:	f003 f929 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019fc:	2309      	movs	r3, #9
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	483a      	ldr	r0, [pc, #232]	; (8001af0 <MX_GPIO_Init+0x640>)
 8001a08:	f003 f918 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001a0c:	2332      	movs	r3, #50	; 0x32
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	482e      	ldr	r0, [pc, #184]	; (8001ae0 <MX_GPIO_Init+0x630>)
 8001a28:	f003 f908 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001a2c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a3e:	230b      	movs	r3, #11
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	482b      	ldr	r0, [pc, #172]	; (8001af8 <MX_GPIO_Init+0x648>)
 8001a4a:	f003 f8f7 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_IGBT_Pin MN_Relay_Pin */
  GPIO_InitStruct.Pin = MN_IGBT_Pin|MN_Relay_Pin;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	4619      	mov	r1, r3
 8001a64:	481e      	ldr	r0, [pc, #120]	; (8001ae0 <MX_GPIO_Init+0x630>)
 8001a66:	f003 f8e9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	4619      	mov	r1, r3
 8001a84:	4819      	ldr	r0, [pc, #100]	; (8001aec <MX_GPIO_Init+0x63c>)
 8001a86:	f003 f8d9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 8001a8a:	2318      	movs	r3, #24
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <MX_GPIO_Init+0x62c>)
 8001aa6:	f003 f8c9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001aaa:	2386      	movs	r3, #134	; 0x86
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aba:	230b      	movs	r3, #11
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_GPIO_Init+0x62c>)
 8001ac6:	f003 f8b9 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad8:	e010      	b.n	8001afc <MX_GPIO_Init+0x64c>
 8001ada:	bf00      	nop
 8001adc:	58020000 	.word	0x58020000
 8001ae0:	58020800 	.word	0x58020800
 8001ae4:	58021000 	.word	0x58021000
 8001ae8:	58021800 	.word	0x58021800
 8001aec:	58021c00 	.word	0x58021c00
 8001af0:	58021400 	.word	0x58021400
 8001af4:	58020c00 	.word	0x58020c00
 8001af8:	58020400 	.word	0x58020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b00:	2305      	movs	r3, #5
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	482c      	ldr	r0, [pc, #176]	; (8001bbc <MX_GPIO_Init+0x70c>)
 8001b0c:	f003 f896 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <MX_GPIO_Init+0x710>)
 8001b28:	f003 f888 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <MX_GPIO_Init+0x714>)
 8001b44:	f003 f87a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001b48:	2310      	movs	r3, #16
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b58:	2309      	movs	r3, #9
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <MX_GPIO_Init+0x714>)
 8001b64:	f003 f86a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001b78:	230a      	movs	r3, #10
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <MX_GPIO_Init+0x718>)
 8001b84:	f003 f85a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001b88:	2360      	movs	r3, #96	; 0x60
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <MX_GPIO_Init+0x714>)
 8001ba0:	f003 f84c 	bl	8004c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2028      	movs	r0, #40	; 0x28
 8001baa:	f002 fb58 	bl	800425e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bae:	2028      	movs	r0, #40	; 0x28
 8001bb0:	f002 fb6f 	bl	8004292 <HAL_NVIC_EnableIRQ>

}
 8001bb4:	bf00      	nop
 8001bb6:	3738      	adds	r7, #56	; 0x38
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	58021400 	.word	0x58021400
 8001bc0:	58021000 	.word	0x58021000
 8001bc4:	58021c00 	.word	0x58021c00
 8001bc8:	58020400 	.word	0x58020400

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <Error_Handler+0x8>
	...

08001bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_MspInit+0x30>)
 8001be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x30>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x30>)
 8001bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	58024400 	.word	0x58024400

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6c      	ldr	r2, [pc, #432]	; (8001ddc <HAL_ADC_MspInit+0x1d0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14e      	bne.n	8001ccc <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c2e:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <HAL_ADC_MspInit+0x1d4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_ADC_MspInit+0x1d4>)
 8001c36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c38:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <HAL_ADC_MspInit+0x1d4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10e      	bne.n	8001c5e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c46:	4a67      	ldr	r2, [pc, #412]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001caa:	4619      	mov	r1, r3
 8001cac:	484e      	ldr	r0, [pc, #312]	; (8001de8 <HAL_ADC_MspInit+0x1dc>)
 8001cae:	f002 ffc5 	bl	8004c3c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001cb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001cba:	f000 fe71 	bl	80029a0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001cbe:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001cc2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001cc6:	f000 fe6b 	bl	80029a0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cca:	e082      	b.n	8001dd2 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a46      	ldr	r2, [pc, #280]	; (8001dec <HAL_ADC_MspInit+0x1e0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d133      	bne.n	8001d3e <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_ADC_MspInit+0x1d4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <HAL_ADC_MspInit+0x1d4>)
 8001cde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_ADC_MspInit+0x1d4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10e      	bne.n	8001d06 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001cea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cee:	4a3d      	ldr	r2, [pc, #244]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d28:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001d2c:	f000 fe38 	bl	80029a0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001d30:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001d34:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001d38:	f000 fe32 	bl	80029a0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001d3c:	e049      	b.n	8001dd2 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <HAL_ADC_MspInit+0x1e4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d144      	bne.n	8001dd2 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_ADC_MspInit+0x1d8>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001da2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001da6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001daa:	f000 fdf9 	bl	80029a0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001dae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001db2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001db6:	f000 fdf3 	bl	80029a0 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <HAL_ADC_MspInit+0x1e8>)
 8001dce:	f002 ff35 	bl	8004c3c <HAL_GPIO_Init>
}
 8001dd2:	bf00      	nop
 8001dd4:	3740      	adds	r7, #64	; 0x40
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	24000098 	.word	0x24000098
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58020800 	.word	0x58020800
 8001dec:	40022100 	.word	0x40022100
 8001df0:	58026000 	.word	0x58026000
 8001df4:	58021c00 	.word	0x58021c00

08001df8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_DAC_MspInit+0x80>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d129      	bne.n	8001e6e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_DAC_MspInit+0x84>)
 8001e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_DAC_MspInit+0x84>)
 8001e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_DAC_MspInit+0x84>)
 8001e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_DAC_MspInit+0x84>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_DAC_MspInit+0x84>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_DAC_MspInit+0x84>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001e56:	2320      	movs	r3, #32
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <HAL_DAC_MspInit+0x88>)
 8001e6a:	f002 fee7 	bl	8004c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	; 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40007400 	.word	0x40007400
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	58020000 	.word	0x58020000

08001e84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0b8      	sub	sp, #224	; 0xe0
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 0318 	add.w	r3, r7, #24
 8001ea0:	22b4      	movs	r2, #180	; 0xb4
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f008 ff11 	bl	800accc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_FDCAN_MspInit+0x17c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d14e      	bne.n	8001f52 <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 f94e 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001ed2:	f7ff fe7b 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ed6:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <HAL_FDCAN_MspInit+0x180>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a49      	ldr	r2, [pc, #292]	; (8002004 <HAL_FDCAN_MspInit+0x180>)
 8001ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ee0:	4b48      	ldr	r3, [pc, #288]	; (8002004 <HAL_FDCAN_MspInit+0x180>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10e      	bne.n	8001f06 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001eea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001eee:	4a46      	ldr	r2, [pc, #280]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	4a3e      	ldr	r2, [pc, #248]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f16:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001f24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f3e:	2309      	movs	r3, #9
 8001f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4830      	ldr	r0, [pc, #192]	; (800200c <HAL_FDCAN_MspInit+0x188>)
 8001f4c:	f002 fe76 	bl	8004c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f50:	e051      	b.n	8001ff6 <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <HAL_FDCAN_MspInit+0x18c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d14c      	bne.n	8001ff6 <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f8fa 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001f7a:	f7ff fe27 	bl	8001bcc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_FDCAN_MspInit+0x180>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_FDCAN_MspInit+0x180>)
 8001f86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_FDCAN_MspInit+0x180>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10e      	bne.n	8001fae <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001f92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001fa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_FDCAN_MspInit+0x184>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001fcc:	2360      	movs	r3, #96	; 0x60
 8001fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001fe4:	2309      	movs	r3, #9
 8001fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <HAL_FDCAN_MspInit+0x190>)
 8001ff2:	f002 fe23 	bl	8004c3c <HAL_GPIO_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	37e0      	adds	r7, #224	; 0xe0
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	4000a000 	.word	0x4000a000
 8002004:	2400009c 	.word	0x2400009c
 8002008:	58024400 	.word	0x58024400
 800200c:	58021c00 	.word	0x58021c00
 8002010:	4000a400 	.word	0x4000a400
 8002014:	58020400 	.word	0x58020400

08002018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b6      	sub	sp, #216	; 0xd8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	22b4      	movs	r2, #180	; 0xb4
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f008 fe47 	bl	800accc <memset>
  if(hi2c->Instance==I2C4)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_I2C_MspInit+0xc0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d142      	bne.n	80020ce <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002048:	2310      	movs	r3, #16
 800204a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f886 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002062:	f7ff fdb3 	bl	8001bcc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_I2C_MspInit+0xc4>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_I2C_MspInit+0xc4>)
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_I2C_MspInit+0xc4>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8002084:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002092:	2301      	movs	r3, #1
 8002094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800209e:	2304      	movs	r3, #4
 80020a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020a8:	4619      	mov	r1, r3
 80020aa:	480d      	ldr	r0, [pc, #52]	; (80020e0 <HAL_I2C_MspInit+0xc8>)
 80020ac:	f002 fdc6 	bl	8004c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_I2C_MspInit+0xc4>)
 80020b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_I2C_MspInit+0xc4>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_I2C_MspInit+0xc4>)
 80020c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	37d8      	adds	r7, #216	; 0xd8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	58001c00 	.word	0x58001c00
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58021400 	.word	0x58021400

080020e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0b0      	sub	sp, #192	; 0xc0
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	22b4      	movs	r2, #180	; 0xb4
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f008 fde9 	bl	800accc <memset>
  if(hrtc->Instance==RTC)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_RTC_MspInit+0x58>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d116      	bne.n	8002132 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002108:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800210a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4618      	mov	r0, r3
 8002118:	f004 f826 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002122:	f7ff fd53 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RTC_MspInit+0x5c>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_RTC_MspInit+0x5c>)
 800212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	37c0      	adds	r7, #192	; 0xc0
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	58004000 	.word	0x58004000
 8002140:	58024400 	.word	0x58024400

08002144 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <HAL_TIM_PWM_MspInit+0x90>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10f      	bne.n	8002176 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800215c:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002174:	e028      	b.n	80021c8 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_TIM_PWM_MspInit+0x98>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d10f      	bne.n	80021a0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
}
 800219e:	e013      	b.n	80021c8 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_TIM_PWM_MspInit+0x9c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 80021ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b0:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_TIM_PWM_MspInit+0x94>)
 80021bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	bf00      	nop
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40010000 	.word	0x40010000
 80021d8:	58024400 	.word	0x58024400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_TIM_Base_MspInit+0x74>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d117      	bne.n	8002226 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_TIM_Base_MspInit+0x78>)
 80021f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_TIM_Base_MspInit+0x78>)
 80021fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002202:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_TIM_Base_MspInit+0x78>)
 8002208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	202c      	movs	r0, #44	; 0x2c
 800221a:	f002 f820 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800221e:	202c      	movs	r0, #44	; 0x2c
 8002220:	f002 f837 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002224:	e013      	b.n	800224e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM14)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_TIM_Base_MspInit+0x7c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10e      	bne.n	800224e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_TIM_Base_MspInit+0x78>)
 8002232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <HAL_TIM_Base_MspInit+0x78>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_TIM_Base_MspInit+0x78>)
 8002242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40001c00 	.word	0x40001c00
 800225c:	58024400 	.word	0x58024400
 8002260:	40002000 	.word	0x40002000

08002264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_TIM_MspPostInit+0x140>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d120      	bne.n	80022c8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002286:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228c:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002296:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 8002298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 80022a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	483a      	ldr	r0, [pc, #232]	; (80023ac <HAL_TIM_MspPostInit+0x148>)
 80022c2:	f002 fcbb 	bl	8004c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80022c6:	e068      	b.n	800239a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a38      	ldr	r2, [pc, #224]	; (80023b0 <HAL_TIM_MspPostInit+0x14c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d13f      	bne.n	8002352 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800231e:	2302      	movs	r3, #2
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	4822      	ldr	r0, [pc, #136]	; (80023b4 <HAL_TIM_MspPostInit+0x150>)
 800232a:	f002 fc87 	bl	8004c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 800232e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002340:	2302      	movs	r3, #2
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	481b      	ldr	r0, [pc, #108]	; (80023b8 <HAL_TIM_MspPostInit+0x154>)
 800234c:	f002 fc76 	bl	8004c3c <HAL_GPIO_Init>
}
 8002350:	e023      	b.n	800239a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_TIM_MspPostInit+0x158>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d11e      	bne.n	800239a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002362:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_TIM_MspPostInit+0x144>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800238a:	2302      	movs	r3, #2
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	4619      	mov	r1, r3
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <HAL_TIM_MspPostInit+0x15c>)
 8002396:	f002 fc51 	bl	8004c3c <HAL_GPIO_Init>
}
 800239a:	bf00      	nop
 800239c:	3730      	adds	r7, #48	; 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58021000 	.word	0x58021000
 80023b0:	40000800 	.word	0x40000800
 80023b4:	58020400 	.word	0x58020400
 80023b8:	58020c00 	.word	0x58020c00
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	58020000 	.word	0x58020000

080023c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0b8      	sub	sp, #224	; 0xe0
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023dc:	f107 0318 	add.w	r3, r7, #24
 80023e0:	22b4      	movs	r2, #180	; 0xb4
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f008 fc71 	bl	800accc <memset>
  if(huart->Instance==USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_UART_MspInit+0x150>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d143      	bne.n	800247c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	4618      	mov	r0, r3
 8002404:	f003 feb0 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800240e:	f7ff fbdd 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_UART_MspInit+0x154>)
 8002414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002418:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <HAL_UART_MspInit+0x154>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_UART_MspInit+0x154>)
 8002424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_UART_MspInit+0x154>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002436:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_UART_MspInit+0x154>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <HAL_UART_MspInit+0x154>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800244e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002468:	2304      	movs	r3, #4
 800246a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002472:	4619      	mov	r1, r3
 8002474:	4829      	ldr	r0, [pc, #164]	; (800251c <HAL_UART_MspInit+0x158>)
 8002476:	f002 fbe1 	bl	8004c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800247a:	e047      	b.n	800250c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_UART_MspInit+0x15c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d142      	bne.n	800250c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002486:	2302      	movs	r3, #2
 8002488:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fe67 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80024a0:	f7ff fb94 	bl	8001bcc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_UART_MspInit+0x154>)
 80024a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024aa:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_UART_MspInit+0x154>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_UART_MspInit+0x154>)
 80024b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_UART_MspInit+0x154>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_UART_MspInit+0x154>)
 80024ca:	f043 0308 	orr.w	r3, r3, #8
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_UART_MspInit+0x154>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80024e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024fa:	2307      	movs	r3, #7
 80024fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002500:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002504:	4619      	mov	r1, r3
 8002506:	4807      	ldr	r0, [pc, #28]	; (8002524 <HAL_UART_MspInit+0x160>)
 8002508:	f002 fb98 	bl	8004c3c <HAL_GPIO_Init>
}
 800250c:	bf00      	nop
 800250e:	37e0      	adds	r7, #224	; 0xe0
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40011000 	.word	0x40011000
 8002518:	58024400 	.word	0x58024400
 800251c:	58020400 	.word	0x58020400
 8002520:	40004800 	.word	0x40004800
 8002524:	58020c00 	.word	0x58020c00

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	e7fe      	b.n	800252c <NMI_Handler+0x4>

0800252e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <MemManage_Handler+0x4>

0800253a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <UsageFault_Handler+0x4>

08002546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002574:	f000 f9d0 	bl	8002918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002580:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002584:	f002 fd1b 	bl	8004fbe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800258c:	f002 fd17 	bl	8004fbe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800259a:	f006 fa31 	bl	8008a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	240022c4 	.word	0x240022c4

080025a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e00a      	b.n	80025d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ba:	f3af 8000 	nop.w
 80025be:	4601      	mov	r1, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	b2ca      	uxtb	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbf0      	blt.n	80025ba <_read+0x12>
	}

return len;
 80025d8:	687b      	ldr	r3, [r7, #4]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e009      	b.n	8002608 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60ba      	str	r2, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe f853 	bl	80006a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbf1      	blt.n	80025f4 <_write+0x12>
	}
	return len;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_close>:

int _close(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	return -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002642:	605a      	str	r2, [r3, #4]
	return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_isatty>:

int _isatty(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	return 1;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <_sbrk+0x5c>)
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_sbrk+0x60>)
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <_sbrk+0x64>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <_sbrk+0x68>)
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d207      	bcs.n	80026c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b4:	f008 fad2 	bl	800ac5c <__errno>
 80026b8:	4603      	mov	r3, r0
 80026ba:	220c      	movs	r2, #12
 80026bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e009      	b.n	80026d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <_sbrk+0x64>)
 80026d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	24050000 	.word	0x24050000
 80026e4:	00000400 	.word	0x00000400
 80026e8:	240000a0 	.word	0x240000a0
 80026ec:	240025b0 	.word	0x240025b0

080026f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026f4:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <SystemInit+0xd0>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <SystemInit+0xd0>)
 80026fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002704:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <SystemInit+0xd4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	2b06      	cmp	r3, #6
 800270e:	d807      	bhi.n	8002720 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <SystemInit+0xd4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 030f 	bic.w	r3, r3, #15
 8002718:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <SystemInit+0xd4>)
 800271a:	f043 0307 	orr.w	r3, r3, #7
 800271e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <SystemInit+0xd8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <SystemInit+0xd8>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800272c:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <SystemInit+0xd8>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <SystemInit+0xd8>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4924      	ldr	r1, [pc, #144]	; (80027c8 <SystemInit+0xd8>)
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <SystemInit+0xdc>)
 800273a:	4013      	ands	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <SystemInit+0xd4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <SystemInit+0xd4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 030f 	bic.w	r3, r3, #15
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <SystemInit+0xd4>)
 8002754:	f043 0307 	orr.w	r3, r3, #7
 8002758:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <SystemInit+0xd8>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <SystemInit+0xd8>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <SystemInit+0xd8>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <SystemInit+0xd8>)
 800276e:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <SystemInit+0xe0>)
 8002770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <SystemInit+0xd8>)
 8002774:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <SystemInit+0xe4>)
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <SystemInit+0xd8>)
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <SystemInit+0xe8>)
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <SystemInit+0xd8>)
 8002780:	2200      	movs	r2, #0
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <SystemInit+0xd8>)
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <SystemInit+0xe8>)
 8002788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <SystemInit+0xd8>)
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <SystemInit+0xd8>)
 8002792:	4a11      	ldr	r2, [pc, #68]	; (80027d8 <SystemInit+0xe8>)
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <SystemInit+0xd8>)
 8002798:	2200      	movs	r2, #0
 800279a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <SystemInit+0xd8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <SystemInit+0xd8>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <SystemInit+0xd8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <SystemInit+0xec>)
 80027b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027b4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00
 80027c4:	52002000 	.word	0x52002000
 80027c8:	58024400 	.word	0x58024400
 80027cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80027d0:	02020200 	.word	0x02020200
 80027d4:	01ff0000 	.word	0x01ff0000
 80027d8:	01010280 	.word	0x01010280
 80027dc:	52004000 	.word	0x52004000

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027e4:	f7ff ff84 	bl	80026f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e8:	480c      	ldr	r0, [pc, #48]	; (800281c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ea:	490d      	ldr	r1, [pc, #52]	; (8002820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f0:	e002      	b.n	80027f8 <LoopCopyDataInit>

080027f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f6:	3304      	adds	r3, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027fc:	d3f9      	bcc.n	80027f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002800:	4c0a      	ldr	r4, [pc, #40]	; (800282c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002804:	e001      	b.n	800280a <LoopFillZerobss>

08002806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002808:	3204      	adds	r2, #4

0800280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800280c:	d3fb      	bcc.n	8002806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280e:	f008 fa2b 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002812:	f7fe f84f 	bl	80008b4 <main>
  bx  lr
 8002816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002818:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800281c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002820:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002824:	0800be18 	.word	0x0800be18
  ldr r2, =_sbss
 8002828:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800282c:	240025b0 	.word	0x240025b0

08002830 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC3_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283a:	2003      	movs	r0, #3
 800283c:	f001 fd04 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002840:	f003 fabc 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_Init+0x68>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	4913      	ldr	r1, [pc, #76]	; (80028a0 <HAL_Init+0x6c>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_Init+0x68>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_Init+0x6c>)
 8002868:	5cd3      	ldrb	r3, [r2, r3]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <HAL_Init+0x70>)
 8002876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002878:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <HAL_Init+0x74>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800287e:	2000      	movs	r0, #0
 8002880:	f000 f814 	bl	80028ac <HAL_InitTick>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e002      	b.n	8002894 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800288e:	f7ff f9a3 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	58024400 	.word	0x58024400
 80028a0:	0800bd38 	.word	0x0800bd38
 80028a4:	24000004 	.word	0x24000004
 80028a8:	24000000 	.word	0x24000000

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_InitTick+0x60>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e021      	b.n	8002904 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_InitTick+0x64>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_InitTick+0x60>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 fce9 	bl	80042ae <HAL_SYSTICK_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00e      	b.n	8002904 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	d80a      	bhi.n	8002902 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ec:	2200      	movs	r2, #0
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f001 fcb3 	bl	800425e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f8:	4a06      	ldr	r2, [pc, #24]	; (8002914 <HAL_InitTick+0x68>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2400000c 	.word	0x2400000c
 8002910:	24000000 	.word	0x24000000
 8002914:	24000008 	.word	0x24000008

08002918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_IncTick+0x20>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x24>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4413      	add	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_IncTick+0x24>)
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	2400000c 	.word	0x2400000c
 800293c:	2400259c 	.word	0x2400259c

08002940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return uwTick;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_GetTick+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	2400259c 	.word	0x2400259c

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff ffee 	bl	8002940 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d005      	beq.n	800297e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_Delay+0x44>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297e:	bf00      	nop
 8002980:	f7ff ffde 	bl	8002940 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d8f7      	bhi.n	8002980 <HAL_Delay+0x28>
  {
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2400000c 	.word	0x2400000c

080029a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	58000400 	.word	0x58000400

080029cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <LL_ADC_SetOffset+0x60>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10b      	bne.n	8002a70 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a6e:	e00b      	b.n	8002a88 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	58026000 	.word	0x58026000

08002a98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3360      	adds	r3, #96	; 0x60
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	601a      	str	r2, [r3, #0]
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	58026000 	.word	0x58026000

08002b3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <LL_ADC_SetOffsetSaturation+0x40>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10e      	bne.n	8002b6e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	58026000 	.word	0x58026000

08002b80 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <LL_ADC_SetOffsetSign+0x40>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10e      	bne.n	8002bb2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3360      	adds	r3, #96	; 0x60
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	58026000 	.word	0x58026000

08002bc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3360      	adds	r3, #96	; 0x60
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <LL_ADC_SetOffsetState+0x50>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002bf6:	e007      	b.n	8002c08 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	58026000 	.word	0x58026000

08002c18 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3330      	adds	r3, #48	; 0x30
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	211f      	movs	r1, #31
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 011f 	and.w	r1, r3, #31
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0e5b      	lsrs	r3, r3, #25
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0d1b      	lsrs	r3, r3, #20
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2107      	movs	r1, #7
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d115      	bne.n	8002d08 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	401a      	ands	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0318 	and.w	r3, r3, #24
 8002cf2:	4914      	ldr	r1, [pc, #80]	; (8002d44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002cf4:	40d9      	lsrs	r1, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d06:	e014      	b.n	8002d32 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0318 	and.w	r3, r3, #24
 8002d1e:	4909      	ldr	r1, [pc, #36]	; (8002d44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d20:	40d9      	lsrs	r1, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	400b      	ands	r3, r1
 8002d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	58026000 	.word	0x58026000
 8002d44:	000fffff 	.word	0x000fffff

08002d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	5fffffc0 	.word	0x5fffffc0

08002d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	6fffffc0 	.word	0x6fffffc0

08002dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <LL_ADC_IsEnabled+0x18>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <LL_ADC_IsEnabled+0x1a>
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d101      	bne.n	8002e48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1ee      	b.n	8003250 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fe fec3 	bl	8001c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff67 	bl	8002d6c <LL_ADC_IsDeepPowerDownEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff4d 	bl	8002d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff82 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d114      	bne.n	8002ee8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff66 	bl	8002d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec8:	4b8e      	ldr	r3, [pc, #568]	; (8003104 <HAL_ADC_Init+0x2ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	4a8e      	ldr	r2, [pc, #568]	; (8003108 <HAL_ADC_Init+0x2b0>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eda:	e002      	b.n	8002ee2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f9      	bne.n	8002edc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff65 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff76 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 8002f1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 8188 	bne.w	800323e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 8184 	bne.w	800323e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff4a 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d136      	bne.n	8002fc4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6c      	ldr	r2, [pc, #432]	; (800310c <HAL_ADC_Init+0x2b4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_ADC_Init+0x112>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_ADC_Init+0x2b8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10e      	bne.n	8002f88 <HAL_ADC_Init+0x130>
 8002f6a:	4868      	ldr	r0, [pc, #416]	; (800310c <HAL_ADC_Init+0x2b4>)
 8002f6c:	f7ff ff3a 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f70:	4604      	mov	r4, r0
 8002f72:	4867      	ldr	r0, [pc, #412]	; (8003110 <HAL_ADC_Init+0x2b8>)
 8002f74:	f7ff ff36 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e008      	b.n	8002f9a <HAL_ADC_Init+0x142>
 8002f88:	4862      	ldr	r0, [pc, #392]	; (8003114 <HAL_ADC_Init+0x2bc>)
 8002f8a:	f7ff ff2b 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	; (800310c <HAL_ADC_Init+0x2b4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_Init+0x15a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_ADC_Init+0x2b8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Init+0x15e>
 8002fb2:	4a59      	ldr	r2, [pc, #356]	; (8003118 <HAL_ADC_Init+0x2c0>)
 8002fb4:	e000      	b.n	8002fb8 <HAL_ADC_Init+0x160>
 8002fb6:	4a59      	ldr	r2, [pc, #356]	; (800311c <HAL_ADC_Init+0x2c4>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7ff fd04 	bl	80029cc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_ADC_Init+0x2bc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d129      	bne.n	8003022 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7e5b      	ldrb	r3, [r3, #25]
 8002fd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002fd8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002fde:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d013      	beq.n	8003010 <HAL_ADC_Init+0x1b8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d00d      	beq.n	800300c <HAL_ADC_Init+0x1b4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b1c      	cmp	r3, #28
 8002ff6:	d007      	beq.n	8003008 <HAL_ADC_Init+0x1b0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b18      	cmp	r3, #24
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_Init+0x1ac>
 8003000:	2318      	movs	r3, #24
 8003002:	e006      	b.n	8003012 <HAL_ADC_Init+0x1ba>
 8003004:	2300      	movs	r3, #0
 8003006:	e004      	b.n	8003012 <HAL_ADC_Init+0x1ba>
 8003008:	2310      	movs	r3, #16
 800300a:	e002      	b.n	8003012 <HAL_ADC_Init+0x1ba>
 800300c:	2308      	movs	r3, #8
 800300e:	e000      	b.n	8003012 <HAL_ADC_Init+0x1ba>
 8003010:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003012:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800301a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e00e      	b.n	8003040 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7e5b      	ldrb	r3, [r3, #25]
 8003026:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800302c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003032:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	3b01      	subs	r3, #1
 8003050:	045b      	lsls	r3, r3, #17
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a26      	ldr	r2, [pc, #152]	; (8003114 <HAL_ADC_Init+0x2bc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d115      	bne.n	80030aa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_ADC_Init+0x2c8>)
 8003086:	4013      	ands	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	430b      	orrs	r3, r1
 8003090:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	611a      	str	r2, [r3, #16]
 80030a8:	e009      	b.n	80030be <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_ADC_Init+0x2cc>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	69b9      	ldr	r1, [r7, #24]
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fea1 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 80030c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff feae 	bl	8002e30 <LL_ADC_INJ_IsConversionOngoing>
 80030d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 808e 	bne.w	80031fa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 808a 	bne.w	80031fa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_ADC_Init+0x2bc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d11b      	bne.n	8003128 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
 80030f4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030fc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e018      	b.n	8003136 <HAL_ADC_Init+0x2de>
 8003104:	24000000 	.word	0x24000000
 8003108:	053e2d63 	.word	0x053e2d63
 800310c:	40022000 	.word	0x40022000
 8003110:	40022100 	.word	0x40022100
 8003114:	58026000 	.word	0x58026000
 8003118:	40022300 	.word	0x40022300
 800311c:	58026300 	.word	0x58026300
 8003120:	fff04007 	.word	0xfff04007
 8003124:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7e1b      	ldrb	r3, [r3, #24]
 800312c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_ADC_Init+0x400>)
 800313e:	4013      	ands	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	69b9      	ldr	r1, [r7, #24]
 8003146:	430b      	orrs	r3, r1
 8003148:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003150:	2b01      	cmp	r3, #1
 8003152:	d137      	bne.n	80031c4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3f      	ldr	r2, [pc, #252]	; (800325c <HAL_ADC_Init+0x404>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d116      	bne.n	8003192 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_ADC_Init+0x408>)
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	e020      	b.n	80031d4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_ADC_Init+0x40c>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031a0:	3a01      	subs	r2, #1
 80031a2:	0411      	lsls	r1, r2, #16
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80031b4:	430a      	orrs	r2, r1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
 80031c2:	e007      	b.n	80031d4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_ADC_Init+0x404>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d002      	beq.n	80031fa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fd63 	bl	8003cc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10c      	bne.n	800321c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f023 010f 	bic.w	r1, r3, #15
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
 800321a:	e007      	b.n	800322c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020f 	bic.w	r2, r2, #15
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	f023 0303 	bic.w	r3, r3, #3
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	661a      	str	r2, [r3, #96]	; 0x60
 800323c:	e007      	b.n	800324e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800324e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3724      	adds	r7, #36	; 0x24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd90      	pop	{r4, r7, pc}
 8003258:	ffffbffc 	.word	0xffffbffc
 800325c:	58026000 	.word	0x58026000
 8003260:	fc00f81f 	.word	0xfc00f81f
 8003264:	fc00f81e 	.word	0xfc00f81e

08003268 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b0b9      	sub	sp, #228	; 0xe4
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003282:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4ab3      	ldr	r2, [pc, #716]	; (8003558 <HAL_ADC_ConfigChannel+0x2f0>)
 800328a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_ADC_ConfigChannel+0x34>
 8003296:	2302      	movs	r3, #2
 8003298:	f000 bcfa 	b.w	8003c90 <HAL_ADC_ConfigChannel+0xa28>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fdae 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 84de 	bne.w	8003c72 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4aa8      	ldr	r2, [pc, #672]	; (800355c <HAL_ADC_ConfigChannel+0x2f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d033      	beq.n	8003328 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <HAL_ADC_ConfigChannel+0x76>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2201      	movs	r2, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	e01d      	b.n	800331a <HAL_ADC_ConfigChannel+0xb2>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e004      	b.n	8003310 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2201      	movs	r2, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	69d1      	ldr	r1, [r2, #28]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	430b      	orrs	r3, r1
 8003326:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	f7ff fc6f 	bl	8002c18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fd63 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 8003344:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fd6f 	bl	8002e30 <LL_ADC_INJ_IsConversionOngoing>
 8003352:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8270 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003360:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 826b 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	461a      	mov	r2, r3
 8003378:	f7ff fc7a 	bl	8002c70 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a76      	ldr	r2, [pc, #472]	; (800355c <HAL_ADC_ConfigChannel+0x2f4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10d      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033a0:	e032      	b.n	8003408 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033a2:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_ADC_ConfigChannel+0x2f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ae:	d10b      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x160>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	e01d      	b.n	8003404 <HAL_ADC_ConfigChannel+0x19c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x186>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	e00a      	b.n	8003404 <HAL_ADC_ConfigChannel+0x19c>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d048      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6919      	ldr	r1, [r3, #16]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003420:	f7ff fb08 	bl	8002a34 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4c      	ldr	r2, [pc, #304]	; (800355c <HAL_ADC_ConfigChannel+0x2f4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d119      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6919      	ldr	r1, [r3, #16]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	461a      	mov	r2, r3
 800343c:	f7ff fba0 	bl	8002b80 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6919      	ldr	r1, [r3, #16]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1f0>
 8003452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003456:	e000      	b.n	800345a <HAL_ADC_ConfigChannel+0x1f2>
 8003458:	2300      	movs	r3, #0
 800345a:	461a      	mov	r2, r3
 800345c:	f7ff fb6e 	bl	8002b3c <LL_ADC_SetOffsetSaturation>
 8003460:	e1ee      	b.n	8003840 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_ADC_ConfigChannel+0x212>
 8003474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003478:	e000      	b.n	800347c <HAL_ADC_ConfigChannel+0x214>
 800347a:	2300      	movs	r3, #0
 800347c:	461a      	mov	r2, r3
 800347e:	f7ff fb3b 	bl	8002af8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	7e1b      	ldrb	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x230>
 8003492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003496:	e000      	b.n	800349a <HAL_ADC_ConfigChannel+0x232>
 8003498:	2300      	movs	r3, #0
 800349a:	461a      	mov	r2, r3
 800349c:	f7ff fb12 	bl	8002ac4 <LL_ADC_SetDataRightShift>
 80034a0:	e1ce      	b.n	8003840 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_ADC_ConfigChannel+0x2f4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	f040 8181 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff faef 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x272>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fae4 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_ConfigChannel+0x2b0>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fad9 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80034f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800350c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x2c8>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e01e      	b.n	800356e <HAL_ADC_ConfigChannel+0x306>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800354c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e00a      	b.n	800356e <HAL_ADC_ConfigChannel+0x306>
 8003558:	47ff0000 	.word	0x47ff0000
 800355c:	58026000 	.word	0x58026000
 8003560:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	429a      	cmp	r2, r3
 8003570:	d106      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fb22 	bl	8002bc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fa86 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 800358c:	4603      	mov	r3, r0
 800358e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x344>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fa7b 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 80035a2:	4603      	mov	r3, r0
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	f003 021f 	and.w	r2, r3, #31
 80035aa:	e01e      	b.n	80035ea <HAL_ADC_ConfigChannel+0x382>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fa70 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80035ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80035d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e004      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80035de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x39a>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	e018      	b.n	8003634 <HAL_ADC_ConfigChannel+0x3cc>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800361e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e004      	b.n	8003634 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800362a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	429a      	cmp	r2, r3
 8003636:	d106      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fabf 	bl	8002bc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fa23 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x40a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fa18 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	e01e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x448>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fa0d 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 800367e:	4603      	mov	r3, r0
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e004      	b.n	80036ae <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80036a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x460>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	e014      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x48a>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80036d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80036dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e004      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80036e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d106      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2102      	movs	r1, #2
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fa60 	bl	8002bc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2103      	movs	r1, #3
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f9c4 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x4c8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2103      	movs	r1, #3
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f9b9 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	f003 021f 	and.w	r2, r3, #31
 800372e:	e017      	b.n	8003760 <HAL_ADC_ConfigChannel+0x4f8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2103      	movs	r1, #3
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f9ae 	bl	8002a98 <LL_ADC_GetOffsetChannel>
 800373c:	4603      	mov	r3, r0
 800373e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800374c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e003      	b.n	800375e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x510>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	e011      	b.n	800379c <HAL_ADC_ConfigChannel+0x534>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003788:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800378a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	429a      	cmp	r2, r3
 800379e:	d14f      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2103      	movs	r1, #3
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fa0b 	bl	8002bc4 <LL_ADC_SetOffsetState>
 80037ae:	e047      	b.n	8003840 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	069b      	lsls	r3, r3, #26
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	069b      	lsls	r3, r3, #26
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d107      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037f6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	069b      	lsls	r3, r3, #26
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800381a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800383e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff facd 	bl	8002de4 <LL_ADC_IsEnabled>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 8219 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f7ff fa32 	bl	8002cc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4aa1      	ldr	r2, [pc, #644]	; (8003af0 <HAL_ADC_ConfigChannel+0x888>)
 800386a:	4293      	cmp	r3, r2
 800386c:	f040 812e 	bne.w	8003acc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x630>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2b09      	cmp	r3, #9
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e019      	b.n	80038cc <HAL_ADC_ConfigChannel+0x664>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80038a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80038aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80038b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2b09      	cmp	r3, #9
 80038c4:	bf94      	ite	ls
 80038c6:	2301      	movls	r3, #1
 80038c8:	2300      	movhi	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d079      	beq.n	80039c4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x684>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	0e9b      	lsrs	r3, r3, #26
 80038e2:	3301      	adds	r3, #1
 80038e4:	069b      	lsls	r3, r3, #26
 80038e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ea:	e015      	b.n	8003918 <HAL_ADC_ConfigChannel+0x6b0>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80038fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	e003      	b.n	8003910 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	3301      	adds	r3, #1
 8003912:	069b      	lsls	r3, r3, #26
 8003914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x6d0>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	3301      	adds	r3, #1
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	e017      	b.n	8003968 <HAL_ADC_ConfigChannel+0x700>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800394a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e003      	b.n	800395c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3301      	adds	r3, #1
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	ea42 0103 	orr.w	r1, r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_ADC_ConfigChannel+0x726>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	3301      	adds	r3, #1
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	051b      	lsls	r3, r3, #20
 800398c:	e018      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x758>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80039a6:	2320      	movs	r3, #32
 80039a8:	e003      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c0:	430b      	orrs	r3, r1
 80039c2:	e07e      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x778>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0e9b      	lsrs	r3, r3, #26
 80039d6:	3301      	adds	r3, #1
 80039d8:	069b      	lsls	r3, r3, #26
 80039da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039de:	e015      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x7a4>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e003      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	069b      	lsls	r3, r3, #26
 8003a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x7c4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	e017      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x7f4>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	61bb      	str	r3, [r7, #24]
  return result;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e003      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	ea42 0103 	orr.w	r1, r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x820>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	3301      	adds	r3, #1
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3b1e      	subs	r3, #30
 8003a80:	051b      	lsls	r3, r3, #20
 8003a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a86:	e01b      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x858>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	60fb      	str	r3, [r7, #12]
  return result;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	e003      	b.n	8003aac <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f003 021f 	and.w	r2, r3, #31
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b1e      	subs	r3, #30
 8003aba:	051b      	lsls	r3, r3, #20
 8003abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7ff f8d2 	bl	8002c70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f280 80d7 	bge.w	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a06      	ldr	r2, [pc, #24]	; (8003af4 <HAL_ADC_ConfigChannel+0x88c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x882>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_ADC_ConfigChannel+0x890>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10a      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x898>
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <HAL_ADC_ConfigChannel+0x894>)
 8003aec:	e009      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x89a>
 8003aee:	bf00      	nop
 8003af0:	47ff0000 	.word	0x47ff0000
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40022100 	.word	0x40022100
 8003afc:	40022300 	.word	0x40022300
 8003b00:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_ADC_ConfigChannel+0xa30>)
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe ff88 	bl	8002a18 <LL_ADC_GetCommonPathInternalCh>
 8003b08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a62      	ldr	r2, [pc, #392]	; (8003c9c <HAL_ADC_ConfigChannel+0xa34>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0x8b8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10e      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x8d6>
 8003b20:	485e      	ldr	r0, [pc, #376]	; (8003c9c <HAL_ADC_ConfigChannel+0xa34>)
 8003b22:	f7ff f95f 	bl	8002de4 <LL_ADC_IsEnabled>
 8003b26:	4604      	mov	r4, r0
 8003b28:	485d      	ldr	r0, [pc, #372]	; (8003ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8003b2a:	f7ff f95b 	bl	8002de4 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4323      	orrs	r3, r4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	e008      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x8e8>
 8003b3e:	4859      	ldr	r0, [pc, #356]	; (8003ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003b40:	f7ff f950 	bl	8002de4 <LL_ADC_IsEnabled>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8084 	beq.w	8003c5e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a53      	ldr	r2, [pc, #332]	; (8003ca8 <HAL_ADC_ConfigChannel+0xa40>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d132      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x95e>
 8003b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12c      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a4c      	ldr	r2, [pc, #304]	; (8003ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f040 8086 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <HAL_ADC_ConfigChannel+0xa34>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x924>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a46      	ldr	r2, [pc, #280]	; (8003ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x928>
 8003b8c:	4a47      	ldr	r2, [pc, #284]	; (8003cac <HAL_ADC_ConfigChannel+0xa44>)
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x92a>
 8003b90:	4a41      	ldr	r2, [pc, #260]	; (8003c98 <HAL_ADC_ConfigChannel+0xa30>)
 8003b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe ff28 	bl	80029f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_ADC_ConfigChannel+0xa48>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	4a42      	ldr	r2, [pc, #264]	; (8003cb4 <HAL_ADC_ConfigChannel+0xa4c>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003bb6:	e002      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bc4:	e05e      	b.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <HAL_ADC_ConfigChannel+0xa50>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d120      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x9aa>
 8003bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11a      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d14e      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2c      	ldr	r2, [pc, #176]	; (8003c9c <HAL_ADC_ConfigChannel+0xa34>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_ADC_ConfigChannel+0x992>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x996>
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <HAL_ADC_ConfigChannel+0xa44>)
 8003bfc:	e000      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x998>
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <HAL_ADC_ConfigChannel+0xa30>)
 8003c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f7fe fef1 	bl	80029f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c10:	e038      	b.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_ADC_ConfigChannel+0xa54>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d133      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
 8003c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12d      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d128      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_ADC_ConfigChannel+0xa34>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADC_ConfigChannel+0x9de>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x9e2>
 8003c46:	4a19      	ldr	r2, [pc, #100]	; (8003cac <HAL_ADC_ConfigChannel+0xa44>)
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x9e4>
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_ADC_ConfigChannel+0xa30>)
 8003c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7fe fecb 	bl	80029f2 <LL_ADC_SetCommonPathInternalCh>
 8003c5c:	e012      	b.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003c70:	e008      	b.n	8003c84 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003c8c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	37e4      	adds	r7, #228	; 0xe4
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}
 8003c98:	58026300 	.word	0x58026300
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	40022100 	.word	0x40022100
 8003ca4:	58026000 	.word	0x58026000
 8003ca8:	c7520000 	.word	0xc7520000
 8003cac:	40022300 	.word	0x40022300
 8003cb0:	24000000 	.word	0x24000000
 8003cb4:	053e2d63 	.word	0x053e2d63
 8003cb8:	c3210000 	.word	0xc3210000
 8003cbc:	cb840000 	.word	0xcb840000

08003cc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <ADC_ConfigureBoostMode+0x1bc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <ADC_ConfigureBoostMode+0x1c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <ADC_ConfigureBoostMode+0x1c0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d109      	bne.n	8003cf0 <ADC_ConfigureBoostMode+0x30>
 8003cdc:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <ADC_ConfigureBoostMode+0x1c4>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e008      	b.n	8003d02 <ADC_ConfigureBoostMode+0x42>
 8003cf0:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <ADC_ConfigureBoostMode+0x1c8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01c      	beq.n	8003d40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d06:	f002 f9d3 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 8003d0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d14:	d010      	beq.n	8003d38 <ADC_ConfigureBoostMode+0x78>
 8003d16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d1a:	d871      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x140>
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d002      	beq.n	8003d28 <ADC_ConfigureBoostMode+0x68>
 8003d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d26:	d16b      	bne.n	8003e00 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	60fb      	str	r3, [r7, #12]
        break;
 8003d36:	e066      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	60fb      	str	r3, [r7, #12]
        break;
 8003d3e:	e062      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d40:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d44:	f003 f90a 	bl	8006f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d48:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d52:	d051      	beq.n	8003df8 <ADC_ConfigureBoostMode+0x138>
 8003d54:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d58:	d854      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003d5a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d5e:	d047      	beq.n	8003df0 <ADC_ConfigureBoostMode+0x130>
 8003d60:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d64:	d84e      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003d66:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d6a:	d03d      	beq.n	8003de8 <ADC_ConfigureBoostMode+0x128>
 8003d6c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d70:	d848      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d76:	d033      	beq.n	8003de0 <ADC_ConfigureBoostMode+0x120>
 8003d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d7c:	d842      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003d7e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d82:	d029      	beq.n	8003dd8 <ADC_ConfigureBoostMode+0x118>
 8003d84:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d88:	d83c      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003d8a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d8e:	d01a      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x106>
 8003d90:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d94:	d836      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003d96:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d9a:	d014      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x106>
 8003d9c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003da0:	d830      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da6:	d00e      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x106>
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dac:	d82a      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003dae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003db2:	d008      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x106>
 8003db4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003db8:	d824      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x144>
 8003dba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dbe:	d002      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x106>
 8003dc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dc4:	d11e      	bne.n	8003e04 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	60fb      	str	r3, [r7, #12]
        break;
 8003dd6:	e016      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
        break;
 8003dde:	e012      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	60fb      	str	r3, [r7, #12]
        break;
 8003de6:	e00e      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	60fb      	str	r3, [r7, #12]
        break;
 8003dee:	e00a      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	09db      	lsrs	r3, r3, #7
 8003df4:	60fb      	str	r3, [r7, #12]
        break;
 8003df6:	e006      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	60fb      	str	r3, [r7, #12]
        break;
 8003dfe:	e002      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
        break;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003e04:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <ADC_ConfigureBoostMode+0x1cc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d808      	bhi.n	8003e26 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e24:	e025      	b.n	8003e72 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <ADC_ConfigureBoostMode+0x1d0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d80a      	bhi.n	8003e44 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	e016      	b.n	8003e72 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <ADC_ConfigureBoostMode+0x1d4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d80a      	bhi.n	8003e62 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	e007      	b.n	8003e72 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e70:	609a      	str	r2, [r3, #8]
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40022100 	.word	0x40022100
 8003e84:	40022300 	.word	0x40022300
 8003e88:	58026300 	.word	0x58026300
 8003e8c:	005f5e10 	.word	0x005f5e10
 8003e90:	00bebc20 	.word	0x00bebc20
 8003e94:	017d7840 	.word	0x017d7840

08003e98 <LL_ADC_IsEnabled>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <LL_ADC_IsEnabled+0x18>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_ADC_IsEnabled+0x1a>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d101      	bne.n	8003ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b0a3      	sub	sp, #140	; 0x8c
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0c1      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5e      	ldr	r2, [pc, #376]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f1c:	4b5d      	ldr	r3, [pc, #372]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e001      	b.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0a0      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ffb9 	bl	8003ebe <LL_ADC_REG_IsConversionOngoing>
 8003f4c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ffb2 	bl	8003ebe <LL_ADC_REG_IsConversionOngoing>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 8081 	bne.w	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d17c      	bne.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a48      	ldr	r2, [pc, #288]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a46      	ldr	r2, [pc, #280]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f80:	e000      	b.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f84:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d039      	beq.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a39      	ldr	r2, [pc, #228]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003fb4:	4836      	ldr	r0, [pc, #216]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fb6:	f7ff ff6f 	bl	8003e98 <LL_ADC_IsEnabled>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4835      	ldr	r0, [pc, #212]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fbe:	f7ff ff6b 	bl	8003e98 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4323      	orrs	r3, r4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e008      	b.n	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003fd2:	4833      	ldr	r0, [pc, #204]	; (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fd4:	f7ff ff60 	bl	8003e98 <LL_ADC_IsEnabled>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d047      	beq.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ffe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004000:	e03a      	b.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800400a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800400c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10e      	bne.n	8004040 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004022:	481b      	ldr	r0, [pc, #108]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004024:	f7ff ff38 	bl	8003e98 <LL_ADC_IsEnabled>
 8004028:	4604      	mov	r4, r0
 800402a:	481a      	ldr	r0, [pc, #104]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800402c:	f7ff ff34 	bl	8003e98 <LL_ADC_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	4323      	orrs	r3, r4
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e008      	b.n	8004052 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004040:	4817      	ldr	r0, [pc, #92]	; (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004042:	f7ff ff29 	bl	8003e98 <LL_ADC_IsEnabled>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800405c:	4013      	ands	r3, r2
 800405e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004060:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004062:	e009      	b.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004076:	e000      	b.n	800407a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004078:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004086:	4618      	mov	r0, r3
 8004088:	378c      	adds	r7, #140	; 0x8c
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000
 8004094:	40022100 	.word	0x40022100
 8004098:	40022300 	.word	0x40022300
 800409c:	58026300 	.word	0x58026300
 80040a0:	58026000 	.word	0x58026000
 80040a4:	fffff0e0 	.word	0xfffff0e0

080040a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <__NVIC_SetPriorityGrouping+0x40>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x40>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00
 80040ec:	05fa0000 	.word	0x05fa0000

080040f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <__NVIC_GetPriorityGrouping+0x18>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 0307 	and.w	r3, r3, #7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411a:	2b00      	cmp	r3, #0
 800411c:	db0b      	blt.n	8004136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4907      	ldr	r1, [pc, #28]	; (8004144 <__NVIC_EnableIRQ+0x38>)
 8004126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2001      	movs	r0, #1
 800412e:	fa00 f202 	lsl.w	r2, r0, r2
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	; (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	; 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
         );
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004214:	d301      	bcc.n	800421a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004216:	2301      	movs	r3, #1
 8004218:	e00f      	b.n	800423a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <SysTick_Config+0x40>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004222:	210f      	movs	r1, #15
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <SysTick_Config+0x40>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <SysTick_Config+0x40>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff29 	bl	80040a8 <__NVIC_SetPriorityGrouping>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800426c:	f7ff ff40 	bl	80040f0 <__NVIC_GetPriorityGrouping>
 8004270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff ff90 	bl	800419c <NVIC_EncodePriority>
 800427c:	4602      	mov	r2, r0
 800427e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff5f 	bl	8004148 <__NVIC_SetPriority>
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800429c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff33 	bl	800410c <__NVIC_EnableIRQ>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffa4 	bl	8004204 <SysTick_Config>
 80042bc:	4603      	mov	r3, r0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e014      	b.n	8004302 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fd fd85 	bl	8001df8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	795b      	ldrb	r3, [r3, #5]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_DAC_ConfigChannel+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e11d      	b.n	8004560 <HAL_DAC_ConfigChannel+0x254>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2202      	movs	r2, #2
 800432e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d174      	bne.n	8004422 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004338:	f7fe fb02 	bl	8002940 <HAL_GetTick>
 800433c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d134      	bne.n	80043ae <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004344:	e011      	b.n	800436a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004346:	f7fe fafb 	bl	8002940 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d90a      	bls.n	800436a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f043 0208 	orr.w	r2, r3, #8
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2203      	movs	r2, #3
 8004364:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0fa      	b.n	8004560 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004370:	4b7d      	ldr	r3, [pc, #500]	; (8004568 <HAL_DAC_ConfigChannel+0x25c>)
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004378:	2001      	movs	r0, #1
 800437a:	f7fe faed 	bl	8002958 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	6992      	ldr	r2, [r2, #24]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40
 8004388:	e01e      	b.n	80043c8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800438a:	f7fe fad9 	bl	8002940 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d90a      	bls.n	80043ae <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f043 0208 	orr.w	r2, r3, #8
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2203      	movs	r2, #3
 80043a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0d8      	b.n	8004560 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dbe8      	blt.n	800438a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80043b8:	2001      	movs	r0, #1
 80043ba:	f7fe facd 	bl	8002958 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	6992      	ldr	r2, [r2, #24]
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	ea02 0103 	and.w	r1, r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	409a      	lsls	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	21ff      	movs	r1, #255	; 0xff
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	ea02 0103 	and.w	r1, r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d11d      	bne.n	8004466 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	221f      	movs	r2, #31
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4013      	ands	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2207      	movs	r2, #7
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4013      	ands	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e00f      	b.n	80044b0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d102      	bne.n	800449e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004498:	2301      	movs	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	e008      	b.n	80044b0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e001      	b.n	80044b0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	400a      	ands	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	f640 72fe 	movw	r2, #4094	; 0xffe
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4013      	ands	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	22c0      	movs	r2, #192	; 0xc0
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43da      	mvns	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	400a      	ands	r2, r1
 8004550:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20008000 	.word	0x20008000

0800456c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b098      	sub	sp, #96	; 0x60
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004574:	4a84      	ldr	r2, [pc, #528]	; (8004788 <HAL_FDCAN_Init+0x21c>)
 8004576:	f107 030c 	add.w	r3, r7, #12
 800457a:	4611      	mov	r1, r2
 800457c:	224c      	movs	r2, #76	; 0x4c
 800457e:	4618      	mov	r0, r3
 8004580:	f006 fb96 	bl	800acb0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e1ca      	b.n	8004924 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7e      	ldr	r2, [pc, #504]	; (800478c <HAL_FDCAN_Init+0x220>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d106      	bne.n	80045a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd fc62 	bl	8001e84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0210 	bic.w	r2, r2, #16
 80045ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045d0:	f7fe f9b6 	bl	8002940 <HAL_GetTick>
 80045d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045d6:	e014      	b.n	8004602 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045d8:	f7fe f9b2 	bl	8002940 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b0a      	cmp	r3, #10
 80045e4:	d90d      	bls.n	8004602 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2203      	movs	r2, #3
 80045fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e190      	b.n	8004924 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d0e3      	beq.n	80045d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004620:	f7fe f98e 	bl	8002940 <HAL_GetTick>
 8004624:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004626:	e014      	b.n	8004652 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004628:	f7fe f98a 	bl	8002940 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b0a      	cmp	r3, #10
 8004634:	d90d      	bls.n	8004652 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e168      	b.n	8004924 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0e3      	beq.n	8004628 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0202 	orr.w	r2, r2, #2
 800466e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7c1b      	ldrb	r3, [r3, #16]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d108      	bne.n	800468a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004686:	619a      	str	r2, [r3, #24]
 8004688:	e007      	b.n	800469a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004698:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7c5b      	ldrb	r3, [r3, #17]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e007      	b.n	80046c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7c9b      	ldrb	r3, [r3, #18]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046da:	619a      	str	r2, [r3, #24]
 80046dc:	e007      	b.n	80046ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004712:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0210 	bic.w	r2, r2, #16
 8004722:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d108      	bne.n	800473e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0204 	orr.w	r2, r2, #4
 800473a:	619a      	str	r2, [r3, #24]
 800473c:	e030      	b.n	80047a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d02c      	beq.n	80047a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d020      	beq.n	8004790 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800475c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0210 	orr.w	r2, r2, #16
 800476c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d114      	bne.n	80047a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0220 	orr.w	r2, r2, #32
 8004784:	619a      	str	r2, [r3, #24]
 8004786:	e00b      	b.n	80047a0 <HAL_FDCAN_Init+0x234>
 8004788:	0800bcec 	.word	0x0800bcec
 800478c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0220 	orr.w	r2, r2, #32
 800479e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d4:	d115      	bne.n	8004802 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	3b01      	subs	r3, #1
 80047e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	3b01      	subs	r3, #1
 80047ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80047ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80047fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004800:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	4413      	add	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d012      	beq.n	8004854 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004836:	f023 0107 	bic.w	r1, r3, #7
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004844:	4413      	add	r3, r2
 8004846:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004864:	f023 0107 	bic.w	r1, r3, #7
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004872:	4413      	add	r3, r2
 8004874:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	d013      	beq.n	80048b2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004892:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048a0:	4413      	add	r3, r2
 80048a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d013      	beq.n	80048e2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048c2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048d0:	4413      	add	r3, r2
 80048d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048d6:	021a      	lsls	r2, r3, #8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <HAL_FDCAN_Init+0x3c0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d107      	bne.n	80048fc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f022 0203 	bic.w	r2, r2, #3
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f80b 	bl	8004930 <FDCAN_CalcultateRamBlockAddresses>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004920:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004924:	4618      	mov	r0, r3
 8004926:	3760      	adds	r7, #96	; 0x60
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	4000a000 	.word	0x4000a000

08004930 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004946:	4ba7      	ldr	r3, [pc, #668]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004948:	4013      	ands	r3, r2
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0091      	lsls	r1, r2, #2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	430b      	orrs	r3, r1
 8004954:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004960:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	041a      	lsls	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	4413      	add	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004986:	4b97      	ldr	r3, [pc, #604]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004988:	4013      	ands	r3, r2
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	0091      	lsls	r1, r2, #2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	430b      	orrs	r3, r1
 8004994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	041a      	lsls	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049c8:	4b86      	ldr	r3, [pc, #536]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	0091      	lsls	r1, r2, #2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	041a      	lsls	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a10:	4b74      	ldr	r3, [pc, #464]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	0091      	lsls	r1, r2, #2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a2a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	041a      	lsls	r2, r3, #16
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a58:	4b62      	ldr	r3, [pc, #392]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	0091      	lsls	r1, r2, #2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004a84:	4b57      	ldr	r3, [pc, #348]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	0091      	lsls	r1, r2, #2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a9e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	041a      	lsls	r2, r3, #16
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	4413      	add	r3, r2
 8004abc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0091      	lsls	r1, r2, #2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ae0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	041a      	lsls	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004afc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b04:	061a      	lsls	r2, r3, #24
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b14:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004b16:	4413      	add	r3, r2
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a04      	ldr	r2, [pc, #16]	; (8004bec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d915      	bls.n	8004c0c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004be0:	e006      	b.n	8004bf0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004be2:	bf00      	nop
 8004be4:	ffff0003 	.word	0xffff0003
 8004be8:	10002b00 	.word	0x10002b00
 8004bec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2203      	movs	r2, #3
 8004c04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e010      	b.n	8004c2e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e005      	b.n	8004c20 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3f3      	bcc.n	8004c14 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop

08004c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c4a:	4b86      	ldr	r3, [pc, #536]	; (8004e64 <HAL_GPIO_Init+0x228>)
 8004c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c4e:	e18c      	b.n	8004f6a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2101      	movs	r1, #1
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 817e 	beq.w	8004f64 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d005      	beq.n	8004c80 <HAL_GPIO_Init+0x44>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d130      	bne.n	8004ce2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4013      	ands	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 0201 	and.w	r2, r3, #1
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d017      	beq.n	8004d1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d123      	bne.n	8004d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	08da      	lsrs	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3208      	adds	r2, #8
 8004d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	220f      	movs	r2, #15
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	08da      	lsrs	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3208      	adds	r2, #8
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0203 	and.w	r2, r3, #3
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80d8 	beq.w	8004f64 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <HAL_GPIO_Init+0x22c>)
 8004db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dba:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <HAL_GPIO_Init+0x22c>)
 8004dbc:	f043 0302 	orr.w	r3, r3, #2
 8004dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_GPIO_Init+0x22c>)
 8004dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <HAL_GPIO_Init+0x230>)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	3302      	adds	r3, #2
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	220f      	movs	r2, #15
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_GPIO_Init+0x234>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d04a      	beq.n	8004e94 <HAL_GPIO_Init+0x258>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_GPIO_Init+0x238>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <HAL_GPIO_Init+0x222>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_GPIO_Init+0x23c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d025      	beq.n	8004e5a <HAL_GPIO_Init+0x21e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1a      	ldr	r2, [pc, #104]	; (8004e7c <HAL_GPIO_Init+0x240>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01f      	beq.n	8004e56 <HAL_GPIO_Init+0x21a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_GPIO_Init+0x244>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d019      	beq.n	8004e52 <HAL_GPIO_Init+0x216>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_GPIO_Init+0x248>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_GPIO_Init+0x212>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <HAL_GPIO_Init+0x24c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00d      	beq.n	8004e4a <HAL_GPIO_Init+0x20e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <HAL_GPIO_Init+0x250>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <HAL_GPIO_Init+0x20a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_GPIO_Init+0x254>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_GPIO_Init+0x206>
 8004e3e:	2309      	movs	r3, #9
 8004e40:	e029      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e42:	230a      	movs	r3, #10
 8004e44:	e027      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e46:	2307      	movs	r3, #7
 8004e48:	e025      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e4a:	2306      	movs	r3, #6
 8004e4c:	e023      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e4e:	2305      	movs	r3, #5
 8004e50:	e021      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e52:	2304      	movs	r3, #4
 8004e54:	e01f      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e56:	2303      	movs	r3, #3
 8004e58:	e01d      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e01b      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e019      	b.n	8004e96 <HAL_GPIO_Init+0x25a>
 8004e62:	bf00      	nop
 8004e64:	58000080 	.word	0x58000080
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	58000400 	.word	0x58000400
 8004e70:	58020000 	.word	0x58020000
 8004e74:	58020400 	.word	0x58020400
 8004e78:	58020800 	.word	0x58020800
 8004e7c:	58020c00 	.word	0x58020c00
 8004e80:	58021000 	.word	0x58021000
 8004e84:	58021400 	.word	0x58021400
 8004e88:	58021800 	.word	0x58021800
 8004e8c:	58021c00 	.word	0x58021c00
 8004e90:	58022400 	.word	0x58022400
 8004e94:	2300      	movs	r3, #0
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	f002 0203 	and.w	r2, r2, #3
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	4093      	lsls	r3, r2
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea6:	4938      	ldr	r1, [pc, #224]	; (8004f88 <HAL_GPIO_Init+0x34c>)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	089b      	lsrs	r3, r3, #2
 8004eac:	3302      	adds	r3, #2
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f ae6b 	bne.w	8004c50 <HAL_GPIO_Init+0x14>
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	bf00      	nop
 8004f7e:	3724      	adds	r7, #36	; 0x24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	58000400 	.word	0x58000400

08004f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f9c:	787b      	ldrb	r3, [r7, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fa8:	e003      	b.n	8004fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004faa:	887b      	ldrh	r3, [r7, #2]
 8004fac:	041a      	lsls	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	619a      	str	r2, [r3, #24]
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fc49 	bl	800087c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07f      	b.n	8005106 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fc fffc 	bl	8002018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2224      	movs	r2, #36	; 0x24
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005044:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005054:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	e006      	b.n	800507c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800507a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d104      	bne.n	800508e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800508c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <HAL_I2C_Init+0x11c>)
 800509a:	430b      	orrs	r3, r1
 800509c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69d9      	ldr	r1, [r3, #28]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	02008000 	.word	0x02008000

08005114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b20      	cmp	r3, #32
 8005128:	d138      	bne.n	800519c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005134:	2302      	movs	r3, #2
 8005136:	e032      	b.n	800519e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d139      	bne.n	8005234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e033      	b.n	8005236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2224      	movs	r2, #36	; 0x24
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800524c:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	2b06      	cmp	r3, #6
 8005256:	d00a      	beq.n	800526e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005258:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d001      	beq.n	800526a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e03f      	b.n	80052ea <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e03d      	b.n	80052ea <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800526e:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005276:	491f      	ldr	r1, [pc, #124]	; (80052f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800527e:	f7fd fb5f 	bl	8002940 <HAL_GetTick>
 8005282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005284:	e009      	b.n	800529a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005286:	f7fd fb5b 	bl	8002940 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005294:	d901      	bls.n	800529a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e027      	b.n	80052ea <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a6:	d1ee      	bne.n	8005286 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b1e      	cmp	r3, #30
 80052ac:	d008      	beq.n	80052c0 <HAL_PWREx_ConfigSupply+0x7c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b2e      	cmp	r3, #46	; 0x2e
 80052b2:	d005      	beq.n	80052c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b1d      	cmp	r3, #29
 80052b8:	d002      	beq.n	80052c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b2d      	cmp	r3, #45	; 0x2d
 80052be:	d113      	bne.n	80052e8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80052c0:	f7fd fb3e 	bl	8002940 <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80052c6:	e009      	b.n	80052dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052c8:	f7fd fb3a 	bl	8002940 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d6:	d901      	bls.n	80052dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e006      	b.n	80052ea <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0311 	and.w	r3, r3, #17
 80052e4:	2b11      	cmp	r3, #17
 80052e6:	d1ef      	bne.n	80052c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	58024800 	.word	0x58024800

080052f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e397      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8087 	beq.w	8005426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005318:	4b9e      	ldr	r3, [pc, #632]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005322:	4b9c      	ldr	r3, [pc, #624]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b10      	cmp	r3, #16
 800532c:	d007      	beq.n	800533e <HAL_RCC_OscConfig+0x46>
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	2b18      	cmp	r3, #24
 8005332:	d110      	bne.n	8005356 <HAL_RCC_OscConfig+0x5e>
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d10b      	bne.n	8005356 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533e:	4b95      	ldr	r3, [pc, #596]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d06c      	beq.n	8005424 <HAL_RCC_OscConfig+0x12c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d168      	bne.n	8005424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e371      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x76>
 8005360:	4b8c      	ldr	r3, [pc, #560]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a8b      	ldr	r2, [pc, #556]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	e02e      	b.n	80053cc <HAL_RCC_OscConfig+0xd4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0x98>
 8005376:	4b87      	ldr	r3, [pc, #540]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a86      	ldr	r2, [pc, #536]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800537c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	4b84      	ldr	r3, [pc, #528]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a83      	ldr	r2, [pc, #524]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xd4>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0xbc>
 800539a:	4b7e      	ldr	r3, [pc, #504]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7d      	ldr	r2, [pc, #500]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b7b      	ldr	r3, [pc, #492]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7a      	ldr	r2, [pc, #488]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xd4>
 80053b4:	4b77      	ldr	r3, [pc, #476]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a76      	ldr	r2, [pc, #472]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b74      	ldr	r3, [pc, #464]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a73      	ldr	r2, [pc, #460]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fd fab4 	bl	8002940 <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fd fab0 	bl	8002940 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e325      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053ee:	4b69      	ldr	r3, [pc, #420]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xe4>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fd faa0 	bl	8002940 <HAL_GetTick>
 8005400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fd fa9c 	bl	8002940 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e311      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005416:	4b5f      	ldr	r3, [pc, #380]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x10c>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 808a 	beq.w	8005548 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005434:	4b57      	ldr	r3, [pc, #348]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800543c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800543e:	4b55      	ldr	r3, [pc, #340]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_RCC_OscConfig+0x162>
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2b18      	cmp	r3, #24
 800544e:	d137      	bne.n	80054c0 <HAL_RCC_OscConfig+0x1c8>
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d132      	bne.n	80054c0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800545a:	4b4e      	ldr	r3, [pc, #312]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x17a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e2e3      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005472:	4b48      	ldr	r3, [pc, #288]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 0219 	bic.w	r2, r3, #25
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	4945      	ldr	r1, [pc, #276]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005484:	f7fd fa5c 	bl	8002940 <HAL_GetTick>
 8005488:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548c:	f7fd fa58 	bl	8002940 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e2cd      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549e:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054aa:	4b3a      	ldr	r3, [pc, #232]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	061b      	lsls	r3, r3, #24
 80054b8:	4936      	ldr	r1, [pc, #216]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054be:	e043      	b.n	8005548 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d026      	beq.n	8005516 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054c8:	4b32      	ldr	r3, [pc, #200]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 0219 	bic.w	r2, r3, #25
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	492f      	ldr	r1, [pc, #188]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fd fa31 	bl	8002940 <HAL_GetTick>
 80054de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e2:	f7fd fa2d 	bl	8002940 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e2a2      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f4:	4b27      	ldr	r3, [pc, #156]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	4921      	ldr	r1, [pc, #132]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
 8005514:	e018      	b.n	8005548 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005516:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005522:	f7fd fa0d 	bl	8002940 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800552a:	f7fd fa09 	bl	8002940 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e27e      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	d06d      	beq.n	8005630 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800555e:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d007      	beq.n	800557a <HAL_RCC_OscConfig+0x282>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b18      	cmp	r3, #24
 800556e:	d11e      	bne.n	80055ae <HAL_RCC_OscConfig+0x2b6>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d119      	bne.n	80055ae <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_RCC_OscConfig+0x29c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_RCC_OscConfig+0x2a0>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d004      	beq.n	8005598 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e253      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005598:	4ba3      	ldr	r3, [pc, #652]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	49a0      	ldr	r1, [pc, #640]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ac:	e040      	b.n	8005630 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d023      	beq.n	80055fe <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055b6:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a9b      	ldr	r2, [pc, #620]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80055bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fd f9bd 	bl	8002940 <HAL_GetTick>
 80055c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055ca:	f7fd f9b9 	bl	8002940 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e22e      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055dc:	4b92      	ldr	r3, [pc, #584]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055e8:	4b8f      	ldr	r3, [pc, #572]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	061b      	lsls	r3, r3, #24
 80055f6:	498c      	ldr	r1, [pc, #560]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60cb      	str	r3, [r1, #12]
 80055fc:	e018      	b.n	8005630 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055fe:	4b8a      	ldr	r3, [pc, #552]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a89      	ldr	r2, [pc, #548]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fd f999 	bl	8002940 <HAL_GetTick>
 800560e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005612:	f7fd f995 	bl	8002940 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e20a      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005624:	4b80      	ldr	r3, [pc, #512]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d036      	beq.n	80056aa <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005644:	4b78      	ldr	r3, [pc, #480]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	4a77      	ldr	r2, [pc, #476]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fd f976 	bl	8002940 <HAL_GetTick>
 8005654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005658:	f7fd f972 	bl	8002940 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e1e7      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800566a:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x360>
 8005676:	e018      	b.n	80056aa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005678:	4b6b      	ldr	r3, [pc, #428]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800567a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567c:	4a6a      	ldr	r2, [pc, #424]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fd f95c 	bl	8002940 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fd f958 	bl	8002940 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e1cd      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800569e:	4b62      	ldr	r3, [pc, #392]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d036      	beq.n	8005724 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d019      	beq.n	80056f2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056be:	4b5a      	ldr	r3, [pc, #360]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a59      	ldr	r2, [pc, #356]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80056c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ca:	f7fd f939 	bl	8002940 <HAL_GetTick>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056d2:	f7fd f935 	bl	8002940 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1aa      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056e4:	4b50      	ldr	r3, [pc, #320]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3da>
 80056f0:	e018      	b.n	8005724 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056f2:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4c      	ldr	r2, [pc, #304]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80056f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056fe:	f7fd f91f 	bl	8002940 <HAL_GetTick>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005706:	f7fd f91b 	bl	8002940 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e190      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005718:	4b43      	ldr	r3, [pc, #268]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8085 	beq.w	800583c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_RCC_OscConfig+0x534>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a3d      	ldr	r2, [pc, #244]	; (800582c <HAL_RCC_OscConfig+0x534>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800573e:	f7fd f8ff 	bl	8002940 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fd f8fb 	bl	8002940 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b64      	cmp	r3, #100	; 0x64
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e170      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x534>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x482>
 800576c:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a2d      	ldr	r2, [pc, #180]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	e02d      	b.n	80057d6 <HAL_RCC_OscConfig+0x4de>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10c      	bne.n	800579c <HAL_RCC_OscConfig+0x4a4>
 8005782:	4b29      	ldr	r3, [pc, #164]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	6713      	str	r3, [r2, #112]	; 0x70
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4a25      	ldr	r2, [pc, #148]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	6713      	str	r3, [r2, #112]	; 0x70
 800579a:	e01c      	b.n	80057d6 <HAL_RCC_OscConfig+0x4de>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b05      	cmp	r3, #5
 80057a2:	d10c      	bne.n	80057be <HAL_RCC_OscConfig+0x4c6>
 80057a4:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057aa:	f043 0304 	orr.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	6713      	str	r3, [r2, #112]	; 0x70
 80057bc:	e00b      	b.n	80057d6 <HAL_RCC_OscConfig+0x4de>
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	4a19      	ldr	r2, [pc, #100]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ca:	4b17      	ldr	r3, [pc, #92]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fd f8af 	bl	8002940 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fd f8ab 	bl	8002940 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e11e      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCC_OscConfig+0x530>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ee      	beq.n	80057e6 <HAL_RCC_OscConfig+0x4ee>
 8005808:	e018      	b.n	800583c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fd f899 	bl	8002940 <HAL_GetTick>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005810:	e00e      	b.n	8005830 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7fd f895 	bl	8002940 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d905      	bls.n	8005830 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e108      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
 8005828:	58024400 	.word	0x58024400
 800582c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005830:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ea      	bne.n	8005812 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80f9 	beq.w	8005a38 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005846:	4b7f      	ldr	r3, [pc, #508]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584e:	2b18      	cmp	r3, #24
 8005850:	f000 80b4 	beq.w	80059bc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	2b02      	cmp	r3, #2
 800585a:	f040 8095 	bne.w	8005988 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585e:	4b79      	ldr	r3, [pc, #484]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a78      	ldr	r2, [pc, #480]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fd f869 	bl	8002940 <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005872:	f7fd f865 	bl	8002940 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0da      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005884:	4b6f      	ldr	r3, [pc, #444]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005890:	4b6c      	ldr	r3, [pc, #432]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005894:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <HAL_RCC_OscConfig+0x750>)
 8005896:	4013      	ands	r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058a0:	0112      	lsls	r2, r2, #4
 80058a2:	430a      	orrs	r2, r1
 80058a4:	4967      	ldr	r1, [pc, #412]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	628b      	str	r3, [r1, #40]	; 0x28
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	3b01      	subs	r3, #1
 80058ba:	025b      	lsls	r3, r3, #9
 80058bc:	b29b      	uxth	r3, r3
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	3b01      	subs	r3, #1
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	3b01      	subs	r3, #1
 80058d4:	061b      	lsls	r3, r3, #24
 80058d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058da:	495a      	ldr	r1, [pc, #360]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80058e0:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a57      	ldr	r2, [pc, #348]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058ec:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	4b56      	ldr	r3, [pc, #344]	; (8005a4c <HAL_RCC_OscConfig+0x754>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058f8:	00d2      	lsls	r2, r2, #3
 80058fa:	4952      	ldr	r1, [pc, #328]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	f023 020c 	bic.w	r2, r3, #12
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	494d      	ldr	r1, [pc, #308]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800590e:	4313      	orrs	r3, r2
 8005910:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005912:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	f023 0202 	bic.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	4949      	ldr	r1, [pc, #292]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005924:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a46      	ldr	r2, [pc, #280]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800592a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a43      	ldr	r2, [pc, #268]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800593c:	4b41      	ldr	r3, [pc, #260]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	4a40      	ldr	r2, [pc, #256]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005948:	4b3e      	ldr	r3, [pc, #248]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005954:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a3a      	ldr	r2, [pc, #232]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800595a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fc ffee 	bl	8002940 <HAL_GetTick>
 8005964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005968:	f7fc ffea 	bl	8002940 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e05f      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800597a:	4b32      	ldr	r3, [pc, #200]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x670>
 8005986:	e057      	b.n	8005a38 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005988:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2d      	ldr	r2, [pc, #180]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fc ffd4 	bl	8002940 <HAL_GetTick>
 8005998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599c:	f7fc ffd0 	bl	8002940 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e045      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ae:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x6a4>
 80059ba:	e03d      	b.n	8005a38 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059bc:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <HAL_RCC_OscConfig+0x74c>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d031      	beq.n	8005a34 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f003 0203 	and.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d12a      	bne.n	8005a34 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d122      	bne.n	8005a34 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d11a      	bne.n	8005a34 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	0a5b      	lsrs	r3, r3, #9
 8005a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d111      	bne.n	8005a34 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d108      	bne.n	8005a34 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	0e1b      	lsrs	r3, r3, #24
 8005a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3730      	adds	r7, #48	; 0x30
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400
 8005a48:	fffffc0c 	.word	0xfffffc0c
 8005a4c:	ffff0007 	.word	0xffff0007

08005a50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e19c      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a64:	4b8a      	ldr	r3, [pc, #552]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d910      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b87      	ldr	r3, [pc, #540]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 020f 	bic.w	r2, r3, #15
 8005a7a:	4985      	ldr	r1, [pc, #532]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b83      	ldr	r3, [pc, #524]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e184      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d010      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	4b7b      	ldr	r3, [pc, #492]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d908      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab0:	4b78      	ldr	r3, [pc, #480]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	4975      	ldr	r1, [pc, #468]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	4b70      	ldr	r3, [pc, #448]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d908      	bls.n	8005af0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ade:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	496a      	ldr	r1, [pc, #424]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	4b64      	ldr	r3, [pc, #400]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d908      	bls.n	8005b1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b0c:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	495e      	ldr	r1, [pc, #376]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d010      	beq.n	8005b4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d908      	bls.n	8005b4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b3a:	4b56      	ldr	r3, [pc, #344]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	4953      	ldr	r1, [pc, #332]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d010      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	4b4d      	ldr	r3, [pc, #308]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d908      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b68:	4b4a      	ldr	r3, [pc, #296]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f023 020f 	bic.w	r2, r3, #15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4947      	ldr	r1, [pc, #284]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d055      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b86:	4b43      	ldr	r3, [pc, #268]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4940      	ldr	r1, [pc, #256]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba0:	4b3c      	ldr	r3, [pc, #240]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d121      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0f6      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bb8:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d115      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0ea      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd0:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0de      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be0:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0d6      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf0:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f023 0207 	bic.w	r2, r3, #7
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4925      	ldr	r1, [pc, #148]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fc fe9d 	bl	8002940 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0a:	f7fc fe99 	bl	8002940 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0be      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c20:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d1eb      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d208      	bcs.n	8005c60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f023 020f 	bic.w	r2, r3, #15
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	490e      	ldr	r1, [pc, #56]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d214      	bcs.n	8005c98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 020f 	bic.w	r2, r3, #15
 8005c76:	4906      	ldr	r1, [pc, #24]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e086      	b.n	8005d9e <HAL_RCC_ClockConfig+0x34e>
 8005c90:	52002000 	.word	0x52002000
 8005c94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d010      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d208      	bcs.n	8005cc6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cb4:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	4939      	ldr	r1, [pc, #228]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	4b34      	ldr	r3, [pc, #208]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d208      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	492e      	ldr	r1, [pc, #184]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d010      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d208      	bcs.n	8005d22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	4922      	ldr	r1, [pc, #136]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d010      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69da      	ldr	r2, [r3, #28]
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d208      	bcs.n	8005d50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4917      	ldr	r1, [pc, #92]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d50:	f000 f834 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	4912      	ldr	r1, [pc, #72]	; (8005dac <HAL_RCC_ClockConfig+0x35c>)
 8005d62:	5ccb      	ldrb	r3, [r1, r3]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <HAL_RCC_ClockConfig+0x358>)
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	4a0d      	ldr	r2, [pc, #52]	; (8005dac <HAL_RCC_ClockConfig+0x35c>)
 8005d78:	5cd3      	ldrb	r3, [r2, r3]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <HAL_RCC_ClockConfig+0x360>)
 8005d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d88:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <HAL_RCC_ClockConfig+0x364>)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <HAL_RCC_ClockConfig+0x368>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fc fd8a 	bl	80028ac <HAL_InitTick>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	58024400 	.word	0x58024400
 8005dac:	0800bd38 	.word	0x0800bd38
 8005db0:	24000004 	.word	0x24000004
 8005db4:	24000000 	.word	0x24000000
 8005db8:	24000008 	.word	0x24000008

08005dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc2:	4bb3      	ldr	r3, [pc, #716]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dca:	2b18      	cmp	r3, #24
 8005dcc:	f200 8155 	bhi.w	800607a <HAL_RCC_GetSysClockFreq+0x2be>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e3d 	.word	0x08005e3d
 8005ddc:	0800607b 	.word	0x0800607b
 8005de0:	0800607b 	.word	0x0800607b
 8005de4:	0800607b 	.word	0x0800607b
 8005de8:	0800607b 	.word	0x0800607b
 8005dec:	0800607b 	.word	0x0800607b
 8005df0:	0800607b 	.word	0x0800607b
 8005df4:	0800607b 	.word	0x0800607b
 8005df8:	08005e63 	.word	0x08005e63
 8005dfc:	0800607b 	.word	0x0800607b
 8005e00:	0800607b 	.word	0x0800607b
 8005e04:	0800607b 	.word	0x0800607b
 8005e08:	0800607b 	.word	0x0800607b
 8005e0c:	0800607b 	.word	0x0800607b
 8005e10:	0800607b 	.word	0x0800607b
 8005e14:	0800607b 	.word	0x0800607b
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	0800607b 	.word	0x0800607b
 8005e20:	0800607b 	.word	0x0800607b
 8005e24:	0800607b 	.word	0x0800607b
 8005e28:	0800607b 	.word	0x0800607b
 8005e2c:	0800607b 	.word	0x0800607b
 8005e30:	0800607b 	.word	0x0800607b
 8005e34:	0800607b 	.word	0x0800607b
 8005e38:	08005e6f 	.word	0x08005e6f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3c:	4b94      	ldr	r3, [pc, #592]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e48:	4b91      	ldr	r3, [pc, #580]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	08db      	lsrs	r3, r3, #3
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	4a90      	ldr	r2, [pc, #576]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
 8005e58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e5a:	e111      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e5c:	4b8d      	ldr	r3, [pc, #564]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e5e:	61bb      	str	r3, [r7, #24]
    break;
 8005e60:	e10e      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e64:	61bb      	str	r3, [r7, #24]
    break;
 8005e66:	e10b      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e68:	4b8c      	ldr	r3, [pc, #560]	; (800609c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e6a:	61bb      	str	r3, [r7, #24]
    break;
 8005e6c:	e108      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e6e:	4b88      	ldr	r3, [pc, #544]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e78:	4b85      	ldr	r3, [pc, #532]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e84:	4b82      	ldr	r3, [pc, #520]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e8e:	4b80      	ldr	r3, [pc, #512]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	08db      	lsrs	r3, r3, #3
 8005e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80e1 	beq.w	8006074 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	f000 8083 	beq.w	8005fc0 <HAL_RCC_GetSysClockFreq+0x204>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	f200 80a1 	bhi.w	8006004 <HAL_RCC_GetSysClockFreq+0x248>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x114>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d056      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ece:	e099      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed0:	4b6f      	ldr	r3, [pc, #444]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d02d      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005edc:	4b6c      	ldr	r3, [pc, #432]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	4a6b      	ldr	r2, [pc, #428]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b62      	ldr	r3, [pc, #392]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f36:	e087      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b51      	ldr	r3, [pc, #324]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f5e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7a:	e065      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b40      	ldr	r3, [pc, #256]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fbe:	e043      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060ac <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fe6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006002:	e021      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a02 	vldr	s12, [r7, #8]
 800602a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	0a5b      	lsrs	r3, r3, #9
 800604e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006052:	3301      	adds	r3, #1
 8006054:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006060:	edd7 6a07 	vldr	s13, [r7, #28]
 8006064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606c:	ee17 3a90 	vmov	r3, s15
 8006070:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006072:	e005      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]
    break;
 8006078:	e002      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800607c:	61bb      	str	r3, [r7, #24]
    break;
 800607e:	bf00      	nop
  }

  return sysclockfreq;
 8006080:	69bb      	ldr	r3, [r7, #24]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3724      	adds	r7, #36	; 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
 8006094:	03d09000 	.word	0x03d09000
 8006098:	003d0900 	.word	0x003d0900
 800609c:	017d7840 	.word	0x017d7840
 80060a0:	46000000 	.word	0x46000000
 80060a4:	4c742400 	.word	0x4c742400
 80060a8:	4a742400 	.word	0x4a742400
 80060ac:	4bbebc20 	.word	0x4bbebc20

080060b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060b6:	f7ff fe81 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4b10      	ldr	r3, [pc, #64]	; (8006100 <HAL_RCC_GetHCLKFreq+0x50>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	490f      	ldr	r1, [pc, #60]	; (8006104 <HAL_RCC_GetHCLKFreq+0x54>)
 80060c8:	5ccb      	ldrb	r3, [r1, r3]
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	fa22 f303 	lsr.w	r3, r2, r3
 80060d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <HAL_RCC_GetHCLKFreq+0x50>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <HAL_RCC_GetHCLKFreq+0x54>)
 80060de:	5cd3      	ldrb	r3, [r2, r3]
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ea:	4a07      	ldr	r2, [pc, #28]	; (8006108 <HAL_RCC_GetHCLKFreq+0x58>)
 80060ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060ee:	4a07      	ldr	r2, [pc, #28]	; (800610c <HAL_RCC_GetHCLKFreq+0x5c>)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <HAL_RCC_GetHCLKFreq+0x58>)
 80060f6:	681b      	ldr	r3, [r3, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	58024400 	.word	0x58024400
 8006104:	0800bd38 	.word	0x0800bd38
 8006108:	24000004 	.word	0x24000004
 800610c:	24000000 	.word	0x24000000

08006110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006114:	f7ff ffcc 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	4904      	ldr	r1, [pc, #16]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}
 8006134:	58024400 	.word	0x58024400
 8006138:	0800bd38 	.word	0x0800bd38

0800613c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006140:	f7ff ffb6 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	4904      	ldr	r1, [pc, #16]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006152:	5ccb      	ldrb	r3, [r1, r3]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	58024400 	.word	0x58024400
 8006164:	0800bd38 	.word	0x0800bd38

08006168 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006174:	2300      	movs	r3, #0
 8006176:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d03f      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800618c:	d02a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800618e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006192:	d824      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006198:	d018      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800619a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800619e:	d81e      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a8:	d007      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061aa:	e018      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ac:	4bab      	ldr	r3, [pc, #684]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4aaa      	ldr	r2, [pc, #680]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061b8:	e015      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	2102      	movs	r1, #2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 feff 	bl	8007fc4 <RCCEx_PLL2_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061ca:	e00c      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	2102      	movs	r1, #2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 ffa8 	bl	8008128 <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061dc:	e003      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
      break;
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061ec:	4b9b      	ldr	r3, [pc, #620]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f8:	4998      	ldr	r1, [pc, #608]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	650b      	str	r3, [r1, #80]	; 0x50
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d03d      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	2b04      	cmp	r3, #4
 8006216:	d826      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006235 	.word	0x08006235
 8006224:	08006243 	.word	0x08006243
 8006228:	08006255 	.word	0x08006255
 800622c:	0800626d 	.word	0x0800626d
 8006230:	0800626d 	.word	0x0800626d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b89      	ldr	r3, [pc, #548]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4a88      	ldr	r2, [pc, #544]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006240:	e015      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f001 febb 	bl	8007fc4 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006252:	e00c      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3324      	adds	r3, #36	; 0x24
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f001 ff64 	bl	8008128 <RCCEx_PLL3_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006264:	e003      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
      break;
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800626c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006274:	4b79      	ldr	r3, [pc, #484]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	f023 0207 	bic.w	r2, r3, #7
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	4976      	ldr	r1, [pc, #472]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006282:	4313      	orrs	r3, r2
 8006284:	650b      	str	r3, [r1, #80]	; 0x50
 8006286:	e001      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006294:	2b00      	cmp	r3, #0
 8006296:	d051      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800629e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80062a2:	d036      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80062a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80062a8:	d830      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ae:	d032      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80062b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062b4:	d82a      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ba:	d02e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80062bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062c0:	d824      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c6:	d018      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062cc:	d81e      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x172>
 80062d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d6:	d007      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80062d8:	e018      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062da:	4b60      	ldr	r3, [pc, #384]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	4a5f      	ldr	r2, [pc, #380]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e6:	e019      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fe68 	bl	8007fc4 <RCCEx_PLL2_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062f8:	e010      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f001 ff11 	bl	8008128 <RCCEx_PLL3_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800630a:	e007      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
      break;
 8006310:	e004      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006312:	bf00      	nop
 8006314:	e002      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006316:	bf00      	nop
 8006318:	e000      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800631a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006322:	4b4e      	ldr	r3, [pc, #312]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006330:	494a      	ldr	r1, [pc, #296]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006332:	4313      	orrs	r3, r2
 8006334:	658b      	str	r3, [r1, #88]	; 0x58
 8006336:	e001      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	d051      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800634e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006352:	d036      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006354:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006358:	d830      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800635a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800635e:	d032      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006364:	d82a      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800636a:	d02e      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x262>
 800636c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006370:	d824      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006376:	d018      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800637c:	d81e      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006386:	d007      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006388:	e018      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638a:	4b34      	ldr	r3, [pc, #208]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	4a33      	ldr	r2, [pc, #204]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006396:	e019      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fe10 	bl	8007fc4 <RCCEx_PLL2_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063a8:	e010      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3324      	adds	r3, #36	; 0x24
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 feb9 	bl	8008128 <RCCEx_PLL3_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ba:	e007      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
      break;
 80063c0:	e004      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80063ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063d2:	4b22      	ldr	r3, [pc, #136]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063e0:	491e      	ldr	r1, [pc, #120]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	658b      	str	r3, [r1, #88]	; 0x58
 80063e6:	e001      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d035      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fc:	2b30      	cmp	r3, #48	; 0x30
 80063fe:	d01c      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006400:	2b30      	cmp	r3, #48	; 0x30
 8006402:	d817      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d00c      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d813      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006410:	2b10      	cmp	r3, #16
 8006412:	d10f      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4b11      	ldr	r3, [pc, #68]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a10      	ldr	r2, [pc, #64]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006420:	e00e      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	2102      	movs	r1, #2
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fdcb 	bl	8007fc4 <RCCEx_PLL2_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006432:	e005      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	75fb      	strb	r3, [r7, #23]
      break;
 8006438:	e002      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800643a:	bf00      	nop
 800643c:	e000      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800643e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10c      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	4902      	ldr	r1, [pc, #8]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006454:	4313      	orrs	r3, r2
 8006456:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006458:	e004      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d047      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006478:	d030      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800647a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800647e:	d82a      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006484:	d02c      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800648a:	d824      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006490:	d018      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006496:	d81e      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a0:	d007      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064a2:	e018      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a4:	4bac      	ldr	r3, [pc, #688]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4aab      	ldr	r2, [pc, #684]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064b0:	e017      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3304      	adds	r3, #4
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 fd83 	bl	8007fc4 <RCCEx_PLL2_Config>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064c2:	e00e      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fe2c 	bl	8008128 <RCCEx_PLL3_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064d4:	e005      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
      break;
 80064da:	e002      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80064e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064e8:	4b9b      	ldr	r3, [pc, #620]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	4998      	ldr	r1, [pc, #608]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	650b      	str	r3, [r1, #80]	; 0x50
 80064fa:	e001      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d049      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006514:	d02e      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800651a:	d828      	bhi.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800651c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006520:	d02a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006526:	d822      	bhi.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006528:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800652c:	d026      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800652e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006532:	d81c      	bhi.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006538:	d010      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800653a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653e:	d816      	bhi.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01d      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d111      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fd37 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800655a:	e012      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3324      	adds	r3, #36	; 0x24
 8006560:	2101      	movs	r1, #1
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fde0 	bl	8008128 <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800656c:	e009      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
      break;
 8006572:	e006      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006574:	bf00      	nop
 8006576:	e004      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006578:	bf00      	nop
 800657a:	e002      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800657c:	bf00      	nop
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006588:	4b73      	ldr	r3, [pc, #460]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800658a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	4970      	ldr	r1, [pc, #448]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006596:	4313      	orrs	r3, r2
 8006598:	650b      	str	r3, [r1, #80]	; 0x50
 800659a:	e001      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d04b      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b6:	d02e      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80065b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065bc:	d828      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d02a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d822      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065ce:	d026      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80065d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065d4:	d81c      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065da:	d010      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x496>
 80065dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e0:	d816      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01d      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80065e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ea:	d111      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fce6 	bl	8007fc4 <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065fc:	e012      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3324      	adds	r3, #36	; 0x24
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fd8f 	bl	8008128 <RCCEx_PLL3_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800660e:	e009      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006616:	bf00      	nop
 8006618:	e004      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800662a:	4b4b      	ldr	r3, [pc, #300]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006638:	4947      	ldr	r1, [pc, #284]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800663a:	4313      	orrs	r3, r2
 800663c:	658b      	str	r3, [r1, #88]	; 0x58
 800663e:	e001      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02f      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006658:	d00e      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800665a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665e:	d814      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006668:	d10f      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800666a:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	4a3a      	ldr	r2, [pc, #232]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006676:	e00c      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	2101      	movs	r1, #1
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fca0 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
      break;
 800668e:	e000      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006698:	4b2f      	ldr	r3, [pc, #188]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a4:	492c      	ldr	r1, [pc, #176]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	650b      	str	r3, [r1, #80]	; 0x50
 80066aa:	e001      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d032      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d81b      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	08006703 	.word	0x08006703
 80066d0:	080066dd 	.word	0x080066dd
 80066d4:	080066eb 	.word	0x080066eb
 80066d8:	08006703 	.word	0x08006703
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066dc:	4b1e      	ldr	r3, [pc, #120]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066e8:	e00c      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	2102      	movs	r1, #2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fc67 	bl	8007fc4 <RCCEx_PLL2_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800670a:	4b13      	ldr	r3, [pc, #76]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800670c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670e:	f023 0203 	bic.w	r2, r3, #3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	4910      	ldr	r1, [pc, #64]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006718:	4313      	orrs	r3, r2
 800671a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800671c:	e001      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 808a 	beq.w	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a09      	ldr	r2, [pc, #36]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800673c:	f7fc f900 	bl	8002940 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006742:	e00d      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006744:	f7fc f8fc 	bl	8002940 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	; 0x64
 8006750:	d906      	bls.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	75fb      	strb	r3, [r7, #23]
        break;
 8006756:	e009      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006758:	58024400 	.word	0x58024400
 800675c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006760:	4bb9      	ldr	r3, [pc, #740]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0eb      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d166      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006772:	4bb6      	ldr	r3, [pc, #728]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800677c:	4053      	eors	r3, r2
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006782:	2b00      	cmp	r3, #0
 8006784:	d013      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006786:	4bb1      	ldr	r3, [pc, #708]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006790:	4bae      	ldr	r3, [pc, #696]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	4aad      	ldr	r2, [pc, #692]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800679c:	4bab      	ldr	r3, [pc, #684]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	4aaa      	ldr	r2, [pc, #680]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067a8:	4aa8      	ldr	r2, [pc, #672]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b8:	d115      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ba:	f7fc f8c1 	bl	8002940 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067c0:	e00b      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c2:	f7fc f8bd 	bl	8002940 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d902      	bls.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	75fb      	strb	r3, [r7, #23]
            break;
 80067d8:	e005      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067da:	4b9c      	ldr	r3, [pc, #624]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0ed      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d126      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fa:	d10d      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80067fc:	4b93      	ldr	r3, [pc, #588]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800680a:	0919      	lsrs	r1, r3, #4
 800680c:	4b90      	ldr	r3, [pc, #576]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800680e:	400b      	ands	r3, r1
 8006810:	498e      	ldr	r1, [pc, #568]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006812:	4313      	orrs	r3, r2
 8006814:	610b      	str	r3, [r1, #16]
 8006816:	e005      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006818:	4b8c      	ldr	r3, [pc, #560]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4a8b      	ldr	r2, [pc, #556]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800681e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006822:	6113      	str	r3, [r2, #16]
 8006824:	4b89      	ldr	r3, [pc, #548]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800682e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006832:	4986      	ldr	r1, [pc, #536]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006834:	4313      	orrs	r3, r2
 8006836:	670b      	str	r3, [r1, #112]	; 0x70
 8006838:	e004      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	75bb      	strb	r3, [r7, #22]
 800683e:	e001      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d07e      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006854:	2b28      	cmp	r3, #40	; 0x28
 8006856:	d867      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	0800692f 	.word	0x0800692f
 8006864:	08006929 	.word	0x08006929
 8006868:	08006929 	.word	0x08006929
 800686c:	08006929 	.word	0x08006929
 8006870:	08006929 	.word	0x08006929
 8006874:	08006929 	.word	0x08006929
 8006878:	08006929 	.word	0x08006929
 800687c:	08006929 	.word	0x08006929
 8006880:	08006905 	.word	0x08006905
 8006884:	08006929 	.word	0x08006929
 8006888:	08006929 	.word	0x08006929
 800688c:	08006929 	.word	0x08006929
 8006890:	08006929 	.word	0x08006929
 8006894:	08006929 	.word	0x08006929
 8006898:	08006929 	.word	0x08006929
 800689c:	08006929 	.word	0x08006929
 80068a0:	08006917 	.word	0x08006917
 80068a4:	08006929 	.word	0x08006929
 80068a8:	08006929 	.word	0x08006929
 80068ac:	08006929 	.word	0x08006929
 80068b0:	08006929 	.word	0x08006929
 80068b4:	08006929 	.word	0x08006929
 80068b8:	08006929 	.word	0x08006929
 80068bc:	08006929 	.word	0x08006929
 80068c0:	0800692f 	.word	0x0800692f
 80068c4:	08006929 	.word	0x08006929
 80068c8:	08006929 	.word	0x08006929
 80068cc:	08006929 	.word	0x08006929
 80068d0:	08006929 	.word	0x08006929
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006929 	.word	0x08006929
 80068dc:	08006929 	.word	0x08006929
 80068e0:	0800692f 	.word	0x0800692f
 80068e4:	08006929 	.word	0x08006929
 80068e8:	08006929 	.word	0x08006929
 80068ec:	08006929 	.word	0x08006929
 80068f0:	08006929 	.word	0x08006929
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006929 	.word	0x08006929
 80068fc:	08006929 	.word	0x08006929
 8006900:	0800692f 	.word	0x0800692f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	2101      	movs	r1, #1
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fb5a 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006914:	e00c      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3324      	adds	r3, #36	; 0x24
 800691a:	2101      	movs	r1, #1
 800691c:	4618      	mov	r0, r3
 800691e:	f001 fc03 	bl	8008128 <RCCEx_PLL3_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006926:	e003      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
      break;
 800692c:	e000      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800692e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006936:	4b45      	ldr	r3, [pc, #276]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006942:	4942      	ldr	r1, [pc, #264]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006944:	4313      	orrs	r3, r2
 8006946:	654b      	str	r3, [r1, #84]	; 0x54
 8006948:	e001      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d037      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	2b05      	cmp	r3, #5
 8006960:	d820      	bhi.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006962:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	080069ab 	.word	0x080069ab
 800696c:	08006981 	.word	0x08006981
 8006970:	08006993 	.word	0x08006993
 8006974:	080069ab 	.word	0x080069ab
 8006978:	080069ab 	.word	0x080069ab
 800697c:	080069ab 	.word	0x080069ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	2101      	movs	r1, #1
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fb1c 	bl	8007fc4 <RCCEx_PLL2_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006990:	e00c      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3324      	adds	r3, #36	; 0x24
 8006996:	2101      	movs	r1, #1
 8006998:	4618      	mov	r0, r3
 800699a:	f001 fbc5 	bl	8008128 <RCCEx_PLL3_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	75fb      	strb	r3, [r7, #23]
      break;
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80069aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069b2:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	f023 0207 	bic.w	r2, r3, #7
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	4923      	ldr	r1, [pc, #140]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	654b      	str	r3, [r1, #84]	; 0x54
 80069c4:	e001      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d040      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d821      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a2b 	.word	0x08006a2b
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a13 	.word	0x08006a13
 80069f4:	08006a2b 	.word	0x08006a2b
 80069f8:	08006a2b 	.word	0x08006a2b
 80069fc:	08006a2b 	.word	0x08006a2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	2101      	movs	r1, #1
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fadc 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a10:	e00c      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3324      	adds	r3, #36	; 0x24
 8006a16:	2101      	movs	r1, #1
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fb85 	bl	8008128 <RCCEx_PLL3_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	75fb      	strb	r3, [r7, #23]
      break;
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d110      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	f023 0207 	bic.w	r2, r3, #7
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a40:	4902      	ldr	r1, [pc, #8]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	658b      	str	r3, [r1, #88]	; 0x58
 8006a46:	e007      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006a48:	58024800 	.word	0x58024800
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d04b      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a6e:	d02e      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a74:	d828      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d02a      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a80:	d822      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a86:	d026      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006a88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a8c:	d81c      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a92:	d010      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a98:	d816      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01d      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa2:	d111      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fa8a 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ab4:	e012      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	2102      	movs	r1, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fb33 	bl	8008128 <RCCEx_PLL3_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ac6:	e009      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	75fb      	strb	r3, [r7, #23]
      break;
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ae2:	4bb2      	ldr	r3, [pc, #712]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	49ae      	ldr	r1, [pc, #696]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	654b      	str	r3, [r1, #84]	; 0x54
 8006af6:	e001      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d04b      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b12:	d02e      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006b14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b18:	d828      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d02a      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b24:	d822      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b2a:	d026      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b30:	d81c      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b36:	d010      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3c:	d816      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01d      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b46:	d111      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fa38 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b58:	e012      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3324      	adds	r3, #36	; 0x24
 8006b5e:	2102      	movs	r1, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fae1 	bl	8008128 <RCCEx_PLL3_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b6a:	e009      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b70:	e006      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b72:	bf00      	nop
 8006b74:	e004      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b76:	bf00      	nop
 8006b78:	e002      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b86:	4b89      	ldr	r3, [pc, #548]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b94:	4985      	ldr	r1, [pc, #532]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	658b      	str	r3, [r1, #88]	; 0x58
 8006b9a:	e001      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04b      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bb6:	d02e      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006bb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bbc:	d828      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc2:	d02a      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc8:	d822      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006bca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bce:	d026      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006bd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bd4:	d81c      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bda:	d010      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be0:	d816      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01d      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bea:	d111      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 f9e6 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bfc:	e012      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3324      	adds	r3, #36	; 0x24
 8006c02:	2102      	movs	r1, #2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fa8f 	bl	8008128 <RCCEx_PLL3_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c0e:	e009      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e006      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c16:	bf00      	nop
 8006c18:	e004      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c2a:	4b60      	ldr	r3, [pc, #384]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c38:	495c      	ldr	r1, [pc, #368]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c3e:	e001      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d018      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c58:	d10a      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3324      	adds	r3, #36	; 0x24
 8006c5e:	2102      	movs	r1, #2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fa61 	bl	8008128 <RCCEx_PLL3_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c70:	4b4e      	ldr	r3, [pc, #312]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7c:	494b      	ldr	r1, [pc, #300]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01a      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c98:	d10a      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3324      	adds	r3, #36	; 0x24
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 fa41 	bl	8008128 <RCCEx_PLL3_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cb0:	4b3e      	ldr	r3, [pc, #248]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	493b      	ldr	r1, [pc, #236]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d034      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cda:	d01d      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ce0:	d817      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cea:	d009      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cec:	e011      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f965 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cfe:	e00c      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	2102      	movs	r1, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fa0e 	bl	8008128 <RCCEx_PLL3_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d10:	e003      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
      break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d20:	4b22      	ldr	r3, [pc, #136]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d2e:	491f      	ldr	r1, [pc, #124]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	658b      	str	r3, [r1, #88]	; 0x58
 8006d34:	e001      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d036      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d50:	d01c      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d56:	d816      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d62:	d007      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006d64:	e00f      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	4a10      	ldr	r2, [pc, #64]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d72:	e00c      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f9d4 	bl	8008128 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10d      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da2:	4902      	ldr	r1, [pc, #8]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	654b      	str	r3, [r1, #84]	; 0x54
 8006da8:	e004      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006daa:	bf00      	nop
 8006dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d029      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d007      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006dce:	e00f      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4b61      	ldr	r3, [pc, #388]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a60      	ldr	r2, [pc, #384]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ddc:	e00b      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f8ed 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006dee:	e002      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
      break;
 8006df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006dfc:	4b56      	ldr	r3, [pc, #344]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e08:	4953      	ldr	r1, [pc, #332]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e0e:	e001      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3324      	adds	r3, #36	; 0x24
 8006e24:	2102      	movs	r1, #2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f97e 	bl	8008128 <RCCEx_PLL3_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d030      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4a:	d017      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e50:	d811      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e56:	d013      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5c:	d80b      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d010      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e66:	d106      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e68:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	4a3a      	ldr	r2, [pc, #232]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e74:	e007      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7a:	e004      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e8c:	4b32      	ldr	r3, [pc, #200]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e98:	492f      	ldr	r1, [pc, #188]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	654b      	str	r3, [r1, #84]	; 0x54
 8006e9e:	e001      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006eb0:	4b29      	ldr	r3, [pc, #164]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ebc:	4926      	ldr	r1, [pc, #152]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ece:	4b22      	ldr	r3, [pc, #136]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eda:	491f      	ldr	r1, [pc, #124]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00d      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006eec:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ef6:	6113      	str	r3, [r2, #16]
 8006ef8:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f02:	4915      	ldr	r1, [pc, #84]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da08      	bge.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f10:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3c:	4906      	ldr	r1, [pc, #24]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006f42:	7dbb      	ldrb	r3, [r7, #22]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	58024400 	.word	0x58024400

08006f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b090      	sub	sp, #64	; 0x40
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6a:	f040 8089 	bne.w	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006f6e:	4b95      	ldr	r3, [pc, #596]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d87d      	bhi.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006f7e:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006f99 	.word	0x08006f99
 8006f88:	08006fbd 	.word	0x08006fbd
 8006f8c:	08006fe1 	.word	0x08006fe1
 8006f90:	08007075 	.word	0x08007075
 8006f94:	08007005 	.word	0x08007005

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f98:	4b8a      	ldr	r3, [pc, #552]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 feb8 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fb4:	e3ed      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fba:	e3ea      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fbc:	4b81      	ldr	r3, [pc, #516]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fc8:	d107      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fca:	f107 0318 	add.w	r3, r7, #24
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fbfe 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fd8:	e3db      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fde:	e3d8      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fe0:	4b78      	ldr	r3, [pc, #480]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fec:	d107      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fee:	f107 030c 	add.w	r3, r7, #12
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fd40 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ffc:	e3c9      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007002:	e3c6      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007004:	4b6f      	ldr	r3, [pc, #444]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800700c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800700e:	4b6d      	ldr	r3, [pc, #436]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b04      	cmp	r3, #4
 8007018:	d10c      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	2b00      	cmp	r3, #0
 800701e:	d109      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007020:	4b68      	ldr	r3, [pc, #416]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a67      	ldr	r2, [pc, #412]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007032:	e01e      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007034:	4b63      	ldr	r3, [pc, #396]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007040:	d106      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007048:	d102      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800704a:	4b60      	ldr	r3, [pc, #384]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704e:	e010      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007050:	4b5c      	ldr	r3, [pc, #368]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705c:	d106      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007066:	4b5a      	ldr	r3, [pc, #360]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706a:	e002      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007070:	e38f      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007072:	e38e      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007074:	4b57      	ldr	r3, [pc, #348]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007078:	e38b      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707e:	e388      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007086:	f040 80a7 	bne.w	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800708a:	4b4e      	ldr	r3, [pc, #312]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800708c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007092:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800709a:	d054      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070a2:	f200 808b 	bhi.w	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070ac:	f000 8083 	beq.w	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070b6:	f200 8081 	bhi.w	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c0:	d02f      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c8:	d878      	bhi.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070d6:	d012      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80070d8:	e070      	b.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070da:	4b3a      	ldr	r3, [pc, #232]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070e6:	d107      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fe17 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070f6:	e34c      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fc:	e349      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070fe:	4b31      	ldr	r3, [pc, #196]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fb5d 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800711a:	e33a      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007120:	e337      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007122:	4b28      	ldr	r3, [pc, #160]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712e:	d107      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fc9f 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800713e:	e328      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007144:	e325      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007146:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800714e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007150:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d10c      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007162:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	4a16      	ldr	r2, [pc, #88]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007174:	e01e      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007182:	d106      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718a:	d102      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007190:	e010      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800719e:	d106      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80071a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a6:	d102      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ac:	e002      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80071b2:	e2ee      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80071b4:	e2ed      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ba:	e2ea      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c0:	e2e7      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	03d09000 	.word	0x03d09000
 80071cc:	003d0900 	.word	0x003d0900
 80071d0:	017d7840 	.word	0x017d7840
 80071d4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071de:	f040 809c 	bne.w	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80071e2:	4b9e      	ldr	r3, [pc, #632]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80071ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071f2:	d054      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071fa:	f200 808b 	bhi.w	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007204:	f000 8083 	beq.w	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800720e:	f200 8081 	bhi.w	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007218:	d02f      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007220:	d878      	bhi.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800722e:	d012      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007230:	e070      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007232:	4b8a      	ldr	r3, [pc, #552]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800723e:	d107      	bne.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fd6b 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800724e:	e2a0      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007254:	e29d      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007256:	4b81      	ldr	r3, [pc, #516]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007262:	d107      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007264:	f107 0318 	add.w	r3, r7, #24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fab1 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007272:	e28e      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007278:	e28b      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800727a:	4b78      	ldr	r3, [pc, #480]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007286:	d107      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007288:	f107 030c 	add.w	r3, r7, #12
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fbf3 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007296:	e27c      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729c:	e279      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800729e:	4b6f      	ldr	r3, [pc, #444]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072a8:	4b6c      	ldr	r3, [pc, #432]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d10c      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072ba:	4b68      	ldr	r3, [pc, #416]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	08db      	lsrs	r3, r3, #3
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	4a66      	ldr	r2, [pc, #408]	; (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072cc:	e01e      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ce:	4b63      	ldr	r3, [pc, #396]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072da:	d106      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072e2:	d102      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80072e4:	4b5f      	ldr	r3, [pc, #380]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e8:	e010      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072ea:	4b5c      	ldr	r3, [pc, #368]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f6:	d106      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fe:	d102      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007300:	4b59      	ldr	r3, [pc, #356]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007304:	e002      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800730a:	e242      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800730c:	e241      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800730e:	4b57      	ldr	r3, [pc, #348]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007312:	e23e      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007318:	e23b      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007320:	f040 80a6 	bne.w	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007324:	4b4d      	ldr	r3, [pc, #308]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007328:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800732c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007334:	d054      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800733c:	f200 808b 	bhi.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007346:	f000 8083 	beq.w	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007350:	f200 8081 	bhi.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735a:	d02f      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007362:	d878      	bhi.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d012      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007372:	e070      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007374:	4b39      	ldr	r3, [pc, #228]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800737c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fcca 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007390:	e1ff      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007396:	e1fc      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007398:	4b30      	ldr	r3, [pc, #192]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073a4:	d107      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073a6:	f107 0318 	add.w	r3, r7, #24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fa10 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073b4:	e1ed      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ba:	e1ea      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073bc:	4b27      	ldr	r3, [pc, #156]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c8:	d107      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ca:	f107 030c 	add.w	r3, r7, #12
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fb52 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073d8:	e1db      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073de:	e1d8      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073e0:	4b1e      	ldr	r3, [pc, #120]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ea:	4b1c      	ldr	r3, [pc, #112]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d10c      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073fc:	4b17      	ldr	r3, [pc, #92]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	4a16      	ldr	r2, [pc, #88]	; (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800740e:	e01e      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007410:	4b12      	ldr	r3, [pc, #72]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741c:	d106      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007424:	d102      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800742a:	e010      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800742c:	4b0b      	ldr	r3, [pc, #44]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007438:	d106      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007440:	d102      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007446:	e002      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800744c:	e1a1      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800744e:	e1a0      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007454:	e19d      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800745a:	e19a      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800745c:	58024400 	.word	0x58024400
 8007460:	03d09000 	.word	0x03d09000
 8007464:	003d0900 	.word	0x003d0900
 8007468:	017d7840 	.word	0x017d7840
 800746c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007476:	d173      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007478:	4b9a      	ldr	r3, [pc, #616]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800747a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007488:	d02f      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007490:	d863      	bhi.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749e:	d012      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80074a0:	e05b      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074a2:	4b90      	ldr	r3, [pc, #576]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074ae:	d107      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b0:	f107 0318 	add.w	r3, r7, #24
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 f98b 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074be:	e168      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c4:	e165      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074c6:	4b87      	ldr	r3, [pc, #540]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d2:	d107      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d4:	f107 030c 	add.w	r3, r7, #12
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 facd 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074e2:	e156      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e8:	e153      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074ea:	4b7e      	ldr	r3, [pc, #504]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074f4:	4b7b      	ldr	r3, [pc, #492]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d10c      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007506:	4b77      	ldr	r3, [pc, #476]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	08db      	lsrs	r3, r3, #3
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	4a75      	ldr	r2, [pc, #468]	; (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007512:	fa22 f303 	lsr.w	r3, r2, r3
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007518:	e01e      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800751a:	4b72      	ldr	r3, [pc, #456]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007526:	d106      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800752e:	d102      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007530:	4b6e      	ldr	r3, [pc, #440]	; (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	e010      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007536:	4b6b      	ldr	r3, [pc, #428]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007542:	d106      	bne.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800754a:	d102      	bne.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800754c:	4b68      	ldr	r3, [pc, #416]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007556:	e11c      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007558:	e11b      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755e:	e118      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007566:	d133      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007568:	4b5e      	ldr	r3, [pc, #376]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800756a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007570:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757e:	d012      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007580:	e023      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007582:	4b58      	ldr	r3, [pc, #352]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800758e:	d107      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fbc3 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800759e:	e0f8      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a4:	e0f5      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075a6:	4b4f      	ldr	r3, [pc, #316]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075b2:	d107      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075b4:	f107 0318 	add.w	r3, r7, #24
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f909 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075c2:	e0e6      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075c8:	e0e3      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ce:	e0e0      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075d6:	f040 808d 	bne.w	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80075da:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80075e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ea:	d06b      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075f2:	d874      	bhi.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fa:	d056      	beq.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007602:	d86c      	bhi.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800760a:	d03b      	beq.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007612:	d864      	bhi.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761a:	d021      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007622:	d85c      	bhi.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007630:	d004      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007632:	e054      	b.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007634:	f000 f8b6 	bl	80077a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007638:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800763a:	e0aa      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800763c:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007648:	d107      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764a:	f107 0318 	add.w	r3, r7, #24
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f8be 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007658:	e09b      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800765e:	e098      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007660:	4b20      	ldr	r3, [pc, #128]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766c:	d107      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800766e:	f107 030c 	add.w	r3, r7, #12
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fa00 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800767c:	e089      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007682:	e086      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007684:	4b17      	ldr	r3, [pc, #92]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b04      	cmp	r3, #4
 800768e:	d109      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007690:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	08db      	lsrs	r3, r3, #3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	4a13      	ldr	r2, [pc, #76]	; (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076a2:	e076      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a8:	e073      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80076aa:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b6:	d102      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076bc:	e069      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c2:	e066      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d0:	d102      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076d6:	e05c      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076dc:	e059      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076e2:	e056      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	003d0900 	.word	0x003d0900
 80076f0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fa:	d148      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80076fc:	4b27      	ldr	r3, [pc, #156]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007704:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800770c:	d02a      	beq.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007714:	d838      	bhi.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007722:	d00d      	beq.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007724:	e030      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007726:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007732:	d102      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007734:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007738:	e02b      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773e:	e028      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007740:	4b16      	ldr	r3, [pc, #88]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800774c:	d107      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800774e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fae4 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800775c:	e019      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007762:	e016      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007764:	4b0d      	ldr	r3, [pc, #52]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800776c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007770:	d107      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007772:	f107 0318 	add.w	r3, r7, #24
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f82a 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007780:	e007      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007786:	e004      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778c:	e001      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007794:	4618      	mov	r0, r3
 8007796:	3740      	adds	r7, #64	; 0x40
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	58024400 	.word	0x58024400
 80077a0:	017d7840 	.word	0x017d7840

080077a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80077a8:	f7fe fc82 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 80077ac:	4602      	mov	r2, r0
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	091b      	lsrs	r3, r3, #4
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	4904      	ldr	r1, [pc, #16]	; (80077cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077ba:	5ccb      	ldrb	r3, [r1, r3]
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	58024400 	.word	0x58024400
 80077cc:	0800bd38 	.word	0x0800bd38

080077d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	; 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077d8:	4ba1      	ldr	r3, [pc, #644]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077e2:	4b9f      	ldr	r3, [pc, #636]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	0b1b      	lsrs	r3, r3, #12
 80077e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077ee:	4b9c      	ldr	r3, [pc, #624]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	091b      	lsrs	r3, r3, #4
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077fa:	4b99      	ldr	r3, [pc, #612]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	08db      	lsrs	r3, r3, #3
 8007800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8111 	beq.w	8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b02      	cmp	r3, #2
 8007822:	f000 8083 	beq.w	800792c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b02      	cmp	r3, #2
 800782a:	f200 80a1 	bhi.w	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d056      	beq.n	80078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800783a:	e099      	b.n	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800783c:	4b88      	ldr	r3, [pc, #544]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d02d      	beq.n	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007848:	4b85      	ldr	r3, [pc, #532]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	08db      	lsrs	r3, r3, #3
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	4a84      	ldr	r2, [pc, #528]	; (8007a64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007872:	4b7b      	ldr	r3, [pc, #492]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007882:	ed97 6a03 	vldr	s12, [r7, #12]
 8007886:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800788a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078a2:	e087      	b.n	80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b6:	4b6a      	ldr	r3, [pc, #424]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078e6:	e065      	b.n	80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fa:	4b59      	ldr	r3, [pc, #356]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	ed97 6a03 	vldr	s12, [r7, #12]
 800790e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800791e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800792a:	e043      	b.n	80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007936:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800793a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793e:	4b48      	ldr	r3, [pc, #288]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007952:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800796e:	e021      	b.n	80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800797e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007982:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007992:	ed97 6a03 	vldr	s12, [r7, #12]
 8007996:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800799a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80079b4:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	0a5b      	lsrs	r3, r3, #9
 80079ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079da:	ee17 2a90 	vmov	r2, s15
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80079e2:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	0c1b      	lsrs	r3, r3, #16
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a08:	ee17 2a90 	vmov	r2, s15
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007a10:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	0e1b      	lsrs	r3, r3, #24
 8007a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a36:	ee17 2a90 	vmov	r2, s15
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a3e:	e008      	b.n	8007a52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	609a      	str	r2, [r3, #8]
}
 8007a52:	bf00      	nop
 8007a54:	3724      	adds	r7, #36	; 0x24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	58024400 	.word	0x58024400
 8007a64:	03d09000 	.word	0x03d09000
 8007a68:	46000000 	.word	0x46000000
 8007a6c:	4c742400 	.word	0x4c742400
 8007a70:	4a742400 	.word	0x4a742400
 8007a74:	4bbebc20 	.word	0x4bbebc20

08007a78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b089      	sub	sp, #36	; 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a80:	4ba1      	ldr	r3, [pc, #644]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a8a:	4b9f      	ldr	r3, [pc, #636]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	0d1b      	lsrs	r3, r3, #20
 8007a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a96:	4b9c      	ldr	r3, [pc, #624]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007aa2:	4b99      	ldr	r3, [pc, #612]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa6:	08db      	lsrs	r3, r3, #3
 8007aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8111 	beq.w	8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	f000 8083 	beq.w	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	f200 80a1 	bhi.w	8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d056      	beq.n	8007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ae2:	e099      	b.n	8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ae4:	4b88      	ldr	r3, [pc, #544]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02d      	beq.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007af0:	4b85      	ldr	r3, [pc, #532]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	08db      	lsrs	r3, r3, #3
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	4a84      	ldr	r2, [pc, #528]	; (8007d0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007afc:	fa22 f303 	lsr.w	r3, r2, r3
 8007b00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1a:	4b7b      	ldr	r3, [pc, #492]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b4a:	e087      	b.n	8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5e:	4b6a      	ldr	r3, [pc, #424]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b8e:	e065      	b.n	8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba2:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd2:	e043      	b.n	8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be6:	4b48      	ldr	r3, [pc, #288]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c16:	e021      	b.n	8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2a:	4b37      	ldr	r3, [pc, #220]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c5c:	4b2a      	ldr	r3, [pc, #168]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	0a5b      	lsrs	r3, r3, #9
 8007c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c82:	ee17 2a90 	vmov	r2, s15
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c8a:	4b1f      	ldr	r3, [pc, #124]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	0c1b      	lsrs	r3, r3, #16
 8007c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb0:	ee17 2a90 	vmov	r2, s15
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007cb8:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	0e1b      	lsrs	r3, r3, #24
 8007cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cde:	ee17 2a90 	vmov	r2, s15
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ce6:	e008      	b.n	8007cfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	609a      	str	r2, [r3, #8]
}
 8007cfa:	bf00      	nop
 8007cfc:	3724      	adds	r7, #36	; 0x24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	03d09000 	.word	0x03d09000
 8007d10:	46000000 	.word	0x46000000
 8007d14:	4c742400 	.word	0x4c742400
 8007d18:	4a742400 	.word	0x4a742400
 8007d1c:	4bbebc20 	.word	0x4bbebc20

08007d20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d28:	4ba0      	ldr	r3, [pc, #640]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007d32:	4b9e      	ldr	r3, [pc, #632]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d3e:	4b9b      	ldr	r3, [pc, #620]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d48:	4b98      	ldr	r3, [pc, #608]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8111 	beq.w	8007f8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	f000 8083 	beq.w	8007e7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	f200 80a1 	bhi.w	8007ebe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d056      	beq.n	8007e36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d88:	e099      	b.n	8007ebe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d8a:	4b88      	ldr	r3, [pc, #544]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02d      	beq.n	8007df2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d96:	4b85      	ldr	r3, [pc, #532]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	08db      	lsrs	r3, r3, #3
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	4a83      	ldr	r2, [pc, #524]	; (8007fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007da2:	fa22 f303 	lsr.w	r3, r2, r3
 8007da6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	ee07 3a90 	vmov	s15, r3
 8007db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc0:	4b7a      	ldr	r3, [pc, #488]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	ee07 3a90 	vmov	s15, r3
 8007dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007df0:	e087      	b.n	8007f02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e04:	4b69      	ldr	r3, [pc, #420]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e18:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e34:	e065      	b.n	8007f02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007fbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e48:	4b58      	ldr	r3, [pc, #352]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e78:	e043      	b.n	8007f02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8c:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebc:	e021      	b.n	8007f02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed0:	4b36      	ldr	r3, [pc, #216]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007f02:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	0a5b      	lsrs	r3, r3, #9
 8007f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f28:	ee17 2a90 	vmov	r2, s15
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f56:	ee17 2a90 	vmov	r2, s15
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f5e:	4b13      	ldr	r3, [pc, #76]	; (8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	0e1b      	lsrs	r3, r3, #24
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f84:	ee17 2a90 	vmov	r2, s15
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	3724      	adds	r7, #36	; 0x24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	03d09000 	.word	0x03d09000
 8007fb4:	46000000 	.word	0x46000000
 8007fb8:	4c742400 	.word	0x4c742400
 8007fbc:	4a742400 	.word	0x4a742400
 8007fc0:	4bbebc20 	.word	0x4bbebc20

08007fc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fd2:	4b53      	ldr	r3, [pc, #332]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d101      	bne.n	8007fe2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e099      	b.n	8008116 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fe2:	4b4f      	ldr	r3, [pc, #316]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a4e      	ldr	r2, [pc, #312]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fee:	f7fa fca7 	bl	8002940 <HAL_GetTick>
 8007ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ff4:	e008      	b.n	8008008 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ff6:	f7fa fca3 	bl	8002940 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e086      	b.n	8008116 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008008:	4b45      	ldr	r3, [pc, #276]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f0      	bne.n	8007ff6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008014:	4b42      	ldr	r3, [pc, #264]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	493f      	ldr	r1, [pc, #252]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008024:	4313      	orrs	r3, r2
 8008026:	628b      	str	r3, [r1, #40]	; 0x28
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	3b01      	subs	r3, #1
 800802e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	3b01      	subs	r3, #1
 8008038:	025b      	lsls	r3, r3, #9
 800803a:	b29b      	uxth	r3, r3
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	3b01      	subs	r3, #1
 8008044:	041b      	lsls	r3, r3, #16
 8008046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	3b01      	subs	r3, #1
 8008052:	061b      	lsls	r3, r3, #24
 8008054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008058:	4931      	ldr	r1, [pc, #196]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800805e:	4b30      	ldr	r3, [pc, #192]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	492d      	ldr	r1, [pc, #180]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800806c:	4313      	orrs	r3, r2
 800806e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008070:	4b2b      	ldr	r3, [pc, #172]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f023 0220 	bic.w	r2, r3, #32
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	4928      	ldr	r1, [pc, #160]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800807e:	4313      	orrs	r3, r2
 8008080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	4a26      	ldr	r2, [pc, #152]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008088:	f023 0310 	bic.w	r3, r3, #16
 800808c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800808e:	4b24      	ldr	r3, [pc, #144]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008092:	4b24      	ldr	r3, [pc, #144]	; (8008124 <RCCEx_PLL2_Config+0x160>)
 8008094:	4013      	ands	r3, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	69d2      	ldr	r2, [r2, #28]
 800809a:	00d2      	lsls	r2, r2, #3
 800809c:	4920      	ldr	r1, [pc, #128]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080a2:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	4a1e      	ldr	r2, [pc, #120]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	f043 0310 	orr.w	r3, r3, #16
 80080ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080b4:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4a19      	ldr	r2, [pc, #100]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080c0:	e00f      	b.n	80080e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d106      	bne.n	80080d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a14      	ldr	r2, [pc, #80]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080d4:	e005      	b.n	80080e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080d6:	4b12      	ldr	r3, [pc, #72]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	4a11      	ldr	r2, [pc, #68]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a0e      	ldr	r2, [pc, #56]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ee:	f7fa fc27 	bl	8002940 <HAL_GetTick>
 80080f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080f4:	e008      	b.n	8008108 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080f6:	f7fa fc23 	bl	8002940 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e006      	b.n	8008116 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0f0      	beq.n	80080f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	58024400 	.word	0x58024400
 8008124:	ffff0007 	.word	0xffff0007

08008128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008136:	4b53      	ldr	r3, [pc, #332]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d101      	bne.n	8008146 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e099      	b.n	800827a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008146:	4b4f      	ldr	r3, [pc, #316]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a4e      	ldr	r2, [pc, #312]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800814c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008152:	f7fa fbf5 	bl	8002940 <HAL_GetTick>
 8008156:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008158:	e008      	b.n	800816c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800815a:	f7fa fbf1 	bl	8002940 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e086      	b.n	800827a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800816c:	4b45      	ldr	r3, [pc, #276]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f0      	bne.n	800815a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008178:	4b42      	ldr	r3, [pc, #264]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	051b      	lsls	r3, r3, #20
 8008186:	493f      	ldr	r1, [pc, #252]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	628b      	str	r3, [r1, #40]	; 0x28
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	3b01      	subs	r3, #1
 8008192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	025b      	lsls	r3, r3, #9
 800819e:	b29b      	uxth	r3, r3
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081bc:	4931      	ldr	r1, [pc, #196]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081c2:	4b30      	ldr	r3, [pc, #192]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	492d      	ldr	r1, [pc, #180]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081d4:	4b2b      	ldr	r3, [pc, #172]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4928      	ldr	r1, [pc, #160]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081e6:	4b27      	ldr	r3, [pc, #156]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a26      	ldr	r2, [pc, #152]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <RCCEx_PLL3_Config+0x160>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	69d2      	ldr	r2, [r2, #28]
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	4920      	ldr	r1, [pc, #128]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800820c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	4a19      	ldr	r2, [pc, #100]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800821e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008224:	e00f      	b.n	8008246 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d106      	bne.n	800823a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800822c:	4b15      	ldr	r3, [pc, #84]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008238:	e005      	b.n	8008246 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	4a11      	ldr	r2, [pc, #68]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800824c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008252:	f7fa fb75 	bl	8002940 <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008258:	e008      	b.n	800826c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800825a:	f7fa fb71 	bl	8002940 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e006      	b.n	800827a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	ffff0007 	.word	0xffff0007

0800828c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d067      	beq.n	800836e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7f9 ff16 	bl	80020e4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	22ca      	movs	r2, #202	; 0xca
 80082c6:	625a      	str	r2, [r3, #36]	; 0x24
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2253      	movs	r2, #83	; 0x53
 80082ce:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f99f 	bl	8008614 <RTC_EnterInitMode>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d13b      	bne.n	8008358 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6899      	ldr	r1, [r3, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	4b23      	ldr	r3, [pc, #140]	; (8008378 <HAL_RTC_Init+0xec>)
 80082ec:	400b      	ands	r3, r1
 80082ee:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6899      	ldr	r1, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	0419      	lsls	r1, r3, #16
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f9ab 	bl	800867c <RTC_ExitInitMode>
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d113      	bne.n	8008358 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0203 	bic.w	r2, r2, #3
 800833e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69da      	ldr	r2, [r3, #28]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	22ff      	movs	r2, #255	; 0xff
 800835e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	ff8fffbf 	.word	0xff8fffbf

0800837c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <HAL_RTC_SetTime+0x1a>
 8008392:	2302      	movs	r3, #2
 8008394:	e089      	b.n	80084aa <HAL_RTC_SetTime+0x12e>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	22ca      	movs	r2, #202	; 0xca
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2253      	movs	r2, #83	; 0x53
 80083b4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f92c 	bl	8008614 <RTC_EnterInitMode>
 80083bc:	4603      	mov	r3, r0
 80083be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80083c0:	7cfb      	ldrb	r3, [r7, #19]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d161      	bne.n	800848a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d126      	bne.n	800841a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2200      	movs	r2, #0
 80083de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 f987 	bl	80086f8 <RTC_ByteToBcd2>
 80083ea:	4603      	mov	r3, r0
 80083ec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f980 	bl	80086f8 <RTC_ByteToBcd2>
 80083f8:	4603      	mov	r3, r0
 80083fa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083fc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	789b      	ldrb	r3, [r3, #2]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f978 	bl	80086f8 <RTC_ByteToBcd2>
 8008408:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800840a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	78db      	ldrb	r3, [r3, #3]
 8008412:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e018      	b.n	800844c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800843a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008440:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	78db      	ldrb	r3, [r3, #3]
 8008446:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008448:	4313      	orrs	r3, r2
 800844a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	6979      	ldr	r1, [r7, #20]
 8008452:	4b18      	ldr	r3, [pc, #96]	; (80084b4 <HAL_RTC_SetTime+0x138>)
 8008454:	400b      	ands	r3, r1
 8008456:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008466:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6899      	ldr	r1, [r3, #8]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	431a      	orrs	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f8fb 	bl	800867c <RTC_ExitInitMode>
 8008486:	4603      	mov	r3, r0
 8008488:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	22ff      	movs	r2, #255	; 0xff
 8008490:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008492:	7cfb      	ldrb	r3, [r7, #19]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80084a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd90      	pop	{r4, r7, pc}
 80084b2:	bf00      	nop
 80084b4:	007f7f7f 	.word	0x007f7f7f

080084b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084b8:	b590      	push	{r4, r7, lr}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_RTC_SetDate+0x1a>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e073      	b.n	80085ba <HAL_RTC_SetDate+0x102>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10e      	bne.n	8008506 <HAL_RTC_SetDate+0x4e>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	f003 0310 	and.w	r3, r3, #16
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d008      	beq.n	8008506 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	f023 0310 	bic.w	r3, r3, #16
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	330a      	adds	r3, #10
 8008500:	b2da      	uxtb	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d11c      	bne.n	8008546 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	78db      	ldrb	r3, [r3, #3]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8f1 	bl	80086f8 <RTC_ByteToBcd2>
 8008516:	4603      	mov	r3, r0
 8008518:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f8ea 	bl	80086f8 <RTC_ByteToBcd2>
 8008524:	4603      	mov	r3, r0
 8008526:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008528:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	789b      	ldrb	r3, [r3, #2]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f8e2 	bl	80086f8 <RTC_ByteToBcd2>
 8008534:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008536:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e00e      	b.n	8008564 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	78db      	ldrb	r3, [r3, #3]
 800854a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008552:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008558:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	22ca      	movs	r2, #202	; 0xca
 800856a:	625a      	str	r2, [r3, #36]	; 0x24
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2253      	movs	r2, #83	; 0x53
 8008572:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f84d 	bl	8008614 <RTC_EnterInitMode>
 800857a:	4603      	mov	r3, r0
 800857c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800857e:	7cfb      	ldrb	r3, [r7, #19]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	6979      	ldr	r1, [r7, #20]
 800858a:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <HAL_RTC_SetDate+0x10c>)
 800858c:	400b      	ands	r3, r1
 800858e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f873 	bl	800867c <RTC_ExitInitMode>
 8008596:	4603      	mov	r3, r0
 8008598:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	22ff      	movs	r2, #255	; 0xff
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80085a2:	7cfb      	ldrb	r3, [r7, #19]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80085b8:	7cfb      	ldrb	r3, [r7, #19]


}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd90      	pop	{r4, r7, pc}
 80085c2:	bf00      	nop
 80085c4:	00ffff3f 	.word	0x00ffff3f

080085c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80085de:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80085e0:	f7fa f9ae 	bl	8002940 <HAL_GetTick>
 80085e4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085e6:	e009      	b.n	80085fc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085e8:	f7fa f9aa 	bl	8002940 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085f6:	d901      	bls.n	80085fc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e007      	b.n	800860c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0ee      	beq.n	80085e8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d120      	bne.n	8008670 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f04f 32ff 	mov.w	r2, #4294967295
 8008636:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008638:	f7fa f982 	bl	8002940 <HAL_GetTick>
 800863c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800863e:	e00d      	b.n	800865c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008640:	f7fa f97e 	bl	8002940 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800864e:	d905      	bls.n	800865c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2203      	movs	r2, #3
 8008658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <RTC_EnterInitMode+0x5c>
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	2b03      	cmp	r3, #3
 800866e:	d1e7      	bne.n	8008640 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008688:	4b1a      	ldr	r3, [pc, #104]	; (80086f4 <RTC_ExitInitMode+0x78>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4a19      	ldr	r2, [pc, #100]	; (80086f4 <RTC_ExitInitMode+0x78>)
 800868e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008692:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <RTC_ExitInitMode+0x78>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10c      	bne.n	80086ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff ff91 	bl	80085c8 <HAL_RTC_WaitForSynchro>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01e      	beq.n	80086ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2203      	movs	r2, #3
 80086b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
 80086b8:	e017      	b.n	80086ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <RTC_ExitInitMode+0x78>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4a0d      	ldr	r2, [pc, #52]	; (80086f4 <RTC_ExitInitMode+0x78>)
 80086c0:	f023 0320 	bic.w	r3, r3, #32
 80086c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff ff7e 	bl	80085c8 <HAL_RTC_WaitForSynchro>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2203      	movs	r2, #3
 80086d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086de:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <RTC_ExitInitMode+0x78>)
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	4a04      	ldr	r2, [pc, #16]	; (80086f4 <RTC_ExitInitMode+0x78>)
 80086e4:	f043 0320 	orr.w	r3, r3, #32
 80086e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	58004000 	.word	0x58004000

080086f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800870a:	e005      	b.n	8008718 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3301      	adds	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	3b0a      	subs	r3, #10
 8008716:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	2b09      	cmp	r3, #9
 800871c:	d8f6      	bhi.n	800870c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	b2da      	uxtb	r2, r3
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	4313      	orrs	r3, r2
 800872a:	b2db      	uxtb	r3, r3
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e049      	b.n	80087de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7f9 fd40 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f000 fb9e 	bl	8008eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d001      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e05e      	b.n	80088be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0201 	orr.w	r2, r2, #1
 8008816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <HAL_TIM_Base_Start_IT+0xe4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d02c      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882a:	d027      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a27      	ldr	r2, [pc, #156]	; (80088d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a26      	ldr	r2, [pc, #152]	; (80088d4 <HAL_TIM_Base_Start_IT+0xec>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d01d      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <HAL_TIM_Base_Start_IT+0xf0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a23      	ldr	r2, [pc, #140]	; (80088dc <HAL_TIM_Base_Start_IT+0xf4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <HAL_TIM_Base_Start_IT+0xfc>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a1e      	ldr	r2, [pc, #120]	; (80088e8 <HAL_TIM_Base_Start_IT+0x100>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x94>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <HAL_TIM_Base_Start_IT+0x104>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d115      	bne.n	80088a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <HAL_TIM_Base_Start_IT+0x108>)
 8008884:	4013      	ands	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d015      	beq.n	80088ba <HAL_TIM_Base_Start_IT+0xd2>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008894:	d011      	beq.n	80088ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0201 	orr.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a6:	e008      	b.n	80088ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e000      	b.n	80088bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40010000 	.word	0x40010000
 80088d0:	40000400 	.word	0x40000400
 80088d4:	40000800 	.word	0x40000800
 80088d8:	40000c00 	.word	0x40000c00
 80088dc:	40010400 	.word	0x40010400
 80088e0:	40001800 	.word	0x40001800
 80088e4:	40014000 	.word	0x40014000
 80088e8:	4000e000 	.word	0x4000e000
 80088ec:	4000e400 	.word	0x4000e400
 80088f0:	00010007 	.word	0x00010007

080088f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0201 	bic.w	r2, r2, #1
 800890a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a1a      	ldr	r2, [r3, #32]
 8008912:	f241 1311 	movw	r3, #4369	; 0x1111
 8008916:	4013      	ands	r3, r2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10f      	bne.n	800893c <HAL_TIM_Base_Stop_IT+0x48>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	f240 4344 	movw	r3, #1092	; 0x444
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <HAL_TIM_Base_Stop_IT+0x48>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e049      	b.n	80089f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7f9 fbe3 	bl	8002144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3304      	adds	r3, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f000 fa91 	bl	8008eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d122      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d11b      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0202 	mvn.w	r2, #2
 8008a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa1a 	bl	8008e7c <HAL_TIM_IC_CaptureCallback>
 8008a48:	e005      	b.n	8008a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa0c 	bl	8008e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fa1d 	bl	8008e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0304 	and.w	r3, r3, #4
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d122      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d11b      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0204 	mvn.w	r2, #4
 8008a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9f0 	bl	8008e7c <HAL_TIM_IC_CaptureCallback>
 8008a9c:	e005      	b.n	8008aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f9e2 	bl	8008e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f9f3 	bl	8008e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b08      	cmp	r3, #8
 8008abc:	d122      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d11b      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f06f 0208 	mvn.w	r2, #8
 8008ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f9c6 	bl	8008e7c <HAL_TIM_IC_CaptureCallback>
 8008af0:	e005      	b.n	8008afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f9b8 	bl	8008e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9c9 	bl	8008e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0310 	and.w	r3, r3, #16
 8008b0e:	2b10      	cmp	r3, #16
 8008b10:	d122      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d11b      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0210 	mvn.w	r2, #16
 8008b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f99c 	bl	8008e7c <HAL_TIM_IC_CaptureCallback>
 8008b44:	e005      	b.n	8008b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f98e 	bl	8008e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f99f 	bl	8008e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d10e      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d107      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f06f 0201 	mvn.w	r2, #1
 8008b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f7 fe6a 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8e:	2b80      	cmp	r3, #128	; 0x80
 8008b90:	d10e      	bne.n	8008bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d107      	bne.n	8008bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fe46 	bl	800983c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbe:	d10e      	bne.n	8008bde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bca:	2b80      	cmp	r3, #128	; 0x80
 8008bcc:	d107      	bne.n	8008bde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fe39 	bl	8009850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	d10e      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf6:	2b40      	cmp	r3, #64	; 0x40
 8008bf8:	d107      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f94d 	bl	8008ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d10e      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	d107      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f06f 0220 	mvn.w	r2, #32
 8008c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fdf9 	bl	8009828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e0ff      	b.n	8008e5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b14      	cmp	r3, #20
 8008c6a:	f200 80f0 	bhi.w	8008e4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008e4f 	.word	0x08008e4f
 8008c7c:	08008e4f 	.word	0x08008e4f
 8008c80:	08008e4f 	.word	0x08008e4f
 8008c84:	08008d09 	.word	0x08008d09
 8008c88:	08008e4f 	.word	0x08008e4f
 8008c8c:	08008e4f 	.word	0x08008e4f
 8008c90:	08008e4f 	.word	0x08008e4f
 8008c94:	08008d4b 	.word	0x08008d4b
 8008c98:	08008e4f 	.word	0x08008e4f
 8008c9c:	08008e4f 	.word	0x08008e4f
 8008ca0:	08008e4f 	.word	0x08008e4f
 8008ca4:	08008d8b 	.word	0x08008d8b
 8008ca8:	08008e4f 	.word	0x08008e4f
 8008cac:	08008e4f 	.word	0x08008e4f
 8008cb0:	08008e4f 	.word	0x08008e4f
 8008cb4:	08008dcd 	.word	0x08008dcd
 8008cb8:	08008e4f 	.word	0x08008e4f
 8008cbc:	08008e4f 	.word	0x08008e4f
 8008cc0:	08008e4f 	.word	0x08008e4f
 8008cc4:	08008e0d 	.word	0x08008e0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68b9      	ldr	r1, [r7, #8]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f998 	bl	8009004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0208 	orr.w	r2, r2, #8
 8008ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699a      	ldr	r2, [r3, #24]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0204 	bic.w	r2, r2, #4
 8008cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6999      	ldr	r1, [r3, #24]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	691a      	ldr	r2, [r3, #16]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	619a      	str	r2, [r3, #24]
      break;
 8008d06:	e0a5      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fa08 	bl	8009124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6999      	ldr	r1, [r3, #24]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	021a      	lsls	r2, r3, #8
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	619a      	str	r2, [r3, #24]
      break;
 8008d48:	e084      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fa71 	bl	8009238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0208 	orr.w	r2, r2, #8
 8008d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69da      	ldr	r2, [r3, #28]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0204 	bic.w	r2, r2, #4
 8008d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69d9      	ldr	r1, [r3, #28]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	61da      	str	r2, [r3, #28]
      break;
 8008d88:	e064      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fad9 	bl	8009348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69da      	ldr	r2, [r3, #28]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69da      	ldr	r2, [r3, #28]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69d9      	ldr	r1, [r3, #28]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	021a      	lsls	r2, r3, #8
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	61da      	str	r2, [r3, #28]
      break;
 8008dca:	e043      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fb22 	bl	800941c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0208 	orr.w	r2, r2, #8
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0204 	bic.w	r2, r2, #4
 8008df6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e0a:	e023      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fb66 	bl	80094e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	021a      	lsls	r2, r3, #8
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e4c:	e002      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
      break;
 8008e52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop

08008e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a44      	ldr	r2, [pc, #272]	; (8008fdc <TIM_Base_SetConfig+0x124>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d013      	beq.n	8008ef8 <TIM_Base_SetConfig+0x40>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed6:	d00f      	beq.n	8008ef8 <TIM_Base_SetConfig+0x40>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <TIM_Base_SetConfig+0x128>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00b      	beq.n	8008ef8 <TIM_Base_SetConfig+0x40>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a40      	ldr	r2, [pc, #256]	; (8008fe4 <TIM_Base_SetConfig+0x12c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d007      	beq.n	8008ef8 <TIM_Base_SetConfig+0x40>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a3f      	ldr	r2, [pc, #252]	; (8008fe8 <TIM_Base_SetConfig+0x130>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_Base_SetConfig+0x40>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a3e      	ldr	r2, [pc, #248]	; (8008fec <TIM_Base_SetConfig+0x134>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d108      	bne.n	8008f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a33      	ldr	r2, [pc, #204]	; (8008fdc <TIM_Base_SetConfig+0x124>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d027      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f18:	d023      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a30      	ldr	r2, [pc, #192]	; (8008fe0 <TIM_Base_SetConfig+0x128>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d01f      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a2f      	ldr	r2, [pc, #188]	; (8008fe4 <TIM_Base_SetConfig+0x12c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d01b      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a2e      	ldr	r2, [pc, #184]	; (8008fe8 <TIM_Base_SetConfig+0x130>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d017      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a2d      	ldr	r2, [pc, #180]	; (8008fec <TIM_Base_SetConfig+0x134>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d013      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <TIM_Base_SetConfig+0x138>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00f      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a2b      	ldr	r2, [pc, #172]	; (8008ff4 <TIM_Base_SetConfig+0x13c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d00b      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a2a      	ldr	r2, [pc, #168]	; (8008ff8 <TIM_Base_SetConfig+0x140>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d007      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a29      	ldr	r2, [pc, #164]	; (8008ffc <TIM_Base_SetConfig+0x144>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d003      	beq.n	8008f62 <TIM_Base_SetConfig+0xaa>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a28      	ldr	r2, [pc, #160]	; (8009000 <TIM_Base_SetConfig+0x148>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d108      	bne.n	8008f74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a10      	ldr	r2, [pc, #64]	; (8008fdc <TIM_Base_SetConfig+0x124>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00f      	beq.n	8008fc0 <TIM_Base_SetConfig+0x108>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a12      	ldr	r2, [pc, #72]	; (8008fec <TIM_Base_SetConfig+0x134>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00b      	beq.n	8008fc0 <TIM_Base_SetConfig+0x108>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a11      	ldr	r2, [pc, #68]	; (8008ff0 <TIM_Base_SetConfig+0x138>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d007      	beq.n	8008fc0 <TIM_Base_SetConfig+0x108>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <TIM_Base_SetConfig+0x13c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_Base_SetConfig+0x108>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a0f      	ldr	r2, [pc, #60]	; (8008ff8 <TIM_Base_SetConfig+0x140>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d103      	bne.n	8008fc8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	615a      	str	r2, [r3, #20]
}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40010000 	.word	0x40010000
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800
 8008fe8:	40000c00 	.word	0x40000c00
 8008fec:	40010400 	.word	0x40010400
 8008ff0:	40014000 	.word	0x40014000
 8008ff4:	40014400 	.word	0x40014400
 8008ff8:	40014800 	.word	0x40014800
 8008ffc:	4000e000 	.word	0x4000e000
 8009000:	4000e400 	.word	0x4000e400

08009004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4b37      	ldr	r3, [pc, #220]	; (800910c <TIM_OC1_SetConfig+0x108>)
 8009030:	4013      	ands	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f023 0302 	bic.w	r3, r3, #2
 800904c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	4313      	orrs	r3, r2
 8009056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a2d      	ldr	r2, [pc, #180]	; (8009110 <TIM_OC1_SetConfig+0x10c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00f      	beq.n	8009080 <TIM_OC1_SetConfig+0x7c>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a2c      	ldr	r2, [pc, #176]	; (8009114 <TIM_OC1_SetConfig+0x110>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00b      	beq.n	8009080 <TIM_OC1_SetConfig+0x7c>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a2b      	ldr	r2, [pc, #172]	; (8009118 <TIM_OC1_SetConfig+0x114>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d007      	beq.n	8009080 <TIM_OC1_SetConfig+0x7c>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a2a      	ldr	r2, [pc, #168]	; (800911c <TIM_OC1_SetConfig+0x118>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d003      	beq.n	8009080 <TIM_OC1_SetConfig+0x7c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a29      	ldr	r2, [pc, #164]	; (8009120 <TIM_OC1_SetConfig+0x11c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d10c      	bne.n	800909a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f023 0308 	bic.w	r3, r3, #8
 8009086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	4313      	orrs	r3, r2
 8009090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f023 0304 	bic.w	r3, r3, #4
 8009098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1c      	ldr	r2, [pc, #112]	; (8009110 <TIM_OC1_SetConfig+0x10c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00f      	beq.n	80090c2 <TIM_OC1_SetConfig+0xbe>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a1b      	ldr	r2, [pc, #108]	; (8009114 <TIM_OC1_SetConfig+0x110>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00b      	beq.n	80090c2 <TIM_OC1_SetConfig+0xbe>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1a      	ldr	r2, [pc, #104]	; (8009118 <TIM_OC1_SetConfig+0x114>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <TIM_OC1_SetConfig+0xbe>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a19      	ldr	r2, [pc, #100]	; (800911c <TIM_OC1_SetConfig+0x118>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d003      	beq.n	80090c2 <TIM_OC1_SetConfig+0xbe>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a18      	ldr	r2, [pc, #96]	; (8009120 <TIM_OC1_SetConfig+0x11c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d111      	bne.n	80090e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4313      	orrs	r3, r2
 80090da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	621a      	str	r2, [r3, #32]
}
 8009100:	bf00      	nop
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	fffeff8f 	.word	0xfffeff8f
 8009110:	40010000 	.word	0x40010000
 8009114:	40010400 	.word	0x40010400
 8009118:	40014000 	.word	0x40014000
 800911c:	40014400 	.word	0x40014400
 8009120:	40014800 	.word	0x40014800

08009124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f023 0210 	bic.w	r2, r3, #16
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4b34      	ldr	r3, [pc, #208]	; (8009220 <TIM_OC2_SetConfig+0xfc>)
 8009150:	4013      	ands	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800915a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4313      	orrs	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f023 0320 	bic.w	r3, r3, #32
 800916e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a29      	ldr	r2, [pc, #164]	; (8009224 <TIM_OC2_SetConfig+0x100>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d003      	beq.n	800918c <TIM_OC2_SetConfig+0x68>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a28      	ldr	r2, [pc, #160]	; (8009228 <TIM_OC2_SetConfig+0x104>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d10d      	bne.n	80091a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a1e      	ldr	r2, [pc, #120]	; (8009224 <TIM_OC2_SetConfig+0x100>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00f      	beq.n	80091d0 <TIM_OC2_SetConfig+0xac>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <TIM_OC2_SetConfig+0x104>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00b      	beq.n	80091d0 <TIM_OC2_SetConfig+0xac>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a1c      	ldr	r2, [pc, #112]	; (800922c <TIM_OC2_SetConfig+0x108>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d007      	beq.n	80091d0 <TIM_OC2_SetConfig+0xac>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a1b      	ldr	r2, [pc, #108]	; (8009230 <TIM_OC2_SetConfig+0x10c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <TIM_OC2_SetConfig+0xac>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a1a      	ldr	r2, [pc, #104]	; (8009234 <TIM_OC2_SetConfig+0x110>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d113      	bne.n	80091f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	feff8fff 	.word	0xfeff8fff
 8009224:	40010000 	.word	0x40010000
 8009228:	40010400 	.word	0x40010400
 800922c:	40014000 	.word	0x40014000
 8009230:	40014400 	.word	0x40014400
 8009234:	40014800 	.word	0x40014800

08009238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4b33      	ldr	r3, [pc, #204]	; (8009330 <TIM_OC3_SetConfig+0xf8>)
 8009264:	4013      	ands	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 0303 	bic.w	r3, r3, #3
 800926e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	021b      	lsls	r3, r3, #8
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a28      	ldr	r2, [pc, #160]	; (8009334 <TIM_OC3_SetConfig+0xfc>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d003      	beq.n	800929e <TIM_OC3_SetConfig+0x66>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a27      	ldr	r2, [pc, #156]	; (8009338 <TIM_OC3_SetConfig+0x100>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d10d      	bne.n	80092ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <TIM_OC3_SetConfig+0xfc>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d00f      	beq.n	80092e2 <TIM_OC3_SetConfig+0xaa>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a1c      	ldr	r2, [pc, #112]	; (8009338 <TIM_OC3_SetConfig+0x100>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00b      	beq.n	80092e2 <TIM_OC3_SetConfig+0xaa>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a1b      	ldr	r2, [pc, #108]	; (800933c <TIM_OC3_SetConfig+0x104>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d007      	beq.n	80092e2 <TIM_OC3_SetConfig+0xaa>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a1a      	ldr	r2, [pc, #104]	; (8009340 <TIM_OC3_SetConfig+0x108>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d003      	beq.n	80092e2 <TIM_OC3_SetConfig+0xaa>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <TIM_OC3_SetConfig+0x10c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d113      	bne.n	800930a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	011b      	lsls	r3, r3, #4
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4313      	orrs	r3, r2
 8009308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	621a      	str	r2, [r3, #32]
}
 8009324:	bf00      	nop
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	fffeff8f 	.word	0xfffeff8f
 8009334:	40010000 	.word	0x40010000
 8009338:	40010400 	.word	0x40010400
 800933c:	40014000 	.word	0x40014000
 8009340:	40014400 	.word	0x40014400
 8009344:	40014800 	.word	0x40014800

08009348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <TIM_OC4_SetConfig+0xbc>)
 8009374:	4013      	ands	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800937e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4313      	orrs	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	031b      	lsls	r3, r3, #12
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	4313      	orrs	r3, r2
 800939e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a19      	ldr	r2, [pc, #100]	; (8009408 <TIM_OC4_SetConfig+0xc0>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00f      	beq.n	80093c8 <TIM_OC4_SetConfig+0x80>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a18      	ldr	r2, [pc, #96]	; (800940c <TIM_OC4_SetConfig+0xc4>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d00b      	beq.n	80093c8 <TIM_OC4_SetConfig+0x80>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a17      	ldr	r2, [pc, #92]	; (8009410 <TIM_OC4_SetConfig+0xc8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d007      	beq.n	80093c8 <TIM_OC4_SetConfig+0x80>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a16      	ldr	r2, [pc, #88]	; (8009414 <TIM_OC4_SetConfig+0xcc>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d003      	beq.n	80093c8 <TIM_OC4_SetConfig+0x80>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a15      	ldr	r2, [pc, #84]	; (8009418 <TIM_OC4_SetConfig+0xd0>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d109      	bne.n	80093dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	019b      	lsls	r3, r3, #6
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	621a      	str	r2, [r3, #32]
}
 80093f6:	bf00      	nop
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	feff8fff 	.word	0xfeff8fff
 8009408:	40010000 	.word	0x40010000
 800940c:	40010400 	.word	0x40010400
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800

0800941c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4b21      	ldr	r3, [pc, #132]	; (80094cc <TIM_OC5_SetConfig+0xb0>)
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800945c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a18      	ldr	r2, [pc, #96]	; (80094d0 <TIM_OC5_SetConfig+0xb4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00f      	beq.n	8009492 <TIM_OC5_SetConfig+0x76>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a17      	ldr	r2, [pc, #92]	; (80094d4 <TIM_OC5_SetConfig+0xb8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_OC5_SetConfig+0x76>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a16      	ldr	r2, [pc, #88]	; (80094d8 <TIM_OC5_SetConfig+0xbc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <TIM_OC5_SetConfig+0x76>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a15      	ldr	r2, [pc, #84]	; (80094dc <TIM_OC5_SetConfig+0xc0>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_OC5_SetConfig+0x76>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a14      	ldr	r2, [pc, #80]	; (80094e0 <TIM_OC5_SetConfig+0xc4>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d109      	bne.n	80094a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	621a      	str	r2, [r3, #32]
}
 80094c0:	bf00      	nop
 80094c2:	371c      	adds	r7, #28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	fffeff8f 	.word	0xfffeff8f
 80094d0:	40010000 	.word	0x40010000
 80094d4:	40010400 	.word	0x40010400
 80094d8:	40014000 	.word	0x40014000
 80094dc:	40014400 	.word	0x40014400
 80094e0:	40014800 	.word	0x40014800

080094e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4b22      	ldr	r3, [pc, #136]	; (8009598 <TIM_OC6_SetConfig+0xb4>)
 8009510:	4013      	ands	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	021b      	lsls	r3, r3, #8
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	4313      	orrs	r3, r2
 8009532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a19      	ldr	r2, [pc, #100]	; (800959c <TIM_OC6_SetConfig+0xb8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00f      	beq.n	800955c <TIM_OC6_SetConfig+0x78>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a18      	ldr	r2, [pc, #96]	; (80095a0 <TIM_OC6_SetConfig+0xbc>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d00b      	beq.n	800955c <TIM_OC6_SetConfig+0x78>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <TIM_OC6_SetConfig+0xc0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d007      	beq.n	800955c <TIM_OC6_SetConfig+0x78>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <TIM_OC6_SetConfig+0xc4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d003      	beq.n	800955c <TIM_OC6_SetConfig+0x78>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a15      	ldr	r2, [pc, #84]	; (80095ac <TIM_OC6_SetConfig+0xc8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d109      	bne.n	8009570 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	029b      	lsls	r3, r3, #10
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	621a      	str	r2, [r3, #32]
}
 800958a:	bf00      	nop
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	feff8fff 	.word	0xfeff8fff
 800959c:	40010000 	.word	0x40010000
 80095a0:	40010400 	.word	0x40010400
 80095a4:	40014000 	.word	0x40014000
 80095a8:	40014400 	.word	0x40014400
 80095ac:	40014800 	.word	0x40014800

080095b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d101      	bne.n	80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095c4:	2302      	movs	r3, #2
 80095c6:	e077      	b.n	80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2202      	movs	r2, #2
 80095d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a35      	ldr	r2, [pc, #212]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a34      	ldr	r2, [pc, #208]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d108      	bne.n	800960e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4313      	orrs	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a25      	ldr	r2, [pc, #148]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02c      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963a:	d027      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a22      	ldr	r2, [pc, #136]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d022      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a21      	ldr	r2, [pc, #132]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d01d      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a1f      	ldr	r2, [pc, #124]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d018      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a1a      	ldr	r2, [pc, #104]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d013      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a1b      	ldr	r2, [pc, #108]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d00e      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a1a      	ldr	r2, [pc, #104]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d009      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a18      	ldr	r2, [pc, #96]	; (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a17      	ldr	r2, [pc, #92]	; (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d10c      	bne.n	80096a6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	4313      	orrs	r3, r2
 800969c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40010400 	.word	0x40010400
 80096cc:	40000400 	.word	0x40000400
 80096d0:	40000800 	.word	0x40000800
 80096d4:	40000c00 	.word	0x40000c00
 80096d8:	40001800 	.word	0x40001800
 80096dc:	40014000 	.word	0x40014000
 80096e0:	4000e000 	.word	0x4000e000
 80096e4:	4000e400 	.word	0x4000e400

080096e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009700:	2302      	movs	r3, #2
 8009702:	e087      	b.n	8009814 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	041b      	lsls	r3, r3, #16
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a27      	ldr	r2, [pc, #156]	; (8009820 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d004      	beq.n	8009792 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a25      	ldr	r2, [pc, #148]	; (8009824 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d106      	bne.n	80097a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d004      	beq.n	80097b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d126      	bne.n	8009802 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097be:	051b      	lsls	r3, r3, #20
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a0e      	ldr	r2, [pc, #56]	; (8009820 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d004      	beq.n	80097f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a0d      	ldr	r2, [pc, #52]	; (8009824 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d106      	bne.n	8009802 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	40010000 	.word	0x40010000
 8009824:	40010400 	.word	0x40010400

08009828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e042      	b.n	80098fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7f8 fd9b 	bl	80023c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2224      	movs	r2, #36	; 0x24
 8009892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0201 	bic.w	r2, r2, #1
 80098a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f8c2 	bl	8009a30 <UART_SetConfig>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e022      	b.n	80098fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 ff14 	bl	800a6ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 ff9b 	bl	800a830 <UART_CheckIdleState>
 80098fa:	4603      	mov	r3, r0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08a      	sub	sp, #40	; 0x28
 8009908:	af02      	add	r7, sp, #8
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800991a:	2b20      	cmp	r3, #32
 800991c:	f040 8083 	bne.w	8009a26 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <HAL_UART_Transmit+0x28>
 8009926:	88fb      	ldrh	r3, [r7, #6]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e07b      	b.n	8009a28 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009936:	2b01      	cmp	r3, #1
 8009938:	d101      	bne.n	800993e <HAL_UART_Transmit+0x3a>
 800993a:	2302      	movs	r3, #2
 800993c:	e074      	b.n	8009a28 <HAL_UART_Transmit+0x124>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2221      	movs	r2, #33	; 0x21
 8009952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009956:	f7f8 fff3 	bl	8002940 <HAL_GetTick>
 800995a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	88fa      	ldrh	r2, [r7, #6]
 8009968:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009974:	d108      	bne.n	8009988 <HAL_UART_Transmit+0x84>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d104      	bne.n	8009988 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	e003      	b.n	8009990 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800998c:	2300      	movs	r3, #0
 800998e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009998:	e02c      	b.n	80099f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2200      	movs	r2, #0
 80099a2:	2180      	movs	r1, #128	; 0x80
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 ff8e 	bl	800a8c6 <UART_WaitOnFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e039      	b.n	8009a28 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10b      	bne.n	80099d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	3302      	adds	r3, #2
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	e007      	b.n	80099e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	781a      	ldrb	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	3301      	adds	r3, #1
 80099e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1cc      	bne.n	800999a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2200      	movs	r2, #0
 8009a08:	2140      	movs	r1, #64	; 0x40
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 ff5b 	bl	800a8c6 <UART_WaitOnFlagUntilTimeout>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e006      	b.n	8009a28 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e000      	b.n	8009a28 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009a26:	2302      	movs	r3, #2
  }
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a30:	b5b0      	push	{r4, r5, r7, lr}
 8009a32:	b08e      	sub	sp, #56	; 0x38
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689a      	ldr	r2, [r3, #8]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	4bbf      	ldr	r3, [pc, #764]	; (8009d5c <UART_SetConfig+0x32c>)
 8009a5e:	4013      	ands	r3, r2
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6812      	ldr	r2, [r2, #0]
 8009a64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4ab5      	ldr	r2, [pc, #724]	; (8009d60 <UART_SetConfig+0x330>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d004      	beq.n	8009a9a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a96:	4313      	orrs	r3, r2
 8009a98:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	4bb0      	ldr	r3, [pc, #704]	; (8009d64 <UART_SetConfig+0x334>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6812      	ldr	r2, [r2, #0]
 8009aa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	f023 010f 	bic.w	r1, r3, #15
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4aa7      	ldr	r2, [pc, #668]	; (8009d68 <UART_SetConfig+0x338>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d176      	bne.n	8009bbc <UART_SetConfig+0x18c>
 8009ace:	4ba7      	ldr	r3, [pc, #668]	; (8009d6c <UART_SetConfig+0x33c>)
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad6:	2b28      	cmp	r3, #40	; 0x28
 8009ad8:	d86c      	bhi.n	8009bb4 <UART_SetConfig+0x184>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <UART_SetConfig+0xb0>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b85 	.word	0x08009b85
 8009ae4:	08009bb5 	.word	0x08009bb5
 8009ae8:	08009bb5 	.word	0x08009bb5
 8009aec:	08009bb5 	.word	0x08009bb5
 8009af0:	08009bb5 	.word	0x08009bb5
 8009af4:	08009bb5 	.word	0x08009bb5
 8009af8:	08009bb5 	.word	0x08009bb5
 8009afc:	08009bb5 	.word	0x08009bb5
 8009b00:	08009b8d 	.word	0x08009b8d
 8009b04:	08009bb5 	.word	0x08009bb5
 8009b08:	08009bb5 	.word	0x08009bb5
 8009b0c:	08009bb5 	.word	0x08009bb5
 8009b10:	08009bb5 	.word	0x08009bb5
 8009b14:	08009bb5 	.word	0x08009bb5
 8009b18:	08009bb5 	.word	0x08009bb5
 8009b1c:	08009bb5 	.word	0x08009bb5
 8009b20:	08009b95 	.word	0x08009b95
 8009b24:	08009bb5 	.word	0x08009bb5
 8009b28:	08009bb5 	.word	0x08009bb5
 8009b2c:	08009bb5 	.word	0x08009bb5
 8009b30:	08009bb5 	.word	0x08009bb5
 8009b34:	08009bb5 	.word	0x08009bb5
 8009b38:	08009bb5 	.word	0x08009bb5
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009b9d 	.word	0x08009b9d
 8009b44:	08009bb5 	.word	0x08009bb5
 8009b48:	08009bb5 	.word	0x08009bb5
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009bb5 	.word	0x08009bb5
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009ba5 	.word	0x08009ba5
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009bb5 	.word	0x08009bb5
 8009b6c:	08009bb5 	.word	0x08009bb5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bb5 	.word	0x08009bb5
 8009b78:	08009bb5 	.word	0x08009bb5
 8009b7c:	08009bb5 	.word	0x08009bb5
 8009b80:	08009bad 	.word	0x08009bad
 8009b84:	2301      	movs	r3, #1
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e326      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009b8c:	2304      	movs	r3, #4
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e322      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009b94:	2308      	movs	r3, #8
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e31e      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009b9c:	2310      	movs	r3, #16
 8009b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba2:	e31a      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ba4:	2320      	movs	r3, #32
 8009ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009baa:	e316      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009bac:	2340      	movs	r3, #64	; 0x40
 8009bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb2:	e312      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e30e      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a6b      	ldr	r2, [pc, #428]	; (8009d70 <UART_SetConfig+0x340>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d130      	bne.n	8009c28 <UART_SetConfig+0x1f8>
 8009bc6:	4b69      	ldr	r3, [pc, #420]	; (8009d6c <UART_SetConfig+0x33c>)
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	d826      	bhi.n	8009c20 <UART_SetConfig+0x1f0>
 8009bd2:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <UART_SetConfig+0x1a8>)
 8009bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd8:	08009bf1 	.word	0x08009bf1
 8009bdc:	08009bf9 	.word	0x08009bf9
 8009be0:	08009c01 	.word	0x08009c01
 8009be4:	08009c09 	.word	0x08009c09
 8009be8:	08009c11 	.word	0x08009c11
 8009bec:	08009c19 	.word	0x08009c19
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e2f0      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009bf8:	2304      	movs	r3, #4
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e2ec      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c00:	2308      	movs	r3, #8
 8009c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c06:	e2e8      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0e:	e2e4      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c10:	2320      	movs	r3, #32
 8009c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c16:	e2e0      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1e:	e2dc      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c20:	2380      	movs	r3, #128	; 0x80
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e2d8      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a51      	ldr	r2, [pc, #324]	; (8009d74 <UART_SetConfig+0x344>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d130      	bne.n	8009c94 <UART_SetConfig+0x264>
 8009c32:	4b4e      	ldr	r3, [pc, #312]	; (8009d6c <UART_SetConfig+0x33c>)
 8009c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d826      	bhi.n	8009c8c <UART_SetConfig+0x25c>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0x214>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c65 	.word	0x08009c65
 8009c4c:	08009c6d 	.word	0x08009c6d
 8009c50:	08009c75 	.word	0x08009c75
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e2ba      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e2b6      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e2b2      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e2ae      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c82:	e2aa      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8a:	e2a6      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e2a2      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a37      	ldr	r2, [pc, #220]	; (8009d78 <UART_SetConfig+0x348>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x2d0>
 8009c9e:	4b33      	ldr	r3, [pc, #204]	; (8009d6c <UART_SetConfig+0x33c>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x2c8>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x280>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e284      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e280      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e27c      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e278      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e274      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e270      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e26c      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <UART_SetConfig+0x34c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d142      	bne.n	8009d90 <UART_SetConfig+0x360>
 8009d0a:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <UART_SetConfig+0x33c>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d838      	bhi.n	8009d88 <UART_SetConfig+0x358>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x2ec>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d81 	.word	0x08009d81
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e24e      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e24a      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e246      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e242      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e23e      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d5c:	cfff69f3 	.word	0xcfff69f3
 8009d60:	58000c00 	.word	0x58000c00
 8009d64:	11fff4ff 	.word	0x11fff4ff
 8009d68:	40011000 	.word	0x40011000
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	40004400 	.word	0x40004400
 8009d74:	40004800 	.word	0x40004800
 8009d78:	40004c00 	.word	0x40004c00
 8009d7c:	40005000 	.word	0x40005000
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e228      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d88:	2380      	movs	r3, #128	; 0x80
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e224      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4ab1      	ldr	r2, [pc, #708]	; (800a05c <UART_SetConfig+0x62c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d176      	bne.n	8009e88 <UART_SetConfig+0x458>
 8009d9a:	4bb1      	ldr	r3, [pc, #708]	; (800a060 <UART_SetConfig+0x630>)
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009da2:	2b28      	cmp	r3, #40	; 0x28
 8009da4:	d86c      	bhi.n	8009e80 <UART_SetConfig+0x450>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <UART_SetConfig+0x37c>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009e51 	.word	0x08009e51
 8009db0:	08009e81 	.word	0x08009e81
 8009db4:	08009e81 	.word	0x08009e81
 8009db8:	08009e81 	.word	0x08009e81
 8009dbc:	08009e81 	.word	0x08009e81
 8009dc0:	08009e81 	.word	0x08009e81
 8009dc4:	08009e81 	.word	0x08009e81
 8009dc8:	08009e81 	.word	0x08009e81
 8009dcc:	08009e59 	.word	0x08009e59
 8009dd0:	08009e81 	.word	0x08009e81
 8009dd4:	08009e81 	.word	0x08009e81
 8009dd8:	08009e81 	.word	0x08009e81
 8009ddc:	08009e81 	.word	0x08009e81
 8009de0:	08009e81 	.word	0x08009e81
 8009de4:	08009e81 	.word	0x08009e81
 8009de8:	08009e81 	.word	0x08009e81
 8009dec:	08009e61 	.word	0x08009e61
 8009df0:	08009e81 	.word	0x08009e81
 8009df4:	08009e81 	.word	0x08009e81
 8009df8:	08009e81 	.word	0x08009e81
 8009dfc:	08009e81 	.word	0x08009e81
 8009e00:	08009e81 	.word	0x08009e81
 8009e04:	08009e81 	.word	0x08009e81
 8009e08:	08009e81 	.word	0x08009e81
 8009e0c:	08009e69 	.word	0x08009e69
 8009e10:	08009e81 	.word	0x08009e81
 8009e14:	08009e81 	.word	0x08009e81
 8009e18:	08009e81 	.word	0x08009e81
 8009e1c:	08009e81 	.word	0x08009e81
 8009e20:	08009e81 	.word	0x08009e81
 8009e24:	08009e81 	.word	0x08009e81
 8009e28:	08009e81 	.word	0x08009e81
 8009e2c:	08009e71 	.word	0x08009e71
 8009e30:	08009e81 	.word	0x08009e81
 8009e34:	08009e81 	.word	0x08009e81
 8009e38:	08009e81 	.word	0x08009e81
 8009e3c:	08009e81 	.word	0x08009e81
 8009e40:	08009e81 	.word	0x08009e81
 8009e44:	08009e81 	.word	0x08009e81
 8009e48:	08009e81 	.word	0x08009e81
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	2301      	movs	r3, #1
 8009e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e56:	e1c0      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5e:	e1bc      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e60:	2308      	movs	r3, #8
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e1b8      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e1b4      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e70:	2320      	movs	r3, #32
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e1b0      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e78:	2340      	movs	r3, #64	; 0x40
 8009e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7e:	e1ac      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e80:	2380      	movs	r3, #128	; 0x80
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e1a8      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a75      	ldr	r2, [pc, #468]	; (800a064 <UART_SetConfig+0x634>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d130      	bne.n	8009ef4 <UART_SetConfig+0x4c4>
 8009e92:	4b73      	ldr	r3, [pc, #460]	; (800a060 <UART_SetConfig+0x630>)
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d826      	bhi.n	8009eec <UART_SetConfig+0x4bc>
 8009e9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <UART_SetConfig+0x474>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009ebd 	.word	0x08009ebd
 8009ea8:	08009ec5 	.word	0x08009ec5
 8009eac:	08009ecd 	.word	0x08009ecd
 8009eb0:	08009ed5 	.word	0x08009ed5
 8009eb4:	08009edd 	.word	0x08009edd
 8009eb8:	08009ee5 	.word	0x08009ee5
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec2:	e18a      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eca:	e186      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed2:	e182      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eda:	e17e      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009edc:	2320      	movs	r3, #32
 8009ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee2:	e17a      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eea:	e176      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	e172      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a5b      	ldr	r2, [pc, #364]	; (800a068 <UART_SetConfig+0x638>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d130      	bne.n	8009f60 <UART_SetConfig+0x530>
 8009efe:	4b58      	ldr	r3, [pc, #352]	; (800a060 <UART_SetConfig+0x630>)
 8009f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d826      	bhi.n	8009f58 <UART_SetConfig+0x528>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x4e0>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f29 	.word	0x08009f29
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f39 	.word	0x08009f39
 8009f1c:	08009f41 	.word	0x08009f41
 8009f20:	08009f49 	.word	0x08009f49
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2e:	e154      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f30:	2304      	movs	r3, #4
 8009f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f36:	e150      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3e:	e14c      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f46:	e148      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4e:	e144      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f56:	e140      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5e:	e13c      	b.n	800a1da <UART_SetConfig+0x7aa>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a41      	ldr	r2, [pc, #260]	; (800a06c <UART_SetConfig+0x63c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f040 8082 	bne.w	800a070 <UART_SetConfig+0x640>
 8009f6c:	4b3c      	ldr	r3, [pc, #240]	; (800a060 <UART_SetConfig+0x630>)
 8009f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f74:	2b28      	cmp	r3, #40	; 0x28
 8009f76:	d86d      	bhi.n	800a054 <UART_SetConfig+0x624>
 8009f78:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <UART_SetConfig+0x550>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	0800a025 	.word	0x0800a025
 8009f84:	0800a055 	.word	0x0800a055
 8009f88:	0800a055 	.word	0x0800a055
 8009f8c:	0800a055 	.word	0x0800a055
 8009f90:	0800a055 	.word	0x0800a055
 8009f94:	0800a055 	.word	0x0800a055
 8009f98:	0800a055 	.word	0x0800a055
 8009f9c:	0800a055 	.word	0x0800a055
 8009fa0:	0800a02d 	.word	0x0800a02d
 8009fa4:	0800a055 	.word	0x0800a055
 8009fa8:	0800a055 	.word	0x0800a055
 8009fac:	0800a055 	.word	0x0800a055
 8009fb0:	0800a055 	.word	0x0800a055
 8009fb4:	0800a055 	.word	0x0800a055
 8009fb8:	0800a055 	.word	0x0800a055
 8009fbc:	0800a055 	.word	0x0800a055
 8009fc0:	0800a035 	.word	0x0800a035
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	0800a055 	.word	0x0800a055
 8009fcc:	0800a055 	.word	0x0800a055
 8009fd0:	0800a055 	.word	0x0800a055
 8009fd4:	0800a055 	.word	0x0800a055
 8009fd8:	0800a055 	.word	0x0800a055
 8009fdc:	0800a055 	.word	0x0800a055
 8009fe0:	0800a03d 	.word	0x0800a03d
 8009fe4:	0800a055 	.word	0x0800a055
 8009fe8:	0800a055 	.word	0x0800a055
 8009fec:	0800a055 	.word	0x0800a055
 8009ff0:	0800a055 	.word	0x0800a055
 8009ff4:	0800a055 	.word	0x0800a055
 8009ff8:	0800a055 	.word	0x0800a055
 8009ffc:	0800a055 	.word	0x0800a055
 800a000:	0800a045 	.word	0x0800a045
 800a004:	0800a055 	.word	0x0800a055
 800a008:	0800a055 	.word	0x0800a055
 800a00c:	0800a055 	.word	0x0800a055
 800a010:	0800a055 	.word	0x0800a055
 800a014:	0800a055 	.word	0x0800a055
 800a018:	0800a055 	.word	0x0800a055
 800a01c:	0800a055 	.word	0x0800a055
 800a020:	0800a04d 	.word	0x0800a04d
 800a024:	2301      	movs	r3, #1
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e0d6      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a02c:	2304      	movs	r3, #4
 800a02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a032:	e0d2      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a034:	2308      	movs	r3, #8
 800a036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03a:	e0ce      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a03c:	2310      	movs	r3, #16
 800a03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a042:	e0ca      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a044:	2320      	movs	r3, #32
 800a046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04a:	e0c6      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a052:	e0c2      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a054:	2380      	movs	r3, #128	; 0x80
 800a056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05a:	e0be      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a05c:	40011400 	.word	0x40011400
 800a060:	58024400 	.word	0x58024400
 800a064:	40007800 	.word	0x40007800
 800a068:	40007c00 	.word	0x40007c00
 800a06c:	40011800 	.word	0x40011800
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4aad      	ldr	r2, [pc, #692]	; (800a32c <UART_SetConfig+0x8fc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d176      	bne.n	800a168 <UART_SetConfig+0x738>
 800a07a:	4bad      	ldr	r3, [pc, #692]	; (800a330 <UART_SetConfig+0x900>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a082:	2b28      	cmp	r3, #40	; 0x28
 800a084:	d86c      	bhi.n	800a160 <UART_SetConfig+0x730>
 800a086:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <UART_SetConfig+0x65c>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a131 	.word	0x0800a131
 800a090:	0800a161 	.word	0x0800a161
 800a094:	0800a161 	.word	0x0800a161
 800a098:	0800a161 	.word	0x0800a161
 800a09c:	0800a161 	.word	0x0800a161
 800a0a0:	0800a161 	.word	0x0800a161
 800a0a4:	0800a161 	.word	0x0800a161
 800a0a8:	0800a161 	.word	0x0800a161
 800a0ac:	0800a139 	.word	0x0800a139
 800a0b0:	0800a161 	.word	0x0800a161
 800a0b4:	0800a161 	.word	0x0800a161
 800a0b8:	0800a161 	.word	0x0800a161
 800a0bc:	0800a161 	.word	0x0800a161
 800a0c0:	0800a161 	.word	0x0800a161
 800a0c4:	0800a161 	.word	0x0800a161
 800a0c8:	0800a161 	.word	0x0800a161
 800a0cc:	0800a141 	.word	0x0800a141
 800a0d0:	0800a161 	.word	0x0800a161
 800a0d4:	0800a161 	.word	0x0800a161
 800a0d8:	0800a161 	.word	0x0800a161
 800a0dc:	0800a161 	.word	0x0800a161
 800a0e0:	0800a161 	.word	0x0800a161
 800a0e4:	0800a161 	.word	0x0800a161
 800a0e8:	0800a161 	.word	0x0800a161
 800a0ec:	0800a149 	.word	0x0800a149
 800a0f0:	0800a161 	.word	0x0800a161
 800a0f4:	0800a161 	.word	0x0800a161
 800a0f8:	0800a161 	.word	0x0800a161
 800a0fc:	0800a161 	.word	0x0800a161
 800a100:	0800a161 	.word	0x0800a161
 800a104:	0800a161 	.word	0x0800a161
 800a108:	0800a161 	.word	0x0800a161
 800a10c:	0800a151 	.word	0x0800a151
 800a110:	0800a161 	.word	0x0800a161
 800a114:	0800a161 	.word	0x0800a161
 800a118:	0800a161 	.word	0x0800a161
 800a11c:	0800a161 	.word	0x0800a161
 800a120:	0800a161 	.word	0x0800a161
 800a124:	0800a161 	.word	0x0800a161
 800a128:	0800a161 	.word	0x0800a161
 800a12c:	0800a159 	.word	0x0800a159
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e050      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a138:	2304      	movs	r3, #4
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e04c      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a140:	2308      	movs	r3, #8
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e048      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a148:	2310      	movs	r3, #16
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	e044      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a150:	2320      	movs	r3, #32
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	e040      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a158:	2340      	movs	r3, #64	; 0x40
 800a15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15e:	e03c      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a160:	2380      	movs	r3, #128	; 0x80
 800a162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a166:	e038      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a71      	ldr	r2, [pc, #452]	; (800a334 <UART_SetConfig+0x904>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d130      	bne.n	800a1d4 <UART_SetConfig+0x7a4>
 800a172:	4b6f      	ldr	r3, [pc, #444]	; (800a330 <UART_SetConfig+0x900>)
 800a174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	2b05      	cmp	r3, #5
 800a17c:	d826      	bhi.n	800a1cc <UART_SetConfig+0x79c>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <UART_SetConfig+0x754>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a19d 	.word	0x0800a19d
 800a188:	0800a1a5 	.word	0x0800a1a5
 800a18c:	0800a1ad 	.word	0x0800a1ad
 800a190:	0800a1b5 	.word	0x0800a1b5
 800a194:	0800a1bd 	.word	0x0800a1bd
 800a198:	0800a1c5 	.word	0x0800a1c5
 800a19c:	2302      	movs	r3, #2
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a2:	e01a      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1aa:	e016      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1ac:	2308      	movs	r3, #8
 800a1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b2:	e012      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ba:	e00e      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1bc:	2320      	movs	r3, #32
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e00a      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e006      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e002      	b.n	800a1da <UART_SetConfig+0x7aa>
 800a1d4:	2380      	movs	r3, #128	; 0x80
 800a1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a55      	ldr	r2, [pc, #340]	; (800a334 <UART_SetConfig+0x904>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	f040 80f0 	bne.w	800a3c6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	dc46      	bgt.n	800a27c <UART_SetConfig+0x84c>
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	db75      	blt.n	800a2de <UART_SetConfig+0x8ae>
 800a1f2:	3b02      	subs	r3, #2
 800a1f4:	2b1e      	cmp	r3, #30
 800a1f6:	d872      	bhi.n	800a2de <UART_SetConfig+0x8ae>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <UART_SetConfig+0x7d0>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a283 	.word	0x0800a283
 800a204:	0800a2df 	.word	0x0800a2df
 800a208:	0800a28b 	.word	0x0800a28b
 800a20c:	0800a2df 	.word	0x0800a2df
 800a210:	0800a2df 	.word	0x0800a2df
 800a214:	0800a2df 	.word	0x0800a2df
 800a218:	0800a29b 	.word	0x0800a29b
 800a21c:	0800a2df 	.word	0x0800a2df
 800a220:	0800a2df 	.word	0x0800a2df
 800a224:	0800a2df 	.word	0x0800a2df
 800a228:	0800a2df 	.word	0x0800a2df
 800a22c:	0800a2df 	.word	0x0800a2df
 800a230:	0800a2df 	.word	0x0800a2df
 800a234:	0800a2df 	.word	0x0800a2df
 800a238:	0800a2ab 	.word	0x0800a2ab
 800a23c:	0800a2df 	.word	0x0800a2df
 800a240:	0800a2df 	.word	0x0800a2df
 800a244:	0800a2df 	.word	0x0800a2df
 800a248:	0800a2df 	.word	0x0800a2df
 800a24c:	0800a2df 	.word	0x0800a2df
 800a250:	0800a2df 	.word	0x0800a2df
 800a254:	0800a2df 	.word	0x0800a2df
 800a258:	0800a2df 	.word	0x0800a2df
 800a25c:	0800a2df 	.word	0x0800a2df
 800a260:	0800a2df 	.word	0x0800a2df
 800a264:	0800a2df 	.word	0x0800a2df
 800a268:	0800a2df 	.word	0x0800a2df
 800a26c:	0800a2df 	.word	0x0800a2df
 800a270:	0800a2df 	.word	0x0800a2df
 800a274:	0800a2df 	.word	0x0800a2df
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	2b40      	cmp	r3, #64	; 0x40
 800a27e:	d02a      	beq.n	800a2d6 <UART_SetConfig+0x8a6>
 800a280:	e02d      	b.n	800a2de <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a282:	f7fd fa8f 	bl	80077a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a286:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a288:	e02f      	b.n	800a2ea <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a28a:	f107 0314 	add.w	r3, r7, #20
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fd fa9e 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a298:	e027      	b.n	800a2ea <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fd fbea 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a8:	e01f      	b.n	800a2ea <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2aa:	4b21      	ldr	r3, [pc, #132]	; (800a330 <UART_SetConfig+0x900>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d009      	beq.n	800a2ca <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2b6:	4b1e      	ldr	r3, [pc, #120]	; (800a330 <UART_SetConfig+0x900>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	08db      	lsrs	r3, r3, #3
 800a2bc:	f003 0303 	and.w	r3, r3, #3
 800a2c0:	4a1d      	ldr	r2, [pc, #116]	; (800a338 <UART_SetConfig+0x908>)
 800a2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c8:	e00f      	b.n	800a2ea <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <UART_SetConfig+0x908>)
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ce:	e00c      	b.n	800a2ea <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <UART_SetConfig+0x90c>)
 800a2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2d4:	e009      	b.n	800a2ea <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2dc:	e005      	b.n	800a2ea <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 81e6 	beq.w	800a6be <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	4a12      	ldr	r2, [pc, #72]	; (800a340 <UART_SetConfig+0x910>)
 800a2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	fbb3 f3f2 	udiv	r3, r3, r2
 800a304:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	4613      	mov	r3, r2
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	4413      	add	r3, r2
 800a310:	6a3a      	ldr	r2, [r7, #32]
 800a312:	429a      	cmp	r2, r3
 800a314:	d305      	bcc.n	800a322 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a31c:	6a3a      	ldr	r2, [r7, #32]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d910      	bls.n	800a344 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a328:	e1c9      	b.n	800a6be <UART_SetConfig+0xc8e>
 800a32a:	bf00      	nop
 800a32c:	40011c00 	.word	0x40011c00
 800a330:	58024400 	.word	0x58024400
 800a334:	58000c00 	.word	0x58000c00
 800a338:	03d09000 	.word	0x03d09000
 800a33c:	003d0900 	.word	0x003d0900
 800a340:	0800bd48 	.word	0x0800bd48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	4618      	mov	r0, r3
 800a348:	f04f 0100 	mov.w	r1, #0
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	4ac1      	ldr	r2, [pc, #772]	; (800a658 <UART_SetConfig+0xc28>)
 800a352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a356:	b29a      	uxth	r2, r3
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	f7f6 f828 	bl	80003b0 <__aeabi_uldivmod>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4610      	mov	r0, r2
 800a366:	4619      	mov	r1, r3
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	020b      	lsls	r3, r1, #8
 800a372:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a376:	0202      	lsls	r2, r0, #8
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	6849      	ldr	r1, [r1, #4]
 800a37c:	0849      	lsrs	r1, r1, #1
 800a37e:	4608      	mov	r0, r1
 800a380:	f04f 0100 	mov.w	r1, #0
 800a384:	1814      	adds	r4, r2, r0
 800a386:	eb43 0501 	adc.w	r5, r3, r1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	461a      	mov	r2, r3
 800a390:	f04f 0300 	mov.w	r3, #0
 800a394:	4620      	mov	r0, r4
 800a396:	4629      	mov	r1, r5
 800a398:	f7f6 f80a 	bl	80003b0 <__aeabi_uldivmod>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3aa:	d308      	bcc.n	800a3be <UART_SetConfig+0x98e>
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3b2:	d204      	bcs.n	800a3be <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ba:	60da      	str	r2, [r3, #12]
 800a3bc:	e17f      	b.n	800a6be <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a3c4:	e17b      	b.n	800a6be <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ce:	f040 80bd 	bne.w	800a54c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a3d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	dc48      	bgt.n	800a46c <UART_SetConfig+0xa3c>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	db7b      	blt.n	800a4d6 <UART_SetConfig+0xaa6>
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d879      	bhi.n	800a4d6 <UART_SetConfig+0xaa6>
 800a3e2:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <UART_SetConfig+0x9b8>)
 800a3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a4d7 	.word	0x0800a4d7
 800a3f4:	0800a4d7 	.word	0x0800a4d7
 800a3f8:	0800a483 	.word	0x0800a483
 800a3fc:	0800a4d7 	.word	0x0800a4d7
 800a400:	0800a4d7 	.word	0x0800a4d7
 800a404:	0800a4d7 	.word	0x0800a4d7
 800a408:	0800a493 	.word	0x0800a493
 800a40c:	0800a4d7 	.word	0x0800a4d7
 800a410:	0800a4d7 	.word	0x0800a4d7
 800a414:	0800a4d7 	.word	0x0800a4d7
 800a418:	0800a4d7 	.word	0x0800a4d7
 800a41c:	0800a4d7 	.word	0x0800a4d7
 800a420:	0800a4d7 	.word	0x0800a4d7
 800a424:	0800a4d7 	.word	0x0800a4d7
 800a428:	0800a4a3 	.word	0x0800a4a3
 800a42c:	0800a4d7 	.word	0x0800a4d7
 800a430:	0800a4d7 	.word	0x0800a4d7
 800a434:	0800a4d7 	.word	0x0800a4d7
 800a438:	0800a4d7 	.word	0x0800a4d7
 800a43c:	0800a4d7 	.word	0x0800a4d7
 800a440:	0800a4d7 	.word	0x0800a4d7
 800a444:	0800a4d7 	.word	0x0800a4d7
 800a448:	0800a4d7 	.word	0x0800a4d7
 800a44c:	0800a4d7 	.word	0x0800a4d7
 800a450:	0800a4d7 	.word	0x0800a4d7
 800a454:	0800a4d7 	.word	0x0800a4d7
 800a458:	0800a4d7 	.word	0x0800a4d7
 800a45c:	0800a4d7 	.word	0x0800a4d7
 800a460:	0800a4d7 	.word	0x0800a4d7
 800a464:	0800a4d7 	.word	0x0800a4d7
 800a468:	0800a4c9 	.word	0x0800a4c9
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d02e      	beq.n	800a4ce <UART_SetConfig+0xa9e>
 800a470:	e031      	b.n	800a4d6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a472:	f7fb fe4d 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 800a476:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a478:	e033      	b.n	800a4e2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a47a:	f7fb fe5f 	bl	800613c <HAL_RCC_GetPCLK2Freq>
 800a47e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a480:	e02f      	b.n	800a4e2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a482:	f107 0314 	add.w	r3, r7, #20
 800a486:	4618      	mov	r0, r3
 800a488:	f7fd f9a2 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a490:	e027      	b.n	800a4e2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a492:	f107 0308 	add.w	r3, r7, #8
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd faee 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4a0:	e01f      	b.n	800a4e2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a2:	4b6e      	ldr	r3, [pc, #440]	; (800a65c <UART_SetConfig+0xc2c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4ae:	4b6b      	ldr	r3, [pc, #428]	; (800a65c <UART_SetConfig+0xc2c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	08db      	lsrs	r3, r3, #3
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	4a69      	ldr	r2, [pc, #420]	; (800a660 <UART_SetConfig+0xc30>)
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4c0:	e00f      	b.n	800a4e2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a4c2:	4b67      	ldr	r3, [pc, #412]	; (800a660 <UART_SetConfig+0xc30>)
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4c6:	e00c      	b.n	800a4e2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4c8:	4b66      	ldr	r3, [pc, #408]	; (800a664 <UART_SetConfig+0xc34>)
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4cc:	e009      	b.n	800a4e2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4d4:	e005      	b.n	800a4e2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80ea 	beq.w	800a6be <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	4a5a      	ldr	r2, [pc, #360]	; (800a658 <UART_SetConfig+0xc28>)
 800a4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4fc:	005a      	lsls	r2, r3, #1
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	085b      	lsrs	r3, r3, #1
 800a504:	441a      	add	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	2b0f      	cmp	r3, #15
 800a514:	d916      	bls.n	800a544 <UART_SetConfig+0xb14>
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a51c:	d212      	bcs.n	800a544 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	b29b      	uxth	r3, r3
 800a522:	f023 030f 	bic.w	r3, r3, #15
 800a526:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	b29a      	uxth	r2, r3
 800a534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a536:	4313      	orrs	r3, r2
 800a538:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a540:	60da      	str	r2, [r3, #12]
 800a542:	e0bc      	b.n	800a6be <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a54a:	e0b8      	b.n	800a6be <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a54c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a550:	2b20      	cmp	r3, #32
 800a552:	dc4b      	bgt.n	800a5ec <UART_SetConfig+0xbbc>
 800a554:	2b00      	cmp	r3, #0
 800a556:	f2c0 8087 	blt.w	800a668 <UART_SetConfig+0xc38>
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	f200 8084 	bhi.w	800a668 <UART_SetConfig+0xc38>
 800a560:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <UART_SetConfig+0xb38>)
 800a562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a566:	bf00      	nop
 800a568:	0800a5f3 	.word	0x0800a5f3
 800a56c:	0800a5fb 	.word	0x0800a5fb
 800a570:	0800a669 	.word	0x0800a669
 800a574:	0800a669 	.word	0x0800a669
 800a578:	0800a603 	.word	0x0800a603
 800a57c:	0800a669 	.word	0x0800a669
 800a580:	0800a669 	.word	0x0800a669
 800a584:	0800a669 	.word	0x0800a669
 800a588:	0800a613 	.word	0x0800a613
 800a58c:	0800a669 	.word	0x0800a669
 800a590:	0800a669 	.word	0x0800a669
 800a594:	0800a669 	.word	0x0800a669
 800a598:	0800a669 	.word	0x0800a669
 800a59c:	0800a669 	.word	0x0800a669
 800a5a0:	0800a669 	.word	0x0800a669
 800a5a4:	0800a669 	.word	0x0800a669
 800a5a8:	0800a623 	.word	0x0800a623
 800a5ac:	0800a669 	.word	0x0800a669
 800a5b0:	0800a669 	.word	0x0800a669
 800a5b4:	0800a669 	.word	0x0800a669
 800a5b8:	0800a669 	.word	0x0800a669
 800a5bc:	0800a669 	.word	0x0800a669
 800a5c0:	0800a669 	.word	0x0800a669
 800a5c4:	0800a669 	.word	0x0800a669
 800a5c8:	0800a669 	.word	0x0800a669
 800a5cc:	0800a669 	.word	0x0800a669
 800a5d0:	0800a669 	.word	0x0800a669
 800a5d4:	0800a669 	.word	0x0800a669
 800a5d8:	0800a669 	.word	0x0800a669
 800a5dc:	0800a669 	.word	0x0800a669
 800a5e0:	0800a669 	.word	0x0800a669
 800a5e4:	0800a669 	.word	0x0800a669
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	d02e      	beq.n	800a64e <UART_SetConfig+0xc1e>
 800a5f0:	e03a      	b.n	800a668 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f2:	f7fb fd8d 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 800a5f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5f8:	e03c      	b.n	800a674 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5fa:	f7fb fd9f 	bl	800613c <HAL_RCC_GetPCLK2Freq>
 800a5fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a600:	e038      	b.n	800a674 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a602:	f107 0314 	add.w	r3, r7, #20
 800a606:	4618      	mov	r0, r3
 800a608:	f7fd f8e2 	bl	80077d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a610:	e030      	b.n	800a674 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fa2e 	bl	8007a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a620:	e028      	b.n	800a674 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <UART_SetConfig+0xc2c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d009      	beq.n	800a642 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <UART_SetConfig+0xc2c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	08db      	lsrs	r3, r3, #3
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	4a09      	ldr	r2, [pc, #36]	; (800a660 <UART_SetConfig+0xc30>)
 800a63a:	fa22 f303 	lsr.w	r3, r2, r3
 800a63e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a640:	e018      	b.n	800a674 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a642:	4b07      	ldr	r3, [pc, #28]	; (800a660 <UART_SetConfig+0xc30>)
 800a644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a646:	e015      	b.n	800a674 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a648:	4b06      	ldr	r3, [pc, #24]	; (800a664 <UART_SetConfig+0xc34>)
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a64c:	e012      	b.n	800a674 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a64e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a654:	e00e      	b.n	800a674 <UART_SetConfig+0xc44>
 800a656:	bf00      	nop
 800a658:	0800bd48 	.word	0x0800bd48
 800a65c:	58024400 	.word	0x58024400
 800a660:	03d09000 	.word	0x03d09000
 800a664:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a672:	bf00      	nop
    }

    if (pclk != 0U)
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d021      	beq.n	800a6be <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	4a1a      	ldr	r2, [pc, #104]	; (800a6e8 <UART_SetConfig+0xcb8>)
 800a680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a684:	461a      	mov	r2, r3
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	fbb3 f2f2 	udiv	r2, r3, r2
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	441a      	add	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	2b0f      	cmp	r3, #15
 800a6a2:	d909      	bls.n	800a6b8 <UART_SetConfig+0xc88>
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6aa:	d205      	bcs.n	800a6b8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	e002      	b.n	800a6be <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a6da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3738      	adds	r7, #56	; 0x38
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800bd48 	.word	0x0800bd48

0800a6ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71a:	f003 0302 	and.w	r3, r3, #2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a2:	f003 0320 	and.w	r3, r3, #32
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01a      	beq.n	800a802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ea:	d10a      	bne.n	800a802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	605a      	str	r2, [r3, #4]
  }
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af02      	add	r7, sp, #8
 800a836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a840:	f7f8 f87e 	bl	8002940 <HAL_GetTick>
 800a844:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0308 	and.w	r3, r3, #8
 800a850:	2b08      	cmp	r3, #8
 800a852:	d10e      	bne.n	800a872 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f82f 	bl	800a8c6 <UART_WaitOnFlagUntilTimeout>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e025      	b.n	800a8be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d10e      	bne.n	800a89e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f819 	bl	800a8c6 <UART_WaitOnFlagUntilTimeout>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e00f      	b.n	800a8be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b09c      	sub	sp, #112	; 0x70
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	603b      	str	r3, [r7, #0]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8d6:	e0a9      	b.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	f000 80a5 	beq.w	800aa2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8e2:	f7f8 f82d 	bl	8002940 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d302      	bcc.n	800a8f8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a8f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d140      	bne.n	800a97a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a90c:	667b      	str	r3, [r7, #100]	; 0x64
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a916:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a918:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a91c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e6      	bne.n	800a8f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3308      	adds	r3, #8
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	663b      	str	r3, [r7, #96]	; 0x60
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a94a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a94c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e5      	bne.n	800a92a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e069      	b.n	800aa4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	d051      	beq.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a996:	d149      	bne.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e6      	bne.n	800a9a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	e853 3f00 	ldrex	r3, [r3]
 800a9e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9f4:	623a      	str	r2, [r7, #32]
 800a9f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	69f9      	ldr	r1, [r7, #28]
 800a9fa:	6a3a      	ldr	r2, [r7, #32]
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e5      	bne.n	800a9d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2220      	movs	r2, #32
 800aa14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e010      	b.n	800aa4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	69da      	ldr	r2, [r3, #28]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	4013      	ands	r3, r2
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	bf0c      	ite	eq
 800aa3c:	2301      	moveq	r3, #1
 800aa3e:	2300      	movne	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	f43f af46 	beq.w	800a8d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3770      	adds	r7, #112	; 0x70
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b085      	sub	sp, #20
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d101      	bne.n	800aa6c <HAL_UARTEx_DisableFifoMode+0x16>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e027      	b.n	800aabc <HAL_UARTEx_DisableFifoMode+0x66>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2224      	movs	r2, #36	; 0x24
 800aa78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 0201 	bic.w	r2, r2, #1
 800aa92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d101      	bne.n	800aae0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aadc:	2302      	movs	r3, #2
 800aade:	e02d      	b.n	800ab3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2224      	movs	r2, #36	; 0x24
 800aaec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f022 0201 	bic.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f84f 	bl	800abc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d101      	bne.n	800ab5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab58:	2302      	movs	r3, #2
 800ab5a:	e02d      	b.n	800abb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2224      	movs	r2, #36	; 0x24
 800ab68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0201 	bic.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f811 	bl	800abc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d108      	bne.n	800abe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abe0:	e031      	b.n	800ac46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abe2:	2310      	movs	r3, #16
 800abe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abe6:	2310      	movs	r3, #16
 800abe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	0e5b      	lsrs	r3, r3, #25
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	0f5b      	lsrs	r3, r3, #29
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	f003 0307 	and.w	r3, r3, #7
 800ac08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	7b3a      	ldrb	r2, [r7, #12]
 800ac0e:	4911      	ldr	r1, [pc, #68]	; (800ac54 <UARTEx_SetNbDataToProcess+0x94>)
 800ac10:	5c8a      	ldrb	r2, [r1, r2]
 800ac12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac16:	7b3a      	ldrb	r2, [r7, #12]
 800ac18:	490f      	ldr	r1, [pc, #60]	; (800ac58 <UARTEx_SetNbDataToProcess+0x98>)
 800ac1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	7b7a      	ldrb	r2, [r7, #13]
 800ac2c:	4909      	ldr	r1, [pc, #36]	; (800ac54 <UARTEx_SetNbDataToProcess+0x94>)
 800ac2e:	5c8a      	ldrb	r2, [r1, r2]
 800ac30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac34:	7b7a      	ldrb	r2, [r7, #13]
 800ac36:	4908      	ldr	r1, [pc, #32]	; (800ac58 <UARTEx_SetNbDataToProcess+0x98>)
 800ac38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	0800bd60 	.word	0x0800bd60
 800ac58:	0800bd68 	.word	0x0800bd68

0800ac5c <__errno>:
 800ac5c:	4b01      	ldr	r3, [pc, #4]	; (800ac64 <__errno+0x8>)
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	24000010 	.word	0x24000010

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4d0d      	ldr	r5, [pc, #52]	; (800aca0 <__libc_init_array+0x38>)
 800ac6c:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac6e:	1b64      	subs	r4, r4, r5
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	2600      	movs	r6, #0
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	4d0b      	ldr	r5, [pc, #44]	; (800aca8 <__libc_init_array+0x40>)
 800ac7a:	4c0c      	ldr	r4, [pc, #48]	; (800acac <__libc_init_array+0x44>)
 800ac7c:	f000 fffa 	bl	800bc74 <_init>
 800ac80:	1b64      	subs	r4, r4, r5
 800ac82:	10a4      	asrs	r4, r4, #2
 800ac84:	2600      	movs	r6, #0
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800be10 	.word	0x0800be10
 800aca4:	0800be10 	.word	0x0800be10
 800aca8:	0800be10 	.word	0x0800be10
 800acac:	0800be14 	.word	0x0800be14

0800acb0 <memcpy>:
 800acb0:	440a      	add	r2, r1
 800acb2:	4291      	cmp	r1, r2
 800acb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acb8:	d100      	bne.n	800acbc <memcpy+0xc>
 800acba:	4770      	bx	lr
 800acbc:	b510      	push	{r4, lr}
 800acbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acc6:	4291      	cmp	r1, r2
 800acc8:	d1f9      	bne.n	800acbe <memcpy+0xe>
 800acca:	bd10      	pop	{r4, pc}

0800accc <memset>:
 800accc:	4402      	add	r2, r0
 800acce:	4603      	mov	r3, r0
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d100      	bne.n	800acd6 <memset+0xa>
 800acd4:	4770      	bx	lr
 800acd6:	f803 1b01 	strb.w	r1, [r3], #1
 800acda:	e7f9      	b.n	800acd0 <memset+0x4>

0800acdc <iprintf>:
 800acdc:	b40f      	push	{r0, r1, r2, r3}
 800acde:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <iprintf+0x2c>)
 800ace0:	b513      	push	{r0, r1, r4, lr}
 800ace2:	681c      	ldr	r4, [r3, #0]
 800ace4:	b124      	cbz	r4, 800acf0 <iprintf+0x14>
 800ace6:	69a3      	ldr	r3, [r4, #24]
 800ace8:	b913      	cbnz	r3, 800acf0 <iprintf+0x14>
 800acea:	4620      	mov	r0, r4
 800acec:	f000 fa5e 	bl	800b1ac <__sinit>
 800acf0:	ab05      	add	r3, sp, #20
 800acf2:	9a04      	ldr	r2, [sp, #16]
 800acf4:	68a1      	ldr	r1, [r4, #8]
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fc2f 	bl	800b55c <_vfiprintf_r>
 800acfe:	b002      	add	sp, #8
 800ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad04:	b004      	add	sp, #16
 800ad06:	4770      	bx	lr
 800ad08:	24000010 	.word	0x24000010

0800ad0c <_puts_r>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	460e      	mov	r6, r1
 800ad10:	4605      	mov	r5, r0
 800ad12:	b118      	cbz	r0, 800ad1c <_puts_r+0x10>
 800ad14:	6983      	ldr	r3, [r0, #24]
 800ad16:	b90b      	cbnz	r3, 800ad1c <_puts_r+0x10>
 800ad18:	f000 fa48 	bl	800b1ac <__sinit>
 800ad1c:	69ab      	ldr	r3, [r5, #24]
 800ad1e:	68ac      	ldr	r4, [r5, #8]
 800ad20:	b913      	cbnz	r3, 800ad28 <_puts_r+0x1c>
 800ad22:	4628      	mov	r0, r5
 800ad24:	f000 fa42 	bl	800b1ac <__sinit>
 800ad28:	4b2c      	ldr	r3, [pc, #176]	; (800addc <_puts_r+0xd0>)
 800ad2a:	429c      	cmp	r4, r3
 800ad2c:	d120      	bne.n	800ad70 <_puts_r+0x64>
 800ad2e:	686c      	ldr	r4, [r5, #4]
 800ad30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad32:	07db      	lsls	r3, r3, #31
 800ad34:	d405      	bmi.n	800ad42 <_puts_r+0x36>
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	0598      	lsls	r0, r3, #22
 800ad3a:	d402      	bmi.n	800ad42 <_puts_r+0x36>
 800ad3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad3e:	f000 fad3 	bl	800b2e8 <__retarget_lock_acquire_recursive>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	0719      	lsls	r1, r3, #28
 800ad46:	d51d      	bpl.n	800ad84 <_puts_r+0x78>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	b1db      	cbz	r3, 800ad84 <_puts_r+0x78>
 800ad4c:	3e01      	subs	r6, #1
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad54:	3b01      	subs	r3, #1
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	bb39      	cbnz	r1, 800adaa <_puts_r+0x9e>
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	da38      	bge.n	800add0 <_puts_r+0xc4>
 800ad5e:	4622      	mov	r2, r4
 800ad60:	210a      	movs	r1, #10
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 f848 	bl	800adf8 <__swbuf_r>
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d011      	beq.n	800ad90 <_puts_r+0x84>
 800ad6c:	250a      	movs	r5, #10
 800ad6e:	e011      	b.n	800ad94 <_puts_r+0x88>
 800ad70:	4b1b      	ldr	r3, [pc, #108]	; (800ade0 <_puts_r+0xd4>)
 800ad72:	429c      	cmp	r4, r3
 800ad74:	d101      	bne.n	800ad7a <_puts_r+0x6e>
 800ad76:	68ac      	ldr	r4, [r5, #8]
 800ad78:	e7da      	b.n	800ad30 <_puts_r+0x24>
 800ad7a:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <_puts_r+0xd8>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	bf08      	it	eq
 800ad80:	68ec      	ldreq	r4, [r5, #12]
 800ad82:	e7d5      	b.n	800ad30 <_puts_r+0x24>
 800ad84:	4621      	mov	r1, r4
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 f888 	bl	800ae9c <__swsetup_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d0dd      	beq.n	800ad4c <_puts_r+0x40>
 800ad90:	f04f 35ff 	mov.w	r5, #4294967295
 800ad94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad96:	07da      	lsls	r2, r3, #31
 800ad98:	d405      	bmi.n	800ada6 <_puts_r+0x9a>
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	059b      	lsls	r3, r3, #22
 800ad9e:	d402      	bmi.n	800ada6 <_puts_r+0x9a>
 800ada0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ada2:	f000 faa2 	bl	800b2ea <__retarget_lock_release_recursive>
 800ada6:	4628      	mov	r0, r5
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da04      	bge.n	800adb8 <_puts_r+0xac>
 800adae:	69a2      	ldr	r2, [r4, #24]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	dc06      	bgt.n	800adc2 <_puts_r+0xb6>
 800adb4:	290a      	cmp	r1, #10
 800adb6:	d004      	beq.n	800adc2 <_puts_r+0xb6>
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	6022      	str	r2, [r4, #0]
 800adbe:	7019      	strb	r1, [r3, #0]
 800adc0:	e7c5      	b.n	800ad4e <_puts_r+0x42>
 800adc2:	4622      	mov	r2, r4
 800adc4:	4628      	mov	r0, r5
 800adc6:	f000 f817 	bl	800adf8 <__swbuf_r>
 800adca:	3001      	adds	r0, #1
 800adcc:	d1bf      	bne.n	800ad4e <_puts_r+0x42>
 800adce:	e7df      	b.n	800ad90 <_puts_r+0x84>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	250a      	movs	r5, #10
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	6022      	str	r2, [r4, #0]
 800add8:	701d      	strb	r5, [r3, #0]
 800adda:	e7db      	b.n	800ad94 <_puts_r+0x88>
 800addc:	0800bd94 	.word	0x0800bd94
 800ade0:	0800bdb4 	.word	0x0800bdb4
 800ade4:	0800bd74 	.word	0x0800bd74

0800ade8 <puts>:
 800ade8:	4b02      	ldr	r3, [pc, #8]	; (800adf4 <puts+0xc>)
 800adea:	4601      	mov	r1, r0
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	f7ff bf8d 	b.w	800ad0c <_puts_r>
 800adf2:	bf00      	nop
 800adf4:	24000010 	.word	0x24000010

0800adf8 <__swbuf_r>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	460e      	mov	r6, r1
 800adfc:	4614      	mov	r4, r2
 800adfe:	4605      	mov	r5, r0
 800ae00:	b118      	cbz	r0, 800ae0a <__swbuf_r+0x12>
 800ae02:	6983      	ldr	r3, [r0, #24]
 800ae04:	b90b      	cbnz	r3, 800ae0a <__swbuf_r+0x12>
 800ae06:	f000 f9d1 	bl	800b1ac <__sinit>
 800ae0a:	4b21      	ldr	r3, [pc, #132]	; (800ae90 <__swbuf_r+0x98>)
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	d12b      	bne.n	800ae68 <__swbuf_r+0x70>
 800ae10:	686c      	ldr	r4, [r5, #4]
 800ae12:	69a3      	ldr	r3, [r4, #24]
 800ae14:	60a3      	str	r3, [r4, #8]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	071a      	lsls	r2, r3, #28
 800ae1a:	d52f      	bpl.n	800ae7c <__swbuf_r+0x84>
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	b36b      	cbz	r3, 800ae7c <__swbuf_r+0x84>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	6820      	ldr	r0, [r4, #0]
 800ae24:	1ac0      	subs	r0, r0, r3
 800ae26:	6963      	ldr	r3, [r4, #20]
 800ae28:	b2f6      	uxtb	r6, r6
 800ae2a:	4283      	cmp	r3, r0
 800ae2c:	4637      	mov	r7, r6
 800ae2e:	dc04      	bgt.n	800ae3a <__swbuf_r+0x42>
 800ae30:	4621      	mov	r1, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	f000 f926 	bl	800b084 <_fflush_r>
 800ae38:	bb30      	cbnz	r0, 800ae88 <__swbuf_r+0x90>
 800ae3a:	68a3      	ldr	r3, [r4, #8]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	60a3      	str	r3, [r4, #8]
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	6022      	str	r2, [r4, #0]
 800ae46:	701e      	strb	r6, [r3, #0]
 800ae48:	6963      	ldr	r3, [r4, #20]
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	4283      	cmp	r3, r0
 800ae4e:	d004      	beq.n	800ae5a <__swbuf_r+0x62>
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	07db      	lsls	r3, r3, #31
 800ae54:	d506      	bpl.n	800ae64 <__swbuf_r+0x6c>
 800ae56:	2e0a      	cmp	r6, #10
 800ae58:	d104      	bne.n	800ae64 <__swbuf_r+0x6c>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f911 	bl	800b084 <_fflush_r>
 800ae62:	b988      	cbnz	r0, 800ae88 <__swbuf_r+0x90>
 800ae64:	4638      	mov	r0, r7
 800ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <__swbuf_r+0x9c>)
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d101      	bne.n	800ae72 <__swbuf_r+0x7a>
 800ae6e:	68ac      	ldr	r4, [r5, #8]
 800ae70:	e7cf      	b.n	800ae12 <__swbuf_r+0x1a>
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <__swbuf_r+0xa0>)
 800ae74:	429c      	cmp	r4, r3
 800ae76:	bf08      	it	eq
 800ae78:	68ec      	ldreq	r4, [r5, #12]
 800ae7a:	e7ca      	b.n	800ae12 <__swbuf_r+0x1a>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 f80c 	bl	800ae9c <__swsetup_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0cb      	beq.n	800ae20 <__swbuf_r+0x28>
 800ae88:	f04f 37ff 	mov.w	r7, #4294967295
 800ae8c:	e7ea      	b.n	800ae64 <__swbuf_r+0x6c>
 800ae8e:	bf00      	nop
 800ae90:	0800bd94 	.word	0x0800bd94
 800ae94:	0800bdb4 	.word	0x0800bdb4
 800ae98:	0800bd74 	.word	0x0800bd74

0800ae9c <__swsetup_r>:
 800ae9c:	4b32      	ldr	r3, [pc, #200]	; (800af68 <__swsetup_r+0xcc>)
 800ae9e:	b570      	push	{r4, r5, r6, lr}
 800aea0:	681d      	ldr	r5, [r3, #0]
 800aea2:	4606      	mov	r6, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	b125      	cbz	r5, 800aeb2 <__swsetup_r+0x16>
 800aea8:	69ab      	ldr	r3, [r5, #24]
 800aeaa:	b913      	cbnz	r3, 800aeb2 <__swsetup_r+0x16>
 800aeac:	4628      	mov	r0, r5
 800aeae:	f000 f97d 	bl	800b1ac <__sinit>
 800aeb2:	4b2e      	ldr	r3, [pc, #184]	; (800af6c <__swsetup_r+0xd0>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	d10f      	bne.n	800aed8 <__swsetup_r+0x3c>
 800aeb8:	686c      	ldr	r4, [r5, #4]
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aec0:	0719      	lsls	r1, r3, #28
 800aec2:	d42c      	bmi.n	800af1e <__swsetup_r+0x82>
 800aec4:	06dd      	lsls	r5, r3, #27
 800aec6:	d411      	bmi.n	800aeec <__swsetup_r+0x50>
 800aec8:	2309      	movs	r3, #9
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	f04f 30ff 	mov.w	r0, #4294967295
 800aed6:	e03e      	b.n	800af56 <__swsetup_r+0xba>
 800aed8:	4b25      	ldr	r3, [pc, #148]	; (800af70 <__swsetup_r+0xd4>)
 800aeda:	429c      	cmp	r4, r3
 800aedc:	d101      	bne.n	800aee2 <__swsetup_r+0x46>
 800aede:	68ac      	ldr	r4, [r5, #8]
 800aee0:	e7eb      	b.n	800aeba <__swsetup_r+0x1e>
 800aee2:	4b24      	ldr	r3, [pc, #144]	; (800af74 <__swsetup_r+0xd8>)
 800aee4:	429c      	cmp	r4, r3
 800aee6:	bf08      	it	eq
 800aee8:	68ec      	ldreq	r4, [r5, #12]
 800aeea:	e7e6      	b.n	800aeba <__swsetup_r+0x1e>
 800aeec:	0758      	lsls	r0, r3, #29
 800aeee:	d512      	bpl.n	800af16 <__swsetup_r+0x7a>
 800aef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef2:	b141      	cbz	r1, 800af06 <__swsetup_r+0x6a>
 800aef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef8:	4299      	cmp	r1, r3
 800aefa:	d002      	beq.n	800af02 <__swsetup_r+0x66>
 800aefc:	4630      	mov	r0, r6
 800aefe:	f000 fa59 	bl	800b3b4 <_free_r>
 800af02:	2300      	movs	r3, #0
 800af04:	6363      	str	r3, [r4, #52]	; 0x34
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	2300      	movs	r3, #0
 800af10:	6063      	str	r3, [r4, #4]
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	f043 0308 	orr.w	r3, r3, #8
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	6923      	ldr	r3, [r4, #16]
 800af20:	b94b      	cbnz	r3, 800af36 <__swsetup_r+0x9a>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af2c:	d003      	beq.n	800af36 <__swsetup_r+0x9a>
 800af2e:	4621      	mov	r1, r4
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f9ff 	bl	800b334 <__smakebuf_r>
 800af36:	89a0      	ldrh	r0, [r4, #12]
 800af38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af3c:	f010 0301 	ands.w	r3, r0, #1
 800af40:	d00a      	beq.n	800af58 <__swsetup_r+0xbc>
 800af42:	2300      	movs	r3, #0
 800af44:	60a3      	str	r3, [r4, #8]
 800af46:	6963      	ldr	r3, [r4, #20]
 800af48:	425b      	negs	r3, r3
 800af4a:	61a3      	str	r3, [r4, #24]
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	b943      	cbnz	r3, 800af62 <__swsetup_r+0xc6>
 800af50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af54:	d1ba      	bne.n	800aecc <__swsetup_r+0x30>
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	0781      	lsls	r1, r0, #30
 800af5a:	bf58      	it	pl
 800af5c:	6963      	ldrpl	r3, [r4, #20]
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	e7f4      	b.n	800af4c <__swsetup_r+0xb0>
 800af62:	2000      	movs	r0, #0
 800af64:	e7f7      	b.n	800af56 <__swsetup_r+0xba>
 800af66:	bf00      	nop
 800af68:	24000010 	.word	0x24000010
 800af6c:	0800bd94 	.word	0x0800bd94
 800af70:	0800bdb4 	.word	0x0800bdb4
 800af74:	0800bd74 	.word	0x0800bd74

0800af78 <__sflush_r>:
 800af78:	898a      	ldrh	r2, [r1, #12]
 800af7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7e:	4605      	mov	r5, r0
 800af80:	0710      	lsls	r0, r2, #28
 800af82:	460c      	mov	r4, r1
 800af84:	d458      	bmi.n	800b038 <__sflush_r+0xc0>
 800af86:	684b      	ldr	r3, [r1, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dc05      	bgt.n	800af98 <__sflush_r+0x20>
 800af8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dc02      	bgt.n	800af98 <__sflush_r+0x20>
 800af92:	2000      	movs	r0, #0
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af9a:	2e00      	cmp	r6, #0
 800af9c:	d0f9      	beq.n	800af92 <__sflush_r+0x1a>
 800af9e:	2300      	movs	r3, #0
 800afa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afa4:	682f      	ldr	r7, [r5, #0]
 800afa6:	602b      	str	r3, [r5, #0]
 800afa8:	d032      	beq.n	800b010 <__sflush_r+0x98>
 800afaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	075a      	lsls	r2, r3, #29
 800afb0:	d505      	bpl.n	800afbe <__sflush_r+0x46>
 800afb2:	6863      	ldr	r3, [r4, #4]
 800afb4:	1ac0      	subs	r0, r0, r3
 800afb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afb8:	b10b      	cbz	r3, 800afbe <__sflush_r+0x46>
 800afba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afbc:	1ac0      	subs	r0, r0, r3
 800afbe:	2300      	movs	r3, #0
 800afc0:	4602      	mov	r2, r0
 800afc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afc4:	6a21      	ldr	r1, [r4, #32]
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b0      	blx	r6
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	d106      	bne.n	800afde <__sflush_r+0x66>
 800afd0:	6829      	ldr	r1, [r5, #0]
 800afd2:	291d      	cmp	r1, #29
 800afd4:	d82c      	bhi.n	800b030 <__sflush_r+0xb8>
 800afd6:	4a2a      	ldr	r2, [pc, #168]	; (800b080 <__sflush_r+0x108>)
 800afd8:	40ca      	lsrs	r2, r1
 800afda:	07d6      	lsls	r6, r2, #31
 800afdc:	d528      	bpl.n	800b030 <__sflush_r+0xb8>
 800afde:	2200      	movs	r2, #0
 800afe0:	6062      	str	r2, [r4, #4]
 800afe2:	04d9      	lsls	r1, r3, #19
 800afe4:	6922      	ldr	r2, [r4, #16]
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	d504      	bpl.n	800aff4 <__sflush_r+0x7c>
 800afea:	1c42      	adds	r2, r0, #1
 800afec:	d101      	bne.n	800aff2 <__sflush_r+0x7a>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b903      	cbnz	r3, 800aff4 <__sflush_r+0x7c>
 800aff2:	6560      	str	r0, [r4, #84]	; 0x54
 800aff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aff6:	602f      	str	r7, [r5, #0]
 800aff8:	2900      	cmp	r1, #0
 800affa:	d0ca      	beq.n	800af92 <__sflush_r+0x1a>
 800affc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b000:	4299      	cmp	r1, r3
 800b002:	d002      	beq.n	800b00a <__sflush_r+0x92>
 800b004:	4628      	mov	r0, r5
 800b006:	f000 f9d5 	bl	800b3b4 <_free_r>
 800b00a:	2000      	movs	r0, #0
 800b00c:	6360      	str	r0, [r4, #52]	; 0x34
 800b00e:	e7c1      	b.n	800af94 <__sflush_r+0x1c>
 800b010:	6a21      	ldr	r1, [r4, #32]
 800b012:	2301      	movs	r3, #1
 800b014:	4628      	mov	r0, r5
 800b016:	47b0      	blx	r6
 800b018:	1c41      	adds	r1, r0, #1
 800b01a:	d1c7      	bne.n	800afac <__sflush_r+0x34>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0c4      	beq.n	800afac <__sflush_r+0x34>
 800b022:	2b1d      	cmp	r3, #29
 800b024:	d001      	beq.n	800b02a <__sflush_r+0xb2>
 800b026:	2b16      	cmp	r3, #22
 800b028:	d101      	bne.n	800b02e <__sflush_r+0xb6>
 800b02a:	602f      	str	r7, [r5, #0]
 800b02c:	e7b1      	b.n	800af92 <__sflush_r+0x1a>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	e7ad      	b.n	800af94 <__sflush_r+0x1c>
 800b038:	690f      	ldr	r7, [r1, #16]
 800b03a:	2f00      	cmp	r7, #0
 800b03c:	d0a9      	beq.n	800af92 <__sflush_r+0x1a>
 800b03e:	0793      	lsls	r3, r2, #30
 800b040:	680e      	ldr	r6, [r1, #0]
 800b042:	bf08      	it	eq
 800b044:	694b      	ldreq	r3, [r1, #20]
 800b046:	600f      	str	r7, [r1, #0]
 800b048:	bf18      	it	ne
 800b04a:	2300      	movne	r3, #0
 800b04c:	eba6 0807 	sub.w	r8, r6, r7
 800b050:	608b      	str	r3, [r1, #8]
 800b052:	f1b8 0f00 	cmp.w	r8, #0
 800b056:	dd9c      	ble.n	800af92 <__sflush_r+0x1a>
 800b058:	6a21      	ldr	r1, [r4, #32]
 800b05a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b05c:	4643      	mov	r3, r8
 800b05e:	463a      	mov	r2, r7
 800b060:	4628      	mov	r0, r5
 800b062:	47b0      	blx	r6
 800b064:	2800      	cmp	r0, #0
 800b066:	dc06      	bgt.n	800b076 <__sflush_r+0xfe>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	f04f 30ff 	mov.w	r0, #4294967295
 800b074:	e78e      	b.n	800af94 <__sflush_r+0x1c>
 800b076:	4407      	add	r7, r0
 800b078:	eba8 0800 	sub.w	r8, r8, r0
 800b07c:	e7e9      	b.n	800b052 <__sflush_r+0xda>
 800b07e:	bf00      	nop
 800b080:	20400001 	.word	0x20400001

0800b084 <_fflush_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	690b      	ldr	r3, [r1, #16]
 800b088:	4605      	mov	r5, r0
 800b08a:	460c      	mov	r4, r1
 800b08c:	b913      	cbnz	r3, 800b094 <_fflush_r+0x10>
 800b08e:	2500      	movs	r5, #0
 800b090:	4628      	mov	r0, r5
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	b118      	cbz	r0, 800b09e <_fflush_r+0x1a>
 800b096:	6983      	ldr	r3, [r0, #24]
 800b098:	b90b      	cbnz	r3, 800b09e <_fflush_r+0x1a>
 800b09a:	f000 f887 	bl	800b1ac <__sinit>
 800b09e:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <_fflush_r+0x6c>)
 800b0a0:	429c      	cmp	r4, r3
 800b0a2:	d11b      	bne.n	800b0dc <_fflush_r+0x58>
 800b0a4:	686c      	ldr	r4, [r5, #4]
 800b0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0ef      	beq.n	800b08e <_fflush_r+0xa>
 800b0ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0b0:	07d0      	lsls	r0, r2, #31
 800b0b2:	d404      	bmi.n	800b0be <_fflush_r+0x3a>
 800b0b4:	0599      	lsls	r1, r3, #22
 800b0b6:	d402      	bmi.n	800b0be <_fflush_r+0x3a>
 800b0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ba:	f000 f915 	bl	800b2e8 <__retarget_lock_acquire_recursive>
 800b0be:	4628      	mov	r0, r5
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	f7ff ff59 	bl	800af78 <__sflush_r>
 800b0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0c8:	07da      	lsls	r2, r3, #31
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	d4e0      	bmi.n	800b090 <_fflush_r+0xc>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	059b      	lsls	r3, r3, #22
 800b0d2:	d4dd      	bmi.n	800b090 <_fflush_r+0xc>
 800b0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0d6:	f000 f908 	bl	800b2ea <__retarget_lock_release_recursive>
 800b0da:	e7d9      	b.n	800b090 <_fflush_r+0xc>
 800b0dc:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <_fflush_r+0x70>)
 800b0de:	429c      	cmp	r4, r3
 800b0e0:	d101      	bne.n	800b0e6 <_fflush_r+0x62>
 800b0e2:	68ac      	ldr	r4, [r5, #8]
 800b0e4:	e7df      	b.n	800b0a6 <_fflush_r+0x22>
 800b0e6:	4b04      	ldr	r3, [pc, #16]	; (800b0f8 <_fflush_r+0x74>)
 800b0e8:	429c      	cmp	r4, r3
 800b0ea:	bf08      	it	eq
 800b0ec:	68ec      	ldreq	r4, [r5, #12]
 800b0ee:	e7da      	b.n	800b0a6 <_fflush_r+0x22>
 800b0f0:	0800bd94 	.word	0x0800bd94
 800b0f4:	0800bdb4 	.word	0x0800bdb4
 800b0f8:	0800bd74 	.word	0x0800bd74

0800b0fc <std>:
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	b510      	push	{r4, lr}
 800b100:	4604      	mov	r4, r0
 800b102:	e9c0 3300 	strd	r3, r3, [r0]
 800b106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b10a:	6083      	str	r3, [r0, #8]
 800b10c:	8181      	strh	r1, [r0, #12]
 800b10e:	6643      	str	r3, [r0, #100]	; 0x64
 800b110:	81c2      	strh	r2, [r0, #14]
 800b112:	6183      	str	r3, [r0, #24]
 800b114:	4619      	mov	r1, r3
 800b116:	2208      	movs	r2, #8
 800b118:	305c      	adds	r0, #92	; 0x5c
 800b11a:	f7ff fdd7 	bl	800accc <memset>
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <std+0x38>)
 800b120:	6263      	str	r3, [r4, #36]	; 0x24
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <std+0x3c>)
 800b124:	62a3      	str	r3, [r4, #40]	; 0x28
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <std+0x40>)
 800b128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <std+0x44>)
 800b12c:	6224      	str	r4, [r4, #32]
 800b12e:	6323      	str	r3, [r4, #48]	; 0x30
 800b130:	bd10      	pop	{r4, pc}
 800b132:	bf00      	nop
 800b134:	0800bb05 	.word	0x0800bb05
 800b138:	0800bb27 	.word	0x0800bb27
 800b13c:	0800bb5f 	.word	0x0800bb5f
 800b140:	0800bb83 	.word	0x0800bb83

0800b144 <_cleanup_r>:
 800b144:	4901      	ldr	r1, [pc, #4]	; (800b14c <_cleanup_r+0x8>)
 800b146:	f000 b8af 	b.w	800b2a8 <_fwalk_reent>
 800b14a:	bf00      	nop
 800b14c:	0800b085 	.word	0x0800b085

0800b150 <__sfmoreglue>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	1e4a      	subs	r2, r1, #1
 800b154:	2568      	movs	r5, #104	; 0x68
 800b156:	4355      	muls	r5, r2
 800b158:	460e      	mov	r6, r1
 800b15a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b15e:	f000 f979 	bl	800b454 <_malloc_r>
 800b162:	4604      	mov	r4, r0
 800b164:	b140      	cbz	r0, 800b178 <__sfmoreglue+0x28>
 800b166:	2100      	movs	r1, #0
 800b168:	e9c0 1600 	strd	r1, r6, [r0]
 800b16c:	300c      	adds	r0, #12
 800b16e:	60a0      	str	r0, [r4, #8]
 800b170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b174:	f7ff fdaa 	bl	800accc <memset>
 800b178:	4620      	mov	r0, r4
 800b17a:	bd70      	pop	{r4, r5, r6, pc}

0800b17c <__sfp_lock_acquire>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sfp_lock_acquire+0x8>)
 800b17e:	f000 b8b3 	b.w	800b2e8 <__retarget_lock_acquire_recursive>
 800b182:	bf00      	nop
 800b184:	240025a8 	.word	0x240025a8

0800b188 <__sfp_lock_release>:
 800b188:	4801      	ldr	r0, [pc, #4]	; (800b190 <__sfp_lock_release+0x8>)
 800b18a:	f000 b8ae 	b.w	800b2ea <__retarget_lock_release_recursive>
 800b18e:	bf00      	nop
 800b190:	240025a8 	.word	0x240025a8

0800b194 <__sinit_lock_acquire>:
 800b194:	4801      	ldr	r0, [pc, #4]	; (800b19c <__sinit_lock_acquire+0x8>)
 800b196:	f000 b8a7 	b.w	800b2e8 <__retarget_lock_acquire_recursive>
 800b19a:	bf00      	nop
 800b19c:	240025a3 	.word	0x240025a3

0800b1a0 <__sinit_lock_release>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__sinit_lock_release+0x8>)
 800b1a2:	f000 b8a2 	b.w	800b2ea <__retarget_lock_release_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	240025a3 	.word	0x240025a3

0800b1ac <__sinit>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	f7ff fff0 	bl	800b194 <__sinit_lock_acquire>
 800b1b4:	69a3      	ldr	r3, [r4, #24]
 800b1b6:	b11b      	cbz	r3, 800b1c0 <__sinit+0x14>
 800b1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1bc:	f7ff bff0 	b.w	800b1a0 <__sinit_lock_release>
 800b1c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1c4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1c6:	4b13      	ldr	r3, [pc, #76]	; (800b214 <__sinit+0x68>)
 800b1c8:	4a13      	ldr	r2, [pc, #76]	; (800b218 <__sinit+0x6c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1ce:	42a3      	cmp	r3, r4
 800b1d0:	bf04      	itt	eq
 800b1d2:	2301      	moveq	r3, #1
 800b1d4:	61a3      	streq	r3, [r4, #24]
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 f820 	bl	800b21c <__sfp>
 800b1dc:	6060      	str	r0, [r4, #4]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 f81c 	bl	800b21c <__sfp>
 800b1e4:	60a0      	str	r0, [r4, #8]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 f818 	bl	800b21c <__sfp>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	60e0      	str	r0, [r4, #12]
 800b1f0:	2104      	movs	r1, #4
 800b1f2:	6860      	ldr	r0, [r4, #4]
 800b1f4:	f7ff ff82 	bl	800b0fc <std>
 800b1f8:	68a0      	ldr	r0, [r4, #8]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	2109      	movs	r1, #9
 800b1fe:	f7ff ff7d 	bl	800b0fc <std>
 800b202:	68e0      	ldr	r0, [r4, #12]
 800b204:	2202      	movs	r2, #2
 800b206:	2112      	movs	r1, #18
 800b208:	f7ff ff78 	bl	800b0fc <std>
 800b20c:	2301      	movs	r3, #1
 800b20e:	61a3      	str	r3, [r4, #24]
 800b210:	e7d2      	b.n	800b1b8 <__sinit+0xc>
 800b212:	bf00      	nop
 800b214:	0800bd70 	.word	0x0800bd70
 800b218:	0800b145 	.word	0x0800b145

0800b21c <__sfp>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	4607      	mov	r7, r0
 800b220:	f7ff ffac 	bl	800b17c <__sfp_lock_acquire>
 800b224:	4b1e      	ldr	r3, [pc, #120]	; (800b2a0 <__sfp+0x84>)
 800b226:	681e      	ldr	r6, [r3, #0]
 800b228:	69b3      	ldr	r3, [r6, #24]
 800b22a:	b913      	cbnz	r3, 800b232 <__sfp+0x16>
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7ff ffbd 	bl	800b1ac <__sinit>
 800b232:	3648      	adds	r6, #72	; 0x48
 800b234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b238:	3b01      	subs	r3, #1
 800b23a:	d503      	bpl.n	800b244 <__sfp+0x28>
 800b23c:	6833      	ldr	r3, [r6, #0]
 800b23e:	b30b      	cbz	r3, 800b284 <__sfp+0x68>
 800b240:	6836      	ldr	r6, [r6, #0]
 800b242:	e7f7      	b.n	800b234 <__sfp+0x18>
 800b244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b248:	b9d5      	cbnz	r5, 800b280 <__sfp+0x64>
 800b24a:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <__sfp+0x88>)
 800b24c:	60e3      	str	r3, [r4, #12]
 800b24e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b252:	6665      	str	r5, [r4, #100]	; 0x64
 800b254:	f000 f847 	bl	800b2e6 <__retarget_lock_init_recursive>
 800b258:	f7ff ff96 	bl	800b188 <__sfp_lock_release>
 800b25c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b264:	6025      	str	r5, [r4, #0]
 800b266:	61a5      	str	r5, [r4, #24]
 800b268:	2208      	movs	r2, #8
 800b26a:	4629      	mov	r1, r5
 800b26c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b270:	f7ff fd2c 	bl	800accc <memset>
 800b274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b27c:	4620      	mov	r0, r4
 800b27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b280:	3468      	adds	r4, #104	; 0x68
 800b282:	e7d9      	b.n	800b238 <__sfp+0x1c>
 800b284:	2104      	movs	r1, #4
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ff62 	bl	800b150 <__sfmoreglue>
 800b28c:	4604      	mov	r4, r0
 800b28e:	6030      	str	r0, [r6, #0]
 800b290:	2800      	cmp	r0, #0
 800b292:	d1d5      	bne.n	800b240 <__sfp+0x24>
 800b294:	f7ff ff78 	bl	800b188 <__sfp_lock_release>
 800b298:	230c      	movs	r3, #12
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	e7ee      	b.n	800b27c <__sfp+0x60>
 800b29e:	bf00      	nop
 800b2a0:	0800bd70 	.word	0x0800bd70
 800b2a4:	ffff0001 	.word	0xffff0001

0800b2a8 <_fwalk_reent>:
 800b2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	4688      	mov	r8, r1
 800b2b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2b4:	2700      	movs	r7, #0
 800b2b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2ba:	f1b9 0901 	subs.w	r9, r9, #1
 800b2be:	d505      	bpl.n	800b2cc <_fwalk_reent+0x24>
 800b2c0:	6824      	ldr	r4, [r4, #0]
 800b2c2:	2c00      	cmp	r4, #0
 800b2c4:	d1f7      	bne.n	800b2b6 <_fwalk_reent+0xe>
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2cc:	89ab      	ldrh	r3, [r5, #12]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d907      	bls.n	800b2e2 <_fwalk_reent+0x3a>
 800b2d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	d003      	beq.n	800b2e2 <_fwalk_reent+0x3a>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4630      	mov	r0, r6
 800b2de:	47c0      	blx	r8
 800b2e0:	4307      	orrs	r7, r0
 800b2e2:	3568      	adds	r5, #104	; 0x68
 800b2e4:	e7e9      	b.n	800b2ba <_fwalk_reent+0x12>

0800b2e6 <__retarget_lock_init_recursive>:
 800b2e6:	4770      	bx	lr

0800b2e8 <__retarget_lock_acquire_recursive>:
 800b2e8:	4770      	bx	lr

0800b2ea <__retarget_lock_release_recursive>:
 800b2ea:	4770      	bx	lr

0800b2ec <__swhatbuf_r>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	460e      	mov	r6, r1
 800b2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	b096      	sub	sp, #88	; 0x58
 800b2f8:	4614      	mov	r4, r2
 800b2fa:	461d      	mov	r5, r3
 800b2fc:	da07      	bge.n	800b30e <__swhatbuf_r+0x22>
 800b2fe:	2300      	movs	r3, #0
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	89b3      	ldrh	r3, [r6, #12]
 800b304:	061a      	lsls	r2, r3, #24
 800b306:	d410      	bmi.n	800b32a <__swhatbuf_r+0x3e>
 800b308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b30c:	e00e      	b.n	800b32c <__swhatbuf_r+0x40>
 800b30e:	466a      	mov	r2, sp
 800b310:	f000 fc5e 	bl	800bbd0 <_fstat_r>
 800b314:	2800      	cmp	r0, #0
 800b316:	dbf2      	blt.n	800b2fe <__swhatbuf_r+0x12>
 800b318:	9a01      	ldr	r2, [sp, #4]
 800b31a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b31e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b322:	425a      	negs	r2, r3
 800b324:	415a      	adcs	r2, r3
 800b326:	602a      	str	r2, [r5, #0]
 800b328:	e7ee      	b.n	800b308 <__swhatbuf_r+0x1c>
 800b32a:	2340      	movs	r3, #64	; 0x40
 800b32c:	2000      	movs	r0, #0
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	b016      	add	sp, #88	; 0x58
 800b332:	bd70      	pop	{r4, r5, r6, pc}

0800b334 <__smakebuf_r>:
 800b334:	898b      	ldrh	r3, [r1, #12]
 800b336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b338:	079d      	lsls	r5, r3, #30
 800b33a:	4606      	mov	r6, r0
 800b33c:	460c      	mov	r4, r1
 800b33e:	d507      	bpl.n	800b350 <__smakebuf_r+0x1c>
 800b340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	6123      	str	r3, [r4, #16]
 800b348:	2301      	movs	r3, #1
 800b34a:	6163      	str	r3, [r4, #20]
 800b34c:	b002      	add	sp, #8
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	ab01      	add	r3, sp, #4
 800b352:	466a      	mov	r2, sp
 800b354:	f7ff ffca 	bl	800b2ec <__swhatbuf_r>
 800b358:	9900      	ldr	r1, [sp, #0]
 800b35a:	4605      	mov	r5, r0
 800b35c:	4630      	mov	r0, r6
 800b35e:	f000 f879 	bl	800b454 <_malloc_r>
 800b362:	b948      	cbnz	r0, 800b378 <__smakebuf_r+0x44>
 800b364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b368:	059a      	lsls	r2, r3, #22
 800b36a:	d4ef      	bmi.n	800b34c <__smakebuf_r+0x18>
 800b36c:	f023 0303 	bic.w	r3, r3, #3
 800b370:	f043 0302 	orr.w	r3, r3, #2
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	e7e3      	b.n	800b340 <__smakebuf_r+0xc>
 800b378:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <__smakebuf_r+0x7c>)
 800b37a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	6020      	str	r0, [r4, #0]
 800b380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	9b00      	ldr	r3, [sp, #0]
 800b388:	6163      	str	r3, [r4, #20]
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	6120      	str	r0, [r4, #16]
 800b38e:	b15b      	cbz	r3, 800b3a8 <__smakebuf_r+0x74>
 800b390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b394:	4630      	mov	r0, r6
 800b396:	f000 fc2d 	bl	800bbf4 <_isatty_r>
 800b39a:	b128      	cbz	r0, 800b3a8 <__smakebuf_r+0x74>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	f023 0303 	bic.w	r3, r3, #3
 800b3a2:	f043 0301 	orr.w	r3, r3, #1
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	89a0      	ldrh	r0, [r4, #12]
 800b3aa:	4305      	orrs	r5, r0
 800b3ac:	81a5      	strh	r5, [r4, #12]
 800b3ae:	e7cd      	b.n	800b34c <__smakebuf_r+0x18>
 800b3b0:	0800b145 	.word	0x0800b145

0800b3b4 <_free_r>:
 800b3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3b6:	2900      	cmp	r1, #0
 800b3b8:	d048      	beq.n	800b44c <_free_r+0x98>
 800b3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3be:	9001      	str	r0, [sp, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b3c6:	bfb8      	it	lt
 800b3c8:	18e4      	addlt	r4, r4, r3
 800b3ca:	f000 fc35 	bl	800bc38 <__malloc_lock>
 800b3ce:	4a20      	ldr	r2, [pc, #128]	; (800b450 <_free_r+0x9c>)
 800b3d0:	9801      	ldr	r0, [sp, #4]
 800b3d2:	6813      	ldr	r3, [r2, #0]
 800b3d4:	4615      	mov	r5, r2
 800b3d6:	b933      	cbnz	r3, 800b3e6 <_free_r+0x32>
 800b3d8:	6063      	str	r3, [r4, #4]
 800b3da:	6014      	str	r4, [r2, #0]
 800b3dc:	b003      	add	sp, #12
 800b3de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3e2:	f000 bc2f 	b.w	800bc44 <__malloc_unlock>
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	d90b      	bls.n	800b402 <_free_r+0x4e>
 800b3ea:	6821      	ldr	r1, [r4, #0]
 800b3ec:	1862      	adds	r2, r4, r1
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	bf04      	itt	eq
 800b3f2:	681a      	ldreq	r2, [r3, #0]
 800b3f4:	685b      	ldreq	r3, [r3, #4]
 800b3f6:	6063      	str	r3, [r4, #4]
 800b3f8:	bf04      	itt	eq
 800b3fa:	1852      	addeq	r2, r2, r1
 800b3fc:	6022      	streq	r2, [r4, #0]
 800b3fe:	602c      	str	r4, [r5, #0]
 800b400:	e7ec      	b.n	800b3dc <_free_r+0x28>
 800b402:	461a      	mov	r2, r3
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	b10b      	cbz	r3, 800b40c <_free_r+0x58>
 800b408:	42a3      	cmp	r3, r4
 800b40a:	d9fa      	bls.n	800b402 <_free_r+0x4e>
 800b40c:	6811      	ldr	r1, [r2, #0]
 800b40e:	1855      	adds	r5, r2, r1
 800b410:	42a5      	cmp	r5, r4
 800b412:	d10b      	bne.n	800b42c <_free_r+0x78>
 800b414:	6824      	ldr	r4, [r4, #0]
 800b416:	4421      	add	r1, r4
 800b418:	1854      	adds	r4, r2, r1
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	6011      	str	r1, [r2, #0]
 800b41e:	d1dd      	bne.n	800b3dc <_free_r+0x28>
 800b420:	681c      	ldr	r4, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	6053      	str	r3, [r2, #4]
 800b426:	4421      	add	r1, r4
 800b428:	6011      	str	r1, [r2, #0]
 800b42a:	e7d7      	b.n	800b3dc <_free_r+0x28>
 800b42c:	d902      	bls.n	800b434 <_free_r+0x80>
 800b42e:	230c      	movs	r3, #12
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	e7d3      	b.n	800b3dc <_free_r+0x28>
 800b434:	6825      	ldr	r5, [r4, #0]
 800b436:	1961      	adds	r1, r4, r5
 800b438:	428b      	cmp	r3, r1
 800b43a:	bf04      	itt	eq
 800b43c:	6819      	ldreq	r1, [r3, #0]
 800b43e:	685b      	ldreq	r3, [r3, #4]
 800b440:	6063      	str	r3, [r4, #4]
 800b442:	bf04      	itt	eq
 800b444:	1949      	addeq	r1, r1, r5
 800b446:	6021      	streq	r1, [r4, #0]
 800b448:	6054      	str	r4, [r2, #4]
 800b44a:	e7c7      	b.n	800b3dc <_free_r+0x28>
 800b44c:	b003      	add	sp, #12
 800b44e:	bd30      	pop	{r4, r5, pc}
 800b450:	240000a4 	.word	0x240000a4

0800b454 <_malloc_r>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	1ccd      	adds	r5, r1, #3
 800b458:	f025 0503 	bic.w	r5, r5, #3
 800b45c:	3508      	adds	r5, #8
 800b45e:	2d0c      	cmp	r5, #12
 800b460:	bf38      	it	cc
 800b462:	250c      	movcc	r5, #12
 800b464:	2d00      	cmp	r5, #0
 800b466:	4606      	mov	r6, r0
 800b468:	db01      	blt.n	800b46e <_malloc_r+0x1a>
 800b46a:	42a9      	cmp	r1, r5
 800b46c:	d903      	bls.n	800b476 <_malloc_r+0x22>
 800b46e:	230c      	movs	r3, #12
 800b470:	6033      	str	r3, [r6, #0]
 800b472:	2000      	movs	r0, #0
 800b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b476:	f000 fbdf 	bl	800bc38 <__malloc_lock>
 800b47a:	4921      	ldr	r1, [pc, #132]	; (800b500 <_malloc_r+0xac>)
 800b47c:	680a      	ldr	r2, [r1, #0]
 800b47e:	4614      	mov	r4, r2
 800b480:	b99c      	cbnz	r4, 800b4aa <_malloc_r+0x56>
 800b482:	4f20      	ldr	r7, [pc, #128]	; (800b504 <_malloc_r+0xb0>)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	b923      	cbnz	r3, 800b492 <_malloc_r+0x3e>
 800b488:	4621      	mov	r1, r4
 800b48a:	4630      	mov	r0, r6
 800b48c:	f000 fb2a 	bl	800bae4 <_sbrk_r>
 800b490:	6038      	str	r0, [r7, #0]
 800b492:	4629      	mov	r1, r5
 800b494:	4630      	mov	r0, r6
 800b496:	f000 fb25 	bl	800bae4 <_sbrk_r>
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	d123      	bne.n	800b4e6 <_malloc_r+0x92>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	6033      	str	r3, [r6, #0]
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f000 fbce 	bl	800bc44 <__malloc_unlock>
 800b4a8:	e7e3      	b.n	800b472 <_malloc_r+0x1e>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	1b5b      	subs	r3, r3, r5
 800b4ae:	d417      	bmi.n	800b4e0 <_malloc_r+0x8c>
 800b4b0:	2b0b      	cmp	r3, #11
 800b4b2:	d903      	bls.n	800b4bc <_malloc_r+0x68>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	441c      	add	r4, r3
 800b4b8:	6025      	str	r5, [r4, #0]
 800b4ba:	e004      	b.n	800b4c6 <_malloc_r+0x72>
 800b4bc:	6863      	ldr	r3, [r4, #4]
 800b4be:	42a2      	cmp	r2, r4
 800b4c0:	bf0c      	ite	eq
 800b4c2:	600b      	streq	r3, [r1, #0]
 800b4c4:	6053      	strne	r3, [r2, #4]
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f000 fbbc 	bl	800bc44 <__malloc_unlock>
 800b4cc:	f104 000b 	add.w	r0, r4, #11
 800b4d0:	1d23      	adds	r3, r4, #4
 800b4d2:	f020 0007 	bic.w	r0, r0, #7
 800b4d6:	1ac2      	subs	r2, r0, r3
 800b4d8:	d0cc      	beq.n	800b474 <_malloc_r+0x20>
 800b4da:	1a1b      	subs	r3, r3, r0
 800b4dc:	50a3      	str	r3, [r4, r2]
 800b4de:	e7c9      	b.n	800b474 <_malloc_r+0x20>
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	6864      	ldr	r4, [r4, #4]
 800b4e4:	e7cc      	b.n	800b480 <_malloc_r+0x2c>
 800b4e6:	1cc4      	adds	r4, r0, #3
 800b4e8:	f024 0403 	bic.w	r4, r4, #3
 800b4ec:	42a0      	cmp	r0, r4
 800b4ee:	d0e3      	beq.n	800b4b8 <_malloc_r+0x64>
 800b4f0:	1a21      	subs	r1, r4, r0
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f000 faf6 	bl	800bae4 <_sbrk_r>
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	d1dd      	bne.n	800b4b8 <_malloc_r+0x64>
 800b4fc:	e7cf      	b.n	800b49e <_malloc_r+0x4a>
 800b4fe:	bf00      	nop
 800b500:	240000a4 	.word	0x240000a4
 800b504:	240000a8 	.word	0x240000a8

0800b508 <__sfputc_r>:
 800b508:	6893      	ldr	r3, [r2, #8]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	b410      	push	{r4}
 800b510:	6093      	str	r3, [r2, #8]
 800b512:	da08      	bge.n	800b526 <__sfputc_r+0x1e>
 800b514:	6994      	ldr	r4, [r2, #24]
 800b516:	42a3      	cmp	r3, r4
 800b518:	db01      	blt.n	800b51e <__sfputc_r+0x16>
 800b51a:	290a      	cmp	r1, #10
 800b51c:	d103      	bne.n	800b526 <__sfputc_r+0x1e>
 800b51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b522:	f7ff bc69 	b.w	800adf8 <__swbuf_r>
 800b526:	6813      	ldr	r3, [r2, #0]
 800b528:	1c58      	adds	r0, r3, #1
 800b52a:	6010      	str	r0, [r2, #0]
 800b52c:	7019      	strb	r1, [r3, #0]
 800b52e:	4608      	mov	r0, r1
 800b530:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <__sfputs_r>:
 800b536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b538:	4606      	mov	r6, r0
 800b53a:	460f      	mov	r7, r1
 800b53c:	4614      	mov	r4, r2
 800b53e:	18d5      	adds	r5, r2, r3
 800b540:	42ac      	cmp	r4, r5
 800b542:	d101      	bne.n	800b548 <__sfputs_r+0x12>
 800b544:	2000      	movs	r0, #0
 800b546:	e007      	b.n	800b558 <__sfputs_r+0x22>
 800b548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54c:	463a      	mov	r2, r7
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ffda 	bl	800b508 <__sfputc_r>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d1f3      	bne.n	800b540 <__sfputs_r+0xa>
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b55c <_vfiprintf_r>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	460d      	mov	r5, r1
 800b562:	b09d      	sub	sp, #116	; 0x74
 800b564:	4614      	mov	r4, r2
 800b566:	4698      	mov	r8, r3
 800b568:	4606      	mov	r6, r0
 800b56a:	b118      	cbz	r0, 800b574 <_vfiprintf_r+0x18>
 800b56c:	6983      	ldr	r3, [r0, #24]
 800b56e:	b90b      	cbnz	r3, 800b574 <_vfiprintf_r+0x18>
 800b570:	f7ff fe1c 	bl	800b1ac <__sinit>
 800b574:	4b89      	ldr	r3, [pc, #548]	; (800b79c <_vfiprintf_r+0x240>)
 800b576:	429d      	cmp	r5, r3
 800b578:	d11b      	bne.n	800b5b2 <_vfiprintf_r+0x56>
 800b57a:	6875      	ldr	r5, [r6, #4]
 800b57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b57e:	07d9      	lsls	r1, r3, #31
 800b580:	d405      	bmi.n	800b58e <_vfiprintf_r+0x32>
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	059a      	lsls	r2, r3, #22
 800b586:	d402      	bmi.n	800b58e <_vfiprintf_r+0x32>
 800b588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b58a:	f7ff fead 	bl	800b2e8 <__retarget_lock_acquire_recursive>
 800b58e:	89ab      	ldrh	r3, [r5, #12]
 800b590:	071b      	lsls	r3, r3, #28
 800b592:	d501      	bpl.n	800b598 <_vfiprintf_r+0x3c>
 800b594:	692b      	ldr	r3, [r5, #16]
 800b596:	b9eb      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x78>
 800b598:	4629      	mov	r1, r5
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff fc7e 	bl	800ae9c <__swsetup_r>
 800b5a0:	b1c0      	cbz	r0, 800b5d4 <_vfiprintf_r+0x78>
 800b5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5a4:	07dc      	lsls	r4, r3, #31
 800b5a6:	d50e      	bpl.n	800b5c6 <_vfiprintf_r+0x6a>
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	b01d      	add	sp, #116	; 0x74
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b2:	4b7b      	ldr	r3, [pc, #492]	; (800b7a0 <_vfiprintf_r+0x244>)
 800b5b4:	429d      	cmp	r5, r3
 800b5b6:	d101      	bne.n	800b5bc <_vfiprintf_r+0x60>
 800b5b8:	68b5      	ldr	r5, [r6, #8]
 800b5ba:	e7df      	b.n	800b57c <_vfiprintf_r+0x20>
 800b5bc:	4b79      	ldr	r3, [pc, #484]	; (800b7a4 <_vfiprintf_r+0x248>)
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	bf08      	it	eq
 800b5c2:	68f5      	ldreq	r5, [r6, #12]
 800b5c4:	e7da      	b.n	800b57c <_vfiprintf_r+0x20>
 800b5c6:	89ab      	ldrh	r3, [r5, #12]
 800b5c8:	0598      	lsls	r0, r3, #22
 800b5ca:	d4ed      	bmi.n	800b5a8 <_vfiprintf_r+0x4c>
 800b5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ce:	f7ff fe8c 	bl	800b2ea <__retarget_lock_release_recursive>
 800b5d2:	e7e9      	b.n	800b5a8 <_vfiprintf_r+0x4c>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d8:	2320      	movs	r3, #32
 800b5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5e2:	2330      	movs	r3, #48	; 0x30
 800b5e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7a8 <_vfiprintf_r+0x24c>
 800b5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ec:	f04f 0901 	mov.w	r9, #1
 800b5f0:	4623      	mov	r3, r4
 800b5f2:	469a      	mov	sl, r3
 800b5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5f8:	b10a      	cbz	r2, 800b5fe <_vfiprintf_r+0xa2>
 800b5fa:	2a25      	cmp	r2, #37	; 0x25
 800b5fc:	d1f9      	bne.n	800b5f2 <_vfiprintf_r+0x96>
 800b5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b602:	d00b      	beq.n	800b61c <_vfiprintf_r+0xc0>
 800b604:	465b      	mov	r3, fp
 800b606:	4622      	mov	r2, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff ff93 	bl	800b536 <__sfputs_r>
 800b610:	3001      	adds	r0, #1
 800b612:	f000 80aa 	beq.w	800b76a <_vfiprintf_r+0x20e>
 800b616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b618:	445a      	add	r2, fp
 800b61a:	9209      	str	r2, [sp, #36]	; 0x24
 800b61c:	f89a 3000 	ldrb.w	r3, [sl]
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 80a2 	beq.w	800b76a <_vfiprintf_r+0x20e>
 800b626:	2300      	movs	r3, #0
 800b628:	f04f 32ff 	mov.w	r2, #4294967295
 800b62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b630:	f10a 0a01 	add.w	sl, sl, #1
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	9307      	str	r3, [sp, #28]
 800b638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b63c:	931a      	str	r3, [sp, #104]	; 0x68
 800b63e:	4654      	mov	r4, sl
 800b640:	2205      	movs	r2, #5
 800b642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b646:	4858      	ldr	r0, [pc, #352]	; (800b7a8 <_vfiprintf_r+0x24c>)
 800b648:	f7f4 fe62 	bl	8000310 <memchr>
 800b64c:	9a04      	ldr	r2, [sp, #16]
 800b64e:	b9d8      	cbnz	r0, 800b688 <_vfiprintf_r+0x12c>
 800b650:	06d1      	lsls	r1, r2, #27
 800b652:	bf44      	itt	mi
 800b654:	2320      	movmi	r3, #32
 800b656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b65a:	0713      	lsls	r3, r2, #28
 800b65c:	bf44      	itt	mi
 800b65e:	232b      	movmi	r3, #43	; 0x2b
 800b660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b664:	f89a 3000 	ldrb.w	r3, [sl]
 800b668:	2b2a      	cmp	r3, #42	; 0x2a
 800b66a:	d015      	beq.n	800b698 <_vfiprintf_r+0x13c>
 800b66c:	9a07      	ldr	r2, [sp, #28]
 800b66e:	4654      	mov	r4, sl
 800b670:	2000      	movs	r0, #0
 800b672:	f04f 0c0a 	mov.w	ip, #10
 800b676:	4621      	mov	r1, r4
 800b678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b67c:	3b30      	subs	r3, #48	; 0x30
 800b67e:	2b09      	cmp	r3, #9
 800b680:	d94e      	bls.n	800b720 <_vfiprintf_r+0x1c4>
 800b682:	b1b0      	cbz	r0, 800b6b2 <_vfiprintf_r+0x156>
 800b684:	9207      	str	r2, [sp, #28]
 800b686:	e014      	b.n	800b6b2 <_vfiprintf_r+0x156>
 800b688:	eba0 0308 	sub.w	r3, r0, r8
 800b68c:	fa09 f303 	lsl.w	r3, r9, r3
 800b690:	4313      	orrs	r3, r2
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	46a2      	mov	sl, r4
 800b696:	e7d2      	b.n	800b63e <_vfiprintf_r+0xe2>
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	1d19      	adds	r1, r3, #4
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	9103      	str	r1, [sp, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bfbb      	ittet	lt
 800b6a4:	425b      	neglt	r3, r3
 800b6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6aa:	9307      	strge	r3, [sp, #28]
 800b6ac:	9307      	strlt	r3, [sp, #28]
 800b6ae:	bfb8      	it	lt
 800b6b0:	9204      	strlt	r2, [sp, #16]
 800b6b2:	7823      	ldrb	r3, [r4, #0]
 800b6b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b6b6:	d10c      	bne.n	800b6d2 <_vfiprintf_r+0x176>
 800b6b8:	7863      	ldrb	r3, [r4, #1]
 800b6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b6bc:	d135      	bne.n	800b72a <_vfiprintf_r+0x1ce>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	9203      	str	r2, [sp, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfb8      	it	lt
 800b6ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6ce:	3402      	adds	r4, #2
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7b8 <_vfiprintf_r+0x25c>
 800b6d6:	7821      	ldrb	r1, [r4, #0]
 800b6d8:	2203      	movs	r2, #3
 800b6da:	4650      	mov	r0, sl
 800b6dc:	f7f4 fe18 	bl	8000310 <memchr>
 800b6e0:	b140      	cbz	r0, 800b6f4 <_vfiprintf_r+0x198>
 800b6e2:	2340      	movs	r3, #64	; 0x40
 800b6e4:	eba0 000a 	sub.w	r0, r0, sl
 800b6e8:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ec:	9b04      	ldr	r3, [sp, #16]
 800b6ee:	4303      	orrs	r3, r0
 800b6f0:	3401      	adds	r4, #1
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f8:	482c      	ldr	r0, [pc, #176]	; (800b7ac <_vfiprintf_r+0x250>)
 800b6fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6fe:	2206      	movs	r2, #6
 800b700:	f7f4 fe06 	bl	8000310 <memchr>
 800b704:	2800      	cmp	r0, #0
 800b706:	d03f      	beq.n	800b788 <_vfiprintf_r+0x22c>
 800b708:	4b29      	ldr	r3, [pc, #164]	; (800b7b0 <_vfiprintf_r+0x254>)
 800b70a:	bb1b      	cbnz	r3, 800b754 <_vfiprintf_r+0x1f8>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	3307      	adds	r3, #7
 800b710:	f023 0307 	bic.w	r3, r3, #7
 800b714:	3308      	adds	r3, #8
 800b716:	9303      	str	r3, [sp, #12]
 800b718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71a:	443b      	add	r3, r7
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	e767      	b.n	800b5f0 <_vfiprintf_r+0x94>
 800b720:	fb0c 3202 	mla	r2, ip, r2, r3
 800b724:	460c      	mov	r4, r1
 800b726:	2001      	movs	r0, #1
 800b728:	e7a5      	b.n	800b676 <_vfiprintf_r+0x11a>
 800b72a:	2300      	movs	r3, #0
 800b72c:	3401      	adds	r4, #1
 800b72e:	9305      	str	r3, [sp, #20]
 800b730:	4619      	mov	r1, r3
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	4620      	mov	r0, r4
 800b738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b73c:	3a30      	subs	r2, #48	; 0x30
 800b73e:	2a09      	cmp	r2, #9
 800b740:	d903      	bls.n	800b74a <_vfiprintf_r+0x1ee>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d0c5      	beq.n	800b6d2 <_vfiprintf_r+0x176>
 800b746:	9105      	str	r1, [sp, #20]
 800b748:	e7c3      	b.n	800b6d2 <_vfiprintf_r+0x176>
 800b74a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b74e:	4604      	mov	r4, r0
 800b750:	2301      	movs	r3, #1
 800b752:	e7f0      	b.n	800b736 <_vfiprintf_r+0x1da>
 800b754:	ab03      	add	r3, sp, #12
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	462a      	mov	r2, r5
 800b75a:	4b16      	ldr	r3, [pc, #88]	; (800b7b4 <_vfiprintf_r+0x258>)
 800b75c:	a904      	add	r1, sp, #16
 800b75e:	4630      	mov	r0, r6
 800b760:	f3af 8000 	nop.w
 800b764:	4607      	mov	r7, r0
 800b766:	1c78      	adds	r0, r7, #1
 800b768:	d1d6      	bne.n	800b718 <_vfiprintf_r+0x1bc>
 800b76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b76c:	07d9      	lsls	r1, r3, #31
 800b76e:	d405      	bmi.n	800b77c <_vfiprintf_r+0x220>
 800b770:	89ab      	ldrh	r3, [r5, #12]
 800b772:	059a      	lsls	r2, r3, #22
 800b774:	d402      	bmi.n	800b77c <_vfiprintf_r+0x220>
 800b776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b778:	f7ff fdb7 	bl	800b2ea <__retarget_lock_release_recursive>
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	065b      	lsls	r3, r3, #25
 800b780:	f53f af12 	bmi.w	800b5a8 <_vfiprintf_r+0x4c>
 800b784:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b786:	e711      	b.n	800b5ac <_vfiprintf_r+0x50>
 800b788:	ab03      	add	r3, sp, #12
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	462a      	mov	r2, r5
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <_vfiprintf_r+0x258>)
 800b790:	a904      	add	r1, sp, #16
 800b792:	4630      	mov	r0, r6
 800b794:	f000 f880 	bl	800b898 <_printf_i>
 800b798:	e7e4      	b.n	800b764 <_vfiprintf_r+0x208>
 800b79a:	bf00      	nop
 800b79c:	0800bd94 	.word	0x0800bd94
 800b7a0:	0800bdb4 	.word	0x0800bdb4
 800b7a4:	0800bd74 	.word	0x0800bd74
 800b7a8:	0800bdd4 	.word	0x0800bdd4
 800b7ac:	0800bdde 	.word	0x0800bdde
 800b7b0:	00000000 	.word	0x00000000
 800b7b4:	0800b537 	.word	0x0800b537
 800b7b8:	0800bdda 	.word	0x0800bdda

0800b7bc <_printf_common>:
 800b7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c0:	4616      	mov	r6, r2
 800b7c2:	4699      	mov	r9, r3
 800b7c4:	688a      	ldr	r2, [r1, #8]
 800b7c6:	690b      	ldr	r3, [r1, #16]
 800b7c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	bfb8      	it	lt
 800b7d0:	4613      	movlt	r3, r2
 800b7d2:	6033      	str	r3, [r6, #0]
 800b7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7d8:	4607      	mov	r7, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	b10a      	cbz	r2, 800b7e2 <_printf_common+0x26>
 800b7de:	3301      	adds	r3, #1
 800b7e0:	6033      	str	r3, [r6, #0]
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	0699      	lsls	r1, r3, #26
 800b7e6:	bf42      	ittt	mi
 800b7e8:	6833      	ldrmi	r3, [r6, #0]
 800b7ea:	3302      	addmi	r3, #2
 800b7ec:	6033      	strmi	r3, [r6, #0]
 800b7ee:	6825      	ldr	r5, [r4, #0]
 800b7f0:	f015 0506 	ands.w	r5, r5, #6
 800b7f4:	d106      	bne.n	800b804 <_printf_common+0x48>
 800b7f6:	f104 0a19 	add.w	sl, r4, #25
 800b7fa:	68e3      	ldr	r3, [r4, #12]
 800b7fc:	6832      	ldr	r2, [r6, #0]
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	42ab      	cmp	r3, r5
 800b802:	dc26      	bgt.n	800b852 <_printf_common+0x96>
 800b804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b808:	1e13      	subs	r3, r2, #0
 800b80a:	6822      	ldr	r2, [r4, #0]
 800b80c:	bf18      	it	ne
 800b80e:	2301      	movne	r3, #1
 800b810:	0692      	lsls	r2, r2, #26
 800b812:	d42b      	bmi.n	800b86c <_printf_common+0xb0>
 800b814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b818:	4649      	mov	r1, r9
 800b81a:	4638      	mov	r0, r7
 800b81c:	47c0      	blx	r8
 800b81e:	3001      	adds	r0, #1
 800b820:	d01e      	beq.n	800b860 <_printf_common+0xa4>
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	68e5      	ldr	r5, [r4, #12]
 800b826:	6832      	ldr	r2, [r6, #0]
 800b828:	f003 0306 	and.w	r3, r3, #6
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	bf08      	it	eq
 800b830:	1aad      	subeq	r5, r5, r2
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	6922      	ldr	r2, [r4, #16]
 800b836:	bf0c      	ite	eq
 800b838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b83c:	2500      	movne	r5, #0
 800b83e:	4293      	cmp	r3, r2
 800b840:	bfc4      	itt	gt
 800b842:	1a9b      	subgt	r3, r3, r2
 800b844:	18ed      	addgt	r5, r5, r3
 800b846:	2600      	movs	r6, #0
 800b848:	341a      	adds	r4, #26
 800b84a:	42b5      	cmp	r5, r6
 800b84c:	d11a      	bne.n	800b884 <_printf_common+0xc8>
 800b84e:	2000      	movs	r0, #0
 800b850:	e008      	b.n	800b864 <_printf_common+0xa8>
 800b852:	2301      	movs	r3, #1
 800b854:	4652      	mov	r2, sl
 800b856:	4649      	mov	r1, r9
 800b858:	4638      	mov	r0, r7
 800b85a:	47c0      	blx	r8
 800b85c:	3001      	adds	r0, #1
 800b85e:	d103      	bne.n	800b868 <_printf_common+0xac>
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b868:	3501      	adds	r5, #1
 800b86a:	e7c6      	b.n	800b7fa <_printf_common+0x3e>
 800b86c:	18e1      	adds	r1, r4, r3
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	2030      	movs	r0, #48	; 0x30
 800b872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b876:	4422      	add	r2, r4
 800b878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b87c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b880:	3302      	adds	r3, #2
 800b882:	e7c7      	b.n	800b814 <_printf_common+0x58>
 800b884:	2301      	movs	r3, #1
 800b886:	4622      	mov	r2, r4
 800b888:	4649      	mov	r1, r9
 800b88a:	4638      	mov	r0, r7
 800b88c:	47c0      	blx	r8
 800b88e:	3001      	adds	r0, #1
 800b890:	d0e6      	beq.n	800b860 <_printf_common+0xa4>
 800b892:	3601      	adds	r6, #1
 800b894:	e7d9      	b.n	800b84a <_printf_common+0x8e>
	...

0800b898 <_printf_i>:
 800b898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b89c:	460c      	mov	r4, r1
 800b89e:	4691      	mov	r9, r2
 800b8a0:	7e27      	ldrb	r7, [r4, #24]
 800b8a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b8a4:	2f78      	cmp	r7, #120	; 0x78
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	469a      	mov	sl, r3
 800b8aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8ae:	d807      	bhi.n	800b8c0 <_printf_i+0x28>
 800b8b0:	2f62      	cmp	r7, #98	; 0x62
 800b8b2:	d80a      	bhi.n	800b8ca <_printf_i+0x32>
 800b8b4:	2f00      	cmp	r7, #0
 800b8b6:	f000 80d8 	beq.w	800ba6a <_printf_i+0x1d2>
 800b8ba:	2f58      	cmp	r7, #88	; 0x58
 800b8bc:	f000 80a3 	beq.w	800ba06 <_printf_i+0x16e>
 800b8c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8c8:	e03a      	b.n	800b940 <_printf_i+0xa8>
 800b8ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8ce:	2b15      	cmp	r3, #21
 800b8d0:	d8f6      	bhi.n	800b8c0 <_printf_i+0x28>
 800b8d2:	a001      	add	r0, pc, #4	; (adr r0, 800b8d8 <_printf_i+0x40>)
 800b8d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b8d8:	0800b931 	.word	0x0800b931
 800b8dc:	0800b945 	.word	0x0800b945
 800b8e0:	0800b8c1 	.word	0x0800b8c1
 800b8e4:	0800b8c1 	.word	0x0800b8c1
 800b8e8:	0800b8c1 	.word	0x0800b8c1
 800b8ec:	0800b8c1 	.word	0x0800b8c1
 800b8f0:	0800b945 	.word	0x0800b945
 800b8f4:	0800b8c1 	.word	0x0800b8c1
 800b8f8:	0800b8c1 	.word	0x0800b8c1
 800b8fc:	0800b8c1 	.word	0x0800b8c1
 800b900:	0800b8c1 	.word	0x0800b8c1
 800b904:	0800ba51 	.word	0x0800ba51
 800b908:	0800b975 	.word	0x0800b975
 800b90c:	0800ba33 	.word	0x0800ba33
 800b910:	0800b8c1 	.word	0x0800b8c1
 800b914:	0800b8c1 	.word	0x0800b8c1
 800b918:	0800ba73 	.word	0x0800ba73
 800b91c:	0800b8c1 	.word	0x0800b8c1
 800b920:	0800b975 	.word	0x0800b975
 800b924:	0800b8c1 	.word	0x0800b8c1
 800b928:	0800b8c1 	.word	0x0800b8c1
 800b92c:	0800ba3b 	.word	0x0800ba3b
 800b930:	680b      	ldr	r3, [r1, #0]
 800b932:	1d1a      	adds	r2, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	600a      	str	r2, [r1, #0]
 800b938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b93c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b940:	2301      	movs	r3, #1
 800b942:	e0a3      	b.n	800ba8c <_printf_i+0x1f4>
 800b944:	6825      	ldr	r5, [r4, #0]
 800b946:	6808      	ldr	r0, [r1, #0]
 800b948:	062e      	lsls	r6, r5, #24
 800b94a:	f100 0304 	add.w	r3, r0, #4
 800b94e:	d50a      	bpl.n	800b966 <_printf_i+0xce>
 800b950:	6805      	ldr	r5, [r0, #0]
 800b952:	600b      	str	r3, [r1, #0]
 800b954:	2d00      	cmp	r5, #0
 800b956:	da03      	bge.n	800b960 <_printf_i+0xc8>
 800b958:	232d      	movs	r3, #45	; 0x2d
 800b95a:	426d      	negs	r5, r5
 800b95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b960:	485e      	ldr	r0, [pc, #376]	; (800badc <_printf_i+0x244>)
 800b962:	230a      	movs	r3, #10
 800b964:	e019      	b.n	800b99a <_printf_i+0x102>
 800b966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b96a:	6805      	ldr	r5, [r0, #0]
 800b96c:	600b      	str	r3, [r1, #0]
 800b96e:	bf18      	it	ne
 800b970:	b22d      	sxthne	r5, r5
 800b972:	e7ef      	b.n	800b954 <_printf_i+0xbc>
 800b974:	680b      	ldr	r3, [r1, #0]
 800b976:	6825      	ldr	r5, [r4, #0]
 800b978:	1d18      	adds	r0, r3, #4
 800b97a:	6008      	str	r0, [r1, #0]
 800b97c:	0628      	lsls	r0, r5, #24
 800b97e:	d501      	bpl.n	800b984 <_printf_i+0xec>
 800b980:	681d      	ldr	r5, [r3, #0]
 800b982:	e002      	b.n	800b98a <_printf_i+0xf2>
 800b984:	0669      	lsls	r1, r5, #25
 800b986:	d5fb      	bpl.n	800b980 <_printf_i+0xe8>
 800b988:	881d      	ldrh	r5, [r3, #0]
 800b98a:	4854      	ldr	r0, [pc, #336]	; (800badc <_printf_i+0x244>)
 800b98c:	2f6f      	cmp	r7, #111	; 0x6f
 800b98e:	bf0c      	ite	eq
 800b990:	2308      	moveq	r3, #8
 800b992:	230a      	movne	r3, #10
 800b994:	2100      	movs	r1, #0
 800b996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b99a:	6866      	ldr	r6, [r4, #4]
 800b99c:	60a6      	str	r6, [r4, #8]
 800b99e:	2e00      	cmp	r6, #0
 800b9a0:	bfa2      	ittt	ge
 800b9a2:	6821      	ldrge	r1, [r4, #0]
 800b9a4:	f021 0104 	bicge.w	r1, r1, #4
 800b9a8:	6021      	strge	r1, [r4, #0]
 800b9aa:	b90d      	cbnz	r5, 800b9b0 <_printf_i+0x118>
 800b9ac:	2e00      	cmp	r6, #0
 800b9ae:	d04d      	beq.n	800ba4c <_printf_i+0x1b4>
 800b9b0:	4616      	mov	r6, r2
 800b9b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9b6:	fb03 5711 	mls	r7, r3, r1, r5
 800b9ba:	5dc7      	ldrb	r7, [r0, r7]
 800b9bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9c0:	462f      	mov	r7, r5
 800b9c2:	42bb      	cmp	r3, r7
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	d9f4      	bls.n	800b9b2 <_printf_i+0x11a>
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d10b      	bne.n	800b9e4 <_printf_i+0x14c>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	07df      	lsls	r7, r3, #31
 800b9d0:	d508      	bpl.n	800b9e4 <_printf_i+0x14c>
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	6861      	ldr	r1, [r4, #4]
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	bfde      	ittt	le
 800b9da:	2330      	movle	r3, #48	; 0x30
 800b9dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9e4:	1b92      	subs	r2, r2, r6
 800b9e6:	6122      	str	r2, [r4, #16]
 800b9e8:	f8cd a000 	str.w	sl, [sp]
 800b9ec:	464b      	mov	r3, r9
 800b9ee:	aa03      	add	r2, sp, #12
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f7ff fee2 	bl	800b7bc <_printf_common>
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d14c      	bne.n	800ba96 <_printf_i+0x1fe>
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	b004      	add	sp, #16
 800ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba06:	4835      	ldr	r0, [pc, #212]	; (800badc <_printf_i+0x244>)
 800ba08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	680e      	ldr	r6, [r1, #0]
 800ba10:	061f      	lsls	r7, r3, #24
 800ba12:	f856 5b04 	ldr.w	r5, [r6], #4
 800ba16:	600e      	str	r6, [r1, #0]
 800ba18:	d514      	bpl.n	800ba44 <_printf_i+0x1ac>
 800ba1a:	07d9      	lsls	r1, r3, #31
 800ba1c:	bf44      	itt	mi
 800ba1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba22:	6023      	strmi	r3, [r4, #0]
 800ba24:	b91d      	cbnz	r5, 800ba2e <_printf_i+0x196>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	f023 0320 	bic.w	r3, r3, #32
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	2310      	movs	r3, #16
 800ba30:	e7b0      	b.n	800b994 <_printf_i+0xfc>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	f043 0320 	orr.w	r3, r3, #32
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	2378      	movs	r3, #120	; 0x78
 800ba3c:	4828      	ldr	r0, [pc, #160]	; (800bae0 <_printf_i+0x248>)
 800ba3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba42:	e7e3      	b.n	800ba0c <_printf_i+0x174>
 800ba44:	065e      	lsls	r6, r3, #25
 800ba46:	bf48      	it	mi
 800ba48:	b2ad      	uxthmi	r5, r5
 800ba4a:	e7e6      	b.n	800ba1a <_printf_i+0x182>
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	e7bb      	b.n	800b9c8 <_printf_i+0x130>
 800ba50:	680b      	ldr	r3, [r1, #0]
 800ba52:	6826      	ldr	r6, [r4, #0]
 800ba54:	6960      	ldr	r0, [r4, #20]
 800ba56:	1d1d      	adds	r5, r3, #4
 800ba58:	600d      	str	r5, [r1, #0]
 800ba5a:	0635      	lsls	r5, r6, #24
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	d501      	bpl.n	800ba64 <_printf_i+0x1cc>
 800ba60:	6018      	str	r0, [r3, #0]
 800ba62:	e002      	b.n	800ba6a <_printf_i+0x1d2>
 800ba64:	0671      	lsls	r1, r6, #25
 800ba66:	d5fb      	bpl.n	800ba60 <_printf_i+0x1c8>
 800ba68:	8018      	strh	r0, [r3, #0]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6123      	str	r3, [r4, #16]
 800ba6e:	4616      	mov	r6, r2
 800ba70:	e7ba      	b.n	800b9e8 <_printf_i+0x150>
 800ba72:	680b      	ldr	r3, [r1, #0]
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	600a      	str	r2, [r1, #0]
 800ba78:	681e      	ldr	r6, [r3, #0]
 800ba7a:	6862      	ldr	r2, [r4, #4]
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7f4 fc46 	bl	8000310 <memchr>
 800ba84:	b108      	cbz	r0, 800ba8a <_printf_i+0x1f2>
 800ba86:	1b80      	subs	r0, r0, r6
 800ba88:	6060      	str	r0, [r4, #4]
 800ba8a:	6863      	ldr	r3, [r4, #4]
 800ba8c:	6123      	str	r3, [r4, #16]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba94:	e7a8      	b.n	800b9e8 <_printf_i+0x150>
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	4632      	mov	r2, r6
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	47d0      	blx	sl
 800baa0:	3001      	adds	r0, #1
 800baa2:	d0ab      	beq.n	800b9fc <_printf_i+0x164>
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	079b      	lsls	r3, r3, #30
 800baa8:	d413      	bmi.n	800bad2 <_printf_i+0x23a>
 800baaa:	68e0      	ldr	r0, [r4, #12]
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	4298      	cmp	r0, r3
 800bab0:	bfb8      	it	lt
 800bab2:	4618      	movlt	r0, r3
 800bab4:	e7a4      	b.n	800ba00 <_printf_i+0x168>
 800bab6:	2301      	movs	r3, #1
 800bab8:	4632      	mov	r2, r6
 800baba:	4649      	mov	r1, r9
 800babc:	4640      	mov	r0, r8
 800babe:	47d0      	blx	sl
 800bac0:	3001      	adds	r0, #1
 800bac2:	d09b      	beq.n	800b9fc <_printf_i+0x164>
 800bac4:	3501      	adds	r5, #1
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	9903      	ldr	r1, [sp, #12]
 800baca:	1a5b      	subs	r3, r3, r1
 800bacc:	42ab      	cmp	r3, r5
 800bace:	dcf2      	bgt.n	800bab6 <_printf_i+0x21e>
 800bad0:	e7eb      	b.n	800baaa <_printf_i+0x212>
 800bad2:	2500      	movs	r5, #0
 800bad4:	f104 0619 	add.w	r6, r4, #25
 800bad8:	e7f5      	b.n	800bac6 <_printf_i+0x22e>
 800bada:	bf00      	nop
 800badc:	0800bde5 	.word	0x0800bde5
 800bae0:	0800bdf6 	.word	0x0800bdf6

0800bae4 <_sbrk_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	; (800bb00 <_sbrk_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 fdc8 	bl	8002684 <_sbrk>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_sbrk_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_sbrk_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	240025ac 	.word	0x240025ac

0800bb04 <__sread>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	460c      	mov	r4, r1
 800bb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0c:	f000 f8a0 	bl	800bc50 <_read_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	bfab      	itete	ge
 800bb14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb16:	89a3      	ldrhlt	r3, [r4, #12]
 800bb18:	181b      	addge	r3, r3, r0
 800bb1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb1e:	bfac      	ite	ge
 800bb20:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb22:	81a3      	strhlt	r3, [r4, #12]
 800bb24:	bd10      	pop	{r4, pc}

0800bb26 <__swrite>:
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	461f      	mov	r7, r3
 800bb2c:	898b      	ldrh	r3, [r1, #12]
 800bb2e:	05db      	lsls	r3, r3, #23
 800bb30:	4605      	mov	r5, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	4616      	mov	r6, r2
 800bb36:	d505      	bpl.n	800bb44 <__swrite+0x1e>
 800bb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f000 f868 	bl	800bc14 <_lseek_r>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	4632      	mov	r2, r6
 800bb52:	463b      	mov	r3, r7
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5a:	f000 b817 	b.w	800bb8c <_write_r>

0800bb5e <__sseek>:
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb66:	f000 f855 	bl	800bc14 <_lseek_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	bf15      	itete	ne
 800bb70:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb7a:	81a3      	strheq	r3, [r4, #12]
 800bb7c:	bf18      	it	ne
 800bb7e:	81a3      	strhne	r3, [r4, #12]
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <__sclose>:
 800bb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb86:	f000 b813 	b.w	800bbb0 <_close_r>
	...

0800bb8c <_write_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	; (800bbac <_write_r+0x20>)
 800bb90:	4604      	mov	r4, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	602a      	str	r2, [r5, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f6 fd21 	bl	80025e2 <_write>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_write_r+0x1e>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_write_r+0x1e>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	240025ac 	.word	0x240025ac

0800bbb0 <_close_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d06      	ldr	r5, [pc, #24]	; (800bbcc <_close_r+0x1c>)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f7f6 fd2d 	bl	800261a <_close>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_close_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_close_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	240025ac 	.word	0x240025ac

0800bbd0 <_fstat_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d07      	ldr	r5, [pc, #28]	; (800bbf0 <_fstat_r+0x20>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	4611      	mov	r1, r2
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	f7f6 fd28 	bl	8002632 <_fstat>
 800bbe2:	1c43      	adds	r3, r0, #1
 800bbe4:	d102      	bne.n	800bbec <_fstat_r+0x1c>
 800bbe6:	682b      	ldr	r3, [r5, #0]
 800bbe8:	b103      	cbz	r3, 800bbec <_fstat_r+0x1c>
 800bbea:	6023      	str	r3, [r4, #0]
 800bbec:	bd38      	pop	{r3, r4, r5, pc}
 800bbee:	bf00      	nop
 800bbf0:	240025ac 	.word	0x240025ac

0800bbf4 <_isatty_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d06      	ldr	r5, [pc, #24]	; (800bc10 <_isatty_r+0x1c>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	602b      	str	r3, [r5, #0]
 800bc00:	f7f6 fd27 	bl	8002652 <_isatty>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_isatty_r+0x1a>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_isatty_r+0x1a>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	240025ac 	.word	0x240025ac

0800bc14 <_lseek_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4d07      	ldr	r5, [pc, #28]	; (800bc34 <_lseek_r+0x20>)
 800bc18:	4604      	mov	r4, r0
 800bc1a:	4608      	mov	r0, r1
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	2200      	movs	r2, #0
 800bc20:	602a      	str	r2, [r5, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	f7f6 fd20 	bl	8002668 <_lseek>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_lseek_r+0x1e>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_lseek_r+0x1e>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	240025ac 	.word	0x240025ac

0800bc38 <__malloc_lock>:
 800bc38:	4801      	ldr	r0, [pc, #4]	; (800bc40 <__malloc_lock+0x8>)
 800bc3a:	f7ff bb55 	b.w	800b2e8 <__retarget_lock_acquire_recursive>
 800bc3e:	bf00      	nop
 800bc40:	240025a4 	.word	0x240025a4

0800bc44 <__malloc_unlock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__malloc_unlock+0x8>)
 800bc46:	f7ff bb50 	b.w	800b2ea <__retarget_lock_release_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	240025a4 	.word	0x240025a4

0800bc50 <_read_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4d07      	ldr	r5, [pc, #28]	; (800bc70 <_read_r+0x20>)
 800bc54:	4604      	mov	r4, r0
 800bc56:	4608      	mov	r0, r1
 800bc58:	4611      	mov	r1, r2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	602a      	str	r2, [r5, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f7f6 fca2 	bl	80025a8 <_read>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_read_r+0x1e>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_read_r+0x1e>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	240025ac 	.word	0x240025ac

0800bc74 <_init>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr

0800bc80 <_fini>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	bf00      	nop
 800bc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc86:	bc08      	pop	{r3}
 800bc88:	469e      	mov	lr, r3
 800bc8a:	4770      	bx	lr
