
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd74  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800c1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000600  24000074  0800c244  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000674  0800c244  00020674  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033b3a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000440e  00000000  00000000  00053bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  00057ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c18  00000000  00000000  00059d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c27  00000000  00000000  0005b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002337c  00000000  00000000  0009558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017db4b  00000000  00000000  000b890b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00236456  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008990  00000000  00000000  002364ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c02c 	.word	0x0800c02c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800c02c 	.word	0x0800c02c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__io_putchar>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <__io_putchar+0x20>)
 80006ba:	f009 faff 	bl	8009cbc <HAL_UART_Transmit>

  return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	24000158 	.word	0x24000158

080006cc <print_timestamp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_timestamp(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

	timestamp = HAL_GetTick();
 80006d0:	f002 f90e 	bl	80028f0 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <print_timestamp+0x54>)
 80006d8:	6013      	str	r3, [r2, #0]
	timespan = timestamp - timespan;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <print_timestamp+0x54>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <print_timestamp+0x58>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <print_timestamp+0x58>)
 80006e6:	6013      	str	r3, [r2, #0]

	printf("timing_counter(%d): %ld\r\n", timing_counter, timestamp);
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <print_timestamp+0x5c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <print_timestamp+0x54>)
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <print_timestamp+0x60>)
 80006f4:	f00a fcce 	bl	800b094 <iprintf>
	if(timing_counter > 0){
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <print_timestamp+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d005      	beq.n	800070c <print_timestamp+0x40>
		printf("%ld ms ellapsed after prev timestamp. \r\n", timespan);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <print_timestamp+0x58>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <print_timestamp+0x64>)
 8000708:	f00a fcc4 	bl	800b094 <iprintf>
	}
	printf("--------------------\r\n");
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <print_timestamp+0x68>)
 800070e:	f00a fd47 	bl	800b1a0 <puts>

	timespan = timestamp;
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <print_timestamp+0x54>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a03      	ldr	r2, [pc, #12]	; (8000724 <print_timestamp+0x58>)
 8000718:	6013      	str	r3, [r2, #0]
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	240001e8 	.word	0x240001e8
 8000724:	240000f4 	.word	0x240000f4
 8000728:	24000090 	.word	0x24000090
 800072c:	0800c044 	.word	0x0800c044
 8000730:	0800c060 	.word	0x0800c060
 8000734:	0800c08c 	.word	0x0800c08c

08000738 <HAL_TIM_PeriodElapsedCallback>:
	timing_counter += 1;
}

//Timer interrupted every 0.4ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
		print_timestamp();
 800074a:	f7ff ffbf 	bl	80006cc <print_timestamp>
	}
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40001c00 	.word	0x40001c00

0800075c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	d102      	bne.n	8000774 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_TIM_Base_Start_IT(&htim13);
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <HAL_GPIO_EXTI_Callback+0x20>)
 8000770:	f008 f812 	bl	8008798 <HAL_TIM_Base_Start_IT>
		// step 1: turn on MN IGBT & Relay
		//HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
		//HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
	}
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	24000388 	.word	0x24000388

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f002 f82e 	bl	80027e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f838 	bl	80007fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800078c:	f000 f8b0 	bl	80008f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 fe2c 	bl	80013ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000794:	f000 f8d8 	bl	8000948 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000798:	f000 f94e 	bl	8000a38 <MX_ADC2_Init>
  MX_ADC3_Init();
 800079c:	f000 f9ae 	bl	8000afc <MX_ADC3_Init>
  MX_DAC1_Init();
 80007a0:	f000 fa1e 	bl	8000be0 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80007a4:	f000 fa4e 	bl	8000c44 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80007a8:	f000 fab0 	bl	8000d0c <MX_FDCAN2_Init>
  MX_I2C4_Init();
 80007ac:	f000 fb12 	bl	8000dd4 <MX_I2C4_Init>
  MX_TIM1_Init();
 80007b0:	f000 fbac 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM4_Init();
 80007b4:	f000 fc38 	bl	8001028 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007b8:	f000 fca6 	bl	8001108 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80007bc:	f000 fd7e 	bl	80012bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 fdc8 	bl	8001354 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 80007c4:	f000 fd32 	bl	800122c <MX_TIM13_Init>
  MX_TIM7_Init();
 80007c8:	f000 fcf8 	bl	80011bc <MX_TIM7_Init>
  MX_RTC_Init();
 80007cc:	f000 fb42 	bl	8000e54 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2104      	movs	r1, #4
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <main+0x74>)
 80007d6:	f004 fbb1 	bl	8004f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <main+0x74>)
 80007e0:	f004 fbac 	bl	8004f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <main+0x78>)
 80007ec:	f004 fba6 	bl	8004f3c <HAL_GPIO_WritePin>

  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x70>
 80007f2:	bf00      	nop
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58021800 	.word	0x58021800

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09c      	sub	sp, #112	; 0x70
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	224c      	movs	r2, #76	; 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00a fc3a 	bl	800b084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00a fc34 	bl	800b084 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081c:	2004      	movs	r0, #4
 800081e:	f004 fce9 	bl	80051f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <SystemClock_Config+0xec>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <SystemClock_Config+0xec>)
 800082c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <SystemClock_Config+0xec>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083e:	bf00      	nop
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SystemClock_Config+0xec>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084c:	d1f8      	bne.n	8000840 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0xf0>)
 8000850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000852:	f023 0303 	bic.w	r3, r3, #3
 8000856:	4a25      	ldr	r2, [pc, #148]	; (80008ec <SystemClock_Config+0xf0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800085e:	2309      	movs	r3, #9
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000870:	2302      	movs	r3, #2
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000874:	2305      	movs	r3, #5
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000878:	236e      	movs	r3, #110	; 0x6e
 800087a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000888:	2308      	movs	r3, #8
 800088a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088c:	2300      	movs	r3, #0
 800088e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4618      	mov	r0, r3
 800089a:	f004 fd05 	bl	80052a8 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008a4:	f001 f930 	bl	8001b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	233f      	movs	r3, #63	; 0x3f
 80008aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b4:	2308      	movs	r3, #8
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b8:	2340      	movs	r3, #64	; 0x40
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2103      	movs	r1, #3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 f896 	bl	8005a00 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008da:	f001 f915 	bl	8001b08 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3770      	adds	r7, #112	; 0x70
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024800 	.word	0x58024800
 80008ec:	58024400 	.word	0x58024400

080008f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0ae      	sub	sp, #184	; 0xb8
 80008f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	22b4      	movs	r2, #180	; 0xb4
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00a fbc1 	bl	800b084 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000902:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000906:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000908:	2305      	movs	r3, #5
 800090a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 800090c:	2350      	movs	r3, #80	; 0x50
 800090e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000910:	2305      	movs	r3, #5
 8000912:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f005 fbf1 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800093c:	f001 f8e4 	bl	8001b08 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	37b8      	adds	r7, #184	; 0xb8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2224      	movs	r2, #36	; 0x24
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f00a fb8f 	bl	800b084 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000968:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <MX_ADC1_Init+0xe8>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_ADC1_Init+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_ADC1_Init+0xe4>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000980:	2204      	movs	r2, #4
 8000982:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_ADC1_Init+0xe4>)
 800098c:	2200      	movs	r2, #0
 800098e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000992:	2201      	movs	r2, #1
 8000994:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c4:	4819      	ldr	r0, [pc, #100]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009c6:	f002 fa1f 	bl	8002e08 <HAL_ADC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f001 f89a 	bl	8001b08 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_ADC1_Init+0xe4>)
 80009e0:	f003 fa58 	bl	8003e94 <HAL_ADCEx_MultiModeConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009ea:	f001 f88d 	bl	8001b08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ADC1_Init+0xec>)
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f2:	2306      	movs	r3, #6
 80009f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a00:	2304      	movs	r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_ADC1_Init+0xe4>)
 8000a14:	f002 fc00 	bl	8003218 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a1e:	f001 f873 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	240002a8 	.word	0x240002a8
 8000a30:	40022000 	.word	0x40022000
 8000a34:	04300002 	.word	0x04300002

08000a38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2224      	movs	r2, #36	; 0x24
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00a fb1d 	bl	800b084 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a4c:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <MX_ADC2_Init+0xc0>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000aaa:	f002 f9ad 	bl	8002e08 <HAL_ADC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000ab4:	f001 f828 	bl	8001b08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000abc:	2306      	movs	r3, #6
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aca:	2304      	movs	r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_ADC2_Init+0xbc>)
 8000ade:	f002 fb9b 	bl	8003218 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000ae8:	f001 f80e 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	240001ec 	.word	0x240001ec
 8000af8:	40022100 	.word	0x40022100

08000afc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2224      	movs	r2, #36	; 0x24
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00a fabb 	bl	800b084 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b10:	4a32      	ldr	r2, [pc, #200]	; (8000bdc <MX_ADC3_Init+0xe0>)
 8000b12:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b80:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b82:	f002 f941 	bl	8002e08 <HAL_ADC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b8c:	f000 ffbc 	bl	8001b08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b90:	2301      	movs	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b94:	2306      	movs	r3, #6
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ba0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_ADC3_Init+0xdc>)
 8000bc0:	f002 fb2a 	bl	8003218 <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000bca:	f000 ff9d 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24000318 	.word	0x24000318
 8000bdc:	58026000 	.word	0x58026000

08000be0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2224      	movs	r2, #36	; 0x24
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00a fa49 	bl	800b084 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_DAC1_Init+0x5c>)
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_DAC1_Init+0x60>)
 8000bf6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <MX_DAC1_Init+0x5c>)
 8000bfa:	f003 fb3c 	bl	8004276 <HAL_DAC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c04:	f000 ff80 	bl	8001b08 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2210      	movs	r2, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_DAC1_Init+0x5c>)
 8000c24:	f003 fb4a 	bl	80042bc <HAL_DAC_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 ff6b 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24000144 	.word	0x24000144
 8000c40:	40007400 	.word	0x40007400

08000c44 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c4a:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <MX_FDCAN1_Init+0xc4>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_FDCAN1_Init+0xc0>)
 8000cf2:	f003 fc13 	bl	800451c <HAL_FDCAN_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000cfc:	f000 ff04 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000488 	.word	0x24000488
 8000d08:	4000a000 	.word	0x4000a000

08000d0c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <MX_FDCAN2_Init+0xc4>)
 8000d14:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000db4:	2204      	movs	r2, #4
 8000db6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_FDCAN2_Init+0xc0>)
 8000dba:	f003 fbaf 	bl	800451c <HAL_FDCAN_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000dc4:	f000 fea0 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	240005c0 	.word	0x240005c0
 8000dd0:	4000a400 	.word	0x4000a400

08000dd4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <MX_I2C4_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_I2C4_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000e10:	f004 f8c8 	bl	8004fa4 <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 fe75 	bl	8001b08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000e22:	f004 f94f 	bl	80050c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 fe6c 	bl	8001b08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_I2C4_Init+0x74>)
 8000e34:	f004 f991 	bl	800515a <HAL_I2CEx_ConfigDigitalFilter>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fe63 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	240000a8 	.word	0x240000a8
 8000e4c:	58001c00 	.word	0x58001c00
 8000e50:	60404e72 	.word	0x60404e72

08000e54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <MX_RTC_Init+0xb4>)
 8000e70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e7a:	227f      	movs	r2, #127	; 0x7f
 8000e7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e80:	22ff      	movs	r2, #255	; 0xff
 8000e82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e9c:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000e9e:	f007 f9cd 	bl	800823c <HAL_RTC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ea8:	f000 fe2e 	bl	8001b08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8000eac:	2322      	movs	r3, #34	; 0x22
 8000eae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22;
 8000eb0:	2322      	movs	r3, #34	; 0x22
 8000eb2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x22;
 8000eb4:	2322      	movs	r3, #34	; 0x22
 8000eb6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000ec8:	f007 fa30 	bl	800832c <HAL_RTC_SetTime>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ed2:	f000 fe19 	bl	8001b08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000eda:	2302      	movs	r3, #2
 8000edc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000ee2:	2322      	movs	r3, #34	; 0x22
 8000ee4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_RTC_Init+0xb0>)
 8000eee:	f007 fabb 	bl	8008468 <HAL_RTC_SetDate>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ef8:	f000 fe06 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	24000464 	.word	0x24000464
 8000f08:	58004000 	.word	0x58004000

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b098      	sub	sp, #96	; 0x60
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2234      	movs	r2, #52	; 0x34
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00a f8a3 	bl	800b084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f40:	4a38      	ldr	r2, [pc, #224]	; (8001024 <MX_TIM1_Init+0x118>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f50:	4b33      	ldr	r3, [pc, #204]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b31      	ldr	r3, [pc, #196]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f6c:	f007 fc9a 	bl	80088a4 <HAL_TIM_PWM_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 fdc7 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <MX_TIM1_Init+0x114>)
 8000f8e:	f008 fceb 	bl	8009968 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f98:	f000 fdb6 	bl	8001b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	; 0x60
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb8:	220c      	movs	r2, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <MX_TIM1_Init+0x114>)
 8000fbe:	f007 fee5 	bl	8008d8c <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000fc8:	f000 fd9e 	bl	8001b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM1_Init+0x114>)
 8001002:	f008 fd4d 	bl	8009aa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800100c:	f000 fd7c 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM1_Init+0x114>)
 8001012:	f001 f8f5 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001016:	bf00      	nop
 8001018:	3760      	adds	r7, #96	; 0x60
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	24000528 	.word	0x24000528
 8001024:	40010000 	.word	0x40010000

08001028 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <MX_TIM4_Init+0xd8>)
 800104e:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <MX_TIM4_Init+0xdc>)
 8001050:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_TIM4_Init+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_TIM4_Init+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_TIM4_Init+0xd8>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_TIM4_Init+0xd8>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_TIM4_Init+0xd8>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <MX_TIM4_Init+0xd8>)
 8001074:	f007 fc16 	bl	80088a4 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800107e:	f000 fd43 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	481b      	ldr	r0, [pc, #108]	; (8001100 <MX_TIM4_Init+0xd8>)
 8001092:	f008 fc69 	bl	8009968 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800109c:	f000 fd34 	bl	8001b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	; 0x60
 80010a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2204      	movs	r2, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <MX_TIM4_Init+0xd8>)
 80010b8:	f007 fe68 	bl	8008d8c <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80010c2:	f000 fd21 	bl	8001b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2208      	movs	r2, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <MX_TIM4_Init+0xd8>)
 80010ce:	f007 fe5d 	bl	8008d8c <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80010d8:	f000 fd16 	bl	8001b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	220c      	movs	r2, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM4_Init+0xd8>)
 80010e4:	f007 fe52 	bl	8008d8c <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80010ee:	f000 fd0b 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM4_Init+0xd8>)
 80010f4:	f001 f884 	bl	8002200 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	240000f8 	.word	0x240000f8
 8001104:	40000800 	.word	0x40000800

08001108 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_TIM5_Init+0xac>)
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <MX_TIM5_Init+0xb0>)
 8001130:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_TIM5_Init+0xac>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_TIM5_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM5_Init+0xac>)
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM5_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM5_Init+0xac>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM5_Init+0xac>)
 8001154:	f007 fba6 	bl	80088a4 <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800115e:	f000 fcd3 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_TIM5_Init+0xac>)
 8001172:	f008 fbf9 	bl	8009968 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800117c:	f000 fcc4 	bl	8001b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2360      	movs	r3, #96	; 0x60
 8001182:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM5_Init+0xac>)
 8001198:	f007 fdf8 	bl	8008d8c <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80011a2:	f000 fcb1 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM5_Init+0xac>)
 80011a8:	f001 f82a 	bl	8002200 <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2400025c 	.word	0x2400025c
 80011b8:	40000c00 	.word	0x40000c00

080011bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM7_Init+0x68>)
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <MX_TIM7_Init+0x6c>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2750-1;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_TIM7_Init+0x68>)
 80011d4:	f640 22bd 	movw	r2, #2749	; 0xabd
 80011d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_TIM7_Init+0x68>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_TIM7_Init+0x68>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_TIM7_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM7_Init+0x68>)
 80011f0:	f007 fa7a 	bl	80086e8 <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80011fa:	f000 fc85 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM7_Init+0x68>)
 800120c:	f008 fbac 	bl	8009968 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001216:	f000 fc77 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000574 	.word	0x24000574
 8001228:	40001400 	.word	0x40001400

0800122c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM13_Init+0x88>)
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <MX_TIM13_Init+0x8c>)
 8001242:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 27500 -1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_TIM13_Init+0x88>)
 8001246:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800124a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_TIM13_Init+0x88>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4000-1;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_TIM13_Init+0x88>)
 8001254:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001258:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_TIM13_Init+0x88>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_TIM13_Init+0x88>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001266:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_TIM13_Init+0x88>)
 8001268:	f007 fa3e 	bl	80086e8 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 fc49 	bl	8001b08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MX_TIM13_Init+0x88>)
 8001278:	f007 fb6b 	bl	8008952 <HAL_TIM_IC_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM13_Init+0x5a>
  {
    Error_Handler();
 8001282:	f000 fc41 	bl	8001b08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM13_Init+0x88>)
 800129e:	f007 fcd8 	bl	8008c52 <HAL_TIM_IC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM13_Init+0x80>
  {
    Error_Handler();
 80012a8:	f000 fc2e 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  /* USER CODE END TIM13_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	24000388 	.word	0x24000388
 80012b8:	40001c00 	.word	0x40001c00

080012bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <MX_USART1_UART_Init+0x94>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART1_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART1_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_USART1_UART_Init+0x90>)
 8001306:	f008 fc89 	bl	8009c1c <HAL_UART_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001310:	f000 fbfa 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_USART1_UART_Init+0x90>)
 8001318:	f009 fdb2 	bl	800ae80 <HAL_UARTEx_SetTxFifoThreshold>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001322:	f000 fbf1 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_USART1_UART_Init+0x90>)
 800132a:	f009 fde7 	bl	800aefc <HAL_UARTEx_SetRxFifoThreshold>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001334:	f000 fbe8 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_USART1_UART_Init+0x90>)
 800133a:	f009 fd68 	bl	800ae0e <HAL_UARTEx_DisableFifoMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 fbe0 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	240003d4 	.word	0x240003d4
 8001350:	40011000 	.word	0x40011000

08001354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 800135a:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 800135c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 800139e:	f008 fc3d 	bl	8009c1c <HAL_UART_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013a8:	f000 fbae 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 80013b0:	f009 fd66 	bl	800ae80 <HAL_UARTEx_SetTxFifoThreshold>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ba:	f000 fba5 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 80013c2:	f009 fd9b 	bl	800aefc <HAL_UARTEx_SetRxFifoThreshold>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013cc:	f000 fb9c 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_USART3_UART_Init+0x90>)
 80013d2:	f009 fd1c 	bl	800ae0e <HAL_UARTEx_DisableFifoMode>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013dc:	f000 fb94 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	24000158 	.word	0x24000158
 80013e8:	40004800 	.word	0x40004800

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4bbf      	ldr	r3, [pc, #764]	; (8001700 <MX_GPIO_Init+0x314>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4abd      	ldr	r2, [pc, #756]	; (8001700 <MX_GPIO_Init+0x314>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4bbb      	ldr	r3, [pc, #748]	; (8001700 <MX_GPIO_Init+0x314>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001420:	4bb7      	ldr	r3, [pc, #732]	; (8001700 <MX_GPIO_Init+0x314>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4ab6      	ldr	r2, [pc, #728]	; (8001700 <MX_GPIO_Init+0x314>)
 8001428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4bb3      	ldr	r3, [pc, #716]	; (8001700 <MX_GPIO_Init+0x314>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143e:	4bb0      	ldr	r3, [pc, #704]	; (8001700 <MX_GPIO_Init+0x314>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	4aae      	ldr	r2, [pc, #696]	; (8001700 <MX_GPIO_Init+0x314>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144e:	4bac      	ldr	r3, [pc, #688]	; (8001700 <MX_GPIO_Init+0x314>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4ba8      	ldr	r3, [pc, #672]	; (8001700 <MX_GPIO_Init+0x314>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4aa7      	ldr	r2, [pc, #668]	; (8001700 <MX_GPIO_Init+0x314>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4ba4      	ldr	r3, [pc, #656]	; (8001700 <MX_GPIO_Init+0x314>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	4ba1      	ldr	r3, [pc, #644]	; (8001700 <MX_GPIO_Init+0x314>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a9f      	ldr	r2, [pc, #636]	; (8001700 <MX_GPIO_Init+0x314>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b9d      	ldr	r3, [pc, #628]	; (8001700 <MX_GPIO_Init+0x314>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b99      	ldr	r3, [pc, #612]	; (8001700 <MX_GPIO_Init+0x314>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a98      	ldr	r2, [pc, #608]	; (8001700 <MX_GPIO_Init+0x314>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b95      	ldr	r3, [pc, #596]	; (8001700 <MX_GPIO_Init+0x314>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b92      	ldr	r3, [pc, #584]	; (8001700 <MX_GPIO_Init+0x314>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <MX_GPIO_Init+0x314>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b8e      	ldr	r3, [pc, #568]	; (8001700 <MX_GPIO_Init+0x314>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d4:	4b8a      	ldr	r3, [pc, #552]	; (8001700 <MX_GPIO_Init+0x314>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a89      	ldr	r2, [pc, #548]	; (8001700 <MX_GPIO_Init+0x314>)
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b86      	ldr	r3, [pc, #536]	; (8001700 <MX_GPIO_Init+0x314>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f240 4102 	movw	r1, #1026	; 0x402
 80014f8:	4882      	ldr	r0, [pc, #520]	; (8001704 <MX_GPIO_Init+0x318>)
 80014fa:	f003 fd1f 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8001504:	4880      	ldr	r0, [pc, #512]	; (8001708 <MX_GPIO_Init+0x31c>)
 8001506:	f003 fd19 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 800150a:	2200      	movs	r2, #0
 800150c:	f24a 1138 	movw	r1, #41272	; 0xa138
 8001510:	487e      	ldr	r0, [pc, #504]	; (800170c <MX_GPIO_Init+0x320>)
 8001512:	f003 fd13 	bl	8004f3c <HAL_GPIO_WritePin>
                          |ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MP_Relay_GPIO_Port, MP_Relay_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	487c      	ldr	r0, [pc, #496]	; (8001710 <MX_GPIO_Init+0x324>)
 800151e:	f003 fd0d 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8001528:	487a      	ldr	r0, [pc, #488]	; (8001714 <MX_GPIO_Init+0x328>)
 800152a:	f003 fd07 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin|MN_Relay_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	210c      	movs	r1, #12
 8001532:	4879      	ldr	r0, [pc, #484]	; (8001718 <MX_GPIO_Init+0x32c>)
 8001534:	f003 fd02 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2160      	movs	r1, #96	; 0x60
 800153c:	4877      	ldr	r0, [pc, #476]	; (800171c <MX_GPIO_Init+0x330>)
 800153e:	f003 fcfd 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001542:	f240 3303 	movw	r3, #771	; 0x303
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001554:	230e      	movs	r3, #14
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	4870      	ldr	r0, [pc, #448]	; (8001720 <MX_GPIO_Init+0x334>)
 8001560:	f003 fb44 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001564:	f640 0303 	movw	r3, #2051	; 0x803
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001576:	2309      	movs	r3, #9
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4862      	ldr	r0, [pc, #392]	; (800170c <MX_GPIO_Init+0x320>)
 8001582:	f003 fb33 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001598:	2309      	movs	r3, #9
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	485a      	ldr	r0, [pc, #360]	; (800170c <MX_GPIO_Init+0x320>)
 80015a4:	f003 fb22 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 80015a8:	2349      	movs	r3, #73	; 0x49
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b8:	230e      	movs	r3, #14
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4850      	ldr	r0, [pc, #320]	; (8001704 <MX_GPIO_Init+0x318>)
 80015c4:	f003 fb12 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 80015c8:	f240 4302 	movw	r3, #1026	; 0x402
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4848      	ldr	r0, [pc, #288]	; (8001704 <MX_GPIO_Init+0x318>)
 80015e2:	f003 fb03 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80015e6:	2330      	movs	r3, #48	; 0x30
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80015f6:	230a      	movs	r3, #10
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4841      	ldr	r0, [pc, #260]	; (8001708 <MX_GPIO_Init+0x31c>)
 8001602:	f003 faf3 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001606:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	483a      	ldr	r0, [pc, #232]	; (8001708 <MX_GPIO_Init+0x31c>)
 8001620:	f003 fae4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001624:	f64b 0303 	movw	r3, #47107	; 0xb803
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001636:	230e      	movs	r3, #14
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4831      	ldr	r0, [pc, #196]	; (8001708 <MX_GPIO_Init+0x31c>)
 8001642:	f003 fad3 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : MP_IGBT_Pin LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 8001646:	f24a 1338 	movw	r3, #41272	; 0xa138
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <MX_GPIO_Init+0x320>)
 8001660:	f003 fac4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001664:	23b0      	movs	r3, #176	; 0xb0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001674:	230a      	movs	r3, #10
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <MX_GPIO_Init+0x318>)
 8001680:	f003 fab4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001684:	2304      	movs	r3, #4
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001694:	230c      	movs	r3, #12
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4819      	ldr	r0, [pc, #100]	; (8001704 <MX_GPIO_Init+0x318>)
 80016a0:	f003 faa4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 80016a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016b6:	230c      	movs	r3, #12
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4815      	ldr	r0, [pc, #84]	; (8001718 <MX_GPIO_Init+0x32c>)
 80016c2:	f003 fa93 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 80016c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80016d8:	230d      	movs	r3, #13
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <MX_GPIO_Init+0x324>)
 80016e4:	f003 fa82 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 80016e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	e011      	b.n	8001724 <MX_GPIO_Init+0x338>
 8001700:	58024400 	.word	0x58024400
 8001704:	58020c00 	.word	0x58020c00
 8001708:	58021000 	.word	0x58021000
 800170c:	58021800 	.word	0x58021800
 8001710:	58020000 	.word	0x58020000
 8001714:	58021400 	.word	0x58021400
 8001718:	58020800 	.word	0x58020800
 800171c:	58021c00 	.word	0x58021c00
 8001720:	58020400 	.word	0x58020400
 8001724:	4619      	mov	r1, r3
 8001726:	48bc      	ldr	r0, [pc, #752]	; (8001a18 <MX_GPIO_Init+0x62c>)
 8001728:	f003 fa60 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	48b6      	ldr	r0, [pc, #728]	; (8001a1c <MX_GPIO_Init+0x630>)
 8001744:	f003 fa52 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8001748:	2304      	movs	r3, #4
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001758:	2309      	movs	r3, #9
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	48af      	ldr	r0, [pc, #700]	; (8001a20 <MX_GPIO_Init+0x634>)
 8001764:	f003 fa42 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001768:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800177a:	230e      	movs	r3, #14
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	48a7      	ldr	r0, [pc, #668]	; (8001a24 <MX_GPIO_Init+0x638>)
 8001786:	f003 fa31 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 800178a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800179c:	2303      	movs	r3, #3
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	489f      	ldr	r0, [pc, #636]	; (8001a24 <MX_GPIO_Init+0x638>)
 80017a8:	f003 fa20 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80017be:	230a      	movs	r3, #10
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4893      	ldr	r0, [pc, #588]	; (8001a18 <MX_GPIO_Init+0x62c>)
 80017ca:	f003 fa0f 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 80017ce:	f648 7308 	movw	r3, #36616	; 0x8f08
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e0:	230e      	movs	r3, #14
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	488f      	ldr	r0, [pc, #572]	; (8001a28 <MX_GPIO_Init+0x63c>)
 80017ec:	f003 f9fe 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : MP_Relay_Pin */
  GPIO_InitStruct.Pin = MP_Relay_Pin;
 80017f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MP_Relay_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4883      	ldr	r0, [pc, #524]	; (8001a18 <MX_GPIO_Init+0x62c>)
 800180a:	f003 f9ef 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800181e:	230e      	movs	r3, #14
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	487c      	ldr	r0, [pc, #496]	; (8001a1c <MX_GPIO_Init+0x630>)
 800182a:	f003 f9df 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800183e:	2306      	movs	r3, #6
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4875      	ldr	r0, [pc, #468]	; (8001a20 <MX_GPIO_Init+0x634>)
 800184a:	f003 f9cf 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 800184e:	f241 031f 	movw	r3, #4127	; 0x101f
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001860:	2309      	movs	r3, #9
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	4870      	ldr	r0, [pc, #448]	; (8001a2c <MX_GPIO_Init+0x640>)
 800186c:	f003 f9be 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001870:	2340      	movs	r3, #64	; 0x40
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001880:	230a      	movs	r3, #10
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4866      	ldr	r0, [pc, #408]	; (8001a24 <MX_GPIO_Init+0x638>)
 800188c:	f003 f9ae 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001890:	2304      	movs	r3, #4
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001894:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	485f      	ldr	r0, [pc, #380]	; (8001a24 <MX_GPIO_Init+0x638>)
 80018a6:	f003 f9a1 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_FS_B_Pin;
 80018aa:	f44f 7350 	mov.w	r3, #832	; 0x340
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80018bc:	2306      	movs	r3, #6
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4859      	ldr	r0, [pc, #356]	; (8001a2c <MX_GPIO_Init+0x640>)
 80018c8:	f003 f990 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018cc:	2320      	movs	r3, #32
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	4852      	ldr	r0, [pc, #328]	; (8001a2c <MX_GPIO_Init+0x640>)
 80018e2:	f003 f983 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 80018e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80018f8:	2309      	movs	r3, #9
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	484b      	ldr	r0, [pc, #300]	; (8001a30 <MX_GPIO_Init+0x644>)
 8001904:	f003 f972 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_IGBT_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = PC_IGBT_Pin|STMOD_20_Pin;
 8001908:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	4842      	ldr	r0, [pc, #264]	; (8001a2c <MX_GPIO_Init+0x640>)
 8001922:	f003 f963 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001938:	2309      	movs	r3, #9
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	483a      	ldr	r0, [pc, #232]	; (8001a2c <MX_GPIO_Init+0x640>)
 8001944:	f003 f952 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001948:	2332      	movs	r3, #50	; 0x32
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001958:	230b      	movs	r3, #11
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	482e      	ldr	r0, [pc, #184]	; (8001a1c <MX_GPIO_Init+0x630>)
 8001964:	f003 f942 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001968:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197a:	230b      	movs	r3, #11
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	482b      	ldr	r0, [pc, #172]	; (8001a34 <MX_GPIO_Init+0x648>)
 8001986:	f003 f931 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_IGBT_Pin MN_Relay_Pin */
  GPIO_InitStruct.Pin = MN_IGBT_Pin|MN_Relay_Pin;
 800198a:	230c      	movs	r3, #12
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <MX_GPIO_Init+0x630>)
 80019a2:	f003 f923 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019b6:	2305      	movs	r3, #5
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	4619      	mov	r1, r3
 80019c0:	4819      	ldr	r0, [pc, #100]	; (8001a28 <MX_GPIO_Init+0x63c>)
 80019c2:	f003 f913 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 80019c6:	2318      	movs	r3, #24
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019d6:	230e      	movs	r3, #14
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	4619      	mov	r1, r3
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_GPIO_Init+0x62c>)
 80019e2:	f003 f903 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80019e6:	2386      	movs	r3, #134	; 0x86
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019f6:	230b      	movs	r3, #11
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_GPIO_Init+0x62c>)
 8001a02:	f003 f8f3 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	e010      	b.n	8001a38 <MX_GPIO_Init+0x64c>
 8001a16:	bf00      	nop
 8001a18:	58020000 	.word	0x58020000
 8001a1c:	58020800 	.word	0x58020800
 8001a20:	58021000 	.word	0x58021000
 8001a24:	58021800 	.word	0x58021800
 8001a28:	58021c00 	.word	0x58021c00
 8001a2c:	58021400 	.word	0x58021400
 8001a30:	58020c00 	.word	0x58020c00
 8001a34:	58020400 	.word	0x58020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	4619      	mov	r1, r3
 8001a46:	482c      	ldr	r0, [pc, #176]	; (8001af8 <MX_GPIO_Init+0x70c>)
 8001a48:	f003 f8d0 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4826      	ldr	r0, [pc, #152]	; (8001afc <MX_GPIO_Init+0x710>)
 8001a64:	f003 f8c2 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4820      	ldr	r0, [pc, #128]	; (8001b00 <MX_GPIO_Init+0x714>)
 8001a80:	f003 f8b4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001a84:	2310      	movs	r3, #16
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a94:	2309      	movs	r3, #9
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <MX_GPIO_Init+0x714>)
 8001aa0:	f003 f8a4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <MX_GPIO_Init+0x718>)
 8001ac0:	f003 f894 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4809      	ldr	r0, [pc, #36]	; (8001b00 <MX_GPIO_Init+0x714>)
 8001adc:	f003 f886 	bl	8004bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2028      	movs	r0, #40	; 0x28
 8001ae6:	f002 fb92 	bl	800420e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aea:	2028      	movs	r0, #40	; 0x28
 8001aec:	f002 fba9 	bl	8004242 <HAL_NVIC_EnableIRQ>

}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	58021400 	.word	0x58021400
 8001afc:	58021000 	.word	0x58021000
 8001b00:	58021c00 	.word	0x58021c00
 8001b04:	58020400 	.word	0x58020400

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_MspInit+0x30>)
 8001b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_MspInit+0x30>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_MspInit+0x30>)
 8001b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	58024400 	.word	0x58024400

08001b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b090      	sub	sp, #64	; 0x40
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6c      	ldr	r2, [pc, #432]	; (8001d18 <HAL_ADC_MspInit+0x1d0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d14e      	bne.n	8001c08 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b6a:	4b6c      	ldr	r3, [pc, #432]	; (8001d1c <HAL_ADC_MspInit+0x1d4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_ADC_MspInit+0x1d4>)
 8001b72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b74:	4b69      	ldr	r3, [pc, #420]	; (8001d1c <HAL_ADC_MspInit+0x1d4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10e      	bne.n	8001b9a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b82:	4a67      	ldr	r2, [pc, #412]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b8c:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b61      	ldr	r3, [pc, #388]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba0:	4a5f      	ldr	r2, [pc, #380]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001baa:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be6:	4619      	mov	r1, r3
 8001be8:	484e      	ldr	r0, [pc, #312]	; (8001d24 <HAL_ADC_MspInit+0x1dc>)
 8001bea:	f002 ffff 	bl	8004bec <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001bee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001bf6:	f000 feab 	bl	8002950 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001bfa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001bfe:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001c02:	f000 fea5 	bl	8002950 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c06:	e082      	b.n	8001d0e <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a46      	ldr	r2, [pc, #280]	; (8001d28 <HAL_ADC_MspInit+0x1e0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d133      	bne.n	8001c7a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_ADC_MspInit+0x1d4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a40      	ldr	r2, [pc, #256]	; (8001d1c <HAL_ADC_MspInit+0x1d4>)
 8001c1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_ADC_MspInit+0x1d4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10e      	bne.n	8001c42 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c24:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c34:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	4a35      	ldr	r2, [pc, #212]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001c60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001c68:	f000 fe72 	bl	8002950 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001c6c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001c70:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001c74:	f000 fe6c 	bl	8002950 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001c78:	e049      	b.n	8001d0e <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <HAL_ADC_MspInit+0x1e4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d144      	bne.n	8001d0e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_ADC_MspInit+0x1d8>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001cde:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001ce2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ce6:	f000 fe33 	bl	8002950 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001cea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001cee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001cf2:	f000 fe2d 	bl	8002950 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <HAL_ADC_MspInit+0x1e8>)
 8001d0a:	f002 ff6f 	bl	8004bec <HAL_GPIO_Init>
}
 8001d0e:	bf00      	nop
 8001d10:	3740      	adds	r7, #64	; 0x40
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	24000094 	.word	0x24000094
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020800 	.word	0x58020800
 8001d28:	40022100 	.word	0x40022100
 8001d2c:	58026000 	.word	0x58026000
 8001d30:	58021c00 	.word	0x58021c00

08001d34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d129      	bne.n	8001daa <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001d92:	2320      	movs	r3, #32
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d96:	2303      	movs	r3, #3
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_DAC_MspInit+0x88>)
 8001da6:	f002 ff21 	bl	8004bec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40007400 	.word	0x40007400
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58020000 	.word	0x58020000

08001dc0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b8      	sub	sp, #224	; 0xe0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	22b4      	movs	r2, #180	; 0xb4
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 f94f 	bl	800b084 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_FDCAN_MspInit+0x17c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d14e      	bne.n	8001e8e <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001df6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 f988 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001e0e:	f7ff fe7b 	bl	8001b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e12:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_FDCAN_MspInit+0x180>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <HAL_FDCAN_MspInit+0x180>)
 8001e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <HAL_FDCAN_MspInit+0x180>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10e      	bne.n	8001e42 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e24:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001e26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e2a:	4a46      	ldr	r2, [pc, #280]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001e36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	4a3e      	ldr	r2, [pc, #248]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e52:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001e60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e84:	4619      	mov	r1, r3
 8001e86:	4830      	ldr	r0, [pc, #192]	; (8001f48 <HAL_FDCAN_MspInit+0x188>)
 8001e88:	f002 feb0 	bl	8004bec <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001e8c:	e051      	b.n	8001f32 <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_FDCAN_MspInit+0x18c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d14c      	bne.n	8001f32 <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 f934 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001eb6:	f7ff fe27 	bl	8001b08 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_FDCAN_MspInit+0x180>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_FDCAN_MspInit+0x180>)
 8001ec2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_FDCAN_MspInit+0x180>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10e      	bne.n	8001eea <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001ece:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001ede:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_FDCAN_MspInit+0x184>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f20:	2309      	movs	r3, #9
 8001f22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4808      	ldr	r0, [pc, #32]	; (8001f50 <HAL_FDCAN_MspInit+0x190>)
 8001f2e:	f002 fe5d 	bl	8004bec <HAL_GPIO_Init>
}
 8001f32:	bf00      	nop
 8001f34:	37e0      	adds	r7, #224	; 0xe0
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	4000a000 	.word	0x4000a000
 8001f40:	24000098 	.word	0x24000098
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58021c00 	.word	0x58021c00
 8001f4c:	4000a400 	.word	0x4000a400
 8001f50:	58020400 	.word	0x58020400

08001f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0b6      	sub	sp, #216	; 0xd8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	22b4      	movs	r2, #180	; 0xb4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f009 f885 	bl	800b084 <memset>
  if(hi2c->Instance==I2C4)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a25      	ldr	r2, [pc, #148]	; (8002014 <HAL_I2C_MspInit+0xc0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d142      	bne.n	800200a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f84:	2310      	movs	r3, #16
 8001f86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 f8c0 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f9e:	f7ff fdb3 	bl	8001b08 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_I2C_MspInit+0xc4>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_I2C_MspInit+0xc4>)
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_I2C_MspInit+0xc4>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001fc0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc8:	2312      	movs	r3, #18
 8001fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <HAL_I2C_MspInit+0xc8>)
 8001fe8:	f002 fe00 	bl	8004bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_I2C_MspInit+0xc4>)
 8001fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_I2C_MspInit+0xc4>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_I2C_MspInit+0xc4>)
 8001ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	37d8      	adds	r7, #216	; 0xd8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	58001c00 	.word	0x58001c00
 8002018:	58024400 	.word	0x58024400
 800201c:	58021400 	.word	0x58021400

08002020 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b0      	sub	sp, #192	; 0xc0
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	22b4      	movs	r2, #180	; 0xb4
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f009 f827 	bl	800b084 <memset>
  if(hrtc->Instance==RTC)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_RTC_MspInit+0x58>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d116      	bne.n	800206e <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002044:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4618      	mov	r0, r3
 8002054:	f004 f860 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800205e:	f7ff fd53 	bl	8001b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RTC_MspInit+0x5c>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_RTC_MspInit+0x5c>)
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	37c0      	adds	r7, #192	; 0xc0
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	58004000 	.word	0x58004000
 800207c:	58024400 	.word	0x58024400

08002080 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_TIM_PWM_MspInit+0x90>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10f      	bne.n	80020b2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 8002094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020b0:	e028      	b.n	8002104 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a18      	ldr	r2, [pc, #96]	; (8002118 <HAL_TIM_PWM_MspInit+0x98>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10f      	bne.n	80020dc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c2:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
}
 80020da:	e013      	b.n	8002104 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_TIM_PWM_MspInit+0x9c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_TIM_PWM_MspInit+0x94>)
 80020f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40010000 	.word	0x40010000
 8002114:	58024400 	.word	0x58024400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00

08002120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM7)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <HAL_TIM_Base_MspInit+0xd0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d117      	bne.n	8002172 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002142:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 8002144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 800214a:	f043 0320 	orr.w	r3, r3, #32
 800214e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 8002154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	2037      	movs	r0, #55	; 0x37
 8002166:	f002 f852 	bl	800420e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800216a:	2037      	movs	r0, #55	; 0x37
 800216c:	f002 f869 	bl	8004242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002170:	e03a      	b.n	80021e8 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM13)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_TIM_Base_MspInit+0xd8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d135      	bne.n	80021e8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 800217e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_TIM_Base_MspInit+0xd4>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80021c8:	2309      	movs	r3, #9
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	480a      	ldr	r0, [pc, #40]	; (80021fc <HAL_TIM_Base_MspInit+0xdc>)
 80021d4:	f002 fd0a 	bl	8004bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	202c      	movs	r0, #44	; 0x2c
 80021de:	f002 f816 	bl	800420e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80021e2:	202c      	movs	r0, #44	; 0x2c
 80021e4:	f002 f82d 	bl	8004242 <HAL_NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40001400 	.word	0x40001400
 80021f4:	58024400 	.word	0x58024400
 80021f8:	40001c00 	.word	0x40001c00
 80021fc:	58020000 	.word	0x58020000

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_TIM_MspPostInit+0x140>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d120      	bne.n	8002264 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002222:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 800222a:	f043 0310 	orr.w	r3, r3, #16
 800222e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002252:	2301      	movs	r3, #1
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	483a      	ldr	r0, [pc, #232]	; (8002348 <HAL_TIM_MspPostInit+0x148>)
 800225e:	f002 fcc5 	bl	8004bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002262:	e068      	b.n	8002336 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a38      	ldr	r2, [pc, #224]	; (800234c <HAL_TIM_MspPostInit+0x14c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d13f      	bne.n	80022ee <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	4a33      	ldr	r2, [pc, #204]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229c:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ba:	2302      	movs	r3, #2
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4822      	ldr	r0, [pc, #136]	; (8002350 <HAL_TIM_MspPostInit+0x150>)
 80022c6:	f002 fc91 	bl	8004bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 80022ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022dc:	2302      	movs	r3, #2
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	481b      	ldr	r0, [pc, #108]	; (8002354 <HAL_TIM_MspPostInit+0x154>)
 80022e8:	f002 fc80 	bl	8004bec <HAL_GPIO_Init>
}
 80022ec:	e023      	b.n	8002336 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_TIM_MspPostInit+0x158>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d11e      	bne.n	8002336 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_TIM_MspPostInit+0x144>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002316:	2301      	movs	r3, #1
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002326:	2302      	movs	r3, #2
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <HAL_TIM_MspPostInit+0x15c>)
 8002332:	f002 fc5b 	bl	8004bec <HAL_GPIO_Init>
}
 8002336:	bf00      	nop
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40010000 	.word	0x40010000
 8002344:	58024400 	.word	0x58024400
 8002348:	58021000 	.word	0x58021000
 800234c:	40000800 	.word	0x40000800
 8002350:	58020400 	.word	0x58020400
 8002354:	58020c00 	.word	0x58020c00
 8002358:	40000c00 	.word	0x40000c00
 800235c:	58020000 	.word	0x58020000

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b8      	sub	sp, #224	; 0xe0
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	22b4      	movs	r2, #180	; 0xb4
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f008 fe7f 	bl	800b084 <memset>
  if(huart->Instance==USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a49      	ldr	r2, [pc, #292]	; (80024b0 <HAL_UART_MspInit+0x150>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d143      	bne.n	8002418 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002390:	2301      	movs	r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 feba 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023aa:	f7ff fbad 	bl	8001b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_UART_MspInit+0x154>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b4:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_UART_MspInit+0x154>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_UART_MspInit+0x154>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_UART_MspInit+0x154>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_UART_MspInit+0x154>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <HAL_UART_MspInit+0x154>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80023ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002404:	2304      	movs	r3, #4
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800240e:	4619      	mov	r1, r3
 8002410:	4829      	ldr	r0, [pc, #164]	; (80024b8 <HAL_UART_MspInit+0x158>)
 8002412:	f002 fbeb 	bl	8004bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002416:	e047      	b.n	80024a8 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_UART_MspInit+0x15c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d142      	bne.n	80024a8 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fe71 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800243c:	f7ff fb64 	bl	8001b08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_UART_MspInit+0x154>)
 8002442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_UART_MspInit+0x154>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0x154>)
 8002452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_UART_MspInit+0x154>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <HAL_UART_MspInit+0x154>)
 8002466:	f043 0308 	orr.w	r3, r3, #8
 800246a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_UART_MspInit+0x154>)
 8002470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800247c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002496:	2307      	movs	r3, #7
 8002498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024a0:	4619      	mov	r1, r3
 80024a2:	4807      	ldr	r0, [pc, #28]	; (80024c0 <HAL_UART_MspInit+0x160>)
 80024a4:	f002 fba2 	bl	8004bec <HAL_GPIO_Init>
}
 80024a8:	bf00      	nop
 80024aa:	37e0      	adds	r7, #224	; 0xe0
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40011000 	.word	0x40011000
 80024b4:	58024400 	.word	0x58024400
 80024b8:	58020400 	.word	0x58020400
 80024bc:	40004800 	.word	0x40004800
 80024c0:	58020c00 	.word	0x58020c00

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002510:	f000 f9da 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800251c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002520:	f002 fd25 	bl	8004f6e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002528:	f002 fd21 	bl	8004f6e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002536:	f006 fa6d 	bl	8008a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	24000388 	.word	0x24000388

08002544 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <TIM7_IRQHandler+0x10>)
 800254a:	f006 fa63 	bl	8008a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	24000574 	.word	0x24000574

08002558 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e00a      	b.n	8002580 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800256a:	f3af 8000 	nop.w
 800256e:	4601      	mov	r1, r0
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf0      	blt.n	800256a <_read+0x12>
	}

return len;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe f87b 	bl	80006a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x12>
	}
	return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_close>:

int _close(int file)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
	return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_isatty>:

int _isatty(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
	return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f008 fcd6 	bl	800b014 <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	24050000 	.word	0x24050000
 8002694:	00000400 	.word	0x00000400
 8002698:	2400009c 	.word	0x2400009c
 800269c:	24000678 	.word	0x24000678

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <SystemInit+0xd0>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a31      	ldr	r2, [pc, #196]	; (8002770 <SystemInit+0xd0>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <SystemInit+0xd4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	2b06      	cmp	r3, #6
 80026be:	d807      	bhi.n	80026d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <SystemInit+0xd4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 030f 	bic.w	r3, r3, #15
 80026c8:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <SystemInit+0xd4>)
 80026ca:	f043 0307 	orr.w	r3, r3, #7
 80026ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <SystemInit+0xd8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	; (8002778 <SystemInit+0xd8>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026dc:	4b26      	ldr	r3, [pc, #152]	; (8002778 <SystemInit+0xd8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <SystemInit+0xd8>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4924      	ldr	r1, [pc, #144]	; (8002778 <SystemInit+0xd8>)
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <SystemInit+0xdc>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <SystemInit+0xd4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <SystemInit+0xd4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 030f 	bic.w	r3, r3, #15
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <SystemInit+0xd4>)
 8002704:	f043 0307 	orr.w	r3, r3, #7
 8002708:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <SystemInit+0xd8>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <SystemInit+0xd8>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <SystemInit+0xd8>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <SystemInit+0xd8>)
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <SystemInit+0xe0>)
 8002720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <SystemInit+0xd8>)
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <SystemInit+0xe4>)
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <SystemInit+0xd8>)
 800272a:	4a17      	ldr	r2, [pc, #92]	; (8002788 <SystemInit+0xe8>)
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <SystemInit+0xd8>)
 8002730:	2200      	movs	r2, #0
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <SystemInit+0xd8>)
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <SystemInit+0xe8>)
 8002738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <SystemInit+0xd8>)
 800273c:	2200      	movs	r2, #0
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <SystemInit+0xd8>)
 8002742:	4a11      	ldr	r2, [pc, #68]	; (8002788 <SystemInit+0xe8>)
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <SystemInit+0xd8>)
 8002748:	2200      	movs	r2, #0
 800274a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <SystemInit+0xd8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <SystemInit+0xd8>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <SystemInit+0xd8>)
 800275a:	2200      	movs	r2, #0
 800275c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <SystemInit+0xec>)
 8002760:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002764:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	52002000 	.word	0x52002000
 8002778:	58024400 	.word	0x58024400
 800277c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002780:	02020200 	.word	0x02020200
 8002784:	01ff0000 	.word	0x01ff0000
 8002788:	01010280 	.word	0x01010280
 800278c:	52004000 	.word	0x52004000

08002790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002794:	f7ff ff84 	bl	80026a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800279a:	490d      	ldr	r1, [pc, #52]	; (80027d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027b0:	4c0a      	ldr	r4, [pc, #40]	; (80027dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027be:	f008 fc2f 	bl	800b020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c2:	f7fd ffdd 	bl	8000780 <main>
  bx  lr
 80027c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80027cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027d0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80027d4:	0800c1d0 	.word	0x0800c1d0
  ldr r2, =_sbss
 80027d8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80027dc:	24000674 	.word	0x24000674

080027e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC3_IRQHandler>
	...

080027e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ea:	2003      	movs	r0, #3
 80027ec:	f001 fd04 	bl	80041f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027f0:	f003 fabc 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_Init+0x68>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	4913      	ldr	r1, [pc, #76]	; (8002850 <HAL_Init+0x6c>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_Init+0x68>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_Init+0x6c>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_Init+0x70>)
 8002826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002828:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_Init+0x74>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282e:	2000      	movs	r0, #0
 8002830:	f000 f814 	bl	800285c <HAL_InitTick>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e002      	b.n	8002844 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800283e:	f7ff f969 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	58024400 	.word	0x58024400
 8002850:	0800c0f0 	.word	0x0800c0f0
 8002854:	24000004 	.word	0x24000004
 8002858:	24000000 	.word	0x24000000

0800285c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_InitTick+0x60>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e021      	b.n	80028b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_InitTick+0x64>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_InitTick+0x60>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fce9 	bl	800425e <HAL_SYSTICK_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d80a      	bhi.n	80028b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f001 fcb3 	bl	800420e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <HAL_InitTick+0x68>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2400000c 	.word	0x2400000c
 80028c0:	24000000 	.word	0x24000000
 80028c4:	24000008 	.word	0x24000008

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2400000c 	.word	0x2400000c
 80028ec:	24000660 	.word	0x24000660

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	24000660 	.word	0x24000660

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2400000c 	.word	0x2400000c

08002950 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	58000400 	.word	0x58000400

0800297c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <LL_ADC_SetOffset+0x60>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10b      	bne.n	8002a20 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a1e:	e00b      	b.n	8002a38 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	58026000 	.word	0x58026000

08002a48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	461a      	mov	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	611a      	str	r2, [r3, #16]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00e      	beq.n	8002ada <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
  }
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	58026000 	.word	0x58026000

08002aec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <LL_ADC_SetOffsetSaturation+0x40>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10e      	bne.n	8002b1e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	58026000 	.word	0x58026000

08002b30 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <LL_ADC_SetOffsetSign+0x40>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10e      	bne.n	8002b62 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	58026000 	.word	0x58026000

08002b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3360      	adds	r3, #96	; 0x60
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <LL_ADC_SetOffsetState+0x50>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ba6:	e007      	b.n	8002bb8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	58026000 	.word	0x58026000

08002bc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3330      	adds	r3, #48	; 0x30
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	4413      	add	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	211f      	movs	r1, #31
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	f003 011f 	and.w	r1, r3, #31
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	0e5b      	lsrs	r3, r3, #25
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	0d1b      	lsrs	r3, r3, #20
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2107      	movs	r1, #7
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	401a      	ands	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0d1b      	lsrs	r3, r3, #20
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d115      	bne.n	8002cb8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0318 	and.w	r3, r3, #24
 8002ca2:	4914      	ldr	r1, [pc, #80]	; (8002cf4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ca4:	40d9      	lsrs	r1, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	400b      	ands	r3, r1
 8002caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002cb6:	e014      	b.n	8002ce2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0318 	and.w	r3, r3, #24
 8002cce:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002cd0:	40d9      	lsrs	r1, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	58026000 	.word	0x58026000
 8002cf4:	000fffff 	.word	0x000fffff

08002cf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6093      	str	r3, [r2, #8]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	5fffffc0 	.word	0x5fffffc0

08002d1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d30:	d101      	bne.n	8002d36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	6fffffc0 	.word	0x6fffffc0

08002d6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <LL_ADC_IsEnabled+0x18>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <LL_ADC_IsEnabled+0x1a>
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1ee      	b.n	8003200 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe fe89 	bl	8001b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff67 	bl	8002d1c <LL_ADC_IsDeepPowerDownEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff4d 	bl	8002cf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff82 	bl	8002d6c <LL_ADC_IsInternalRegulatorEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d114      	bne.n	8002e98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff66 	bl	8002d44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e78:	4b8e      	ldr	r3, [pc, #568]	; (80030b4 <HAL_ADC_Init+0x2ac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	4a8e      	ldr	r2, [pc, #568]	; (80030b8 <HAL_ADC_Init+0x2b0>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff65 	bl	8002d6c <LL_ADC_IsInternalRegulatorEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eac:	f043 0210 	orr.w	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff76 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 8002ece:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 8188 	bne.w	80031ee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 8184 	bne.w	80031ee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff4a 	bl	8002d94 <LL_ADC_IsEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d136      	bne.n	8002f74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	; (80030bc <HAL_ADC_Init+0x2b4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_ADC_Init+0x112>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_ADC_Init+0x2b8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10e      	bne.n	8002f38 <HAL_ADC_Init+0x130>
 8002f1a:	4868      	ldr	r0, [pc, #416]	; (80030bc <HAL_ADC_Init+0x2b4>)
 8002f1c:	f7ff ff3a 	bl	8002d94 <LL_ADC_IsEnabled>
 8002f20:	4604      	mov	r4, r0
 8002f22:	4867      	ldr	r0, [pc, #412]	; (80030c0 <HAL_ADC_Init+0x2b8>)
 8002f24:	f7ff ff36 	bl	8002d94 <LL_ADC_IsEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4323      	orrs	r3, r4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e008      	b.n	8002f4a <HAL_ADC_Init+0x142>
 8002f38:	4862      	ldr	r0, [pc, #392]	; (80030c4 <HAL_ADC_Init+0x2bc>)
 8002f3a:	f7ff ff2b 	bl	8002d94 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_ADC_Init+0x2b4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_ADC_Init+0x15a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_ADC_Init+0x2b8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_Init+0x15e>
 8002f62:	4a59      	ldr	r2, [pc, #356]	; (80030c8 <HAL_ADC_Init+0x2c0>)
 8002f64:	e000      	b.n	8002f68 <HAL_ADC_Init+0x160>
 8002f66:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_ADC_Init+0x2c4>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff fd04 	bl	800297c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_ADC_Init+0x2bc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d129      	bne.n	8002fd2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7e5b      	ldrb	r3, [r3, #25]
 8002f82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f88:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002f8e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d013      	beq.n	8002fc0 <HAL_ADC_Init+0x1b8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d00d      	beq.n	8002fbc <HAL_ADC_Init+0x1b4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b1c      	cmp	r3, #28
 8002fa6:	d007      	beq.n	8002fb8 <HAL_ADC_Init+0x1b0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b18      	cmp	r3, #24
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_Init+0x1ac>
 8002fb0:	2318      	movs	r3, #24
 8002fb2:	e006      	b.n	8002fc2 <HAL_ADC_Init+0x1ba>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e004      	b.n	8002fc2 <HAL_ADC_Init+0x1ba>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	e002      	b.n	8002fc2 <HAL_ADC_Init+0x1ba>
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_Init+0x1ba>
 8002fc0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002fc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	e00e      	b.n	8002ff0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7e5b      	ldrb	r3, [r3, #25]
 8002fd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fdc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fe2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	3b01      	subs	r3, #1
 8003000:	045b      	lsls	r3, r3, #17
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <HAL_ADC_Init+0x2bc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d115      	bne.n	800305a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_ADC_Init+0x2c8>)
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	430b      	orrs	r3, r1
 8003040:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	611a      	str	r2, [r3, #16]
 8003058:	e009      	b.n	800306e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_ADC_Init+0x2cc>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	69b9      	ldr	r1, [r7, #24]
 800306a:	430b      	orrs	r3, r1
 800306c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fea1 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 8003078:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff feae 	bl	8002de0 <LL_ADC_INJ_IsConversionOngoing>
 8003084:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 808e 	bne.w	80031aa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 808a 	bne.w	80031aa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_ADC_Init+0x2bc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d11b      	bne.n	80030d8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7e1b      	ldrb	r3, [r3, #24]
 80030a4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e018      	b.n	80030e6 <HAL_ADC_Init+0x2de>
 80030b4:	24000000 	.word	0x24000000
 80030b8:	053e2d63 	.word	0x053e2d63
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40022100 	.word	0x40022100
 80030c4:	58026000 	.word	0x58026000
 80030c8:	40022300 	.word	0x40022300
 80030cc:	58026300 	.word	0x58026300
 80030d0:	fff04007 	.word	0xfff04007
 80030d4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e1b      	ldrb	r3, [r3, #24]
 80030dc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_ADC_Init+0x400>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	69b9      	ldr	r1, [r7, #24]
 80030f6:	430b      	orrs	r3, r1
 80030f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003100:	2b01      	cmp	r3, #1
 8003102:	d137      	bne.n	8003174 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3f      	ldr	r2, [pc, #252]	; (800320c <HAL_ADC_Init+0x404>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d116      	bne.n	8003142 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_ADC_Init+0x408>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003132:	430a      	orrs	r2, r1
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	e020      	b.n	8003184 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_ADC_Init+0x40c>)
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003150:	3a01      	subs	r2, #1
 8003152:	0411      	lsls	r1, r2, #16
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003164:	430a      	orrs	r2, r1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	611a      	str	r2, [r3, #16]
 8003172:	e007      	b.n	8003184 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_ADC_Init+0x404>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d002      	beq.n	80031aa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fd63 	bl	8003c70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10c      	bne.n	80031cc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f023 010f 	bic.w	r1, r3, #15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ca:	e007      	b.n	80031dc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 020f 	bic.w	r2, r2, #15
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e0:	f023 0303 	bic.w	r3, r3, #3
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60
 80031ec:	e007      	b.n	80031fe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3724      	adds	r7, #36	; 0x24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	ffffbffc 	.word	0xffffbffc
 800320c:	58026000 	.word	0x58026000
 8003210:	fc00f81f 	.word	0xfc00f81f
 8003214:	fc00f81e 	.word	0xfc00f81e

08003218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b0b9      	sub	sp, #228	; 0xe4
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4ab3      	ldr	r2, [pc, #716]	; (8003508 <HAL_ADC_ConfigChannel+0x2f0>)
 800323a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_ADC_ConfigChannel+0x34>
 8003246:	2302      	movs	r3, #2
 8003248:	f000 bcfa 	b.w	8003c40 <HAL_ADC_ConfigChannel+0xa28>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fdae 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 84de 	bne.w	8003c22 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4aa8      	ldr	r2, [pc, #672]	; (800350c <HAL_ADC_ConfigChannel+0x2f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d033      	beq.n	80032d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <HAL_ADC_ConfigChannel+0x76>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2201      	movs	r2, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	e01d      	b.n	80032ca <HAL_ADC_ConfigChannel+0xb2>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e004      	b.n	80032c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80032b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2201      	movs	r2, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	69d1      	ldr	r1, [r2, #28]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	f7ff fc6f 	bl	8002bc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fd63 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 80032f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fd6f 	bl	8002de0 <LL_ADC_INJ_IsConversionOngoing>
 8003302:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 8270 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003310:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003314:	2b00      	cmp	r3, #0
 8003316:	f040 826b 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	461a      	mov	r2, r3
 8003328:	f7ff fc7a 	bl	8002c20 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a76      	ldr	r2, [pc, #472]	; (800350c <HAL_ADC_ConfigChannel+0x2f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10d      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	08db      	lsrs	r3, r3, #3
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003350:	e032      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003352:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_ADC_ConfigChannel+0x2f8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800335a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335e:	d10b      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x160>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	e01d      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x19c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_ADC_ConfigChannel+0x186>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	e00a      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x19c>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d048      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6919      	ldr	r1, [r3, #16]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033d0:	f7ff fb08 	bl	80029e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a4c      	ldr	r2, [pc, #304]	; (800350c <HAL_ADC_ConfigChannel+0x2f4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d119      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6919      	ldr	r1, [r3, #16]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f7ff fba0 	bl	8002b30 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6919      	ldr	r1, [r3, #16]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1f0>
 8003402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003406:	e000      	b.n	800340a <HAL_ADC_ConfigChannel+0x1f2>
 8003408:	2300      	movs	r3, #0
 800340a:	461a      	mov	r2, r3
 800340c:	f7ff fb6e 	bl	8002aec <LL_ADC_SetOffsetSaturation>
 8003410:	e1ee      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6919      	ldr	r1, [r3, #16]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HAL_ADC_ConfigChannel+0x212>
 8003424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003428:	e000      	b.n	800342c <HAL_ADC_ConfigChannel+0x214>
 800342a:	2300      	movs	r3, #0
 800342c:	461a      	mov	r2, r3
 800342e:	f7ff fb3b 	bl	8002aa8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6919      	ldr	r1, [r3, #16]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	7e1b      	ldrb	r3, [r3, #24]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x230>
 8003442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003446:	e000      	b.n	800344a <HAL_ADC_ConfigChannel+0x232>
 8003448:	2300      	movs	r3, #0
 800344a:	461a      	mov	r2, r3
 800344c:	f7ff fb12 	bl	8002a74 <LL_ADC_SetDataRightShift>
 8003450:	e1ce      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2d      	ldr	r2, [pc, #180]	; (800350c <HAL_ADC_ConfigChannel+0x2f4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	f040 8181 	bne.w	8003760 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff faef 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_ADC_ConfigChannel+0x272>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fae4 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	0e9b      	lsrs	r3, r3, #26
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	e01e      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x2b0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fad9 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80034a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80034b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e004      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80034bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x2c8>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	e01e      	b.n	800351e <HAL_ADC_ConfigChannel+0x306>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80034f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80034fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e00a      	b.n	800351e <HAL_ADC_ConfigChannel+0x306>
 8003508:	47ff0000 	.word	0x47ff0000
 800350c:	58026000 	.word	0x58026000
 8003510:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	429a      	cmp	r2, r3
 8003520:	d106      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fb22 	bl	8002b74 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fa86 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <HAL_ADC_ConfigChannel+0x344>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fa7b 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 8003552:	4603      	mov	r3, r0
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	f003 021f 	and.w	r2, r3, #31
 800355a:	e01e      	b.n	800359a <HAL_ADC_ConfigChannel+0x382>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fa70 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 8003568:	4603      	mov	r3, r0
 800356a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800357a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800357e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	e004      	b.n	8003598 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800358e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x39a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	e018      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x3cc>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80035c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80035ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80035d6:	2320      	movs	r3, #32
 80035d8:	e004      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80035da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fabf 	bl	8002b74 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fa23 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x40a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fa18 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 8003618:	4603      	mov	r3, r0
 800361a:	0e9b      	lsrs	r3, r3, #26
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	e01e      	b.n	8003660 <HAL_ADC_ConfigChannel+0x448>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fa0d 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e004      	b.n	800365e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x460>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	e014      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x48a>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800368c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d106      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fa60 	bl	8002b74 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2103      	movs	r1, #3
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f9c4 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x4c8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2103      	movs	r1, #3
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f9b9 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	f003 021f 	and.w	r2, r3, #31
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x4f8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2103      	movs	r1, #3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff f9ae 	bl	8002a48 <LL_ADC_GetOffsetChannel>
 80036ec:	4603      	mov	r3, r0
 80036ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80036fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x510>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	e011      	b.n	800374c <HAL_ADC_ConfigChannel+0x534>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003738:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800373a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	429a      	cmp	r2, r3
 800374e:	d14f      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2200      	movs	r2, #0
 8003756:	2103      	movs	r1, #3
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fa0b 	bl	8002b74 <LL_ADC_SetOffsetState>
 800375e:	e047      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	069b      	lsls	r3, r3, #26
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003782:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	069b      	lsls	r3, r3, #26
 8003794:	429a      	cmp	r2, r3
 8003796:	d107      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	069b      	lsls	r3, r3, #26
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d107      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	069b      	lsls	r3, r3, #26
 80037dc:	429a      	cmp	r2, r3
 80037de:	d107      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff facd 	bl	8002d94 <LL_ADC_IsEnabled>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 8219 	bne.w	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	461a      	mov	r2, r3
 8003810:	f7ff fa32 	bl	8002c78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4aa1      	ldr	r2, [pc, #644]	; (8003aa0 <HAL_ADC_ConfigChannel+0x888>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f040 812e 	bne.w	8003a7c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x630>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	3301      	adds	r3, #1
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2b09      	cmp	r3, #9
 800383e:	bf94      	ite	ls
 8003840:	2301      	movls	r3, #1
 8003842:	2300      	movhi	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e019      	b.n	800387c <HAL_ADC_ConfigChannel+0x664>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800385a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2b09      	cmp	r3, #9
 8003874:	bf94      	ite	ls
 8003876:	2301      	movls	r3, #1
 8003878:	2300      	movhi	r3, #0
 800387a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800387c:	2b00      	cmp	r3, #0
 800387e:	d079      	beq.n	8003974 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_ADC_ConfigChannel+0x684>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0e9b      	lsrs	r3, r3, #26
 8003892:	3301      	adds	r3, #1
 8003894:	069b      	lsls	r3, r3, #26
 8003896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800389a:	e015      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x6b0>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80038ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	e003      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80038b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	069b      	lsls	r3, r3, #26
 80038c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x6d0>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0e9b      	lsrs	r3, r3, #26
 80038da:	3301      	adds	r3, #1
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	e017      	b.n	8003918 <HAL_ADC_ConfigChannel+0x700>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80038fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003900:	2320      	movs	r3, #32
 8003902:	e003      	b.n	800390c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	ea42 0103 	orr.w	r1, r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_ADC_ConfigChannel+0x726>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0e9b      	lsrs	r3, r3, #26
 800392e:	3301      	adds	r3, #1
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	051b      	lsls	r3, r3, #20
 800393c:	e018      	b.n	8003970 <HAL_ADC_ConfigChannel+0x758>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003956:	2320      	movs	r3, #32
 8003958:	e003      	b.n	8003962 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003970:	430b      	orrs	r3, r1
 8003972:	e07e      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x778>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	3301      	adds	r3, #1
 8003988:	069b      	lsls	r3, r3, #26
 800398a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800398e:	e015      	b.n	80039bc <HAL_ADC_ConfigChannel+0x7a4>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e003      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	069b      	lsls	r3, r3, #26
 80039b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x7c4>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	3301      	adds	r3, #1
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	e017      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x7f4>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	61bb      	str	r3, [r7, #24]
  return result;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80039f4:	2320      	movs	r3, #32
 80039f6:	e003      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	ea42 0103 	orr.w	r1, r2, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x820>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	3301      	adds	r3, #1
 8003a24:	f003 021f 	and.w	r2, r3, #31
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b1e      	subs	r3, #30
 8003a30:	051b      	lsls	r3, r3, #20
 8003a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a36:	e01b      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x858>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	60fb      	str	r3, [r7, #12]
  return result;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003a50:	2320      	movs	r3, #32
 8003a52:	e003      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f003 021f 	and.w	r2, r3, #31
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	3b1e      	subs	r3, #30
 8003a6a:	051b      	lsls	r3, r3, #20
 8003a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a70:	430b      	orrs	r3, r1
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	6892      	ldr	r2, [r2, #8]
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7ff f8d2 	bl	8002c20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f280 80d7 	bge.w	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <HAL_ADC_ConfigChannel+0x88c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_ADC_ConfigChannel+0x882>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_ADC_ConfigChannel+0x890>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10a      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x898>
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <HAL_ADC_ConfigChannel+0x894>)
 8003a9c:	e009      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x89a>
 8003a9e:	bf00      	nop
 8003aa0:	47ff0000 	.word	0x47ff0000
 8003aa4:	40022000 	.word	0x40022000
 8003aa8:	40022100 	.word	0x40022100
 8003aac:	40022300 	.word	0x40022300
 8003ab0:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_ADC_ConfigChannel+0xa30>)
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe ff88 	bl	80029c8 <LL_ADC_GetCommonPathInternalCh>
 8003ab8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a62      	ldr	r2, [pc, #392]	; (8003c4c <HAL_ADC_ConfigChannel+0xa34>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x8b8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a61      	ldr	r2, [pc, #388]	; (8003c50 <HAL_ADC_ConfigChannel+0xa38>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10e      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x8d6>
 8003ad0:	485e      	ldr	r0, [pc, #376]	; (8003c4c <HAL_ADC_ConfigChannel+0xa34>)
 8003ad2:	f7ff f95f 	bl	8002d94 <LL_ADC_IsEnabled>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	485d      	ldr	r0, [pc, #372]	; (8003c50 <HAL_ADC_ConfigChannel+0xa38>)
 8003ada:	f7ff f95b 	bl	8002d94 <LL_ADC_IsEnabled>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4323      	orrs	r3, r4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e008      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x8e8>
 8003aee:	4859      	ldr	r0, [pc, #356]	; (8003c54 <HAL_ADC_ConfigChannel+0xa3c>)
 8003af0:	f7ff f950 	bl	8002d94 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8084 	beq.w	8003c0e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a53      	ldr	r2, [pc, #332]	; (8003c58 <HAL_ADC_ConfigChannel+0xa40>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d132      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x95e>
 8003b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d12c      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <HAL_ADC_ConfigChannel+0xa3c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	f040 8086 	bne.w	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a47      	ldr	r2, [pc, #284]	; (8003c4c <HAL_ADC_ConfigChannel+0xa34>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_ADC_ConfigChannel+0x924>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a46      	ldr	r2, [pc, #280]	; (8003c50 <HAL_ADC_ConfigChannel+0xa38>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x928>
 8003b3c:	4a47      	ldr	r2, [pc, #284]	; (8003c5c <HAL_ADC_ConfigChannel+0xa44>)
 8003b3e:	e000      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x92a>
 8003b40:	4a41      	ldr	r2, [pc, #260]	; (8003c48 <HAL_ADC_ConfigChannel+0xa30>)
 8003b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fe ff28 	bl	80029a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <HAL_ADC_ConfigChannel+0xa48>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	4a42      	ldr	r2, [pc, #264]	; (8003c64 <HAL_ADC_ConfigChannel+0xa4c>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	099b      	lsrs	r3, r3, #6
 8003b60:	3301      	adds	r3, #1
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b66:	e002      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f9      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b74:	e05e      	b.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_ADC_ConfigChannel+0xa50>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d120      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x9aa>
 8003b80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11a      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <HAL_ADC_ConfigChannel+0xa3c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d14e      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <HAL_ADC_ConfigChannel+0xa34>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_ADC_ConfigChannel+0x992>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <HAL_ADC_ConfigChannel+0xa38>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x996>
 8003baa:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <HAL_ADC_ConfigChannel+0xa44>)
 8003bac:	e000      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x998>
 8003bae:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <HAL_ADC_ConfigChannel+0xa30>)
 8003bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7fe fef1 	bl	80029a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc0:	e038      	b.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <HAL_ADC_ConfigChannel+0xa54>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d133      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
 8003bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d12d      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <HAL_ADC_ConfigChannel+0xa3c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d128      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_ADC_ConfigChannel+0xa34>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_ADC_ConfigChannel+0x9de>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <HAL_ADC_ConfigChannel+0xa38>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x9e2>
 8003bf6:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_ADC_ConfigChannel+0xa44>)
 8003bf8:	e000      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x9e4>
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <HAL_ADC_ConfigChannel+0xa30>)
 8003bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fe fecb 	bl	80029a2 <LL_ADC_SetCommonPathInternalCh>
 8003c0c:	e012      	b.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	f043 0220 	orr.w	r2, r3, #32
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003c20:	e008      	b.n	8003c34 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003c3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	37e4      	adds	r7, #228	; 0xe4
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	58026300 	.word	0x58026300
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40022100 	.word	0x40022100
 8003c54:	58026000 	.word	0x58026000
 8003c58:	c7520000 	.word	0xc7520000
 8003c5c:	40022300 	.word	0x40022300
 8003c60:	24000000 	.word	0x24000000
 8003c64:	053e2d63 	.word	0x053e2d63
 8003c68:	c3210000 	.word	0xc3210000
 8003c6c:	cb840000 	.word	0xcb840000

08003c70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6b      	ldr	r2, [pc, #428]	; (8003e2c <ADC_ConfigureBoostMode+0x1bc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <ADC_ConfigureBoostMode+0x1c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6a      	ldr	r2, [pc, #424]	; (8003e30 <ADC_ConfigureBoostMode+0x1c0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d109      	bne.n	8003ca0 <ADC_ConfigureBoostMode+0x30>
 8003c8c:	4b69      	ldr	r3, [pc, #420]	; (8003e34 <ADC_ConfigureBoostMode+0x1c4>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e008      	b.n	8003cb2 <ADC_ConfigureBoostMode+0x42>
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <ADC_ConfigureBoostMode+0x1c8>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01c      	beq.n	8003cf0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cb6:	f002 f9d3 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8003cba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc4:	d010      	beq.n	8003ce8 <ADC_ConfigureBoostMode+0x78>
 8003cc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cca:	d871      	bhi.n	8003db0 <ADC_ConfigureBoostMode+0x140>
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d002      	beq.n	8003cd8 <ADC_ConfigureBoostMode+0x68>
 8003cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd6:	d16b      	bne.n	8003db0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
        break;
 8003ce6:	e066      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	60fb      	str	r3, [r7, #12]
        break;
 8003cee:	e062      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cf0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cf4:	f003 f90a 	bl	8006f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8003cf8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d02:	d051      	beq.n	8003da8 <ADC_ConfigureBoostMode+0x138>
 8003d04:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d08:	d854      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d0a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d0e:	d047      	beq.n	8003da0 <ADC_ConfigureBoostMode+0x130>
 8003d10:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d14:	d84e      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d16:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d1a:	d03d      	beq.n	8003d98 <ADC_ConfigureBoostMode+0x128>
 8003d1c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d20:	d848      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d26:	d033      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x120>
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d842      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d2e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d32:	d029      	beq.n	8003d88 <ADC_ConfigureBoostMode+0x118>
 8003d34:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d38:	d83c      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d3a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d3e:	d01a      	beq.n	8003d76 <ADC_ConfigureBoostMode+0x106>
 8003d40:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d44:	d836      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d46:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d4a:	d014      	beq.n	8003d76 <ADC_ConfigureBoostMode+0x106>
 8003d4c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d50:	d830      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d56:	d00e      	beq.n	8003d76 <ADC_ConfigureBoostMode+0x106>
 8003d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5c:	d82a      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d62:	d008      	beq.n	8003d76 <ADC_ConfigureBoostMode+0x106>
 8003d64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d68:	d824      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x144>
 8003d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d6e:	d002      	beq.n	8003d76 <ADC_ConfigureBoostMode+0x106>
 8003d70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d74:	d11e      	bne.n	8003db4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	0c9b      	lsrs	r3, r3, #18
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	60fb      	str	r3, [r7, #12]
        break;
 8003d86:	e016      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]
        break;
 8003d8e:	e012      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	60fb      	str	r3, [r7, #12]
        break;
 8003d96:	e00e      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	60fb      	str	r3, [r7, #12]
        break;
 8003d9e:	e00a      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	09db      	lsrs	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
        break;
 8003da6:	e006      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	60fb      	str	r3, [r7, #12]
        break;
 8003dae:	e002      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
        break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003db4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <ADC_ConfigureBoostMode+0x1cc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d808      	bhi.n	8003dd6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dd2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dd4:	e025      	b.n	8003e22 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <ADC_ConfigureBoostMode+0x1d0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d80a      	bhi.n	8003df4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df0:	609a      	str	r2, [r3, #8]
}
 8003df2:	e016      	b.n	8003e22 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <ADC_ConfigureBoostMode+0x1d4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d80a      	bhi.n	8003e12 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	e007      	b.n	8003e22 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022100 	.word	0x40022100
 8003e34:	40022300 	.word	0x40022300
 8003e38:	58026300 	.word	0x58026300
 8003e3c:	005f5e10 	.word	0x005f5e10
 8003e40:	00bebc20 	.word	0x00bebc20
 8003e44:	017d7840 	.word	0x017d7840

08003e48 <LL_ADC_IsEnabled>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <LL_ADC_IsEnabled+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_ADC_IsEnabled+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_REG_IsConversionOngoing>:
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d101      	bne.n	8003e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b0a3      	sub	sp, #140	; 0x8c
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0c1      	b.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d102      	bne.n	8003ed2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ecc:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e001      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0a0      	b.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ffb9 	bl	8003e6e <LL_ADC_REG_IsConversionOngoing>
 8003efc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ffb2 	bl	8003e6e <LL_ADC_REG_IsConversionOngoing>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 8081 	bne.w	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d17c      	bne.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a48      	ldr	r2, [pc, #288]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a46      	ldr	r2, [pc, #280]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003f2e:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f30:	e000      	b.n	8003f34 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003f32:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f34:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d039      	beq.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a39      	ldr	r2, [pc, #228]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10e      	bne.n	8003f82 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003f64:	4836      	ldr	r0, [pc, #216]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f66:	f7ff ff6f 	bl	8003e48 <LL_ADC_IsEnabled>
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4835      	ldr	r0, [pc, #212]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f6e:	f7ff ff6b 	bl	8003e48 <LL_ADC_IsEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4323      	orrs	r3, r4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e008      	b.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003f82:	4833      	ldr	r0, [pc, #204]	; (8004050 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003f84:	f7ff ff60 	bl	8003e48 <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2301      	moveq	r3, #1
 8003f90:	2300      	movne	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d047      	beq.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	6811      	ldr	r1, [r2, #0]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb0:	e03a      	b.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003fb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fbc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003fd2:	481b      	ldr	r0, [pc, #108]	; (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fd4:	f7ff ff38 	bl	8003e48 <LL_ADC_IsEnabled>
 8003fd8:	4604      	mov	r4, r0
 8003fda:	481a      	ldr	r0, [pc, #104]	; (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fdc:	f7ff ff34 	bl	8003e48 <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4323      	orrs	r3, r4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003ff0:	4817      	ldr	r0, [pc, #92]	; (8004050 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ff2:	f7ff ff29 	bl	8003e48 <LL_ADC_IsEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800400c:	4013      	ands	r3, r2
 800400e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004010:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004012:	e009      	b.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004026:	e000      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004028:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004032:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004036:	4618      	mov	r0, r3
 8004038:	378c      	adds	r7, #140	; 0x8c
 800403a:	46bd      	mov	sp, r7
 800403c:	bd90      	pop	{r4, r7, pc}
 800403e:	bf00      	nop
 8004040:	40022000 	.word	0x40022000
 8004044:	40022100 	.word	0x40022100
 8004048:	40022300 	.word	0x40022300
 800404c:	58026300 	.word	0x58026300
 8004050:	58026000 	.word	0x58026000
 8004054:	fffff0e0 	.word	0xfffff0e0

08004058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <__NVIC_SetPriorityGrouping+0x40>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004074:	4013      	ands	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <__NVIC_SetPriorityGrouping+0x44>)
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <__NVIC_SetPriorityGrouping+0x40>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	60d3      	str	r3, [r2, #12]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000ed00 	.word	0xe000ed00
 800409c:	05fa0000 	.word	0x05fa0000

080040a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <__NVIC_GetPriorityGrouping+0x18>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	f003 0307 	and.w	r3, r3, #7
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db0b      	blt.n	80040e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	4907      	ldr	r1, [pc, #28]	; (80040f4 <__NVIC_EnableIRQ+0x38>)
 80040d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2001      	movs	r0, #1
 80040de:	fa00 f202 	lsl.w	r2, r0, r2
 80040e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	e000e100 	.word	0xe000e100

080040f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	6039      	str	r1, [r7, #0]
 8004102:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004104:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004108:	2b00      	cmp	r3, #0
 800410a:	db0a      	blt.n	8004122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	490c      	ldr	r1, [pc, #48]	; (8004144 <__NVIC_SetPriority+0x4c>)
 8004112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	440b      	add	r3, r1
 800411c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004120:	e00a      	b.n	8004138 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4908      	ldr	r1, [pc, #32]	; (8004148 <__NVIC_SetPriority+0x50>)
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3b04      	subs	r3, #4
 8004130:	0112      	lsls	r2, r2, #4
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	440b      	add	r3, r1
 8004136:	761a      	strb	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000e100 	.word	0xe000e100
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f1c3 0307 	rsb	r3, r3, #7
 8004166:	2b04      	cmp	r3, #4
 8004168:	bf28      	it	cs
 800416a:	2304      	movcs	r3, #4
 800416c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3304      	adds	r3, #4
 8004172:	2b06      	cmp	r3, #6
 8004174:	d902      	bls.n	800417c <NVIC_EncodePriority+0x30>
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3b03      	subs	r3, #3
 800417a:	e000      	b.n	800417e <NVIC_EncodePriority+0x32>
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	f04f 32ff 	mov.w	r2, #4294967295
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	401a      	ands	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004194:	f04f 31ff 	mov.w	r1, #4294967295
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43d9      	mvns	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a4:	4313      	orrs	r3, r2
         );
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c4:	d301      	bcc.n	80041ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041c6:	2301      	movs	r3, #1
 80041c8:	e00f      	b.n	80041ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <SysTick_Config+0x40>)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041d2:	210f      	movs	r1, #15
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	f7ff ff8e 	bl	80040f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <SysTick_Config+0x40>)
 80041de:	2200      	movs	r2, #0
 80041e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <SysTick_Config+0x40>)
 80041e4:	2207      	movs	r2, #7
 80041e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	e000e010 	.word	0xe000e010

080041f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff29 	bl	8004058 <__NVIC_SetPriorityGrouping>
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af00      	add	r7, sp, #0
 8004214:	4603      	mov	r3, r0
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800421c:	f7ff ff40 	bl	80040a0 <__NVIC_GetPriorityGrouping>
 8004220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	6978      	ldr	r0, [r7, #20]
 8004228:	f7ff ff90 	bl	800414c <NVIC_EncodePriority>
 800422c:	4602      	mov	r2, r0
 800422e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ff5f 	bl	80040f8 <__NVIC_SetPriority>
}
 800423a:	bf00      	nop
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	4603      	mov	r3, r0
 800424a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800424c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ff33 	bl	80040bc <__NVIC_EnableIRQ>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff ffa4 	bl	80041b4 <SysTick_Config>
 800426c:	4603      	mov	r3, r0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e014      	b.n	80042b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	791b      	ldrb	r3, [r3, #4]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fd fd4b 	bl	8001d34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	795b      	ldrb	r3, [r3, #5]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_DAC_ConfigChannel+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e11d      	b.n	8004510 <HAL_DAC_ConfigChannel+0x254>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d174      	bne.n	80043d2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80042e8:	f7fe fb02 	bl	80028f0 <HAL_GetTick>
 80042ec:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d134      	bne.n	800435e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042f4:	e011      	b.n	800431a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042f6:	f7fe fafb 	bl	80028f0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d90a      	bls.n	800431a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f043 0208 	orr.w	r2, r3, #8
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2203      	movs	r2, #3
 8004314:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0fa      	b.n	8004510 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	4b7d      	ldr	r3, [pc, #500]	; (8004518 <HAL_DAC_ConfigChannel+0x25c>)
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e6      	bne.n	80042f6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004328:	2001      	movs	r0, #1
 800432a:	f7fe faed 	bl	8002908 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	6992      	ldr	r2, [r2, #24]
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
 8004338:	e01e      	b.n	8004378 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800433a:	f7fe fad9 	bl	80028f0 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d90a      	bls.n	800435e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f043 0208 	orr.w	r2, r3, #8
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2203      	movs	r2, #3
 8004358:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0d8      	b.n	8004510 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	dbe8      	blt.n	800433a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004368:	2001      	movs	r0, #1
 800436a:	f7fe facd 	bl	8002908 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	6992      	ldr	r2, [r2, #24]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	ea02 0103 	and.w	r1, r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	21ff      	movs	r1, #255	; 0xff
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	ea02 0103 	and.w	r1, r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d11d      	bne.n	8004416 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	221f      	movs	r2, #31
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4013      	ands	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2207      	movs	r2, #7
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4013      	ands	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e00f      	b.n	8004460 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d102      	bne.n	800444e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004448:	2301      	movs	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e008      	b.n	8004460 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004456:	2301      	movs	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	e001      	b.n	8004460 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4013      	ands	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	22c0      	movs	r2, #192	; 0xc0
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	400a      	ands	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20008000 	.word	0x20008000

0800451c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b098      	sub	sp, #96	; 0x60
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004524:	4a84      	ldr	r2, [pc, #528]	; (8004738 <HAL_FDCAN_Init+0x21c>)
 8004526:	f107 030c 	add.w	r3, r7, #12
 800452a:	4611      	mov	r1, r2
 800452c:	224c      	movs	r2, #76	; 0x4c
 800452e:	4618      	mov	r0, r3
 8004530:	f006 fd9a 	bl	800b068 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e1ca      	b.n	80048d4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a7e      	ldr	r2, [pc, #504]	; (800473c <HAL_FDCAN_Init+0x220>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d106      	bne.n	8004556 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004550:	461a      	mov	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fc28 	bl	8001dc0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0210 	bic.w	r2, r2, #16
 800457e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004580:	f7fe f9b6 	bl	80028f0 <HAL_GetTick>
 8004584:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004586:	e014      	b.n	80045b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004588:	f7fe f9b2 	bl	80028f0 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b0a      	cmp	r3, #10
 8004594:	d90d      	bls.n	80045b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800459c:	f043 0201 	orr.w	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2203      	movs	r2, #3
 80045aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e190      	b.n	80048d4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d0e3      	beq.n	8004588 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045d0:	f7fe f98e 	bl	80028f0 <HAL_GetTick>
 80045d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80045d6:	e014      	b.n	8004602 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045d8:	f7fe f98a 	bl	80028f0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b0a      	cmp	r3, #10
 80045e4:	d90d      	bls.n	8004602 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2203      	movs	r2, #3
 80045fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e168      	b.n	80048d4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0e3      	beq.n	80045d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7c1b      	ldrb	r3, [r3, #16]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004636:	619a      	str	r2, [r3, #24]
 8004638:	e007      	b.n	800464a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004648:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	7c5b      	ldrb	r3, [r3, #17]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d108      	bne.n	8004664 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004660:	619a      	str	r2, [r3, #24]
 8004662:	e007      	b.n	8004674 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004672:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7c9b      	ldrb	r3, [r3, #18]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800468a:	619a      	str	r2, [r3, #24]
 800468c:	e007      	b.n	800469e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800469c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80046c2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0210 	bic.w	r2, r2, #16
 80046d2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d108      	bne.n	80046ee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0204 	orr.w	r2, r2, #4
 80046ea:	619a      	str	r2, [r3, #24]
 80046ec:	e030      	b.n	8004750 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02c      	beq.n	8004750 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d020      	beq.n	8004740 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800470c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0210 	orr.w	r2, r2, #16
 800471c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d114      	bne.n	8004750 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0220 	orr.w	r2, r2, #32
 8004734:	619a      	str	r2, [r3, #24]
 8004736:	e00b      	b.n	8004750 <HAL_FDCAN_Init+0x234>
 8004738:	0800c0a4 	.word	0x0800c0a4
 800473c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0220 	orr.w	r2, r2, #32
 800474e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	3b01      	subs	r3, #1
 8004756:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	3b01      	subs	r3, #1
 800475e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004760:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004768:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	3b01      	subs	r3, #1
 8004772:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004778:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800477a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004784:	d115      	bne.n	80047b2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	3b01      	subs	r3, #1
 8004792:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004794:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	3b01      	subs	r3, #1
 800479c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800479e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80047ae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047b0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	4413      	add	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80047e6:	f023 0107 	bic.w	r1, r3, #7
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047f4:	4413      	add	r3, r2
 80047f6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004814:	f023 0107 	bic.w	r1, r3, #7
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004822:	4413      	add	r3, r2
 8004824:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	2b00      	cmp	r3, #0
 8004838:	d013      	beq.n	8004862 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004842:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004850:	4413      	add	r3, r2
 8004852:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004856:	011a      	lsls	r2, r3, #4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	2b00      	cmp	r3, #0
 8004868:	d013      	beq.n	8004892 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004872:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004880:	4413      	add	r3, r2
 8004882:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004886:	021a      	lsls	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a11      	ldr	r2, [pc, #68]	; (80048dc <HAL_FDCAN_Init+0x3c0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d107      	bne.n	80048ac <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f022 0203 	bic.w	r2, r2, #3
 80048aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f80b 	bl	80048e0 <FDCAN_CalcultateRamBlockAddresses>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80048d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3760      	adds	r7, #96	; 0x60
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	4000a000 	.word	0x4000a000

080048e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048f6:	4ba7      	ldr	r3, [pc, #668]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	0091      	lsls	r1, r2, #2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	430b      	orrs	r3, r1
 8004904:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4413      	add	r3, r2
 800492c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004936:	4b97      	ldr	r3, [pc, #604]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004938:	4013      	ands	r3, r2
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	0091      	lsls	r1, r2, #2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	430b      	orrs	r3, r1
 8004944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	041a      	lsls	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	4413      	add	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004978:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	0091      	lsls	r1, r2, #2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	430b      	orrs	r3, r1
 8004986:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004992:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	041a      	lsls	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4413      	add	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80049c0:	4b74      	ldr	r3, [pc, #464]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	0091      	lsls	r1, r2, #2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	430b      	orrs	r3, r1
 80049ce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049da:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	041a      	lsls	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a08:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	0091      	lsls	r1, r2, #2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004a34:	4b57      	ldr	r3, [pc, #348]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	0091      	lsls	r1, r2, #2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	430b      	orrs	r3, r1
 8004a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a4e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	041a      	lsls	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	0091      	lsls	r1, r2, #2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	430b      	orrs	r3, r1
 8004a84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004a90:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	041a      	lsls	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004aac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab4:	061a      	lsls	r2, r3, #24
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac4:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009a      	lsls	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d915      	bls.n	8004bbc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004b90:	e006      	b.n	8004ba0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004b92:	bf00      	nop
 8004b94:	ffff0003 	.word	0xffff0003
 8004b98:	10002b00 	.word	0x10002b00
 8004b9c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e010      	b.n	8004bde <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e005      	b.n	8004bd0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d3f3      	bcc.n	8004bc4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop

08004bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bfa:	4b86      	ldr	r3, [pc, #536]	; (8004e14 <HAL_GPIO_Init+0x228>)
 8004bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bfe:	e18c      	b.n	8004f1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2101      	movs	r1, #1
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 817e 	beq.w	8004f14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d005      	beq.n	8004c30 <HAL_GPIO_Init+0x44>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d130      	bne.n	8004c92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c66:	2201      	movs	r2, #1
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	4013      	ands	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	f003 0201 	and.w	r2, r3, #1
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d017      	beq.n	8004cce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	2203      	movs	r2, #3
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d123      	bne.n	8004d22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	08da      	lsrs	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	220f      	movs	r2, #15
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	08da      	lsrs	r2, r3, #3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3208      	adds	r2, #8
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0203 	and.w	r2, r3, #3
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80d8 	beq.w	8004f14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d64:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_GPIO_Init+0x22c>)
 8004d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d6a:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <HAL_GPIO_Init+0x22c>)
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_GPIO_Init+0x22c>)
 8004d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d82:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <HAL_GPIO_Init+0x230>)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	3302      	adds	r3, #2
 8004d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	220f      	movs	r2, #15
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_GPIO_Init+0x234>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d04a      	beq.n	8004e44 <HAL_GPIO_Init+0x258>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_GPIO_Init+0x238>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d02b      	beq.n	8004e0e <HAL_GPIO_Init+0x222>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_GPIO_Init+0x23c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d025      	beq.n	8004e0a <HAL_GPIO_Init+0x21e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <HAL_GPIO_Init+0x240>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01f      	beq.n	8004e06 <HAL_GPIO_Init+0x21a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_GPIO_Init+0x244>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d019      	beq.n	8004e02 <HAL_GPIO_Init+0x216>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_GPIO_Init+0x248>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_GPIO_Init+0x212>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_GPIO_Init+0x24c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00d      	beq.n	8004dfa <HAL_GPIO_Init+0x20e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_GPIO_Init+0x250>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <HAL_GPIO_Init+0x20a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_GPIO_Init+0x254>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <HAL_GPIO_Init+0x206>
 8004dee:	2309      	movs	r3, #9
 8004df0:	e029      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004df2:	230a      	movs	r3, #10
 8004df4:	e027      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004df6:	2307      	movs	r3, #7
 8004df8:	e025      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	e023      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e021      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004e02:	2304      	movs	r3, #4
 8004e04:	e01f      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004e06:	2303      	movs	r3, #3
 8004e08:	e01d      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e01b      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e019      	b.n	8004e46 <HAL_GPIO_Init+0x25a>
 8004e12:	bf00      	nop
 8004e14:	58000080 	.word	0x58000080
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	58000400 	.word	0x58000400
 8004e20:	58020000 	.word	0x58020000
 8004e24:	58020400 	.word	0x58020400
 8004e28:	58020800 	.word	0x58020800
 8004e2c:	58020c00 	.word	0x58020c00
 8004e30:	58021000 	.word	0x58021000
 8004e34:	58021400 	.word	0x58021400
 8004e38:	58021800 	.word	0x58021800
 8004e3c:	58021c00 	.word	0x58021c00
 8004e40:	58022400 	.word	0x58022400
 8004e44:	2300      	movs	r3, #0
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	f002 0203 	and.w	r2, r2, #3
 8004e4c:	0092      	lsls	r2, r2, #2
 8004e4e:	4093      	lsls	r3, r2
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e56:	4938      	ldr	r1, [pc, #224]	; (8004f38 <HAL_GPIO_Init+0x34c>)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f47f ae6b 	bne.w	8004c00 <HAL_GPIO_Init+0x14>
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	3724      	adds	r7, #36	; 0x24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	58000400 	.word	0x58000400

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f58:	e003      	b.n	8004f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	041a      	lsls	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	4603      	mov	r3, r0
 8004f76:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb fbe1 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07f      	b.n	80050b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc ffc2 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e006      	b.n	800502c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800502a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d104      	bne.n	800503e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_I2C_Init+0x11c>)
 800504a:	430b      	orrs	r3, r1
 800504c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	02008000 	.word	0x02008000

080050c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d138      	bne.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e032      	b.n	800514e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2224      	movs	r2, #36	; 0x24
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0201 	bic.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6819      	ldr	r1, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b20      	cmp	r3, #32
 800516e:	d139      	bne.n	80051e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800517a:	2302      	movs	r3, #2
 800517c:	e033      	b.n	80051e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2224      	movs	r2, #36	; 0x24
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	2b06      	cmp	r3, #6
 8005206:	d00a      	beq.n	800521e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005208:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e03f      	b.n	800529a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e03d      	b.n	800529a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005226:	491f      	ldr	r1, [pc, #124]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4313      	orrs	r3, r2
 800522c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800522e:	f7fd fb5f 	bl	80028f0 <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005234:	e009      	b.n	800524a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005236:	f7fd fb5b 	bl	80028f0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	d901      	bls.n	800524a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e027      	b.n	800529a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800524a:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	d1ee      	bne.n	8005236 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b1e      	cmp	r3, #30
 800525c:	d008      	beq.n	8005270 <HAL_PWREx_ConfigSupply+0x7c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b2e      	cmp	r3, #46	; 0x2e
 8005262:	d005      	beq.n	8005270 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b1d      	cmp	r3, #29
 8005268:	d002      	beq.n	8005270 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b2d      	cmp	r3, #45	; 0x2d
 800526e:	d113      	bne.n	8005298 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005270:	f7fd fb3e 	bl	80028f0 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005276:	e009      	b.n	800528c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005278:	f7fd fb3a 	bl	80028f0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005286:	d901      	bls.n	800528c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e006      	b.n	800529a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0311 	and.w	r3, r3, #17
 8005294:	2b11      	cmp	r3, #17
 8005296:	d1ef      	bne.n	8005278 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	58024800 	.word	0x58024800

080052a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	; 0x30
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e397      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8087 	beq.w	80053d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052c8:	4b9e      	ldr	r3, [pc, #632]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052d2:	4b9c      	ldr	r3, [pc, #624]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d007      	beq.n	80052ee <HAL_RCC_OscConfig+0x46>
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b18      	cmp	r3, #24
 80052e2:	d110      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d10b      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ee:	4b95      	ldr	r3, [pc, #596]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x12c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d168      	bne.n	80053d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e371      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x76>
 8005310:	4b8c      	ldr	r3, [pc, #560]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a8b      	ldr	r2, [pc, #556]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e02e      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RCC_OscConfig+0x98>
 8005326:	4b87      	ldr	r3, [pc, #540]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a86      	ldr	r2, [pc, #536]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4b84      	ldr	r3, [pc, #528]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a83      	ldr	r2, [pc, #524]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0xbc>
 800534a:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7d      	ldr	r2, [pc, #500]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7a      	ldr	r2, [pc, #488]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005364:	4b77      	ldr	r3, [pc, #476]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a76      	ldr	r2, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b74      	ldr	r3, [pc, #464]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd fab4 	bl	80028f0 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7fd fab0 	bl	80028f0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e325      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539e:	4b69      	ldr	r3, [pc, #420]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xe4>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fd faa0 	bl	80028f0 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fd fa9c 	bl	80028f0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e311      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053c6:	4b5f      	ldr	r3, [pc, #380]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x10c>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808a 	beq.w	80054f8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e4:	4b57      	ldr	r3, [pc, #348]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ee:	4b55      	ldr	r3, [pc, #340]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_RCC_OscConfig+0x162>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	2b18      	cmp	r3, #24
 80053fe:	d137      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c8>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d132      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540a:	4b4e      	ldr	r3, [pc, #312]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x17a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e2e3      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005422:	4b48      	ldr	r3, [pc, #288]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 0219 	bic.w	r2, r3, #25
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4945      	ldr	r1, [pc, #276]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005434:	f7fd fa5c 	bl	80028f0 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543c:	f7fd fa58 	bl	80028f0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e2cd      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	4936      	ldr	r1, [pc, #216]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800546e:	e043      	b.n	80054f8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d026      	beq.n	80054c6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 0219 	bic.w	r2, r3, #25
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	492f      	ldr	r1, [pc, #188]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fd fa31 	bl	80028f0 <HAL_GetTick>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005492:	f7fd fa2d 	bl	80028f0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e2a2      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a4:	4b27      	ldr	r3, [pc, #156]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	061b      	lsls	r3, r3, #24
 80054be:	4921      	ldr	r1, [pc, #132]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	e018      	b.n	80054f8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d2:	f7fd fa0d 	bl	80028f0 <HAL_GetTick>
 80054d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054da:	f7fd fa09 	bl	80028f0 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e27e      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f0      	bne.n	80054da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d06d      	beq.n	80055e0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b08      	cmp	r3, #8
 8005518:	d007      	beq.n	800552a <HAL_RCC_OscConfig+0x282>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b18      	cmp	r3, #24
 800551e:	d11e      	bne.n	800555e <HAL_RCC_OscConfig+0x2b6>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d119      	bne.n	800555e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_RCC_OscConfig+0x2a0>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d004      	beq.n	8005548 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e253      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005548:	4ba3      	ldr	r3, [pc, #652]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	49a0      	ldr	r1, [pc, #640]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005558:	4313      	orrs	r3, r2
 800555a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800555c:	e040      	b.n	80055e0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d023      	beq.n	80055ae <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005566:	4b9c      	ldr	r3, [pc, #624]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a9b      	ldr	r2, [pc, #620]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fd f9bd 	bl	80028f0 <HAL_GetTick>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800557a:	f7fd f9b9 	bl	80028f0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e22e      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800558c:	4b92      	ldr	r3, [pc, #584]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005598:	4b8f      	ldr	r3, [pc, #572]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	498c      	ldr	r1, [pc, #560]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60cb      	str	r3, [r1, #12]
 80055ac:	e018      	b.n	80055e0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055ae:	4b8a      	ldr	r3, [pc, #552]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a89      	ldr	r2, [pc, #548]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fd f999 	bl	80028f0 <HAL_GetTick>
 80055be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055c2:	f7fd f995 	bl	80028f0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e20a      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055d4:	4b80      	ldr	r3, [pc, #512]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d036      	beq.n	800565a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d019      	beq.n	8005628 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f4:	4b78      	ldr	r3, [pc, #480]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f8:	4a77      	ldr	r2, [pc, #476]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fd f976 	bl	80028f0 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005608:	f7fd f972 	bl	80028f0 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1e7      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800561a:	4b6f      	ldr	r3, [pc, #444]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x360>
 8005626:	e018      	b.n	800565a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005628:	4b6b      	ldr	r3, [pc, #428]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	4a6a      	ldr	r2, [pc, #424]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fd f95c 	bl	80028f0 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fd f958 	bl	80028f0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e1cd      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800564e:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d019      	beq.n	80056a2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800566e:	4b5a      	ldr	r3, [pc, #360]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a59      	ldr	r2, [pc, #356]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800567a:	f7fd f939 	bl	80028f0 <HAL_GetTick>
 800567e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005682:	f7fd f935 	bl	80028f0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1aa      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x3da>
 80056a0:	e018      	b.n	80056d4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a2:	4b4d      	ldr	r3, [pc, #308]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a4c      	ldr	r2, [pc, #304]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ae:	f7fd f91f 	bl	80028f0 <HAL_GetTick>
 80056b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056b6:	f7fd f91b 	bl	80028f0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e190      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8085 	beq.w	80057ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056e2:	4b3e      	ldr	r3, [pc, #248]	; (80057dc <HAL_RCC_OscConfig+0x534>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <HAL_RCC_OscConfig+0x534>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ee:	f7fd f8ff 	bl	80028f0 <HAL_GetTick>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056f6:	f7fd f8fb 	bl	80028f0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b64      	cmp	r3, #100	; 0x64
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e170      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005708:	4b34      	ldr	r3, [pc, #208]	; (80057dc <HAL_RCC_OscConfig+0x534>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d106      	bne.n	800572a <HAL_RCC_OscConfig+0x482>
 800571c:	4b2e      	ldr	r3, [pc, #184]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
 8005728:	e02d      	b.n	8005786 <HAL_RCC_OscConfig+0x4de>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x4a4>
 8005732:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
 800574a:	e01c      	b.n	8005786 <HAL_RCC_OscConfig+0x4de>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b05      	cmp	r3, #5
 8005752:	d10c      	bne.n	800576e <HAL_RCC_OscConfig+0x4c6>
 8005754:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
 8005760:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6713      	str	r3, [r2, #112]	; 0x70
 800576c:	e00b      	b.n	8005786 <HAL_RCC_OscConfig+0x4de>
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578e:	f7fd f8af 	bl	80028f0 <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fd f8ab 	bl	80028f0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e11e      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ee      	beq.n	8005796 <HAL_RCC_OscConfig+0x4ee>
 80057b8:	e018      	b.n	80057ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fd f899 	bl	80028f0 <HAL_GetTick>
 80057be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057c0:	e00e      	b.n	80057e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fd f895 	bl	80028f0 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d905      	bls.n	80057e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e108      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
 80057d8:	58024400 	.word	0x58024400
 80057dc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057e0:	4b84      	ldr	r3, [pc, #528]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1ea      	bne.n	80057c2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80f9 	beq.w	80059e8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057f6:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fe:	2b18      	cmp	r3, #24
 8005800:	f000 80b4 	beq.w	800596c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b02      	cmp	r3, #2
 800580a:	f040 8095 	bne.w	8005938 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b79      	ldr	r3, [pc, #484]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a78      	ldr	r2, [pc, #480]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fd f869 	bl	80028f0 <HAL_GetTick>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005822:	f7fd f865 	bl	80028f0 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0da      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f0      	bne.n	8005822 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005844:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <HAL_RCC_OscConfig+0x750>)
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	430a      	orrs	r2, r1
 8005854:	4967      	ldr	r1, [pc, #412]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	628b      	str	r3, [r1, #40]	; 0x28
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	3b01      	subs	r3, #1
 8005860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	3b01      	subs	r3, #1
 800586a:	025b      	lsls	r3, r3, #9
 800586c:	b29b      	uxth	r3, r3
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	3b01      	subs	r3, #1
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	3b01      	subs	r3, #1
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800588a:	495a      	ldr	r1, [pc, #360]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005890:	4b58      	ldr	r3, [pc, #352]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a57      	ldr	r2, [pc, #348]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800589c:	4b55      	ldr	r3, [pc, #340]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	4b56      	ldr	r3, [pc, #344]	; (80059fc <HAL_RCC_OscConfig+0x754>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058a8:	00d2      	lsls	r2, r2, #3
 80058aa:	4952      	ldr	r1, [pc, #328]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058b0:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	f023 020c 	bic.w	r2, r3, #12
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	494d      	ldr	r1, [pc, #308]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058c2:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f023 0202 	bic.w	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	4949      	ldr	r1, [pc, #292]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058d4:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4a46      	ldr	r2, [pc, #280]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e0:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a43      	ldr	r2, [pc, #268]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058ec:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058f8:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a3d      	ldr	r2, [pc, #244]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005904:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800590a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fc ffee 	bl	80028f0 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005918:	f7fc ffea 	bl	80028f0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e05f      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800592a:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0x670>
 8005936:	e057      	b.n	80059e8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fc ffd4 	bl	80028f0 <HAL_GetTick>
 8005948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594c:	f7fc ffd0 	bl	80028f0 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e045      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x6a4>
 800596a:	e03d      	b.n	80059e8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b01      	cmp	r3, #1
 800597e:	d031      	beq.n	80059e4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0203 	and.w	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d12a      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d122      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d11a      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	0a5b      	lsrs	r3, r3, #9
 80059b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d111      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d108      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	; 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	fffffc0c 	.word	0xfffffc0c
 80059fc:	ffff0007 	.word	0xffff0007

08005a00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e19c      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a14:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d910      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b87      	ldr	r3, [pc, #540]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 020f 	bic.w	r2, r3, #15
 8005a2a:	4985      	ldr	r1, [pc, #532]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e184      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d010      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	4b7b      	ldr	r3, [pc, #492]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d908      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a60:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4975      	ldr	r1, [pc, #468]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	4b70      	ldr	r3, [pc, #448]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d908      	bls.n	8005aa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	496a      	ldr	r1, [pc, #424]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d010      	beq.n	8005ace <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	4b64      	ldr	r3, [pc, #400]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d908      	bls.n	8005ace <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005abc:	4b61      	ldr	r3, [pc, #388]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	495e      	ldr	r1, [pc, #376]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d010      	beq.n	8005afc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	4b59      	ldr	r3, [pc, #356]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d908      	bls.n	8005afc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005aea:	4b56      	ldr	r3, [pc, #344]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	4953      	ldr	r1, [pc, #332]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d908      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b18:	4b4a      	ldr	r3, [pc, #296]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f023 020f 	bic.w	r2, r3, #15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4947      	ldr	r1, [pc, #284]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d055      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4940      	ldr	r1, [pc, #256]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b50:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d121      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0f6      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d107      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b68:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d115      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0ea      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b80:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0de      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b90:	4b2c      	ldr	r3, [pc, #176]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0d6      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f023 0207 	bic.w	r2, r3, #7
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4925      	ldr	r1, [pc, #148]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb2:	f7fc fe9d 	bl	80028f0 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bba:	f7fc fe99 	bl	80028f0 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0be      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd0:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d1eb      	bne.n	8005bba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d010      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d208      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f023 020f 	bic.w	r2, r3, #15
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	490e      	ldr	r1, [pc, #56]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d214      	bcs.n	8005c48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 020f 	bic.w	r2, r3, #15
 8005c26:	4906      	ldr	r1, [pc, #24]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e086      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
 8005c40:	52002000 	.word	0x52002000
 8005c44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	4b3f      	ldr	r3, [pc, #252]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d208      	bcs.n	8005c76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c64:	4b3c      	ldr	r3, [pc, #240]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	4939      	ldr	r1, [pc, #228]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d208      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c92:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	492e      	ldr	r1, [pc, #184]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d010      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d208      	bcs.n	8005cd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	4922      	ldr	r1, [pc, #136]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d208      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cee:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	4917      	ldr	r1, [pc, #92]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d00:	f000 f834 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	4912      	ldr	r1, [pc, #72]	; (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <HAL_RCC_ClockConfig+0x360>)
 8005d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d38:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <HAL_RCC_ClockConfig+0x364>)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <HAL_RCC_ClockConfig+0x368>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fc fd8a 	bl	800285c <HAL_InitTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	0800c0f0 	.word	0x0800c0f0
 8005d60:	24000004 	.word	0x24000004
 8005d64:	24000000 	.word	0x24000000
 8005d68:	24000008 	.word	0x24000008

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d72:	4bb3      	ldr	r3, [pc, #716]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7a:	2b18      	cmp	r3, #24
 8005d7c:	f200 8155 	bhi.w	800602a <HAL_RCC_GetSysClockFreq+0x2be>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005ded 	.word	0x08005ded
 8005d8c:	0800602b 	.word	0x0800602b
 8005d90:	0800602b 	.word	0x0800602b
 8005d94:	0800602b 	.word	0x0800602b
 8005d98:	0800602b 	.word	0x0800602b
 8005d9c:	0800602b 	.word	0x0800602b
 8005da0:	0800602b 	.word	0x0800602b
 8005da4:	0800602b 	.word	0x0800602b
 8005da8:	08005e13 	.word	0x08005e13
 8005dac:	0800602b 	.word	0x0800602b
 8005db0:	0800602b 	.word	0x0800602b
 8005db4:	0800602b 	.word	0x0800602b
 8005db8:	0800602b 	.word	0x0800602b
 8005dbc:	0800602b 	.word	0x0800602b
 8005dc0:	0800602b 	.word	0x0800602b
 8005dc4:	0800602b 	.word	0x0800602b
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	0800602b 	.word	0x0800602b
 8005dd0:	0800602b 	.word	0x0800602b
 8005dd4:	0800602b 	.word	0x0800602b
 8005dd8:	0800602b 	.word	0x0800602b
 8005ddc:	0800602b 	.word	0x0800602b
 8005de0:	0800602b 	.word	0x0800602b
 8005de4:	0800602b 	.word	0x0800602b
 8005de8:	08005e1f 	.word	0x08005e1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dec:	4b94      	ldr	r3, [pc, #592]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005df8:	4b91      	ldr	r3, [pc, #580]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	4a90      	ldr	r2, [pc, #576]	; (8006044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e0a:	e111      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e0c:	4b8d      	ldr	r3, [pc, #564]	; (8006044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e0e:	61bb      	str	r3, [r7, #24]
    break;
 8005e10:	e10e      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e12:	4b8d      	ldr	r3, [pc, #564]	; (8006048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e14:	61bb      	str	r3, [r7, #24]
    break;
 8005e16:	e10b      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e18:	4b8c      	ldr	r3, [pc, #560]	; (800604c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e1a:	61bb      	str	r3, [r7, #24]
    break;
 8005e1c:	e108      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e1e:	4b88      	ldr	r3, [pc, #544]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e28:	4b85      	ldr	r3, [pc, #532]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e34:	4b82      	ldr	r3, [pc, #520]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e3e:	4b80      	ldr	r3, [pc, #512]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	08db      	lsrs	r3, r3, #3
 8005e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80e1 	beq.w	8006024 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f000 8083 	beq.w	8005f70 <HAL_RCC_GetSysClockFreq+0x204>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	f200 80a1 	bhi.w	8005fb4 <HAL_RCC_GetSysClockFreq+0x248>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x114>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d056      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e7e:	e099      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e80:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02d      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e8c:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	08db      	lsrs	r3, r3, #3
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	4a6b      	ldr	r2, [pc, #428]	; (8006044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b62      	ldr	r3, [pc, #392]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005ee6:	e087      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006054 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	4b51      	ldr	r3, [pc, #324]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2a:	e065      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b40      	ldr	r3, [pc, #256]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6e:	e043      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800605c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb2:	e021      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005ff8:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	0a5b      	lsrs	r3, r3, #9
 8005ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006002:	3301      	adds	r3, #1
 8006004:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006010:	edd7 6a07 	vldr	s13, [r7, #28]
 8006014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601c:	ee17 3a90 	vmov	r3, s15
 8006020:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006022:	e005      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	61bb      	str	r3, [r7, #24]
    break;
 8006028:	e002      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800602c:	61bb      	str	r3, [r7, #24]
    break;
 800602e:	bf00      	nop
  }

  return sysclockfreq;
 8006030:	69bb      	ldr	r3, [r7, #24]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	58024400 	.word	0x58024400
 8006044:	03d09000 	.word	0x03d09000
 8006048:	003d0900 	.word	0x003d0900
 800604c:	017d7840 	.word	0x017d7840
 8006050:	46000000 	.word	0x46000000
 8006054:	4c742400 	.word	0x4c742400
 8006058:	4a742400 	.word	0x4a742400
 800605c:	4bbebc20 	.word	0x4bbebc20

08006060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006066:	f7ff fe81 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 800606a:	4602      	mov	r2, r0
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	490f      	ldr	r1, [pc, #60]	; (80060b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006078:	5ccb      	ldrb	r3, [r1, r3]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	fa22 f303 	lsr.w	r3, r2, r3
 800609a:	4a07      	ldr	r2, [pc, #28]	; (80060b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800609c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800609e:	4a07      	ldr	r2, [pc, #28]	; (80060bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80060a6:	681b      	ldr	r3, [r3, #0]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	58024400 	.word	0x58024400
 80060b4:	0800c0f0 	.word	0x0800c0f0
 80060b8:	24000004 	.word	0x24000004
 80060bc:	24000000 	.word	0x24000000

080060c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060c4:	f7ff ffcc 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4904      	ldr	r1, [pc, #16]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	58024400 	.word	0x58024400
 80060e8:	0800c0f0 	.word	0x0800c0f0

080060ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060f0:	f7ff ffb6 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4904      	ldr	r1, [pc, #16]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd80      	pop	{r7, pc}
 8006110:	58024400 	.word	0x58024400
 8006114:	0800c0f0 	.word	0x0800c0f0

08006118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006120:	2300      	movs	r3, #0
 8006122:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006124:	2300      	movs	r3, #0
 8006126:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03f      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800613c:	d02a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800613e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006142:	d824      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006148:	d018      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800614a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800614e:	d81e      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006158:	d007      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800615a:	e018      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615c:	4bab      	ldr	r3, [pc, #684]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	4aaa      	ldr	r2, [pc, #680]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006168:	e015      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2102      	movs	r1, #2
 8006170:	4618      	mov	r0, r3
 8006172:	f001 feff 	bl	8007f74 <RCCEx_PLL2_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800617a:	e00c      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 ffa8 	bl	80080d8 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
      break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800619c:	4b9b      	ldr	r3, [pc, #620]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800619e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	4998      	ldr	r1, [pc, #608]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	650b      	str	r3, [r1, #80]	; 0x50
 80061ae:	e001      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d03d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d826      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061e5 	.word	0x080061e5
 80061d4:	080061f3 	.word	0x080061f3
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	0800621d 	.word	0x0800621d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e4:	4b89      	ldr	r3, [pc, #548]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a88      	ldr	r2, [pc, #544]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 febb 	bl	8007f74 <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006202:	e00c      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f001 ff64 	bl	80080d8 <RCCEx_PLL3_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006214:	e003      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
      break;
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800621c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d109      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006224:	4b79      	ldr	r3, [pc, #484]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	f023 0207 	bic.w	r2, r3, #7
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	4976      	ldr	r1, [pc, #472]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006232:	4313      	orrs	r3, r2
 8006234:	650b      	str	r3, [r1, #80]	; 0x50
 8006236:	e001      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d051      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800624e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006252:	d036      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006254:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006258:	d830      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800625a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800625e:	d032      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006264:	d82a      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006266:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800626a:	d02e      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800626c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006270:	d824      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006276:	d018      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627c:	d81e      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006286:	d007      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006288:	e018      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628a:	4b60      	ldr	r3, [pc, #384]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a5f      	ldr	r2, [pc, #380]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006294:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006296:	e019      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fe68 	bl	8007f74 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062a8:	e010      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3324      	adds	r3, #36	; 0x24
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 ff11 	bl	80080d8 <RCCEx_PLL3_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ba:	e007      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	e004      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80062ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062e0:	494a      	ldr	r1, [pc, #296]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	658b      	str	r3, [r1, #88]	; 0x58
 80062e6:	e001      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d051      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006302:	d036      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006304:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006308:	d830      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800630a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800630e:	d032      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006314:	d82a      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800631a:	d02e      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800631c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006320:	d824      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006326:	d018      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632c:	d81e      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006336:	d007      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006338:	e018      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633a:	4b34      	ldr	r3, [pc, #208]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	4a33      	ldr	r2, [pc, #204]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006344:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006346:	e019      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f001 fe10 	bl	8007f74 <RCCEx_PLL2_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006358:	e010      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3324      	adds	r3, #36	; 0x24
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f001 feb9 	bl	80080d8 <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800636a:	e007      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
      break;
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800637a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006382:	4b22      	ldr	r3, [pc, #136]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006390:	491e      	ldr	r1, [pc, #120]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006392:	4313      	orrs	r3, r2
 8006394:	658b      	str	r3, [r1, #88]	; 0x58
 8006396:	e001      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d035      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d01c      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d817      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d00c      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d813      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d016      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d10f      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c4:	4b11      	ldr	r3, [pc, #68]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a10      	ldr	r2, [pc, #64]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80063d0:	e00e      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3304      	adds	r3, #4
 80063d6:	2102      	movs	r1, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fdcb 	bl	8007f74 <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80063e2:	e005      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80063ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006402:	4902      	ldr	r1, [pc, #8]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006408:	e004      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d047      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006428:	d030      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800642a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642e:	d82a      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006430:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006434:	d02c      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006436:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800643a:	d824      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800643c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006440:	d018      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006446:	d81e      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d007      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006452:	e018      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006454:	4bac      	ldr	r3, [pc, #688]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4aab      	ldr	r2, [pc, #684]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006460:	e017      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fd83 	bl	8007f74 <RCCEx_PLL2_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006472:	e00e      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3324      	adds	r3, #36	; 0x24
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fe2c 	bl	80080d8 <RCCEx_PLL3_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006484:	e005      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
      break;
 800648a:	e002      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006498:	4b9b      	ldr	r3, [pc, #620]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	4998      	ldr	r1, [pc, #608]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	650b      	str	r3, [r1, #80]	; 0x50
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d049      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c4:	d02e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80064c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ca:	d828      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064d0:	d02a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80064d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064d6:	d822      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064dc:	d026      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80064de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064e2:	d81c      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e8:	d010      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80064ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ee:	d816      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01d      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d111      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3304      	adds	r3, #4
 80064fe:	2101      	movs	r1, #1
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fd37 	bl	8007f74 <RCCEx_PLL2_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800650a:	e012      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3324      	adds	r3, #36	; 0x24
 8006510:	2101      	movs	r1, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fde0 	bl	80080d8 <RCCEx_PLL3_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800651c:	e009      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
      break;
 8006522:	e006      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006524:	bf00      	nop
 8006526:	e004      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006538:	4b73      	ldr	r3, [pc, #460]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006544:	4970      	ldr	r1, [pc, #448]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	650b      	str	r3, [r1, #80]	; 0x50
 800654a:	e001      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d04b      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006566:	d02e      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800656c:	d828      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006572:	d02a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006578:	d822      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800657a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800657e:	d026      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006584:	d81c      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658a:	d010      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x496>
 800658c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006590:	d816      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01d      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659a:	d111      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	2101      	movs	r1, #1
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fce6 	bl	8007f74 <RCCEx_PLL2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065ac:	e012      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3324      	adds	r3, #36	; 0x24
 80065b2:	2101      	movs	r1, #1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fd8f 	bl	80080d8 <RCCEx_PLL3_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065be:	e009      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]
      break;
 80065c4:	e006      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065c6:	bf00      	nop
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065ca:	bf00      	nop
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065da:	4b4b      	ldr	r3, [pc, #300]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065e8:	4947      	ldr	r1, [pc, #284]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	658b      	str	r3, [r1, #88]	; 0x58
 80065ee:	e001      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006608:	d00e      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800660a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660e:	d814      	bhi.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d015      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006618:	d10f      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661a:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4a3a      	ldr	r2, [pc, #232]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006626:	e00c      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2101      	movs	r1, #1
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fca0 	bl	8007f74 <RCCEx_PLL2_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	75fb      	strb	r3, [r7, #23]
      break;
 800663e:	e000      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006648:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006654:	492c      	ldr	r1, [pc, #176]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006656:	4313      	orrs	r3, r2
 8006658:	650b      	str	r3, [r1, #80]	; 0x50
 800665a:	e001      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d032      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	2b03      	cmp	r3, #3
 8006672:	d81b      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	080066b3 	.word	0x080066b3
 8006680:	0800668d 	.word	0x0800668d
 8006684:	0800669b 	.word	0x0800669b
 8006688:	080066b3 	.word	0x080066b3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668c:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006698:	e00c      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	2102      	movs	r1, #2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 fc67 	bl	8007f74 <RCCEx_PLL2_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
      break;
 80066b0:	e000      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80066b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	f023 0203 	bic.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	4910      	ldr	r1, [pc, #64]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066cc:	e001      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 808a 	beq.w	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a09      	ldr	r2, [pc, #36]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ec:	f7fc f900 	bl	80028f0 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066f2:	e00d      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f4:	f7fc f8fc 	bl	80028f0 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b64      	cmp	r3, #100	; 0x64
 8006700:	d906      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	75fb      	strb	r3, [r7, #23]
        break;
 8006706:	e009      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006708:	58024400 	.word	0x58024400
 800670c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006710:	4bb9      	ldr	r3, [pc, #740]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0eb      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d166      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006722:	4bb6      	ldr	r3, [pc, #728]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800672c:	4053      	eors	r3, r2
 800672e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006732:	2b00      	cmp	r3, #0
 8006734:	d013      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006736:	4bb1      	ldr	r3, [pc, #708]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006740:	4bae      	ldr	r3, [pc, #696]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	4aad      	ldr	r2, [pc, #692]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800674c:	4bab      	ldr	r3, [pc, #684]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	4aaa      	ldr	r2, [pc, #680]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006756:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006758:	4aa8      	ldr	r2, [pc, #672]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006768:	d115      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fc f8c1 	bl	80028f0 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006770:	e00b      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fc f8bd 	bl	80028f0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d902      	bls.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	75fb      	strb	r3, [r7, #23]
            break;
 8006788:	e005      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678a:	4b9c      	ldr	r3, [pc, #624]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0ed      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d126      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067aa:	d10d      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80067ac:	4b93      	ldr	r3, [pc, #588]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067ba:	0919      	lsrs	r1, r3, #4
 80067bc:	4b90      	ldr	r3, [pc, #576]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067be:	400b      	ands	r3, r1
 80067c0:	498e      	ldr	r1, [pc, #568]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	610b      	str	r3, [r1, #16]
 80067c6:	e005      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80067c8:	4b8c      	ldr	r3, [pc, #560]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4a8b      	ldr	r2, [pc, #556]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067d2:	6113      	str	r3, [r2, #16]
 80067d4:	4b89      	ldr	r3, [pc, #548]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e2:	4986      	ldr	r1, [pc, #536]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	670b      	str	r3, [r1, #112]	; 0x70
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	75bb      	strb	r3, [r7, #22]
 80067ee:	e001      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d07e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	2b28      	cmp	r3, #40	; 0x28
 8006806:	d867      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	080068df 	.word	0x080068df
 8006814:	080068d9 	.word	0x080068d9
 8006818:	080068d9 	.word	0x080068d9
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068d9 	.word	0x080068d9
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068b5 	.word	0x080068b5
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068c7 	.word	0x080068c7
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068d9 	.word	0x080068d9
 800685c:	080068d9 	.word	0x080068d9
 8006860:	080068d9 	.word	0x080068d9
 8006864:	080068d9 	.word	0x080068d9
 8006868:	080068d9 	.word	0x080068d9
 800686c:	080068d9 	.word	0x080068d9
 8006870:	080068df 	.word	0x080068df
 8006874:	080068d9 	.word	0x080068d9
 8006878:	080068d9 	.word	0x080068d9
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068d9 	.word	0x080068d9
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068df 	.word	0x080068df
 8006894:	080068d9 	.word	0x080068d9
 8006898:	080068d9 	.word	0x080068d9
 800689c:	080068d9 	.word	0x080068d9
 80068a0:	080068d9 	.word	0x080068d9
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068d9 	.word	0x080068d9
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	080068df 	.word	0x080068df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	2101      	movs	r1, #1
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fb5a 	bl	8007f74 <RCCEx_PLL2_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068c4:	e00c      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3324      	adds	r3, #36	; 0x24
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 fc03 	bl	80080d8 <RCCEx_PLL3_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068d6:	e003      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
      break;
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80068de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068e6:	4b45      	ldr	r3, [pc, #276]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	4942      	ldr	r1, [pc, #264]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	654b      	str	r3, [r1, #84]	; 0x54
 80068f8:	e001      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d037      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	2b05      	cmp	r3, #5
 8006910:	d820      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800695b 	.word	0x0800695b
 800691c:	08006931 	.word	0x08006931
 8006920:	08006943 	.word	0x08006943
 8006924:	0800695b 	.word	0x0800695b
 8006928:	0800695b 	.word	0x0800695b
 800692c:	0800695b 	.word	0x0800695b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fb1c 	bl	8007f74 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3324      	adds	r3, #36	; 0x24
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fbc5 	bl	80080d8 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006952:	e003      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
      break;
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800695a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f023 0207 	bic.w	r2, r3, #7
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	4923      	ldr	r1, [pc, #140]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006970:	4313      	orrs	r3, r2
 8006972:	654b      	str	r3, [r1, #84]	; 0x54
 8006974:	e001      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d040      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800698c:	2b05      	cmp	r3, #5
 800698e:	d821      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069db 	.word	0x080069db
 800699c:	080069b1 	.word	0x080069b1
 80069a0:	080069c3 	.word	0x080069c3
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069db 	.word	0x080069db
 80069ac:	080069db 	.word	0x080069db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	2101      	movs	r1, #1
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fadc 	bl	8007f74 <RCCEx_PLL2_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3324      	adds	r3, #36	; 0x24
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fb85 	bl	80080d8 <RCCEx_PLL3_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069d2:	e003      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80069da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d110      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e6:	f023 0207 	bic.w	r2, r3, #7
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f0:	4902      	ldr	r1, [pc, #8]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	658b      	str	r3, [r1, #88]	; 0x58
 80069f6:	e007      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80069f8:	58024800 	.word	0x58024800
 80069fc:	58024400 	.word	0x58024400
 8006a00:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d04b      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a1e:	d02e      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a24:	d828      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d02a      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d822      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a36:	d026      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006a38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a3c:	d81c      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a42:	d010      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a48:	d816      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01d      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a52:	d111      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fa8a 	bl	8007f74 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a64:	e012      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fb33 	bl	80080d8 <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a76:	e009      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e006      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e004      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a82:	bf00      	nop
 8006a84:	e002      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a86:	bf00      	nop
 8006a88:	e000      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a92:	4bb2      	ldr	r3, [pc, #712]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	49ae      	ldr	r1, [pc, #696]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	654b      	str	r3, [r1, #84]	; 0x54
 8006aa6:	e001      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d04b      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006abe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ac2:	d02e      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006ac4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ac8:	d828      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ace:	d02a      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad4:	d822      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006ad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ada:	d026      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ae0:	d81c      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aec:	d816      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01d      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af6:	d111      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 fa38 	bl	8007f74 <RCCEx_PLL2_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b08:	e012      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3324      	adds	r3, #36	; 0x24
 8006b0e:	2102      	movs	r1, #2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fae1 	bl	80080d8 <RCCEx_PLL3_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b1a:	e009      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b22:	bf00      	nop
 8006b24:	e004      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b26:	bf00      	nop
 8006b28:	e002      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b36:	4b89      	ldr	r3, [pc, #548]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b44:	4985      	ldr	r1, [pc, #532]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	658b      	str	r3, [r1, #88]	; 0x58
 8006b4a:	e001      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d04b      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b66:	d02e      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006b68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b6c:	d828      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d02a      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b78:	d822      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b7e:	d026      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006b80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b84:	d81c      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8a:	d010      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b90:	d816      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01d      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9a:	d111      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 f9e6 	bl	8007f74 <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bac:	e012      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3324      	adds	r3, #36	; 0x24
 8006bb2:	2102      	movs	r1, #2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fa8f 	bl	80080d8 <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bbe:	e009      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	e006      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e004      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bda:	4b60      	ldr	r3, [pc, #384]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006be8:	495c      	ldr	r1, [pc, #368]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	658b      	str	r3, [r1, #88]	; 0x58
 8006bee:	e001      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d018      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c08:	d10a      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3324      	adds	r3, #36	; 0x24
 8006c0e:	2102      	movs	r1, #2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fa61 	bl	80080d8 <RCCEx_PLL3_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c20:	4b4e      	ldr	r3, [pc, #312]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c2c:	494b      	ldr	r1, [pc, #300]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01a      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c48:	d10a      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fa41 	bl	80080d8 <RCCEx_PLL3_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c60:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	493b      	ldr	r1, [pc, #236]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d034      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c90:	d817      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9a:	d009      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c9c:	e011      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 f965 	bl	8007f74 <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cae:	e00c      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3324      	adds	r3, #36	; 0x24
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fa0e 	bl	80080d8 <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cc0:	e003      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cd0:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cde:	491f      	ldr	r1, [pc, #124]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce4:	e001      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d036      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d00:	d01c      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d06:	d816      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0c:	d003      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d12:	d007      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006d14:	e00f      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d16:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d22:	e00c      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f9d4 	bl	80080d8 <RCCEx_PLL3_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d34:	e003      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d52:	4902      	ldr	r1, [pc, #8]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	654b      	str	r3, [r1, #84]	; 0x54
 8006d58:	e004      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006d5a:	bf00      	nop
 8006d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d029      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d007      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006d7e:	e00f      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a60      	ldr	r2, [pc, #384]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d8c:	e00b      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	2102      	movs	r1, #2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 f8ed 	bl	8007f74 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d9e:	e002      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
      break;
 8006da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006dac:	4b56      	ldr	r3, [pc, #344]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	4953      	ldr	r1, [pc, #332]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006dbe:	e001      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3324      	adds	r3, #36	; 0x24
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 f97e 	bl	80080d8 <RCCEx_PLL3_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d030      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfa:	d017      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e00:	d811      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d013      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d80b      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d010      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e16:	d106      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a3a      	ldr	r2, [pc, #232]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e24:	e007      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e2c:	bf00      	nop
 8006e2e:	e002      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e30:	bf00      	nop
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e3c:	4b32      	ldr	r3, [pc, #200]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e48:	492f      	ldr	r1, [pc, #188]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	654b      	str	r3, [r1, #84]	; 0x54
 8006e4e:	e001      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6c:	4926      	ldr	r1, [pc, #152]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e7e:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8a:	491f      	ldr	r1, [pc, #124]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00d      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9c:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea6:	6113      	str	r3, [r2, #16]
 8006ea8:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eb2:	4915      	ldr	r1, [pc, #84]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da08      	bge.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ecc:	490e      	ldr	r1, [pc, #56]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eec:	4906      	ldr	r1, [pc, #24]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006ef2:	7dbb      	ldrb	r3, [r7, #22]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400

08006f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b090      	sub	sp, #64	; 0x40
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	f040 8089 	bne.w	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006f1e:	4b95      	ldr	r3, [pc, #596]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d87d      	bhi.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f49 	.word	0x08006f49
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08007025 	.word	0x08007025
 8006f44:	08006fb5 	.word	0x08006fb5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f48:	4b8a      	ldr	r3, [pc, #552]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f54:	d107      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 feb8 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f64:	e3ed      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f6a:	e3ea      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f6c:	4b81      	ldr	r3, [pc, #516]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f78:	d107      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7a:	f107 0318 	add.w	r3, r7, #24
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fbfe 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f88:	e3db      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f8e:	e3d8      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f90:	4b78      	ldr	r3, [pc, #480]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f9c:	d107      	bne.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f9e:	f107 030c 	add.w	r3, r7, #12
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fd40 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fac:	e3c9      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb2:	e3c6      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fb4:	4b6f      	ldr	r3, [pc, #444]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fbe:	4b6d      	ldr	r3, [pc, #436]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fd0:	4b68      	ldr	r3, [pc, #416]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	08db      	lsrs	r3, r3, #3
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	4a67      	ldr	r2, [pc, #412]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe2:	e01e      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fe4:	4b63      	ldr	r3, [pc, #396]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff0:	d106      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ff8:	d102      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ffa:	4b60      	ldr	r3, [pc, #384]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffe:	e010      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007000:	4b5c      	ldr	r3, [pc, #368]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800700c:	d106      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007014:	d102      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007016:	4b5a      	ldr	r3, [pc, #360]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007020:	e38f      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007022:	e38e      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007024:	4b57      	ldr	r3, [pc, #348]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007028:	e38b      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702e:	e388      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007036:	f040 80a7 	bne.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800703a:	4b4e      	ldr	r3, [pc, #312]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800703c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007042:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800704a:	d054      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007052:	f200 808b 	bhi.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800705c:	f000 8083 	beq.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007066:	f200 8081 	bhi.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007070:	d02f      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007078:	d878      	bhi.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007086:	d012      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007088:	e070      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800708a:	4b3a      	ldr	r3, [pc, #232]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007096:	d107      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fe17 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070a6:	e34c      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ac:	e349      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ba:	d107      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fb5d 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070ca:	e33a      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d0:	e337      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d2:	4b28      	ldr	r3, [pc, #160]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fc9f 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070ee:	e328      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f4:	e325      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070f6:	4b1f      	ldr	r3, [pc, #124]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070fe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007100:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d10c      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800710c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d109      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007124:	e01e      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007126:	4b13      	ldr	r3, [pc, #76]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007132:	d106      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007140:	e010      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007142:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800714e:	d106      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d102      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007158:	4b09      	ldr	r3, [pc, #36]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007162:	e2ee      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007164:	e2ed      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716a:	e2ea      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007170:	e2e7      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007172:	bf00      	nop
 8007174:	58024400 	.word	0x58024400
 8007178:	03d09000 	.word	0x03d09000
 800717c:	003d0900 	.word	0x003d0900
 8007180:	017d7840 	.word	0x017d7840
 8007184:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718e:	f040 809c 	bne.w	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007192:	4b9e      	ldr	r3, [pc, #632]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800719a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071a2:	d054      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071aa:	f200 808b 	bhi.w	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071b4:	f000 8083 	beq.w	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071be:	f200 8081 	bhi.w	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071c8:	d02f      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d0:	d878      	bhi.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071de:	d012      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80071e0:	e070      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071e2:	4b8a      	ldr	r3, [pc, #552]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ee:	d107      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fd6b 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071fe:	e2a0      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007204:	e29d      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007206:	4b81      	ldr	r3, [pc, #516]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800720e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007212:	d107      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007214:	f107 0318 	add.w	r3, r7, #24
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fab1 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007222:	e28e      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007228:	e28b      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800722a:	4b78      	ldr	r3, [pc, #480]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007236:	d107      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fbf3 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007246:	e27c      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800724c:	e279      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800724e:	4b6f      	ldr	r3, [pc, #444]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007252:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007256:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007258:	4b6c      	ldr	r3, [pc, #432]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b04      	cmp	r3, #4
 8007262:	d10c      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800726a:	4b68      	ldr	r3, [pc, #416]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	4a66      	ldr	r2, [pc, #408]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800727c:	e01e      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800727e:	4b63      	ldr	r3, [pc, #396]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728a:	d106      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007294:	4b5f      	ldr	r3, [pc, #380]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007298:	e010      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800729a:	4b5c      	ldr	r3, [pc, #368]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a6:	d106      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ae:	d102      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80072b0:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b4:	e002      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80072ba:	e242      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80072bc:	e241      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072be:	4b57      	ldr	r3, [pc, #348]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c2:	e23e      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c8:	e23b      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d0:	f040 80a6 	bne.w	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80072d4:	4b4d      	ldr	r3, [pc, #308]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80072dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e4:	d054      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ec:	f200 808b 	bhi.w	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072f6:	f000 8083 	beq.w	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007300:	f200 8081 	bhi.w	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730a:	d02f      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007312:	d878      	bhi.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007320:	d012      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007322:	e070      	b.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007324:	4b39      	ldr	r3, [pc, #228]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007330:	d107      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fcca 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007340:	e1ff      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007346:	e1fc      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007348:	4b30      	ldr	r3, [pc, #192]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007354:	d107      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007356:	f107 0318 	add.w	r3, r7, #24
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fa10 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007364:	e1ed      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736a:	e1ea      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800736c:	4b27      	ldr	r3, [pc, #156]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007378:	d107      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fb52 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007388:	e1db      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800738e:	e1d8      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007398:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800739a:	4b1c      	ldr	r3, [pc, #112]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073ac:	4b17      	ldr	r3, [pc, #92]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	08db      	lsrs	r3, r3, #3
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	4a16      	ldr	r2, [pc, #88]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073be:	e01e      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073cc:	d106      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d4:	d102      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073da:	e010      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e8:	d106      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f0:	d102      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80073fc:	e1a1      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80073fe:	e1a0      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007404:	e19d      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740a:	e19a      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800740c:	58024400 	.word	0x58024400
 8007410:	03d09000 	.word	0x03d09000
 8007414:	003d0900 	.word	0x003d0900
 8007418:	017d7840 	.word	0x017d7840
 800741c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007426:	d173      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007428:	4b9a      	ldr	r3, [pc, #616]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007430:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007438:	d02f      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007440:	d863      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744e:	d012      	beq.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007450:	e05b      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007452:	4b90      	ldr	r3, [pc, #576]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800745e:	d107      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007460:	f107 0318 	add.w	r3, r7, #24
 8007464:	4618      	mov	r0, r3
 8007466:	f000 f98b 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800746e:	e168      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007474:	e165      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007476:	4b87      	ldr	r3, [pc, #540]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800747e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007482:	d107      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007484:	f107 030c 	add.w	r3, r7, #12
 8007488:	4618      	mov	r0, r3
 800748a:	f000 facd 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007492:	e156      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007498:	e153      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800749a:	4b7e      	ldr	r3, [pc, #504]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800749c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074a4:	4b7b      	ldr	r3, [pc, #492]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d10c      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074b6:	4b77      	ldr	r3, [pc, #476]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	4a75      	ldr	r2, [pc, #468]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80074c2:	fa22 f303 	lsr.w	r3, r2, r3
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c8:	e01e      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ca:	4b72      	ldr	r3, [pc, #456]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d6:	d106      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074de:	d102      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074e0:	4b6e      	ldr	r3, [pc, #440]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e4:	e010      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074e6:	4b6b      	ldr	r3, [pc, #428]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f2:	d106      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fa:	d102      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80074fc:	4b68      	ldr	r3, [pc, #416]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007500:	e002      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007506:	e11c      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007508:	e11b      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800750e:	e118      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007516:	d133      	bne.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007518:	4b5e      	ldr	r3, [pc, #376]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800751a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007520:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d004      	beq.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752e:	d012      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007530:	e023      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007532:	4b58      	ldr	r3, [pc, #352]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800753e:	d107      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fbc3 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800754e:	e0f8      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007554:	e0f5      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007556:	4b4f      	ldr	r3, [pc, #316]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800755e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007562:	d107      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007564:	f107 0318 	add.w	r3, r7, #24
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f909 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007572:	e0e6      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007578:	e0e3      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800757e:	e0e0      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007586:	f040 808d 	bne.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800758a:	4b42      	ldr	r3, [pc, #264]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800759a:	d06b      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a2:	d874      	bhi.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075aa:	d056      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d86c      	bhi.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075ba:	d03b      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075c2:	d864      	bhi.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ca:	d021      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d2:	d85c      	bhi.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075e0:	d004      	beq.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80075e2:	e054      	b.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80075e4:	f000 f8b6 	bl	8007754 <HAL_RCCEx_GetD3PCLK1Freq>
 80075e8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80075ea:	e0aa      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075f8:	d107      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075fa:	f107 0318 	add.w	r3, r7, #24
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f8be 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007608:	e09b      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760e:	e098      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007610:	4b20      	ldr	r3, [pc, #128]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761c:	d107      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800761e:	f107 030c 	add.w	r3, r7, #12
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fa00 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800762c:	e089      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007632:	e086      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007634:	4b17      	ldr	r3, [pc, #92]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b04      	cmp	r3, #4
 800763e:	d109      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007640:	4b14      	ldr	r3, [pc, #80]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	08db      	lsrs	r3, r3, #3
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	4a13      	ldr	r2, [pc, #76]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007652:	e076      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007658:	e073      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800765a:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d102      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800766c:	e069      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007672:	e066      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007674:	4b07      	ldr	r3, [pc, #28]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007680:	d102      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8007682:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007686:	e05c      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768c:	e059      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007692:	e056      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007694:	58024400 	.word	0x58024400
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076aa:	d148      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80076ac:	4b27      	ldr	r3, [pc, #156]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076bc:	d02a      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c4:	d838      	bhi.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076d2:	d00d      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80076d4:	e030      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076d6:	4b1d      	ldr	r3, [pc, #116]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e2:	d102      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80076e4:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076e8:	e02b      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ee:	e028      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076f0:	4b16      	ldr	r3, [pc, #88]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076fc:	d107      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fae4 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800770c:	e019      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007712:	e016      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007720:	d107      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007722:	f107 0318 	add.w	r3, r7, #24
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f82a 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007730:	e007      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007736:	e004      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773c:	e001      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007744:	4618      	mov	r0, r3
 8007746:	3740      	adds	r7, #64	; 0x40
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	58024400 	.word	0x58024400
 8007750:	017d7840 	.word	0x017d7840

08007754 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007758:	f7fe fc82 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	091b      	lsrs	r3, r3, #4
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4904      	ldr	r1, [pc, #16]	; (800777c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}
 8007778:	58024400 	.word	0x58024400
 800777c:	0800c0f0 	.word	0x0800c0f0

08007780 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007780:	b480      	push	{r7}
 8007782:	b089      	sub	sp, #36	; 0x24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007788:	4ba1      	ldr	r3, [pc, #644]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007792:	4b9f      	ldr	r3, [pc, #636]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	0b1b      	lsrs	r3, r3, #12
 8007798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800779c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800779e:	4b9c      	ldr	r3, [pc, #624]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	091b      	lsrs	r3, r3, #4
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077aa:	4b99      	ldr	r3, [pc, #612]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	08db      	lsrs	r3, r3, #3
 80077b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8111 	beq.w	80079f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f000 8083 	beq.w	80078dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	f200 80a1 	bhi.w	8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d056      	beq.n	8007898 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077ea:	e099      	b.n	8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ec:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d02d      	beq.n	8007854 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077f8:	4b85      	ldr	r3, [pc, #532]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	08db      	lsrs	r3, r3, #3
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	4a84      	ldr	r2, [pc, #528]	; (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007822:	4b7b      	ldr	r3, [pc, #492]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007832:	ed97 6a03 	vldr	s12, [r7, #12]
 8007836:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800783a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007852:	e087      	b.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	4b6a      	ldr	r3, [pc, #424]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a03 	vldr	s12, [r7, #12]
 800787a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007896:	e065      	b.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078aa:	4b59      	ldr	r3, [pc, #356]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80078be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078da:	e043      	b.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b48      	ldr	r3, [pc, #288]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007902:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800791e:	e021      	b.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b37      	ldr	r3, [pc, #220]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a03 	vldr	s12, [r7, #12]
 8007946:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007962:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007964:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	0a5b      	lsrs	r3, r3, #9
 800796a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800797a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798a:	ee17 2a90 	vmov	r2, s15
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007992:	4b1f      	ldr	r3, [pc, #124]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	0c1b      	lsrs	r3, r3, #16
 8007998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b8:	ee17 2a90 	vmov	r2, s15
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80079c0:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	0e1b      	lsrs	r3, r3, #24
 80079c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079da:	edd7 6a07 	vldr	s13, [r7, #28]
 80079de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e6:	ee17 2a90 	vmov	r2, s15
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079ee:	e008      	b.n	8007a02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	609a      	str	r2, [r3, #8]
}
 8007a02:	bf00      	nop
 8007a04:	3724      	adds	r7, #36	; 0x24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	58024400 	.word	0x58024400
 8007a14:	03d09000 	.word	0x03d09000
 8007a18:	46000000 	.word	0x46000000
 8007a1c:	4c742400 	.word	0x4c742400
 8007a20:	4a742400 	.word	0x4a742400
 8007a24:	4bbebc20 	.word	0x4bbebc20

08007a28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b089      	sub	sp, #36	; 0x24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a30:	4ba1      	ldr	r3, [pc, #644]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a3a:	4b9f      	ldr	r3, [pc, #636]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	0d1b      	lsrs	r3, r3, #20
 8007a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a46:	4b9c      	ldr	r3, [pc, #624]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a52:	4b99      	ldr	r3, [pc, #612]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a56:	08db      	lsrs	r3, r3, #3
 8007a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 8111 	beq.w	8007c98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	f000 8083 	beq.w	8007b84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	f200 80a1 	bhi.w	8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d056      	beq.n	8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a92:	e099      	b.n	8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a94:	4b88      	ldr	r3, [pc, #544]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0320 	and.w	r3, r3, #32
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d02d      	beq.n	8007afc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007aa0:	4b85      	ldr	r3, [pc, #532]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	08db      	lsrs	r3, r3, #3
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	4a84      	ldr	r2, [pc, #528]	; (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	ee07 3a90 	vmov	s15, r3
 8007ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aca:	4b7b      	ldr	r3, [pc, #492]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ade:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007afa:	e087      	b.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0e:	4b6a      	ldr	r3, [pc, #424]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b3e:	e065      	b.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b52:	4b59      	ldr	r3, [pc, #356]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b82:	e043      	b.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b48      	ldr	r3, [pc, #288]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007baa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bc6:	e021      	b.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bda:	4b37      	ldr	r3, [pc, #220]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c0c:	4b2a      	ldr	r3, [pc, #168]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	0a5b      	lsrs	r3, r3, #9
 8007c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c32:	ee17 2a90 	vmov	r2, s15
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c3a:	4b1f      	ldr	r3, [pc, #124]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	0c1b      	lsrs	r3, r3, #16
 8007c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c44:	ee07 3a90 	vmov	s15, r3
 8007c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c60:	ee17 2a90 	vmov	r2, s15
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	0e1b      	lsrs	r3, r3, #24
 8007c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8e:	ee17 2a90 	vmov	r2, s15
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c96:	e008      	b.n	8007caa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	609a      	str	r2, [r3, #8]
}
 8007caa:	bf00      	nop
 8007cac:	3724      	adds	r7, #36	; 0x24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	03d09000 	.word	0x03d09000
 8007cc0:	46000000 	.word	0x46000000
 8007cc4:	4c742400 	.word	0x4c742400
 8007cc8:	4a742400 	.word	0x4a742400
 8007ccc:	4bbebc20 	.word	0x4bbebc20

08007cd0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	; 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd8:	4ba0      	ldr	r3, [pc, #640]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007ce2:	4b9e      	ldr	r3, [pc, #632]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce6:	091b      	lsrs	r3, r3, #4
 8007ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cee:	4b9b      	ldr	r3, [pc, #620]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cf8:	4b98      	ldr	r3, [pc, #608]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	08db      	lsrs	r3, r3, #3
 8007cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8111 	beq.w	8007f3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	f000 8083 	beq.w	8007e2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	f200 80a1 	bhi.w	8007e6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d056      	beq.n	8007de6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d38:	e099      	b.n	8007e6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d3a:	4b88      	ldr	r3, [pc, #544]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02d      	beq.n	8007da2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d46:	4b85      	ldr	r3, [pc, #532]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	08db      	lsrs	r3, r3, #3
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	4a83      	ldr	r2, [pc, #524]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d52:	fa22 f303 	lsr.w	r3, r2, r3
 8007d56:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d70:	4b7a      	ldr	r3, [pc, #488]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007da0:	e087      	b.n	8007eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db4:	4b69      	ldr	r3, [pc, #420]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007de4:	e065      	b.n	8007eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df8:	4b58      	ldr	r3, [pc, #352]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e00:	ee07 3a90 	vmov	s15, r3
 8007e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e28:	e043      	b.n	8007eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3c:	4b47      	ldr	r3, [pc, #284]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e6c:	e021      	b.n	8007eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e78:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e80:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e88:	ee07 3a90 	vmov	s15, r3
 8007e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007eb2:	4b2a      	ldr	r3, [pc, #168]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	0a5b      	lsrs	r3, r3, #9
 8007eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed8:	ee17 2a90 	vmov	r2, s15
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee4:	0c1b      	lsrs	r3, r3, #16
 8007ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f06:	ee17 2a90 	vmov	r2, s15
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f0e:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	0e1b      	lsrs	r3, r3, #24
 8007f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f34:	ee17 2a90 	vmov	r2, s15
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f3c:	e008      	b.n	8007f50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	609a      	str	r2, [r3, #8]
}
 8007f50:	bf00      	nop
 8007f52:	3724      	adds	r7, #36	; 0x24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	03d09000 	.word	0x03d09000
 8007f64:	46000000 	.word	0x46000000
 8007f68:	4c742400 	.word	0x4c742400
 8007f6c:	4a742400 	.word	0x4a742400
 8007f70:	4bbebc20 	.word	0x4bbebc20

08007f74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f82:	4b53      	ldr	r3, [pc, #332]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d101      	bne.n	8007f92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e099      	b.n	80080c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f92:	4b4f      	ldr	r3, [pc, #316]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a4e      	ldr	r2, [pc, #312]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f9e:	f7fa fca7 	bl	80028f0 <HAL_GetTick>
 8007fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fa4:	e008      	b.n	8007fb8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fa6:	f7fa fca3 	bl	80028f0 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e086      	b.n	80080c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fb8:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f0      	bne.n	8007fa6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fc4:	4b42      	ldr	r3, [pc, #264]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	493f      	ldr	r1, [pc, #252]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	628b      	str	r3, [r1, #40]	; 0x28
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	025b      	lsls	r3, r3, #9
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	041b      	lsls	r3, r3, #16
 8007ff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	3b01      	subs	r3, #1
 8008002:	061b      	lsls	r3, r3, #24
 8008004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008008:	4931      	ldr	r1, [pc, #196]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800800a:	4313      	orrs	r3, r2
 800800c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800800e:	4b30      	ldr	r3, [pc, #192]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	492d      	ldr	r1, [pc, #180]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800801c:	4313      	orrs	r3, r2
 800801e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008020:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	f023 0220 	bic.w	r2, r3, #32
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	4928      	ldr	r1, [pc, #160]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800802e:	4313      	orrs	r3, r2
 8008030:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008032:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008038:	f023 0310 	bic.w	r3, r3, #16
 800803c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800803e:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008042:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <RCCEx_PLL2_Config+0x160>)
 8008044:	4013      	ands	r3, r2
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	69d2      	ldr	r2, [r2, #28]
 800804a:	00d2      	lsls	r2, r2, #3
 800804c:	4920      	ldr	r1, [pc, #128]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008052:	4b1f      	ldr	r3, [pc, #124]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008058:	f043 0310 	orr.w	r3, r3, #16
 800805c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d106      	bne.n	8008072 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008064:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800806a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800806e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008070:	e00f      	b.n	8008092 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d106      	bne.n	8008086 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008078:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800807e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008084:	e005      	b.n	8008092 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	4a11      	ldr	r2, [pc, #68]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800808c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008090:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a0e      	ldr	r2, [pc, #56]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800809c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809e:	f7fa fc27 	bl	80028f0 <HAL_GetTick>
 80080a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080a4:	e008      	b.n	80080b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a6:	f7fa fc23 	bl	80028f0 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e006      	b.n	80080c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0f0      	beq.n	80080a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
 80080d4:	ffff0007 	.word	0xffff0007

080080d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080e6:	4b53      	ldr	r3, [pc, #332]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d101      	bne.n	80080f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e099      	b.n	800822a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080f6:	4b4f      	ldr	r3, [pc, #316]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a4e      	ldr	r2, [pc, #312]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008102:	f7fa fbf5 	bl	80028f0 <HAL_GetTick>
 8008106:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008108:	e008      	b.n	800811c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800810a:	f7fa fbf1 	bl	80028f0 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e086      	b.n	800822a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800811c:	4b45      	ldr	r3, [pc, #276]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f0      	bne.n	800810a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008128:	4b42      	ldr	r3, [pc, #264]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	051b      	lsls	r3, r3, #20
 8008136:	493f      	ldr	r1, [pc, #252]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008138:	4313      	orrs	r3, r2
 800813a:	628b      	str	r3, [r1, #40]	; 0x28
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	3b01      	subs	r3, #1
 800814c:	025b      	lsls	r3, r3, #9
 800814e:	b29b      	uxth	r3, r3
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	3b01      	subs	r3, #1
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	3b01      	subs	r3, #1
 8008166:	061b      	lsls	r3, r3, #24
 8008168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800816c:	4931      	ldr	r1, [pc, #196]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800816e:	4313      	orrs	r3, r2
 8008170:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008172:	4b30      	ldr	r3, [pc, #192]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	492d      	ldr	r1, [pc, #180]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008180:	4313      	orrs	r3, r2
 8008182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008184:	4b2b      	ldr	r3, [pc, #172]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4928      	ldr	r1, [pc, #160]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008192:	4313      	orrs	r3, r2
 8008194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008196:	4b27      	ldr	r3, [pc, #156]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	4a26      	ldr	r2, [pc, #152]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800819c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a6:	4b24      	ldr	r3, [pc, #144]	; (8008238 <RCCEx_PLL3_Config+0x160>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	69d2      	ldr	r2, [r2, #28]
 80081ae:	00d2      	lsls	r2, r2, #3
 80081b0:	4920      	ldr	r1, [pc, #128]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081b6:	4b1f      	ldr	r3, [pc, #124]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081c8:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	4a19      	ldr	r2, [pc, #100]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081d4:	e00f      	b.n	80081f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d106      	bne.n	80081ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081dc:	4b15      	ldr	r3, [pc, #84]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	4a14      	ldr	r2, [pc, #80]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081e8:	e005      	b.n	80081f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	4a11      	ldr	r2, [pc, #68]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a0e      	ldr	r2, [pc, #56]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008202:	f7fa fb75 	bl	80028f0 <HAL_GetTick>
 8008206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008208:	e008      	b.n	800821c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800820a:	f7fa fb71 	bl	80028f0 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e006      	b.n	800822a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0f0      	beq.n	800820a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	58024400 	.word	0x58024400
 8008238:	ffff0007 	.word	0xffff0007

0800823c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d067      	beq.n	800831e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7f9 fedc 	bl	8002020 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	22ca      	movs	r2, #202	; 0xca
 8008276:	625a      	str	r2, [r3, #36]	; 0x24
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2253      	movs	r2, #83	; 0x53
 800827e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f99f 	bl	80085c4 <RTC_EnterInitMode>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d13b      	bne.n	8008308 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6899      	ldr	r1, [r3, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <HAL_RTC_Init+0xec>)
 800829c:	400b      	ands	r3, r1
 800829e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6899      	ldr	r1, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	431a      	orrs	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	0419      	lsls	r1, r3, #16
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9ab 	bl	800862c <RTC_ExitInitMode>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d113      	bne.n	8008308 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0203 	bic.w	r2, r2, #3
 80082ee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69da      	ldr	r2, [r3, #28]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	ff8fffbf 	.word	0xff8fffbf

0800832c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_RTC_SetTime+0x1a>
 8008342:	2302      	movs	r3, #2
 8008344:	e089      	b.n	800845a <HAL_RTC_SetTime+0x12e>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2202      	movs	r2, #2
 8008352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	22ca      	movs	r2, #202	; 0xca
 800835c:	625a      	str	r2, [r3, #36]	; 0x24
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2253      	movs	r2, #83	; 0x53
 8008364:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f92c 	bl	80085c4 <RTC_EnterInitMode>
 800836c:	4603      	mov	r3, r0
 800836e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008370:	7cfb      	ldrb	r3, [r7, #19]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d161      	bne.n	800843a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d126      	bne.n	80083ca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f987 	bl	80086a8 <RTC_ByteToBcd2>
 800839a:	4603      	mov	r3, r0
 800839c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f980 	bl	80086a8 <RTC_ByteToBcd2>
 80083a8:	4603      	mov	r3, r0
 80083aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	789b      	ldrb	r3, [r3, #2]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f978 	bl	80086a8 <RTC_ByteToBcd2>
 80083b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	78db      	ldrb	r3, [r3, #3]
 80083c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]
 80083c8:	e018      	b.n	80083fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	78db      	ldrb	r3, [r3, #3]
 80083f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	6979      	ldr	r1, [r7, #20]
 8008402:	4b18      	ldr	r3, [pc, #96]	; (8008464 <HAL_RTC_SetTime+0x138>)
 8008404:	400b      	ands	r3, r1
 8008406:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008416:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6899      	ldr	r1, [r3, #8]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	431a      	orrs	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 f8fb 	bl	800862c <RTC_ExitInitMode>
 8008436:	4603      	mov	r3, r0
 8008438:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	22ff      	movs	r2, #255	; 0xff
 8008440:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008442:	7cfb      	ldrb	r3, [r7, #19]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d103      	bne.n	8008450 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008458:	7cfb      	ldrb	r3, [r7, #19]
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	bd90      	pop	{r4, r7, pc}
 8008462:	bf00      	nop
 8008464:	007f7f7f 	.word	0x007f7f7f

08008468 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008468:	b590      	push	{r4, r7, lr}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d101      	bne.n	8008482 <HAL_RTC_SetDate+0x1a>
 800847e:	2302      	movs	r3, #2
 8008480:	e073      	b.n	800856a <HAL_RTC_SetDate+0x102>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2202      	movs	r2, #2
 800848e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10e      	bne.n	80084b6 <HAL_RTC_SetDate+0x4e>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	f023 0310 	bic.w	r3, r3, #16
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	330a      	adds	r3, #10
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d11c      	bne.n	80084f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f8f1 	bl	80086a8 <RTC_ByteToBcd2>
 80084c6:	4603      	mov	r3, r0
 80084c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f8ea 	bl	80086a8 <RTC_ByteToBcd2>
 80084d4:	4603      	mov	r3, r0
 80084d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	789b      	ldrb	r3, [r3, #2]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f8e2 	bl	80086a8 <RTC_ByteToBcd2>
 80084e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e00e      	b.n	8008514 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	78db      	ldrb	r3, [r3, #3]
 80084fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008502:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008508:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	22ca      	movs	r2, #202	; 0xca
 800851a:	625a      	str	r2, [r3, #36]	; 0x24
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2253      	movs	r2, #83	; 0x53
 8008522:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f84d 	bl	80085c4 <RTC_EnterInitMode>
 800852a:	4603      	mov	r3, r0
 800852c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800852e:	7cfb      	ldrb	r3, [r7, #19]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	6979      	ldr	r1, [r7, #20]
 800853a:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <HAL_RTC_SetDate+0x10c>)
 800853c:	400b      	ands	r3, r1
 800853e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f873 	bl	800862c <RTC_ExitInitMode>
 8008546:	4603      	mov	r3, r0
 8008548:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	22ff      	movs	r2, #255	; 0xff
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008552:	7cfb      	ldrb	r3, [r7, #19]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008568:	7cfb      	ldrb	r3, [r7, #19]


}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	bd90      	pop	{r4, r7, pc}
 8008572:	bf00      	nop
 8008574:	00ffff3f 	.word	0x00ffff3f

08008578 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800858e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008590:	f7fa f9ae 	bl	80028f0 <HAL_GetTick>
 8008594:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008596:	e009      	b.n	80085ac <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008598:	f7fa f9aa 	bl	80028f0 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085a6:	d901      	bls.n	80085ac <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e007      	b.n	80085bc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0ee      	beq.n	8008598 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d120      	bne.n	8008620 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80085e8:	f7fa f982 	bl	80028f0 <HAL_GetTick>
 80085ec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80085ee:	e00d      	b.n	800860c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80085f0:	f7fa f97e 	bl	80028f0 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085fe:	d905      	bls.n	800860c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2203      	movs	r2, #3
 8008608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <RTC_EnterInitMode+0x5c>
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d1e7      	bne.n	80085f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008638:	4b1a      	ldr	r3, [pc, #104]	; (80086a4 <RTC_ExitInitMode+0x78>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	4a19      	ldr	r2, [pc, #100]	; (80086a4 <RTC_ExitInitMode+0x78>)
 800863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008642:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008644:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <RTC_ExitInitMode+0x78>)
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10c      	bne.n	800866a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff ff91 	bl	8008578 <HAL_RTC_WaitForSynchro>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01e      	beq.n	800869a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2203      	movs	r2, #3
 8008660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	73fb      	strb	r3, [r7, #15]
 8008668:	e017      	b.n	800869a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800866a:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <RTC_ExitInitMode+0x78>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	4a0d      	ldr	r2, [pc, #52]	; (80086a4 <RTC_ExitInitMode+0x78>)
 8008670:	f023 0320 	bic.w	r3, r3, #32
 8008674:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff ff7e 	bl	8008578 <HAL_RTC_WaitForSynchro>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2203      	movs	r2, #3
 8008686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800868e:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <RTC_ExitInitMode+0x78>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <RTC_ExitInitMode+0x78>)
 8008694:	f043 0320 	orr.w	r3, r3, #32
 8008698:	6093      	str	r3, [r2, #8]
  }

  return status;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	58004000 	.word	0x58004000

080086a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80086ba:	e005      	b.n	80086c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	3b0a      	subs	r3, #10
 80086c6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	d8f6      	bhi.n	80086bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	4313      	orrs	r3, r2
 80086da:	b2db      	uxtb	r3, r3
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e049      	b.n	800878e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7f9 fd06 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f000 fc6c 	bl	8009004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d001      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e05e      	b.n	800886e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a2b      	ldr	r2, [pc, #172]	; (800887c <HAL_TIM_Base_Start_IT+0xe4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d02c      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087da:	d027      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a27      	ldr	r2, [pc, #156]	; (8008880 <HAL_TIM_Base_Start_IT+0xe8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d022      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a26      	ldr	r2, [pc, #152]	; (8008884 <HAL_TIM_Base_Start_IT+0xec>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d01d      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a24      	ldr	r2, [pc, #144]	; (8008888 <HAL_TIM_Base_Start_IT+0xf0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d018      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a23      	ldr	r2, [pc, #140]	; (800888c <HAL_TIM_Base_Start_IT+0xf4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d013      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a21      	ldr	r2, [pc, #132]	; (8008890 <HAL_TIM_Base_Start_IT+0xf8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00e      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a20      	ldr	r2, [pc, #128]	; (8008894 <HAL_TIM_Base_Start_IT+0xfc>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d009      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_TIM_Base_Start_IT+0x100>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d004      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x94>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1d      	ldr	r2, [pc, #116]	; (800889c <HAL_TIM_Base_Start_IT+0x104>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d115      	bne.n	8008858 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	4b1b      	ldr	r3, [pc, #108]	; (80088a0 <HAL_TIM_Base_Start_IT+0x108>)
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b06      	cmp	r3, #6
 800883c:	d015      	beq.n	800886a <HAL_TIM_Base_Start_IT+0xd2>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008844:	d011      	beq.n	800886a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0201 	orr.w	r2, r2, #1
 8008854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008856:	e008      	b.n	800886a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e000      	b.n	800886c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40010400 	.word	0x40010400
 8008890:	40001800 	.word	0x40001800
 8008894:	40014000 	.word	0x40014000
 8008898:	4000e000 	.word	0x4000e000
 800889c:	4000e400 	.word	0x4000e400
 80088a0:	00010007 	.word	0x00010007

080088a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e049      	b.n	800894a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7f9 fbd8 	bl	8002080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3304      	adds	r3, #4
 80088e0:	4619      	mov	r1, r3
 80088e2:	4610      	mov	r0, r2
 80088e4:	f000 fb8e 	bl	8009004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e049      	b.n	80089f8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f841 	bl	8008a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3304      	adds	r3, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f000 fb37 	bl	8009004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d122      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d11b      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0202 	mvn.w	r2, #2
 8008a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fab6 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008a5c:	e005      	b.n	8008a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 faa8 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fab9 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d122      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0204 	mvn.w	r2, #4
 8008a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa8c 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008ab0:	e005      	b.n	8008abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fa7e 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa8f 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d122      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d11b      	bne.n	8008b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0208 	mvn.w	r2, #8
 8008ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2204      	movs	r2, #4
 8008aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa62 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008b04:	e005      	b.n	8008b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa54 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa65 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0310 	and.w	r3, r3, #16
 8008b22:	2b10      	cmp	r3, #16
 8008b24:	d122      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d11b      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0210 	mvn.w	r2, #16
 8008b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2208      	movs	r2, #8
 8008b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa38 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa2a 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa3b 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d10e      	bne.n	8008b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d107      	bne.n	8008b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0201 	mvn.w	r2, #1
 8008b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7f7 fdd0 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba2:	2b80      	cmp	r3, #128	; 0x80
 8008ba4:	d10e      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb0:	2b80      	cmp	r3, #128	; 0x80
 8008bb2:	d107      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 f818 	bl	8009bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd2:	d10e      	bne.n	8008bf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bde:	2b80      	cmp	r3, #128	; 0x80
 8008be0:	d107      	bne.n	8008bf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 f80b 	bl	8009c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b40      	cmp	r3, #64	; 0x40
 8008bfe:	d10e      	bne.n	8008c1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d107      	bne.n	8008c1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f9e9 	bl	8008ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f003 0320 	and.w	r3, r3, #32
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d10e      	bne.n	8008c4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	d107      	bne.n	8008c4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f06f 0220 	mvn.w	r2, #32
 8008c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 ffcb 	bl	8009be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e088      	b.n	8008d82 <HAL_TIM_IC_ConfigChannel+0x130>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d11b      	bne.n	8008cb6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6819      	ldr	r1, [r3, #0]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f000 fd35 	bl	80096fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	699a      	ldr	r2, [r3, #24]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 020c 	bic.w	r2, r2, #12
 8008ca0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6999      	ldr	r1, [r3, #24]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	619a      	str	r2, [r3, #24]
 8008cb4:	e060      	b.n	8008d78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d11c      	bne.n	8008cf6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f000 fd96 	bl	80097fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699a      	ldr	r2, [r3, #24]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008cde:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6999      	ldr	r1, [r3, #24]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	021a      	lsls	r2, r3, #8
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	619a      	str	r2, [r3, #24]
 8008cf4:	e040      	b.n	8008d78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d11b      	bne.n	8008d34 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f000 fdb3 	bl	8009876 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	69da      	ldr	r2, [r3, #28]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 020c 	bic.w	r2, r2, #12
 8008d1e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	69d9      	ldr	r1, [r3, #28]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	61da      	str	r2, [r3, #28]
 8008d32:	e021      	b.n	8008d78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b0c      	cmp	r3, #12
 8008d38:	d11c      	bne.n	8008d74 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f000 fdd0 	bl	80098ee <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69d9      	ldr	r1, [r3, #28]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	021a      	lsls	r2, r3, #8
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	61da      	str	r2, [r3, #28]
 8008d72:	e001      	b.n	8008d78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d101      	bne.n	8008daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008da6:	2302      	movs	r3, #2
 8008da8:	e0ff      	b.n	8008faa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b14      	cmp	r3, #20
 8008db6:	f200 80f0 	bhi.w	8008f9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008e15 	.word	0x08008e15
 8008dc4:	08008f9b 	.word	0x08008f9b
 8008dc8:	08008f9b 	.word	0x08008f9b
 8008dcc:	08008f9b 	.word	0x08008f9b
 8008dd0:	08008e55 	.word	0x08008e55
 8008dd4:	08008f9b 	.word	0x08008f9b
 8008dd8:	08008f9b 	.word	0x08008f9b
 8008ddc:	08008f9b 	.word	0x08008f9b
 8008de0:	08008e97 	.word	0x08008e97
 8008de4:	08008f9b 	.word	0x08008f9b
 8008de8:	08008f9b 	.word	0x08008f9b
 8008dec:	08008f9b 	.word	0x08008f9b
 8008df0:	08008ed7 	.word	0x08008ed7
 8008df4:	08008f9b 	.word	0x08008f9b
 8008df8:	08008f9b 	.word	0x08008f9b
 8008dfc:	08008f9b 	.word	0x08008f9b
 8008e00:	08008f19 	.word	0x08008f19
 8008e04:	08008f9b 	.word	0x08008f9b
 8008e08:	08008f9b 	.word	0x08008f9b
 8008e0c:	08008f9b 	.word	0x08008f9b
 8008e10:	08008f59 	.word	0x08008f59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f998 	bl	8009150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0208 	orr.w	r2, r2, #8
 8008e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0204 	bic.w	r2, r2, #4
 8008e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6999      	ldr	r1, [r3, #24]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	691a      	ldr	r2, [r3, #16]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	619a      	str	r2, [r3, #24]
      break;
 8008e52:	e0a5      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fa08 	bl	8009270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699a      	ldr	r2, [r3, #24]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6999      	ldr	r1, [r3, #24]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	021a      	lsls	r2, r3, #8
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	619a      	str	r2, [r3, #24]
      break;
 8008e94:	e084      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fa71 	bl	8009384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69da      	ldr	r2, [r3, #28]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f042 0208 	orr.w	r2, r2, #8
 8008eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0204 	bic.w	r2, r2, #4
 8008ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69d9      	ldr	r1, [r3, #28]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	61da      	str	r2, [r3, #28]
      break;
 8008ed4:	e064      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fad9 	bl	8009494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69d9      	ldr	r1, [r3, #28]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	021a      	lsls	r2, r3, #8
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	61da      	str	r2, [r3, #28]
      break;
 8008f16:	e043      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fb22 	bl	8009568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0208 	orr.w	r2, r2, #8
 8008f32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0204 	bic.w	r2, r2, #4
 8008f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	691a      	ldr	r2, [r3, #16]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f56:	e023      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fb66 	bl	8009630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	021a      	lsls	r2, r3, #8
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f98:	e002      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop

08008fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a44      	ldr	r2, [pc, #272]	; (8009128 <TIM_Base_SetConfig+0x124>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d013      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009022:	d00f      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a41      	ldr	r2, [pc, #260]	; (800912c <TIM_Base_SetConfig+0x128>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00b      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a40      	ldr	r2, [pc, #256]	; (8009130 <TIM_Base_SetConfig+0x12c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d007      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a3f      	ldr	r2, [pc, #252]	; (8009134 <TIM_Base_SetConfig+0x130>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d003      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a3e      	ldr	r2, [pc, #248]	; (8009138 <TIM_Base_SetConfig+0x134>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d108      	bne.n	8009056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a33      	ldr	r2, [pc, #204]	; (8009128 <TIM_Base_SetConfig+0x124>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d027      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009064:	d023      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a30      	ldr	r2, [pc, #192]	; (800912c <TIM_Base_SetConfig+0x128>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d01f      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2f      	ldr	r2, [pc, #188]	; (8009130 <TIM_Base_SetConfig+0x12c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d01b      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2e      	ldr	r2, [pc, #184]	; (8009134 <TIM_Base_SetConfig+0x130>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d017      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2d      	ldr	r2, [pc, #180]	; (8009138 <TIM_Base_SetConfig+0x134>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d013      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2c      	ldr	r2, [pc, #176]	; (800913c <TIM_Base_SetConfig+0x138>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00f      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a2b      	ldr	r2, [pc, #172]	; (8009140 <TIM_Base_SetConfig+0x13c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00b      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a2a      	ldr	r2, [pc, #168]	; (8009144 <TIM_Base_SetConfig+0x140>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d007      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a29      	ldr	r2, [pc, #164]	; (8009148 <TIM_Base_SetConfig+0x144>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d003      	beq.n	80090ae <TIM_Base_SetConfig+0xaa>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a28      	ldr	r2, [pc, #160]	; (800914c <TIM_Base_SetConfig+0x148>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d108      	bne.n	80090c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a10      	ldr	r2, [pc, #64]	; (8009128 <TIM_Base_SetConfig+0x124>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00f      	beq.n	800910c <TIM_Base_SetConfig+0x108>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a12      	ldr	r2, [pc, #72]	; (8009138 <TIM_Base_SetConfig+0x134>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00b      	beq.n	800910c <TIM_Base_SetConfig+0x108>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a11      	ldr	r2, [pc, #68]	; (800913c <TIM_Base_SetConfig+0x138>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <TIM_Base_SetConfig+0x108>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a10      	ldr	r2, [pc, #64]	; (8009140 <TIM_Base_SetConfig+0x13c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_Base_SetConfig+0x108>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a0f      	ldr	r2, [pc, #60]	; (8009144 <TIM_Base_SetConfig+0x140>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d103      	bne.n	8009114 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	615a      	str	r2, [r3, #20]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010000 	.word	0x40010000
 800912c:	40000400 	.word	0x40000400
 8009130:	40000800 	.word	0x40000800
 8009134:	40000c00 	.word	0x40000c00
 8009138:	40010400 	.word	0x40010400
 800913c:	40014000 	.word	0x40014000
 8009140:	40014400 	.word	0x40014400
 8009144:	40014800 	.word	0x40014800
 8009148:	4000e000 	.word	0x4000e000
 800914c:	4000e400 	.word	0x4000e400

08009150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	f023 0201 	bic.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4b37      	ldr	r3, [pc, #220]	; (8009258 <TIM_OC1_SetConfig+0x108>)
 800917c:	4013      	ands	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f023 0302 	bic.w	r3, r3, #2
 8009198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a2d      	ldr	r2, [pc, #180]	; (800925c <TIM_OC1_SetConfig+0x10c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_OC1_SetConfig+0x7c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a2c      	ldr	r2, [pc, #176]	; (8009260 <TIM_OC1_SetConfig+0x110>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_OC1_SetConfig+0x7c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a2b      	ldr	r2, [pc, #172]	; (8009264 <TIM_OC1_SetConfig+0x114>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_OC1_SetConfig+0x7c>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a2a      	ldr	r2, [pc, #168]	; (8009268 <TIM_OC1_SetConfig+0x118>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC1_SetConfig+0x7c>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a29      	ldr	r2, [pc, #164]	; (800926c <TIM_OC1_SetConfig+0x11c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d10c      	bne.n	80091e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f023 0308 	bic.w	r3, r3, #8
 80091d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 0304 	bic.w	r3, r3, #4
 80091e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	; (800925c <TIM_OC1_SetConfig+0x10c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00f      	beq.n	800920e <TIM_OC1_SetConfig+0xbe>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <TIM_OC1_SetConfig+0x110>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00b      	beq.n	800920e <TIM_OC1_SetConfig+0xbe>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a1a      	ldr	r2, [pc, #104]	; (8009264 <TIM_OC1_SetConfig+0x114>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d007      	beq.n	800920e <TIM_OC1_SetConfig+0xbe>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a19      	ldr	r2, [pc, #100]	; (8009268 <TIM_OC1_SetConfig+0x118>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d003      	beq.n	800920e <TIM_OC1_SetConfig+0xbe>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a18      	ldr	r2, [pc, #96]	; (800926c <TIM_OC1_SetConfig+0x11c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d111      	bne.n	8009232 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800921c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	621a      	str	r2, [r3, #32]
}
 800924c:	bf00      	nop
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	fffeff8f 	.word	0xfffeff8f
 800925c:	40010000 	.word	0x40010000
 8009260:	40010400 	.word	0x40010400
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800

08009270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	f023 0210 	bic.w	r2, r3, #16
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	4b34      	ldr	r3, [pc, #208]	; (800936c <TIM_OC2_SetConfig+0xfc>)
 800929c:	4013      	ands	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f023 0320 	bic.w	r3, r3, #32
 80092ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a29      	ldr	r2, [pc, #164]	; (8009370 <TIM_OC2_SetConfig+0x100>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_OC2_SetConfig+0x68>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a28      	ldr	r2, [pc, #160]	; (8009374 <TIM_OC2_SetConfig+0x104>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d10d      	bne.n	80092f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <TIM_OC2_SetConfig+0x100>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00f      	beq.n	800931c <TIM_OC2_SetConfig+0xac>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <TIM_OC2_SetConfig+0x104>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00b      	beq.n	800931c <TIM_OC2_SetConfig+0xac>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a1c      	ldr	r2, [pc, #112]	; (8009378 <TIM_OC2_SetConfig+0x108>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d007      	beq.n	800931c <TIM_OC2_SetConfig+0xac>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a1b      	ldr	r2, [pc, #108]	; (800937c <TIM_OC2_SetConfig+0x10c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d003      	beq.n	800931c <TIM_OC2_SetConfig+0xac>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a1a      	ldr	r2, [pc, #104]	; (8009380 <TIM_OC2_SetConfig+0x110>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d113      	bne.n	8009344 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	621a      	str	r2, [r3, #32]
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	feff8fff 	.word	0xfeff8fff
 8009370:	40010000 	.word	0x40010000
 8009374:	40010400 	.word	0x40010400
 8009378:	40014000 	.word	0x40014000
 800937c:	40014400 	.word	0x40014400
 8009380:	40014800 	.word	0x40014800

08009384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4b33      	ldr	r3, [pc, #204]	; (800947c <TIM_OC3_SetConfig+0xf8>)
 80093b0:	4013      	ands	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0303 	bic.w	r3, r3, #3
 80093ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	021b      	lsls	r3, r3, #8
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a28      	ldr	r2, [pc, #160]	; (8009480 <TIM_OC3_SetConfig+0xfc>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d003      	beq.n	80093ea <TIM_OC3_SetConfig+0x66>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a27      	ldr	r2, [pc, #156]	; (8009484 <TIM_OC3_SetConfig+0x100>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d10d      	bne.n	8009406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <TIM_OC3_SetConfig+0xfc>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d00f      	beq.n	800942e <TIM_OC3_SetConfig+0xaa>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a1c      	ldr	r2, [pc, #112]	; (8009484 <TIM_OC3_SetConfig+0x100>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00b      	beq.n	800942e <TIM_OC3_SetConfig+0xaa>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a1b      	ldr	r2, [pc, #108]	; (8009488 <TIM_OC3_SetConfig+0x104>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d007      	beq.n	800942e <TIM_OC3_SetConfig+0xaa>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a1a      	ldr	r2, [pc, #104]	; (800948c <TIM_OC3_SetConfig+0x108>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d003      	beq.n	800942e <TIM_OC3_SetConfig+0xaa>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a19      	ldr	r2, [pc, #100]	; (8009490 <TIM_OC3_SetConfig+0x10c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d113      	bne.n	8009456 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800943c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	011b      	lsls	r3, r3, #4
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	4313      	orrs	r3, r2
 8009454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	621a      	str	r2, [r3, #32]
}
 8009470:	bf00      	nop
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	fffeff8f 	.word	0xfffeff8f
 8009480:	40010000 	.word	0x40010000
 8009484:	40010400 	.word	0x40010400
 8009488:	40014000 	.word	0x40014000
 800948c:	40014400 	.word	0x40014400
 8009490:	40014800 	.word	0x40014800

08009494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4b24      	ldr	r3, [pc, #144]	; (8009550 <TIM_OC4_SetConfig+0xbc>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	031b      	lsls	r3, r3, #12
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a19      	ldr	r2, [pc, #100]	; (8009554 <TIM_OC4_SetConfig+0xc0>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00f      	beq.n	8009514 <TIM_OC4_SetConfig+0x80>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a18      	ldr	r2, [pc, #96]	; (8009558 <TIM_OC4_SetConfig+0xc4>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00b      	beq.n	8009514 <TIM_OC4_SetConfig+0x80>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a17      	ldr	r2, [pc, #92]	; (800955c <TIM_OC4_SetConfig+0xc8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d007      	beq.n	8009514 <TIM_OC4_SetConfig+0x80>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a16      	ldr	r2, [pc, #88]	; (8009560 <TIM_OC4_SetConfig+0xcc>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <TIM_OC4_SetConfig+0x80>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a15      	ldr	r2, [pc, #84]	; (8009564 <TIM_OC4_SetConfig+0xd0>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d109      	bne.n	8009528 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800951a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	019b      	lsls	r3, r3, #6
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	4313      	orrs	r3, r2
 8009526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	621a      	str	r2, [r3, #32]
}
 8009542:	bf00      	nop
 8009544:	371c      	adds	r7, #28
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	feff8fff 	.word	0xfeff8fff
 8009554:	40010000 	.word	0x40010000
 8009558:	40010400 	.word	0x40010400
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800

08009568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4b21      	ldr	r3, [pc, #132]	; (8009618 <TIM_OC5_SetConfig+0xb0>)
 8009594:	4013      	ands	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a18      	ldr	r2, [pc, #96]	; (800961c <TIM_OC5_SetConfig+0xb4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00f      	beq.n	80095de <TIM_OC5_SetConfig+0x76>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a17      	ldr	r2, [pc, #92]	; (8009620 <TIM_OC5_SetConfig+0xb8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00b      	beq.n	80095de <TIM_OC5_SetConfig+0x76>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a16      	ldr	r2, [pc, #88]	; (8009624 <TIM_OC5_SetConfig+0xbc>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d007      	beq.n	80095de <TIM_OC5_SetConfig+0x76>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a15      	ldr	r2, [pc, #84]	; (8009628 <TIM_OC5_SetConfig+0xc0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <TIM_OC5_SetConfig+0x76>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a14      	ldr	r2, [pc, #80]	; (800962c <TIM_OC5_SetConfig+0xc4>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d109      	bne.n	80095f2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	621a      	str	r2, [r3, #32]
}
 800960c:	bf00      	nop
 800960e:	371c      	adds	r7, #28
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	fffeff8f 	.word	0xfffeff8f
 800961c:	40010000 	.word	0x40010000
 8009620:	40010400 	.word	0x40010400
 8009624:	40014000 	.word	0x40014000
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800

08009630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4b22      	ldr	r3, [pc, #136]	; (80096e4 <TIM_OC6_SetConfig+0xb4>)
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	051b      	lsls	r3, r3, #20
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4313      	orrs	r3, r2
 800967e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a19      	ldr	r2, [pc, #100]	; (80096e8 <TIM_OC6_SetConfig+0xb8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00f      	beq.n	80096a8 <TIM_OC6_SetConfig+0x78>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a18      	ldr	r2, [pc, #96]	; (80096ec <TIM_OC6_SetConfig+0xbc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00b      	beq.n	80096a8 <TIM_OC6_SetConfig+0x78>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a17      	ldr	r2, [pc, #92]	; (80096f0 <TIM_OC6_SetConfig+0xc0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_OC6_SetConfig+0x78>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <TIM_OC6_SetConfig+0xc4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC6_SetConfig+0x78>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <TIM_OC6_SetConfig+0xc8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d109      	bne.n	80096bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	029b      	lsls	r3, r3, #10
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	feff8fff 	.word	0xfeff8fff
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40010400 	.word	0x40010400
 80096f0:	40014000 	.word	0x40014000
 80096f4:	40014400 	.word	0x40014400
 80096f8:	40014800 	.word	0x40014800

080096fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	f023 0201 	bic.w	r2, r3, #1
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4a2c      	ldr	r2, [pc, #176]	; (80097d8 <TIM_TI1_SetConfig+0xdc>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d023      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009730:	d01f      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4a29      	ldr	r2, [pc, #164]	; (80097dc <TIM_TI1_SetConfig+0xe0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01b      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <TIM_TI1_SetConfig+0xe4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d017      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4a27      	ldr	r2, [pc, #156]	; (80097e4 <TIM_TI1_SetConfig+0xe8>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	4a26      	ldr	r2, [pc, #152]	; (80097e8 <TIM_TI1_SetConfig+0xec>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00f      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4a25      	ldr	r2, [pc, #148]	; (80097ec <TIM_TI1_SetConfig+0xf0>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00b      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4a24      	ldr	r2, [pc, #144]	; (80097f0 <TIM_TI1_SetConfig+0xf4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d007      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4a23      	ldr	r2, [pc, #140]	; (80097f4 <TIM_TI1_SetConfig+0xf8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d003      	beq.n	8009772 <TIM_TI1_SetConfig+0x76>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a22      	ldr	r2, [pc, #136]	; (80097f8 <TIM_TI1_SetConfig+0xfc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d101      	bne.n	8009776 <TIM_TI1_SetConfig+0x7a>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <TIM_TI1_SetConfig+0x7c>
 8009776:	2300      	movs	r3, #0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d008      	beq.n	800978e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f023 0303 	bic.w	r3, r3, #3
 8009782:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4313      	orrs	r3, r2
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e003      	b.n	8009796 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f043 0301 	orr.w	r3, r3, #1
 8009794:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800979c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f023 030a 	bic.w	r3, r3, #10
 80097b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f003 030a 	and.w	r3, r3, #10
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40010000 	.word	0x40010000
 80097dc:	40000400 	.word	0x40000400
 80097e0:	40000800 	.word	0x40000800
 80097e4:	40000c00 	.word	0x40000c00
 80097e8:	40010400 	.word	0x40010400
 80097ec:	40001800 	.word	0x40001800
 80097f0:	40014000 	.word	0x40014000
 80097f4:	4000e000 	.word	0x4000e000
 80097f8:	4000e400 	.word	0x4000e400

080097fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f023 0210 	bic.w	r2, r3, #16
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4313      	orrs	r3, r2
 8009832:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800983a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	031b      	lsls	r3, r3, #12
 8009840:	b29b      	uxth	r3, r3
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4313      	orrs	r3, r2
 8009846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800984e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	621a      	str	r2, [r3, #32]
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009876:	b480      	push	{r7}
 8009878:	b087      	sub	sp, #28
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
 8009882:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f023 0303 	bic.w	r3, r3, #3
 80098a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80098c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	621a      	str	r2, [r3, #32]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b087      	sub	sp, #28
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800991a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800992c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	031b      	lsls	r3, r3, #12
 8009932:	b29b      	uxth	r3, r3
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	4313      	orrs	r3, r2
 8009938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009940:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	031b      	lsls	r3, r3, #12
 8009946:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	621a      	str	r2, [r3, #32]
}
 800995c:	bf00      	nop
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800997c:	2302      	movs	r3, #2
 800997e:	e077      	b.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a35      	ldr	r2, [pc, #212]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a34      	ldr	r2, [pc, #208]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d108      	bne.n	80099c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a25      	ldr	r2, [pc, #148]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d02c      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f2:	d027      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d022      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	; (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d01d      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d018      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1b      	ldr	r2, [pc, #108]	; (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00e      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1a      	ldr	r2, [pc, #104]	; (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d009      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a18      	ldr	r2, [pc, #96]	; (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a17      	ldr	r2, [pc, #92]	; (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d10c      	bne.n	8009a5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	40010400 	.word	0x40010400
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40001800 	.word	0x40001800
 8009a94:	40014000 	.word	0x40014000
 8009a98:	4000e000 	.word	0x4000e000
 8009a9c:	4000e400 	.word	0x4000e400

08009aa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d101      	bne.n	8009abc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e087      	b.n	8009bcc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a27      	ldr	r2, [pc, #156]	; (8009bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d004      	beq.n	8009b4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a25      	ldr	r2, [pc, #148]	; (8009bdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d106      	bne.n	8009b58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a1e      	ldr	r2, [pc, #120]	; (8009bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d004      	beq.n	8009b6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1d      	ldr	r2, [pc, #116]	; (8009bdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d126      	bne.n	8009bba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	051b      	lsls	r3, r3, #20
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a0e      	ldr	r2, [pc, #56]	; (8009bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d004      	beq.n	8009bac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a0d      	ldr	r2, [pc, #52]	; (8009bdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d106      	bne.n	8009bba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40010400 	.word	0x40010400

08009be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e042      	b.n	8009cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d106      	bne.n	8009c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f8 fb8d 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2224      	movs	r2, #36	; 0x24
 8009c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f8c2 	bl	8009de8 <UART_SetConfig>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e022      	b.n	8009cb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 ff14 	bl	800aaa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f042 0201 	orr.w	r2, r2, #1
 8009caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 ff9b 	bl	800abe8 <UART_CheckIdleState>
 8009cb2:	4603      	mov	r3, r0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	; 0x28
 8009cc0:	af02      	add	r7, sp, #8
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	f040 8083 	bne.w	8009dde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_UART_Transmit+0x28>
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e07b      	b.n	8009de0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_UART_Transmit+0x3a>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e074      	b.n	8009de0 <HAL_UART_Transmit+0x124>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2221      	movs	r2, #33	; 0x21
 8009d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d0e:	f7f8 fdef 	bl	80028f0 <HAL_GetTick>
 8009d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	88fa      	ldrh	r2, [r7, #6]
 8009d18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	88fa      	ldrh	r2, [r7, #6]
 8009d20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2c:	d108      	bne.n	8009d40 <HAL_UART_Transmit+0x84>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d104      	bne.n	8009d40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e003      	b.n	8009d48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009d50:	e02c      	b.n	8009dac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2180      	movs	r1, #128	; 0x80
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 ff8e 	bl	800ac7e <UART_WaitOnFlagUntilTimeout>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e039      	b.n	8009de0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10b      	bne.n	8009d8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	3302      	adds	r3, #2
 8009d86:	61bb      	str	r3, [r7, #24]
 8009d88:	e007      	b.n	8009d9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	781a      	ldrb	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	3301      	adds	r3, #1
 8009d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1cc      	bne.n	8009d52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2140      	movs	r1, #64	; 0x40
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 ff5b 	bl	800ac7e <UART_WaitOnFlagUntilTimeout>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	e006      	b.n	8009de0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e000      	b.n	8009de0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009dde:	2302      	movs	r3, #2
  }
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3720      	adds	r7, #32
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de8:	b5b0      	push	{r4, r5, r7, lr}
 8009dea:	b08e      	sub	sp, #56	; 0x38
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4bbf      	ldr	r3, [pc, #764]	; (800a114 <UART_SetConfig+0x32c>)
 8009e16:	4013      	ands	r3, r2
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6812      	ldr	r2, [r2, #0]
 8009e1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68da      	ldr	r2, [r3, #12]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4ab5      	ldr	r2, [pc, #724]	; (800a118 <UART_SetConfig+0x330>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d004      	beq.n	8009e52 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	4bb0      	ldr	r3, [pc, #704]	; (800a11c <UART_SetConfig+0x334>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e62:	430b      	orrs	r3, r1
 8009e64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	f023 010f 	bic.w	r1, r3, #15
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4aa7      	ldr	r2, [pc, #668]	; (800a120 <UART_SetConfig+0x338>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d176      	bne.n	8009f74 <UART_SetConfig+0x18c>
 8009e86:	4ba7      	ldr	r3, [pc, #668]	; (800a124 <UART_SetConfig+0x33c>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e8e:	2b28      	cmp	r3, #40	; 0x28
 8009e90:	d86c      	bhi.n	8009f6c <UART_SetConfig+0x184>
 8009e92:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <UART_SetConfig+0xb0>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009f3d 	.word	0x08009f3d
 8009e9c:	08009f6d 	.word	0x08009f6d
 8009ea0:	08009f6d 	.word	0x08009f6d
 8009ea4:	08009f6d 	.word	0x08009f6d
 8009ea8:	08009f6d 	.word	0x08009f6d
 8009eac:	08009f6d 	.word	0x08009f6d
 8009eb0:	08009f6d 	.word	0x08009f6d
 8009eb4:	08009f6d 	.word	0x08009f6d
 8009eb8:	08009f45 	.word	0x08009f45
 8009ebc:	08009f6d 	.word	0x08009f6d
 8009ec0:	08009f6d 	.word	0x08009f6d
 8009ec4:	08009f6d 	.word	0x08009f6d
 8009ec8:	08009f6d 	.word	0x08009f6d
 8009ecc:	08009f6d 	.word	0x08009f6d
 8009ed0:	08009f6d 	.word	0x08009f6d
 8009ed4:	08009f6d 	.word	0x08009f6d
 8009ed8:	08009f4d 	.word	0x08009f4d
 8009edc:	08009f6d 	.word	0x08009f6d
 8009ee0:	08009f6d 	.word	0x08009f6d
 8009ee4:	08009f6d 	.word	0x08009f6d
 8009ee8:	08009f6d 	.word	0x08009f6d
 8009eec:	08009f6d 	.word	0x08009f6d
 8009ef0:	08009f6d 	.word	0x08009f6d
 8009ef4:	08009f6d 	.word	0x08009f6d
 8009ef8:	08009f55 	.word	0x08009f55
 8009efc:	08009f6d 	.word	0x08009f6d
 8009f00:	08009f6d 	.word	0x08009f6d
 8009f04:	08009f6d 	.word	0x08009f6d
 8009f08:	08009f6d 	.word	0x08009f6d
 8009f0c:	08009f6d 	.word	0x08009f6d
 8009f10:	08009f6d 	.word	0x08009f6d
 8009f14:	08009f6d 	.word	0x08009f6d
 8009f18:	08009f5d 	.word	0x08009f5d
 8009f1c:	08009f6d 	.word	0x08009f6d
 8009f20:	08009f6d 	.word	0x08009f6d
 8009f24:	08009f6d 	.word	0x08009f6d
 8009f28:	08009f6d 	.word	0x08009f6d
 8009f2c:	08009f6d 	.word	0x08009f6d
 8009f30:	08009f6d 	.word	0x08009f6d
 8009f34:	08009f6d 	.word	0x08009f6d
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e326      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f44:	2304      	movs	r3, #4
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e322      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e31e      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f54:	2310      	movs	r3, #16
 8009f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5a:	e31a      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f62:	e316      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f64:	2340      	movs	r3, #64	; 0x40
 8009f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6a:	e312      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f6c:	2380      	movs	r3, #128	; 0x80
 8009f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f72:	e30e      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a6b      	ldr	r2, [pc, #428]	; (800a128 <UART_SetConfig+0x340>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d130      	bne.n	8009fe0 <UART_SetConfig+0x1f8>
 8009f7e:	4b69      	ldr	r3, [pc, #420]	; (800a124 <UART_SetConfig+0x33c>)
 8009f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	2b05      	cmp	r3, #5
 8009f88:	d826      	bhi.n	8009fd8 <UART_SetConfig+0x1f0>
 8009f8a:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <UART_SetConfig+0x1a8>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fb1 	.word	0x08009fb1
 8009f98:	08009fb9 	.word	0x08009fb9
 8009f9c:	08009fc1 	.word	0x08009fc1
 8009fa0:	08009fc9 	.word	0x08009fc9
 8009fa4:	08009fd1 	.word	0x08009fd1
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e2f0      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e2ec      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e2e8      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc6:	e2e4      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fc8:	2320      	movs	r3, #32
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e2e0      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e2dc      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fd8:	2380      	movs	r3, #128	; 0x80
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	e2d8      	b.n	800a592 <UART_SetConfig+0x7aa>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a51      	ldr	r2, [pc, #324]	; (800a12c <UART_SetConfig+0x344>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d130      	bne.n	800a04c <UART_SetConfig+0x264>
 8009fea:	4b4e      	ldr	r3, [pc, #312]	; (800a124 <UART_SetConfig+0x33c>)
 8009fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fee:	f003 0307 	and.w	r3, r3, #7
 8009ff2:	2b05      	cmp	r3, #5
 8009ff4:	d826      	bhi.n	800a044 <UART_SetConfig+0x25c>
 8009ff6:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <UART_SetConfig+0x214>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a015 	.word	0x0800a015
 800a000:	0800a01d 	.word	0x0800a01d
 800a004:	0800a025 	.word	0x0800a025
 800a008:	0800a02d 	.word	0x0800a02d
 800a00c:	0800a035 	.word	0x0800a035
 800a010:	0800a03d 	.word	0x0800a03d
 800a014:	2300      	movs	r3, #0
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e2ba      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a01c:	2304      	movs	r3, #4
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e2b6      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a024:	2308      	movs	r3, #8
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e2b2      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a02c:	2310      	movs	r3, #16
 800a02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a032:	e2ae      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a034:	2320      	movs	r3, #32
 800a036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03a:	e2aa      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a03c:	2340      	movs	r3, #64	; 0x40
 800a03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a042:	e2a6      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a044:	2380      	movs	r3, #128	; 0x80
 800a046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04a:	e2a2      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a37      	ldr	r2, [pc, #220]	; (800a130 <UART_SetConfig+0x348>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d130      	bne.n	800a0b8 <UART_SetConfig+0x2d0>
 800a056:	4b33      	ldr	r3, [pc, #204]	; (800a124 <UART_SetConfig+0x33c>)
 800a058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	2b05      	cmp	r3, #5
 800a060:	d826      	bhi.n	800a0b0 <UART_SetConfig+0x2c8>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <UART_SetConfig+0x280>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a089 	.word	0x0800a089
 800a070:	0800a091 	.word	0x0800a091
 800a074:	0800a099 	.word	0x0800a099
 800a078:	0800a0a1 	.word	0x0800a0a1
 800a07c:	0800a0a9 	.word	0x0800a0a9
 800a080:	2300      	movs	r3, #0
 800a082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a086:	e284      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a088:	2304      	movs	r3, #4
 800a08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08e:	e280      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a090:	2308      	movs	r3, #8
 800a092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a096:	e27c      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a098:	2310      	movs	r3, #16
 800a09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09e:	e278      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a6:	e274      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a0a8:	2340      	movs	r3, #64	; 0x40
 800a0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ae:	e270      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e26c      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <UART_SetConfig+0x34c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d142      	bne.n	800a148 <UART_SetConfig+0x360>
 800a0c2:	4b18      	ldr	r3, [pc, #96]	; (800a124 <UART_SetConfig+0x33c>)
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	d838      	bhi.n	800a140 <UART_SetConfig+0x358>
 800a0ce:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <UART_SetConfig+0x2ec>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a0ed 	.word	0x0800a0ed
 800a0d8:	0800a0f5 	.word	0x0800a0f5
 800a0dc:	0800a0fd 	.word	0x0800a0fd
 800a0e0:	0800a105 	.word	0x0800a105
 800a0e4:	0800a10d 	.word	0x0800a10d
 800a0e8:	0800a139 	.word	0x0800a139
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f2:	e24e      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fa:	e24a      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a102:	e246      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a104:	2310      	movs	r3, #16
 800a106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10a:	e242      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a10c:	2320      	movs	r3, #32
 800a10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a112:	e23e      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a114:	cfff69f3 	.word	0xcfff69f3
 800a118:	58000c00 	.word	0x58000c00
 800a11c:	11fff4ff 	.word	0x11fff4ff
 800a120:	40011000 	.word	0x40011000
 800a124:	58024400 	.word	0x58024400
 800a128:	40004400 	.word	0x40004400
 800a12c:	40004800 	.word	0x40004800
 800a130:	40004c00 	.word	0x40004c00
 800a134:	40005000 	.word	0x40005000
 800a138:	2340      	movs	r3, #64	; 0x40
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e228      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a140:	2380      	movs	r3, #128	; 0x80
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e224      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4ab1      	ldr	r2, [pc, #708]	; (800a414 <UART_SetConfig+0x62c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d176      	bne.n	800a240 <UART_SetConfig+0x458>
 800a152:	4bb1      	ldr	r3, [pc, #708]	; (800a418 <UART_SetConfig+0x630>)
 800a154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a15a:	2b28      	cmp	r3, #40	; 0x28
 800a15c:	d86c      	bhi.n	800a238 <UART_SetConfig+0x450>
 800a15e:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <UART_SetConfig+0x37c>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a209 	.word	0x0800a209
 800a168:	0800a239 	.word	0x0800a239
 800a16c:	0800a239 	.word	0x0800a239
 800a170:	0800a239 	.word	0x0800a239
 800a174:	0800a239 	.word	0x0800a239
 800a178:	0800a239 	.word	0x0800a239
 800a17c:	0800a239 	.word	0x0800a239
 800a180:	0800a239 	.word	0x0800a239
 800a184:	0800a211 	.word	0x0800a211
 800a188:	0800a239 	.word	0x0800a239
 800a18c:	0800a239 	.word	0x0800a239
 800a190:	0800a239 	.word	0x0800a239
 800a194:	0800a239 	.word	0x0800a239
 800a198:	0800a239 	.word	0x0800a239
 800a19c:	0800a239 	.word	0x0800a239
 800a1a0:	0800a239 	.word	0x0800a239
 800a1a4:	0800a219 	.word	0x0800a219
 800a1a8:	0800a239 	.word	0x0800a239
 800a1ac:	0800a239 	.word	0x0800a239
 800a1b0:	0800a239 	.word	0x0800a239
 800a1b4:	0800a239 	.word	0x0800a239
 800a1b8:	0800a239 	.word	0x0800a239
 800a1bc:	0800a239 	.word	0x0800a239
 800a1c0:	0800a239 	.word	0x0800a239
 800a1c4:	0800a221 	.word	0x0800a221
 800a1c8:	0800a239 	.word	0x0800a239
 800a1cc:	0800a239 	.word	0x0800a239
 800a1d0:	0800a239 	.word	0x0800a239
 800a1d4:	0800a239 	.word	0x0800a239
 800a1d8:	0800a239 	.word	0x0800a239
 800a1dc:	0800a239 	.word	0x0800a239
 800a1e0:	0800a239 	.word	0x0800a239
 800a1e4:	0800a229 	.word	0x0800a229
 800a1e8:	0800a239 	.word	0x0800a239
 800a1ec:	0800a239 	.word	0x0800a239
 800a1f0:	0800a239 	.word	0x0800a239
 800a1f4:	0800a239 	.word	0x0800a239
 800a1f8:	0800a239 	.word	0x0800a239
 800a1fc:	0800a239 	.word	0x0800a239
 800a200:	0800a239 	.word	0x0800a239
 800a204:	0800a231 	.word	0x0800a231
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20e:	e1c0      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a210:	2304      	movs	r3, #4
 800a212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a216:	e1bc      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a218:	2308      	movs	r3, #8
 800a21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21e:	e1b8      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a220:	2310      	movs	r3, #16
 800a222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a226:	e1b4      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a228:	2320      	movs	r3, #32
 800a22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22e:	e1b0      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e1ac      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a238:	2380      	movs	r3, #128	; 0x80
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e1a8      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a75      	ldr	r2, [pc, #468]	; (800a41c <UART_SetConfig+0x634>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d130      	bne.n	800a2ac <UART_SetConfig+0x4c4>
 800a24a:	4b73      	ldr	r3, [pc, #460]	; (800a418 <UART_SetConfig+0x630>)
 800a24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	2b05      	cmp	r3, #5
 800a254:	d826      	bhi.n	800a2a4 <UART_SetConfig+0x4bc>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <UART_SetConfig+0x474>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a275 	.word	0x0800a275
 800a260:	0800a27d 	.word	0x0800a27d
 800a264:	0800a285 	.word	0x0800a285
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a295 	.word	0x0800a295
 800a270:	0800a29d 	.word	0x0800a29d
 800a274:	2300      	movs	r3, #0
 800a276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a27a:	e18a      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a27c:	2304      	movs	r3, #4
 800a27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a282:	e186      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a284:	2308      	movs	r3, #8
 800a286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28a:	e182      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a28c:	2310      	movs	r3, #16
 800a28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a292:	e17e      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a294:	2320      	movs	r3, #32
 800a296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29a:	e17a      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a29c:	2340      	movs	r3, #64	; 0x40
 800a29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a2:	e176      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a2a4:	2380      	movs	r3, #128	; 0x80
 800a2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2aa:	e172      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a5b      	ldr	r2, [pc, #364]	; (800a420 <UART_SetConfig+0x638>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d130      	bne.n	800a318 <UART_SetConfig+0x530>
 800a2b6:	4b58      	ldr	r3, [pc, #352]	; (800a418 <UART_SetConfig+0x630>)
 800a2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	2b05      	cmp	r3, #5
 800a2c0:	d826      	bhi.n	800a310 <UART_SetConfig+0x528>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <UART_SetConfig+0x4e0>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2e9 	.word	0x0800a2e9
 800a2d0:	0800a2f1 	.word	0x0800a2f1
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a301 	.word	0x0800a301
 800a2dc:	0800a309 	.word	0x0800a309
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e6:	e154      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ee:	e150      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f6:	e14c      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fe:	e148      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a300:	2320      	movs	r3, #32
 800a302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a306:	e144      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a308:	2340      	movs	r3, #64	; 0x40
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e140      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a310:	2380      	movs	r3, #128	; 0x80
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e13c      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a41      	ldr	r2, [pc, #260]	; (800a424 <UART_SetConfig+0x63c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	f040 8082 	bne.w	800a428 <UART_SetConfig+0x640>
 800a324:	4b3c      	ldr	r3, [pc, #240]	; (800a418 <UART_SetConfig+0x630>)
 800a326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a32c:	2b28      	cmp	r3, #40	; 0x28
 800a32e:	d86d      	bhi.n	800a40c <UART_SetConfig+0x624>
 800a330:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <UART_SetConfig+0x550>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a3dd 	.word	0x0800a3dd
 800a33c:	0800a40d 	.word	0x0800a40d
 800a340:	0800a40d 	.word	0x0800a40d
 800a344:	0800a40d 	.word	0x0800a40d
 800a348:	0800a40d 	.word	0x0800a40d
 800a34c:	0800a40d 	.word	0x0800a40d
 800a350:	0800a40d 	.word	0x0800a40d
 800a354:	0800a40d 	.word	0x0800a40d
 800a358:	0800a3e5 	.word	0x0800a3e5
 800a35c:	0800a40d 	.word	0x0800a40d
 800a360:	0800a40d 	.word	0x0800a40d
 800a364:	0800a40d 	.word	0x0800a40d
 800a368:	0800a40d 	.word	0x0800a40d
 800a36c:	0800a40d 	.word	0x0800a40d
 800a370:	0800a40d 	.word	0x0800a40d
 800a374:	0800a40d 	.word	0x0800a40d
 800a378:	0800a3ed 	.word	0x0800a3ed
 800a37c:	0800a40d 	.word	0x0800a40d
 800a380:	0800a40d 	.word	0x0800a40d
 800a384:	0800a40d 	.word	0x0800a40d
 800a388:	0800a40d 	.word	0x0800a40d
 800a38c:	0800a40d 	.word	0x0800a40d
 800a390:	0800a40d 	.word	0x0800a40d
 800a394:	0800a40d 	.word	0x0800a40d
 800a398:	0800a3f5 	.word	0x0800a3f5
 800a39c:	0800a40d 	.word	0x0800a40d
 800a3a0:	0800a40d 	.word	0x0800a40d
 800a3a4:	0800a40d 	.word	0x0800a40d
 800a3a8:	0800a40d 	.word	0x0800a40d
 800a3ac:	0800a40d 	.word	0x0800a40d
 800a3b0:	0800a40d 	.word	0x0800a40d
 800a3b4:	0800a40d 	.word	0x0800a40d
 800a3b8:	0800a3fd 	.word	0x0800a3fd
 800a3bc:	0800a40d 	.word	0x0800a40d
 800a3c0:	0800a40d 	.word	0x0800a40d
 800a3c4:	0800a40d 	.word	0x0800a40d
 800a3c8:	0800a40d 	.word	0x0800a40d
 800a3cc:	0800a40d 	.word	0x0800a40d
 800a3d0:	0800a40d 	.word	0x0800a40d
 800a3d4:	0800a40d 	.word	0x0800a40d
 800a3d8:	0800a405 	.word	0x0800a405
 800a3dc:	2301      	movs	r3, #1
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e0d6      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e0d2      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a3ec:	2308      	movs	r3, #8
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e0ce      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e0ca      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e0c6      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a404:	2340      	movs	r3, #64	; 0x40
 800a406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40a:	e0c2      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a40c:	2380      	movs	r3, #128	; 0x80
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a412:	e0be      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a414:	40011400 	.word	0x40011400
 800a418:	58024400 	.word	0x58024400
 800a41c:	40007800 	.word	0x40007800
 800a420:	40007c00 	.word	0x40007c00
 800a424:	40011800 	.word	0x40011800
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4aad      	ldr	r2, [pc, #692]	; (800a6e4 <UART_SetConfig+0x8fc>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d176      	bne.n	800a520 <UART_SetConfig+0x738>
 800a432:	4bad      	ldr	r3, [pc, #692]	; (800a6e8 <UART_SetConfig+0x900>)
 800a434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a43a:	2b28      	cmp	r3, #40	; 0x28
 800a43c:	d86c      	bhi.n	800a518 <UART_SetConfig+0x730>
 800a43e:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <UART_SetConfig+0x65c>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a519 	.word	0x0800a519
 800a44c:	0800a519 	.word	0x0800a519
 800a450:	0800a519 	.word	0x0800a519
 800a454:	0800a519 	.word	0x0800a519
 800a458:	0800a519 	.word	0x0800a519
 800a45c:	0800a519 	.word	0x0800a519
 800a460:	0800a519 	.word	0x0800a519
 800a464:	0800a4f1 	.word	0x0800a4f1
 800a468:	0800a519 	.word	0x0800a519
 800a46c:	0800a519 	.word	0x0800a519
 800a470:	0800a519 	.word	0x0800a519
 800a474:	0800a519 	.word	0x0800a519
 800a478:	0800a519 	.word	0x0800a519
 800a47c:	0800a519 	.word	0x0800a519
 800a480:	0800a519 	.word	0x0800a519
 800a484:	0800a4f9 	.word	0x0800a4f9
 800a488:	0800a519 	.word	0x0800a519
 800a48c:	0800a519 	.word	0x0800a519
 800a490:	0800a519 	.word	0x0800a519
 800a494:	0800a519 	.word	0x0800a519
 800a498:	0800a519 	.word	0x0800a519
 800a49c:	0800a519 	.word	0x0800a519
 800a4a0:	0800a519 	.word	0x0800a519
 800a4a4:	0800a501 	.word	0x0800a501
 800a4a8:	0800a519 	.word	0x0800a519
 800a4ac:	0800a519 	.word	0x0800a519
 800a4b0:	0800a519 	.word	0x0800a519
 800a4b4:	0800a519 	.word	0x0800a519
 800a4b8:	0800a519 	.word	0x0800a519
 800a4bc:	0800a519 	.word	0x0800a519
 800a4c0:	0800a519 	.word	0x0800a519
 800a4c4:	0800a509 	.word	0x0800a509
 800a4c8:	0800a519 	.word	0x0800a519
 800a4cc:	0800a519 	.word	0x0800a519
 800a4d0:	0800a519 	.word	0x0800a519
 800a4d4:	0800a519 	.word	0x0800a519
 800a4d8:	0800a519 	.word	0x0800a519
 800a4dc:	0800a519 	.word	0x0800a519
 800a4e0:	0800a519 	.word	0x0800a519
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e050      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e04c      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e048      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a500:	2310      	movs	r3, #16
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a506:	e044      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a508:	2320      	movs	r3, #32
 800a50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50e:	e040      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a510:	2340      	movs	r3, #64	; 0x40
 800a512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a516:	e03c      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a518:	2380      	movs	r3, #128	; 0x80
 800a51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51e:	e038      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a71      	ldr	r2, [pc, #452]	; (800a6ec <UART_SetConfig+0x904>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d130      	bne.n	800a58c <UART_SetConfig+0x7a4>
 800a52a:	4b6f      	ldr	r3, [pc, #444]	; (800a6e8 <UART_SetConfig+0x900>)
 800a52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	2b05      	cmp	r3, #5
 800a534:	d826      	bhi.n	800a584 <UART_SetConfig+0x79c>
 800a536:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <UART_SetConfig+0x754>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a555 	.word	0x0800a555
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	0800a575 	.word	0x0800a575
 800a550:	0800a57d 	.word	0x0800a57d
 800a554:	2302      	movs	r3, #2
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e01a      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a55c:	2304      	movs	r3, #4
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e016      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a564:	2308      	movs	r3, #8
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e012      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a56c:	2310      	movs	r3, #16
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e00e      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a574:	2320      	movs	r3, #32
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e00a      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a57c:	2340      	movs	r3, #64	; 0x40
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e006      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a584:	2380      	movs	r3, #128	; 0x80
 800a586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58a:	e002      	b.n	800a592 <UART_SetConfig+0x7aa>
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a55      	ldr	r2, [pc, #340]	; (800a6ec <UART_SetConfig+0x904>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	f040 80f0 	bne.w	800a77e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a59e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	dc46      	bgt.n	800a634 <UART_SetConfig+0x84c>
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	db75      	blt.n	800a696 <UART_SetConfig+0x8ae>
 800a5aa:	3b02      	subs	r3, #2
 800a5ac:	2b1e      	cmp	r3, #30
 800a5ae:	d872      	bhi.n	800a696 <UART_SetConfig+0x8ae>
 800a5b0:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <UART_SetConfig+0x7d0>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a63b 	.word	0x0800a63b
 800a5bc:	0800a697 	.word	0x0800a697
 800a5c0:	0800a643 	.word	0x0800a643
 800a5c4:	0800a697 	.word	0x0800a697
 800a5c8:	0800a697 	.word	0x0800a697
 800a5cc:	0800a697 	.word	0x0800a697
 800a5d0:	0800a653 	.word	0x0800a653
 800a5d4:	0800a697 	.word	0x0800a697
 800a5d8:	0800a697 	.word	0x0800a697
 800a5dc:	0800a697 	.word	0x0800a697
 800a5e0:	0800a697 	.word	0x0800a697
 800a5e4:	0800a697 	.word	0x0800a697
 800a5e8:	0800a697 	.word	0x0800a697
 800a5ec:	0800a697 	.word	0x0800a697
 800a5f0:	0800a663 	.word	0x0800a663
 800a5f4:	0800a697 	.word	0x0800a697
 800a5f8:	0800a697 	.word	0x0800a697
 800a5fc:	0800a697 	.word	0x0800a697
 800a600:	0800a697 	.word	0x0800a697
 800a604:	0800a697 	.word	0x0800a697
 800a608:	0800a697 	.word	0x0800a697
 800a60c:	0800a697 	.word	0x0800a697
 800a610:	0800a697 	.word	0x0800a697
 800a614:	0800a697 	.word	0x0800a697
 800a618:	0800a697 	.word	0x0800a697
 800a61c:	0800a697 	.word	0x0800a697
 800a620:	0800a697 	.word	0x0800a697
 800a624:	0800a697 	.word	0x0800a697
 800a628:	0800a697 	.word	0x0800a697
 800a62c:	0800a697 	.word	0x0800a697
 800a630:	0800a689 	.word	0x0800a689
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	d02a      	beq.n	800a68e <UART_SetConfig+0x8a6>
 800a638:	e02d      	b.n	800a696 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a63a:	f7fd f88b 	bl	8007754 <HAL_RCCEx_GetD3PCLK1Freq>
 800a63e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a640:	e02f      	b.n	800a6a2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	4618      	mov	r0, r3
 800a648:	f7fd f89a 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a650:	e027      	b.n	800a6a2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f7fd f9e6 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a660:	e01f      	b.n	800a6a2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a662:	4b21      	ldr	r3, [pc, #132]	; (800a6e8 <UART_SetConfig+0x900>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a66e:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <UART_SetConfig+0x900>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	08db      	lsrs	r3, r3, #3
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	4a1d      	ldr	r2, [pc, #116]	; (800a6f0 <UART_SetConfig+0x908>)
 800a67a:	fa22 f303 	lsr.w	r3, r2, r3
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a680:	e00f      	b.n	800a6a2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a682:	4b1b      	ldr	r3, [pc, #108]	; (800a6f0 <UART_SetConfig+0x908>)
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a686:	e00c      	b.n	800a6a2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a688:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <UART_SetConfig+0x90c>)
 800a68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a68c:	e009      	b.n	800a6a2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a68e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a694:	e005      	b.n	800a6a2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a6a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 81e6 	beq.w	800aa76 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	4a12      	ldr	r2, [pc, #72]	; (800a6f8 <UART_SetConfig+0x910>)
 800a6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6bc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4413      	add	r3, r2
 800a6c8:	6a3a      	ldr	r2, [r7, #32]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d305      	bcc.n	800a6da <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6d4:	6a3a      	ldr	r2, [r7, #32]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d910      	bls.n	800a6fc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a6e0:	e1c9      	b.n	800aa76 <UART_SetConfig+0xc8e>
 800a6e2:	bf00      	nop
 800a6e4:	40011c00 	.word	0x40011c00
 800a6e8:	58024400 	.word	0x58024400
 800a6ec:	58000c00 	.word	0x58000c00
 800a6f0:	03d09000 	.word	0x03d09000
 800a6f4:	003d0900 	.word	0x003d0900
 800a6f8:	0800c100 	.word	0x0800c100
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	4618      	mov	r0, r3
 800a700:	f04f 0100 	mov.w	r1, #0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	4ac1      	ldr	r2, [pc, #772]	; (800aa10 <UART_SetConfig+0xc28>)
 800a70a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a70e:	b29a      	uxth	r2, r3
 800a710:	f04f 0300 	mov.w	r3, #0
 800a714:	f7f5 fe4c 	bl	80003b0 <__aeabi_uldivmod>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4610      	mov	r0, r2
 800a71e:	4619      	mov	r1, r3
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	020b      	lsls	r3, r1, #8
 800a72a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a72e:	0202      	lsls	r2, r0, #8
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	6849      	ldr	r1, [r1, #4]
 800a734:	0849      	lsrs	r1, r1, #1
 800a736:	4608      	mov	r0, r1
 800a738:	f04f 0100 	mov.w	r1, #0
 800a73c:	1814      	adds	r4, r2, r0
 800a73e:	eb43 0501 	adc.w	r5, r3, r1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	461a      	mov	r2, r3
 800a748:	f04f 0300 	mov.w	r3, #0
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	f7f5 fe2e 	bl	80003b0 <__aeabi_uldivmod>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4613      	mov	r3, r2
 800a75a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a762:	d308      	bcc.n	800a776 <UART_SetConfig+0x98e>
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a76a:	d204      	bcs.n	800a776 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a772:	60da      	str	r2, [r3, #12]
 800a774:	e17f      	b.n	800aa76 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a77c:	e17b      	b.n	800aa76 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a786:	f040 80bd 	bne.w	800a904 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a78a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a78e:	2b20      	cmp	r3, #32
 800a790:	dc48      	bgt.n	800a824 <UART_SetConfig+0xa3c>
 800a792:	2b00      	cmp	r3, #0
 800a794:	db7b      	blt.n	800a88e <UART_SetConfig+0xaa6>
 800a796:	2b20      	cmp	r3, #32
 800a798:	d879      	bhi.n	800a88e <UART_SetConfig+0xaa6>
 800a79a:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <UART_SetConfig+0x9b8>)
 800a79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a0:	0800a82b 	.word	0x0800a82b
 800a7a4:	0800a833 	.word	0x0800a833
 800a7a8:	0800a88f 	.word	0x0800a88f
 800a7ac:	0800a88f 	.word	0x0800a88f
 800a7b0:	0800a83b 	.word	0x0800a83b
 800a7b4:	0800a88f 	.word	0x0800a88f
 800a7b8:	0800a88f 	.word	0x0800a88f
 800a7bc:	0800a88f 	.word	0x0800a88f
 800a7c0:	0800a84b 	.word	0x0800a84b
 800a7c4:	0800a88f 	.word	0x0800a88f
 800a7c8:	0800a88f 	.word	0x0800a88f
 800a7cc:	0800a88f 	.word	0x0800a88f
 800a7d0:	0800a88f 	.word	0x0800a88f
 800a7d4:	0800a88f 	.word	0x0800a88f
 800a7d8:	0800a88f 	.word	0x0800a88f
 800a7dc:	0800a88f 	.word	0x0800a88f
 800a7e0:	0800a85b 	.word	0x0800a85b
 800a7e4:	0800a88f 	.word	0x0800a88f
 800a7e8:	0800a88f 	.word	0x0800a88f
 800a7ec:	0800a88f 	.word	0x0800a88f
 800a7f0:	0800a88f 	.word	0x0800a88f
 800a7f4:	0800a88f 	.word	0x0800a88f
 800a7f8:	0800a88f 	.word	0x0800a88f
 800a7fc:	0800a88f 	.word	0x0800a88f
 800a800:	0800a88f 	.word	0x0800a88f
 800a804:	0800a88f 	.word	0x0800a88f
 800a808:	0800a88f 	.word	0x0800a88f
 800a80c:	0800a88f 	.word	0x0800a88f
 800a810:	0800a88f 	.word	0x0800a88f
 800a814:	0800a88f 	.word	0x0800a88f
 800a818:	0800a88f 	.word	0x0800a88f
 800a81c:	0800a88f 	.word	0x0800a88f
 800a820:	0800a881 	.word	0x0800a881
 800a824:	2b40      	cmp	r3, #64	; 0x40
 800a826:	d02e      	beq.n	800a886 <UART_SetConfig+0xa9e>
 800a828:	e031      	b.n	800a88e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a82a:	f7fb fc49 	bl	80060c0 <HAL_RCC_GetPCLK1Freq>
 800a82e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a830:	e033      	b.n	800a89a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a832:	f7fb fc5b 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 800a836:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a838:	e02f      	b.n	800a89a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83a:	f107 0314 	add.w	r3, r7, #20
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fc ff9e 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a848:	e027      	b.n	800a89a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fd f8ea 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a858:	e01f      	b.n	800a89a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a85a:	4b6e      	ldr	r3, [pc, #440]	; (800aa14 <UART_SetConfig+0xc2c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0320 	and.w	r3, r3, #32
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a866:	4b6b      	ldr	r3, [pc, #428]	; (800aa14 <UART_SetConfig+0xc2c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	08db      	lsrs	r3, r3, #3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	4a69      	ldr	r2, [pc, #420]	; (800aa18 <UART_SetConfig+0xc30>)
 800a872:	fa22 f303 	lsr.w	r3, r2, r3
 800a876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a878:	e00f      	b.n	800a89a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a87a:	4b67      	ldr	r3, [pc, #412]	; (800aa18 <UART_SetConfig+0xc30>)
 800a87c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a87e:	e00c      	b.n	800a89a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a880:	4b66      	ldr	r3, [pc, #408]	; (800aa1c <UART_SetConfig+0xc34>)
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a884:	e009      	b.n	800a89a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a88c:	e005      	b.n	800a89a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 80ea 	beq.w	800aa76 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	4a5a      	ldr	r2, [pc, #360]	; (800aa10 <UART_SetConfig+0xc28>)
 800a8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b4:	005a      	lsls	r2, r3, #1
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	085b      	lsrs	r3, r3, #1
 800a8bc:	441a      	add	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	2b0f      	cmp	r3, #15
 800a8cc:	d916      	bls.n	800a8fc <UART_SetConfig+0xb14>
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d4:	d212      	bcs.n	800a8fc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	f023 030f 	bic.w	r3, r3, #15
 800a8de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	085b      	lsrs	r3, r3, #1
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	e0bc      	b.n	800aa76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a902:	e0b8      	b.n	800aa76 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a904:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a908:	2b20      	cmp	r3, #32
 800a90a:	dc4b      	bgt.n	800a9a4 <UART_SetConfig+0xbbc>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f2c0 8087 	blt.w	800aa20 <UART_SetConfig+0xc38>
 800a912:	2b20      	cmp	r3, #32
 800a914:	f200 8084 	bhi.w	800aa20 <UART_SetConfig+0xc38>
 800a918:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <UART_SetConfig+0xb38>)
 800a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91e:	bf00      	nop
 800a920:	0800a9ab 	.word	0x0800a9ab
 800a924:	0800a9b3 	.word	0x0800a9b3
 800a928:	0800aa21 	.word	0x0800aa21
 800a92c:	0800aa21 	.word	0x0800aa21
 800a930:	0800a9bb 	.word	0x0800a9bb
 800a934:	0800aa21 	.word	0x0800aa21
 800a938:	0800aa21 	.word	0x0800aa21
 800a93c:	0800aa21 	.word	0x0800aa21
 800a940:	0800a9cb 	.word	0x0800a9cb
 800a944:	0800aa21 	.word	0x0800aa21
 800a948:	0800aa21 	.word	0x0800aa21
 800a94c:	0800aa21 	.word	0x0800aa21
 800a950:	0800aa21 	.word	0x0800aa21
 800a954:	0800aa21 	.word	0x0800aa21
 800a958:	0800aa21 	.word	0x0800aa21
 800a95c:	0800aa21 	.word	0x0800aa21
 800a960:	0800a9db 	.word	0x0800a9db
 800a964:	0800aa21 	.word	0x0800aa21
 800a968:	0800aa21 	.word	0x0800aa21
 800a96c:	0800aa21 	.word	0x0800aa21
 800a970:	0800aa21 	.word	0x0800aa21
 800a974:	0800aa21 	.word	0x0800aa21
 800a978:	0800aa21 	.word	0x0800aa21
 800a97c:	0800aa21 	.word	0x0800aa21
 800a980:	0800aa21 	.word	0x0800aa21
 800a984:	0800aa21 	.word	0x0800aa21
 800a988:	0800aa21 	.word	0x0800aa21
 800a98c:	0800aa21 	.word	0x0800aa21
 800a990:	0800aa21 	.word	0x0800aa21
 800a994:	0800aa21 	.word	0x0800aa21
 800a998:	0800aa21 	.word	0x0800aa21
 800a99c:	0800aa21 	.word	0x0800aa21
 800a9a0:	0800aa01 	.word	0x0800aa01
 800a9a4:	2b40      	cmp	r3, #64	; 0x40
 800a9a6:	d02e      	beq.n	800aa06 <UART_SetConfig+0xc1e>
 800a9a8:	e03a      	b.n	800aa20 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9aa:	f7fb fb89 	bl	80060c0 <HAL_RCC_GetPCLK1Freq>
 800a9ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9b0:	e03c      	b.n	800aa2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9b2:	f7fb fb9b 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 800a9b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9b8:	e038      	b.n	800aa2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ba:	f107 0314 	add.w	r3, r7, #20
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fc fede 	bl	8007780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9c8:	e030      	b.n	800aa2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ca:	f107 0308 	add.w	r3, r7, #8
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fd f82a 	bl	8007a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9d8:	e028      	b.n	800aa2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9da:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <UART_SetConfig+0xc2c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0320 	and.w	r3, r3, #32
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d009      	beq.n	800a9fa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9e6:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <UART_SetConfig+0xc2c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	08db      	lsrs	r3, r3, #3
 800a9ec:	f003 0303 	and.w	r3, r3, #3
 800a9f0:	4a09      	ldr	r2, [pc, #36]	; (800aa18 <UART_SetConfig+0xc30>)
 800a9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9f8:	e018      	b.n	800aa2c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a9fa:	4b07      	ldr	r3, [pc, #28]	; (800aa18 <UART_SetConfig+0xc30>)
 800a9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9fe:	e015      	b.n	800aa2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa00:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <UART_SetConfig+0xc34>)
 800aa02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa04:	e012      	b.n	800aa2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa0c:	e00e      	b.n	800aa2c <UART_SetConfig+0xc44>
 800aa0e:	bf00      	nop
 800aa10:	0800c100 	.word	0x0800c100
 800aa14:	58024400 	.word	0x58024400
 800aa18:	03d09000 	.word	0x03d09000
 800aa1c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa2a:	bf00      	nop
    }

    if (pclk != 0U)
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d021      	beq.n	800aa76 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	4a1a      	ldr	r2, [pc, #104]	; (800aaa0 <UART_SetConfig+0xcb8>)
 800aa38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	085b      	lsrs	r3, r3, #1
 800aa4a:	441a      	add	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	2b0f      	cmp	r3, #15
 800aa5a:	d909      	bls.n	800aa70 <UART_SetConfig+0xc88>
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa62:	d205      	bcs.n	800aa70 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	60da      	str	r2, [r3, #12]
 800aa6e:	e002      	b.n	800aa76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aa92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3738      	adds	r7, #56	; 0x38
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800c100 	.word	0x0800c100

0800aaa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00a      	beq.n	800aace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	430a      	orrs	r2, r1
 800aaee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	f003 0308 	and.w	r3, r3, #8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	f003 0320 	and.w	r3, r3, #32
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d01a      	beq.n	800abba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aba2:	d10a      	bne.n	800abba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	605a      	str	r2, [r3, #4]
  }
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af02      	add	r7, sp, #8
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abf8:	f7f7 fe7a 	bl	80028f0 <HAL_GetTick>
 800abfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0308 	and.w	r3, r3, #8
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d10e      	bne.n	800ac2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f82f 	bl	800ac7e <UART_WaitOnFlagUntilTimeout>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e025      	b.n	800ac76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d10e      	bne.n	800ac56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f819 	bl	800ac7e <UART_WaitOnFlagUntilTimeout>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e00f      	b.n	800ac76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b09c      	sub	sp, #112	; 0x70
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	603b      	str	r3, [r7, #0]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac8e:	e0a9      	b.n	800ade4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac96:	f000 80a5 	beq.w	800ade4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac9a:	f7f7 fe29 	bl	80028f0 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d302      	bcc.n	800acb0 <UART_WaitOnFlagUntilTimeout+0x32>
 800acaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acac:	2b00      	cmp	r3, #0
 800acae:	d140      	bne.n	800ad32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800acbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acc4:	667b      	str	r3, [r7, #100]	; 0x64
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800acdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e6      	bne.n	800acb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3308      	adds	r3, #8
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	f023 0301 	bic.w	r3, r3, #1
 800acf8:	663b      	str	r3, [r7, #96]	; 0x60
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3308      	adds	r3, #8
 800ad00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad02:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad0a:	e841 2300 	strex	r3, r2, [r1]
 800ad0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1e5      	bne.n	800ace2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2220      	movs	r2, #32
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e069      	b.n	800ae06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d051      	beq.n	800ade4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad4e:	d149      	bne.n	800ade4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
 800ad7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3308      	adds	r3, #8
 800ad92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f023 0301 	bic.w	r3, r3, #1
 800ada2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3308      	adds	r3, #8
 800adaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800adac:	623a      	str	r2, [r7, #32]
 800adae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	69f9      	ldr	r1, [r7, #28]
 800adb2:	6a3a      	ldr	r2, [r7, #32]
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e5      	bne.n	800ad8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2220      	movs	r2, #32
 800adcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2220      	movs	r2, #32
 800add4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e010      	b.n	800ae06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	69da      	ldr	r2, [r3, #28]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4013      	ands	r3, r2
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	bf0c      	ite	eq
 800adf4:	2301      	moveq	r3, #1
 800adf6:	2300      	movne	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	461a      	mov	r2, r3
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	f43f af46 	beq.w	800ac90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3770      	adds	r7, #112	; 0x70
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b085      	sub	sp, #20
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e027      	b.n	800ae74 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2224      	movs	r2, #36	; 0x24
 800ae30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 0201 	bic.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d101      	bne.n	800ae98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae94:	2302      	movs	r3, #2
 800ae96:	e02d      	b.n	800aef4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2224      	movs	r2, #36	; 0x24
 800aea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0201 	bic.w	r2, r2, #1
 800aebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f84f 	bl	800af78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af10:	2302      	movs	r3, #2
 800af12:	e02d      	b.n	800af70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2224      	movs	r2, #36	; 0x24
 800af20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0201 	bic.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f811 	bl	800af78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2220      	movs	r2, #32
 800af62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af84:	2b00      	cmp	r3, #0
 800af86:	d108      	bne.n	800af9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af98:	e031      	b.n	800affe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af9a:	2310      	movs	r3, #16
 800af9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af9e:	2310      	movs	r3, #16
 800afa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	0e5b      	lsrs	r3, r3, #25
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	f003 0307 	and.w	r3, r3, #7
 800afb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	0f5b      	lsrs	r3, r3, #29
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f003 0307 	and.w	r3, r3, #7
 800afc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	7b3a      	ldrb	r2, [r7, #12]
 800afc6:	4911      	ldr	r1, [pc, #68]	; (800b00c <UARTEx_SetNbDataToProcess+0x94>)
 800afc8:	5c8a      	ldrb	r2, [r1, r2]
 800afca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800afce:	7b3a      	ldrb	r2, [r7, #12]
 800afd0:	490f      	ldr	r1, [pc, #60]	; (800b010 <UARTEx_SetNbDataToProcess+0x98>)
 800afd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800afd8:	b29a      	uxth	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	7b7a      	ldrb	r2, [r7, #13]
 800afe4:	4909      	ldr	r1, [pc, #36]	; (800b00c <UARTEx_SetNbDataToProcess+0x94>)
 800afe6:	5c8a      	ldrb	r2, [r1, r2]
 800afe8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afec:	7b7a      	ldrb	r2, [r7, #13]
 800afee:	4908      	ldr	r1, [pc, #32]	; (800b010 <UARTEx_SetNbDataToProcess+0x98>)
 800aff0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aff2:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	0800c118 	.word	0x0800c118
 800b010:	0800c120 	.word	0x0800c120

0800b014 <__errno>:
 800b014:	4b01      	ldr	r3, [pc, #4]	; (800b01c <__errno+0x8>)
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	24000010 	.word	0x24000010

0800b020 <__libc_init_array>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4d0d      	ldr	r5, [pc, #52]	; (800b058 <__libc_init_array+0x38>)
 800b024:	4c0d      	ldr	r4, [pc, #52]	; (800b05c <__libc_init_array+0x3c>)
 800b026:	1b64      	subs	r4, r4, r5
 800b028:	10a4      	asrs	r4, r4, #2
 800b02a:	2600      	movs	r6, #0
 800b02c:	42a6      	cmp	r6, r4
 800b02e:	d109      	bne.n	800b044 <__libc_init_array+0x24>
 800b030:	4d0b      	ldr	r5, [pc, #44]	; (800b060 <__libc_init_array+0x40>)
 800b032:	4c0c      	ldr	r4, [pc, #48]	; (800b064 <__libc_init_array+0x44>)
 800b034:	f000 fffa 	bl	800c02c <_init>
 800b038:	1b64      	subs	r4, r4, r5
 800b03a:	10a4      	asrs	r4, r4, #2
 800b03c:	2600      	movs	r6, #0
 800b03e:	42a6      	cmp	r6, r4
 800b040:	d105      	bne.n	800b04e <__libc_init_array+0x2e>
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	f855 3b04 	ldr.w	r3, [r5], #4
 800b048:	4798      	blx	r3
 800b04a:	3601      	adds	r6, #1
 800b04c:	e7ee      	b.n	800b02c <__libc_init_array+0xc>
 800b04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b052:	4798      	blx	r3
 800b054:	3601      	adds	r6, #1
 800b056:	e7f2      	b.n	800b03e <__libc_init_array+0x1e>
 800b058:	0800c1c8 	.word	0x0800c1c8
 800b05c:	0800c1c8 	.word	0x0800c1c8
 800b060:	0800c1c8 	.word	0x0800c1c8
 800b064:	0800c1cc 	.word	0x0800c1cc

0800b068 <memcpy>:
 800b068:	440a      	add	r2, r1
 800b06a:	4291      	cmp	r1, r2
 800b06c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b070:	d100      	bne.n	800b074 <memcpy+0xc>
 800b072:	4770      	bx	lr
 800b074:	b510      	push	{r4, lr}
 800b076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b07e:	4291      	cmp	r1, r2
 800b080:	d1f9      	bne.n	800b076 <memcpy+0xe>
 800b082:	bd10      	pop	{r4, pc}

0800b084 <memset>:
 800b084:	4402      	add	r2, r0
 800b086:	4603      	mov	r3, r0
 800b088:	4293      	cmp	r3, r2
 800b08a:	d100      	bne.n	800b08e <memset+0xa>
 800b08c:	4770      	bx	lr
 800b08e:	f803 1b01 	strb.w	r1, [r3], #1
 800b092:	e7f9      	b.n	800b088 <memset+0x4>

0800b094 <iprintf>:
 800b094:	b40f      	push	{r0, r1, r2, r3}
 800b096:	4b0a      	ldr	r3, [pc, #40]	; (800b0c0 <iprintf+0x2c>)
 800b098:	b513      	push	{r0, r1, r4, lr}
 800b09a:	681c      	ldr	r4, [r3, #0]
 800b09c:	b124      	cbz	r4, 800b0a8 <iprintf+0x14>
 800b09e:	69a3      	ldr	r3, [r4, #24]
 800b0a0:	b913      	cbnz	r3, 800b0a8 <iprintf+0x14>
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fa5e 	bl	800b564 <__sinit>
 800b0a8:	ab05      	add	r3, sp, #20
 800b0aa:	9a04      	ldr	r2, [sp, #16]
 800b0ac:	68a1      	ldr	r1, [r4, #8]
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fc2f 	bl	800b914 <_vfiprintf_r>
 800b0b6:	b002      	add	sp, #8
 800b0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0bc:	b004      	add	sp, #16
 800b0be:	4770      	bx	lr
 800b0c0:	24000010 	.word	0x24000010

0800b0c4 <_puts_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	460e      	mov	r6, r1
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	b118      	cbz	r0, 800b0d4 <_puts_r+0x10>
 800b0cc:	6983      	ldr	r3, [r0, #24]
 800b0ce:	b90b      	cbnz	r3, 800b0d4 <_puts_r+0x10>
 800b0d0:	f000 fa48 	bl	800b564 <__sinit>
 800b0d4:	69ab      	ldr	r3, [r5, #24]
 800b0d6:	68ac      	ldr	r4, [r5, #8]
 800b0d8:	b913      	cbnz	r3, 800b0e0 <_puts_r+0x1c>
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f000 fa42 	bl	800b564 <__sinit>
 800b0e0:	4b2c      	ldr	r3, [pc, #176]	; (800b194 <_puts_r+0xd0>)
 800b0e2:	429c      	cmp	r4, r3
 800b0e4:	d120      	bne.n	800b128 <_puts_r+0x64>
 800b0e6:	686c      	ldr	r4, [r5, #4]
 800b0e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0ea:	07db      	lsls	r3, r3, #31
 800b0ec:	d405      	bmi.n	800b0fa <_puts_r+0x36>
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	0598      	lsls	r0, r3, #22
 800b0f2:	d402      	bmi.n	800b0fa <_puts_r+0x36>
 800b0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f6:	f000 fad3 	bl	800b6a0 <__retarget_lock_acquire_recursive>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	0719      	lsls	r1, r3, #28
 800b0fe:	d51d      	bpl.n	800b13c <_puts_r+0x78>
 800b100:	6923      	ldr	r3, [r4, #16]
 800b102:	b1db      	cbz	r3, 800b13c <_puts_r+0x78>
 800b104:	3e01      	subs	r6, #1
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b10c:	3b01      	subs	r3, #1
 800b10e:	60a3      	str	r3, [r4, #8]
 800b110:	bb39      	cbnz	r1, 800b162 <_puts_r+0x9e>
 800b112:	2b00      	cmp	r3, #0
 800b114:	da38      	bge.n	800b188 <_puts_r+0xc4>
 800b116:	4622      	mov	r2, r4
 800b118:	210a      	movs	r1, #10
 800b11a:	4628      	mov	r0, r5
 800b11c:	f000 f848 	bl	800b1b0 <__swbuf_r>
 800b120:	3001      	adds	r0, #1
 800b122:	d011      	beq.n	800b148 <_puts_r+0x84>
 800b124:	250a      	movs	r5, #10
 800b126:	e011      	b.n	800b14c <_puts_r+0x88>
 800b128:	4b1b      	ldr	r3, [pc, #108]	; (800b198 <_puts_r+0xd4>)
 800b12a:	429c      	cmp	r4, r3
 800b12c:	d101      	bne.n	800b132 <_puts_r+0x6e>
 800b12e:	68ac      	ldr	r4, [r5, #8]
 800b130:	e7da      	b.n	800b0e8 <_puts_r+0x24>
 800b132:	4b1a      	ldr	r3, [pc, #104]	; (800b19c <_puts_r+0xd8>)
 800b134:	429c      	cmp	r4, r3
 800b136:	bf08      	it	eq
 800b138:	68ec      	ldreq	r4, [r5, #12]
 800b13a:	e7d5      	b.n	800b0e8 <_puts_r+0x24>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4628      	mov	r0, r5
 800b140:	f000 f888 	bl	800b254 <__swsetup_r>
 800b144:	2800      	cmp	r0, #0
 800b146:	d0dd      	beq.n	800b104 <_puts_r+0x40>
 800b148:	f04f 35ff 	mov.w	r5, #4294967295
 800b14c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b14e:	07da      	lsls	r2, r3, #31
 800b150:	d405      	bmi.n	800b15e <_puts_r+0x9a>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	059b      	lsls	r3, r3, #22
 800b156:	d402      	bmi.n	800b15e <_puts_r+0x9a>
 800b158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b15a:	f000 faa2 	bl	800b6a2 <__retarget_lock_release_recursive>
 800b15e:	4628      	mov	r0, r5
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	2b00      	cmp	r3, #0
 800b164:	da04      	bge.n	800b170 <_puts_r+0xac>
 800b166:	69a2      	ldr	r2, [r4, #24]
 800b168:	429a      	cmp	r2, r3
 800b16a:	dc06      	bgt.n	800b17a <_puts_r+0xb6>
 800b16c:	290a      	cmp	r1, #10
 800b16e:	d004      	beq.n	800b17a <_puts_r+0xb6>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	6022      	str	r2, [r4, #0]
 800b176:	7019      	strb	r1, [r3, #0]
 800b178:	e7c5      	b.n	800b106 <_puts_r+0x42>
 800b17a:	4622      	mov	r2, r4
 800b17c:	4628      	mov	r0, r5
 800b17e:	f000 f817 	bl	800b1b0 <__swbuf_r>
 800b182:	3001      	adds	r0, #1
 800b184:	d1bf      	bne.n	800b106 <_puts_r+0x42>
 800b186:	e7df      	b.n	800b148 <_puts_r+0x84>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	250a      	movs	r5, #10
 800b18c:	1c5a      	adds	r2, r3, #1
 800b18e:	6022      	str	r2, [r4, #0]
 800b190:	701d      	strb	r5, [r3, #0]
 800b192:	e7db      	b.n	800b14c <_puts_r+0x88>
 800b194:	0800c14c 	.word	0x0800c14c
 800b198:	0800c16c 	.word	0x0800c16c
 800b19c:	0800c12c 	.word	0x0800c12c

0800b1a0 <puts>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <puts+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bf8d 	b.w	800b0c4 <_puts_r>
 800b1aa:	bf00      	nop
 800b1ac:	24000010 	.word	0x24000010

0800b1b0 <__swbuf_r>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	460e      	mov	r6, r1
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	4605      	mov	r5, r0
 800b1b8:	b118      	cbz	r0, 800b1c2 <__swbuf_r+0x12>
 800b1ba:	6983      	ldr	r3, [r0, #24]
 800b1bc:	b90b      	cbnz	r3, 800b1c2 <__swbuf_r+0x12>
 800b1be:	f000 f9d1 	bl	800b564 <__sinit>
 800b1c2:	4b21      	ldr	r3, [pc, #132]	; (800b248 <__swbuf_r+0x98>)
 800b1c4:	429c      	cmp	r4, r3
 800b1c6:	d12b      	bne.n	800b220 <__swbuf_r+0x70>
 800b1c8:	686c      	ldr	r4, [r5, #4]
 800b1ca:	69a3      	ldr	r3, [r4, #24]
 800b1cc:	60a3      	str	r3, [r4, #8]
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	071a      	lsls	r2, r3, #28
 800b1d2:	d52f      	bpl.n	800b234 <__swbuf_r+0x84>
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	b36b      	cbz	r3, 800b234 <__swbuf_r+0x84>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	6820      	ldr	r0, [r4, #0]
 800b1dc:	1ac0      	subs	r0, r0, r3
 800b1de:	6963      	ldr	r3, [r4, #20]
 800b1e0:	b2f6      	uxtb	r6, r6
 800b1e2:	4283      	cmp	r3, r0
 800b1e4:	4637      	mov	r7, r6
 800b1e6:	dc04      	bgt.n	800b1f2 <__swbuf_r+0x42>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 f926 	bl	800b43c <_fflush_r>
 800b1f0:	bb30      	cbnz	r0, 800b240 <__swbuf_r+0x90>
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	60a3      	str	r3, [r4, #8]
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	6022      	str	r2, [r4, #0]
 800b1fe:	701e      	strb	r6, [r3, #0]
 800b200:	6963      	ldr	r3, [r4, #20]
 800b202:	3001      	adds	r0, #1
 800b204:	4283      	cmp	r3, r0
 800b206:	d004      	beq.n	800b212 <__swbuf_r+0x62>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	07db      	lsls	r3, r3, #31
 800b20c:	d506      	bpl.n	800b21c <__swbuf_r+0x6c>
 800b20e:	2e0a      	cmp	r6, #10
 800b210:	d104      	bne.n	800b21c <__swbuf_r+0x6c>
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f000 f911 	bl	800b43c <_fflush_r>
 800b21a:	b988      	cbnz	r0, 800b240 <__swbuf_r+0x90>
 800b21c:	4638      	mov	r0, r7
 800b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <__swbuf_r+0x9c>)
 800b222:	429c      	cmp	r4, r3
 800b224:	d101      	bne.n	800b22a <__swbuf_r+0x7a>
 800b226:	68ac      	ldr	r4, [r5, #8]
 800b228:	e7cf      	b.n	800b1ca <__swbuf_r+0x1a>
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <__swbuf_r+0xa0>)
 800b22c:	429c      	cmp	r4, r3
 800b22e:	bf08      	it	eq
 800b230:	68ec      	ldreq	r4, [r5, #12]
 800b232:	e7ca      	b.n	800b1ca <__swbuf_r+0x1a>
 800b234:	4621      	mov	r1, r4
 800b236:	4628      	mov	r0, r5
 800b238:	f000 f80c 	bl	800b254 <__swsetup_r>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d0cb      	beq.n	800b1d8 <__swbuf_r+0x28>
 800b240:	f04f 37ff 	mov.w	r7, #4294967295
 800b244:	e7ea      	b.n	800b21c <__swbuf_r+0x6c>
 800b246:	bf00      	nop
 800b248:	0800c14c 	.word	0x0800c14c
 800b24c:	0800c16c 	.word	0x0800c16c
 800b250:	0800c12c 	.word	0x0800c12c

0800b254 <__swsetup_r>:
 800b254:	4b32      	ldr	r3, [pc, #200]	; (800b320 <__swsetup_r+0xcc>)
 800b256:	b570      	push	{r4, r5, r6, lr}
 800b258:	681d      	ldr	r5, [r3, #0]
 800b25a:	4606      	mov	r6, r0
 800b25c:	460c      	mov	r4, r1
 800b25e:	b125      	cbz	r5, 800b26a <__swsetup_r+0x16>
 800b260:	69ab      	ldr	r3, [r5, #24]
 800b262:	b913      	cbnz	r3, 800b26a <__swsetup_r+0x16>
 800b264:	4628      	mov	r0, r5
 800b266:	f000 f97d 	bl	800b564 <__sinit>
 800b26a:	4b2e      	ldr	r3, [pc, #184]	; (800b324 <__swsetup_r+0xd0>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	d10f      	bne.n	800b290 <__swsetup_r+0x3c>
 800b270:	686c      	ldr	r4, [r5, #4]
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b278:	0719      	lsls	r1, r3, #28
 800b27a:	d42c      	bmi.n	800b2d6 <__swsetup_r+0x82>
 800b27c:	06dd      	lsls	r5, r3, #27
 800b27e:	d411      	bmi.n	800b2a4 <__swsetup_r+0x50>
 800b280:	2309      	movs	r3, #9
 800b282:	6033      	str	r3, [r6, #0]
 800b284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	f04f 30ff 	mov.w	r0, #4294967295
 800b28e:	e03e      	b.n	800b30e <__swsetup_r+0xba>
 800b290:	4b25      	ldr	r3, [pc, #148]	; (800b328 <__swsetup_r+0xd4>)
 800b292:	429c      	cmp	r4, r3
 800b294:	d101      	bne.n	800b29a <__swsetup_r+0x46>
 800b296:	68ac      	ldr	r4, [r5, #8]
 800b298:	e7eb      	b.n	800b272 <__swsetup_r+0x1e>
 800b29a:	4b24      	ldr	r3, [pc, #144]	; (800b32c <__swsetup_r+0xd8>)
 800b29c:	429c      	cmp	r4, r3
 800b29e:	bf08      	it	eq
 800b2a0:	68ec      	ldreq	r4, [r5, #12]
 800b2a2:	e7e6      	b.n	800b272 <__swsetup_r+0x1e>
 800b2a4:	0758      	lsls	r0, r3, #29
 800b2a6:	d512      	bpl.n	800b2ce <__swsetup_r+0x7a>
 800b2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2aa:	b141      	cbz	r1, 800b2be <__swsetup_r+0x6a>
 800b2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	d002      	beq.n	800b2ba <__swsetup_r+0x66>
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 fa59 	bl	800b76c <_free_r>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6063      	str	r3, [r4, #4]
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	f043 0308 	orr.w	r3, r3, #8
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	b94b      	cbnz	r3, 800b2ee <__swsetup_r+0x9a>
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2e4:	d003      	beq.n	800b2ee <__swsetup_r+0x9a>
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 f9ff 	bl	800b6ec <__smakebuf_r>
 800b2ee:	89a0      	ldrh	r0, [r4, #12]
 800b2f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2f4:	f010 0301 	ands.w	r3, r0, #1
 800b2f8:	d00a      	beq.n	800b310 <__swsetup_r+0xbc>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60a3      	str	r3, [r4, #8]
 800b2fe:	6963      	ldr	r3, [r4, #20]
 800b300:	425b      	negs	r3, r3
 800b302:	61a3      	str	r3, [r4, #24]
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	b943      	cbnz	r3, 800b31a <__swsetup_r+0xc6>
 800b308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b30c:	d1ba      	bne.n	800b284 <__swsetup_r+0x30>
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	0781      	lsls	r1, r0, #30
 800b312:	bf58      	it	pl
 800b314:	6963      	ldrpl	r3, [r4, #20]
 800b316:	60a3      	str	r3, [r4, #8]
 800b318:	e7f4      	b.n	800b304 <__swsetup_r+0xb0>
 800b31a:	2000      	movs	r0, #0
 800b31c:	e7f7      	b.n	800b30e <__swsetup_r+0xba>
 800b31e:	bf00      	nop
 800b320:	24000010 	.word	0x24000010
 800b324:	0800c14c 	.word	0x0800c14c
 800b328:	0800c16c 	.word	0x0800c16c
 800b32c:	0800c12c 	.word	0x0800c12c

0800b330 <__sflush_r>:
 800b330:	898a      	ldrh	r2, [r1, #12]
 800b332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b336:	4605      	mov	r5, r0
 800b338:	0710      	lsls	r0, r2, #28
 800b33a:	460c      	mov	r4, r1
 800b33c:	d458      	bmi.n	800b3f0 <__sflush_r+0xc0>
 800b33e:	684b      	ldr	r3, [r1, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	dc05      	bgt.n	800b350 <__sflush_r+0x20>
 800b344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	dc02      	bgt.n	800b350 <__sflush_r+0x20>
 800b34a:	2000      	movs	r0, #0
 800b34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b352:	2e00      	cmp	r6, #0
 800b354:	d0f9      	beq.n	800b34a <__sflush_r+0x1a>
 800b356:	2300      	movs	r3, #0
 800b358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b35c:	682f      	ldr	r7, [r5, #0]
 800b35e:	602b      	str	r3, [r5, #0]
 800b360:	d032      	beq.n	800b3c8 <__sflush_r+0x98>
 800b362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	075a      	lsls	r2, r3, #29
 800b368:	d505      	bpl.n	800b376 <__sflush_r+0x46>
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	1ac0      	subs	r0, r0, r3
 800b36e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b370:	b10b      	cbz	r3, 800b376 <__sflush_r+0x46>
 800b372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b374:	1ac0      	subs	r0, r0, r3
 800b376:	2300      	movs	r3, #0
 800b378:	4602      	mov	r2, r0
 800b37a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b37c:	6a21      	ldr	r1, [r4, #32]
 800b37e:	4628      	mov	r0, r5
 800b380:	47b0      	blx	r6
 800b382:	1c43      	adds	r3, r0, #1
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	d106      	bne.n	800b396 <__sflush_r+0x66>
 800b388:	6829      	ldr	r1, [r5, #0]
 800b38a:	291d      	cmp	r1, #29
 800b38c:	d82c      	bhi.n	800b3e8 <__sflush_r+0xb8>
 800b38e:	4a2a      	ldr	r2, [pc, #168]	; (800b438 <__sflush_r+0x108>)
 800b390:	40ca      	lsrs	r2, r1
 800b392:	07d6      	lsls	r6, r2, #31
 800b394:	d528      	bpl.n	800b3e8 <__sflush_r+0xb8>
 800b396:	2200      	movs	r2, #0
 800b398:	6062      	str	r2, [r4, #4]
 800b39a:	04d9      	lsls	r1, r3, #19
 800b39c:	6922      	ldr	r2, [r4, #16]
 800b39e:	6022      	str	r2, [r4, #0]
 800b3a0:	d504      	bpl.n	800b3ac <__sflush_r+0x7c>
 800b3a2:	1c42      	adds	r2, r0, #1
 800b3a4:	d101      	bne.n	800b3aa <__sflush_r+0x7a>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b903      	cbnz	r3, 800b3ac <__sflush_r+0x7c>
 800b3aa:	6560      	str	r0, [r4, #84]	; 0x54
 800b3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ae:	602f      	str	r7, [r5, #0]
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	d0ca      	beq.n	800b34a <__sflush_r+0x1a>
 800b3b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	d002      	beq.n	800b3c2 <__sflush_r+0x92>
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f000 f9d5 	bl	800b76c <_free_r>
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b3c6:	e7c1      	b.n	800b34c <__sflush_r+0x1c>
 800b3c8:	6a21      	ldr	r1, [r4, #32]
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	47b0      	blx	r6
 800b3d0:	1c41      	adds	r1, r0, #1
 800b3d2:	d1c7      	bne.n	800b364 <__sflush_r+0x34>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0c4      	beq.n	800b364 <__sflush_r+0x34>
 800b3da:	2b1d      	cmp	r3, #29
 800b3dc:	d001      	beq.n	800b3e2 <__sflush_r+0xb2>
 800b3de:	2b16      	cmp	r3, #22
 800b3e0:	d101      	bne.n	800b3e6 <__sflush_r+0xb6>
 800b3e2:	602f      	str	r7, [r5, #0]
 800b3e4:	e7b1      	b.n	800b34a <__sflush_r+0x1a>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	e7ad      	b.n	800b34c <__sflush_r+0x1c>
 800b3f0:	690f      	ldr	r7, [r1, #16]
 800b3f2:	2f00      	cmp	r7, #0
 800b3f4:	d0a9      	beq.n	800b34a <__sflush_r+0x1a>
 800b3f6:	0793      	lsls	r3, r2, #30
 800b3f8:	680e      	ldr	r6, [r1, #0]
 800b3fa:	bf08      	it	eq
 800b3fc:	694b      	ldreq	r3, [r1, #20]
 800b3fe:	600f      	str	r7, [r1, #0]
 800b400:	bf18      	it	ne
 800b402:	2300      	movne	r3, #0
 800b404:	eba6 0807 	sub.w	r8, r6, r7
 800b408:	608b      	str	r3, [r1, #8]
 800b40a:	f1b8 0f00 	cmp.w	r8, #0
 800b40e:	dd9c      	ble.n	800b34a <__sflush_r+0x1a>
 800b410:	6a21      	ldr	r1, [r4, #32]
 800b412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b414:	4643      	mov	r3, r8
 800b416:	463a      	mov	r2, r7
 800b418:	4628      	mov	r0, r5
 800b41a:	47b0      	blx	r6
 800b41c:	2800      	cmp	r0, #0
 800b41e:	dc06      	bgt.n	800b42e <__sflush_r+0xfe>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b426:	81a3      	strh	r3, [r4, #12]
 800b428:	f04f 30ff 	mov.w	r0, #4294967295
 800b42c:	e78e      	b.n	800b34c <__sflush_r+0x1c>
 800b42e:	4407      	add	r7, r0
 800b430:	eba8 0800 	sub.w	r8, r8, r0
 800b434:	e7e9      	b.n	800b40a <__sflush_r+0xda>
 800b436:	bf00      	nop
 800b438:	20400001 	.word	0x20400001

0800b43c <_fflush_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	690b      	ldr	r3, [r1, #16]
 800b440:	4605      	mov	r5, r0
 800b442:	460c      	mov	r4, r1
 800b444:	b913      	cbnz	r3, 800b44c <_fflush_r+0x10>
 800b446:	2500      	movs	r5, #0
 800b448:	4628      	mov	r0, r5
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	b118      	cbz	r0, 800b456 <_fflush_r+0x1a>
 800b44e:	6983      	ldr	r3, [r0, #24]
 800b450:	b90b      	cbnz	r3, 800b456 <_fflush_r+0x1a>
 800b452:	f000 f887 	bl	800b564 <__sinit>
 800b456:	4b14      	ldr	r3, [pc, #80]	; (800b4a8 <_fflush_r+0x6c>)
 800b458:	429c      	cmp	r4, r3
 800b45a:	d11b      	bne.n	800b494 <_fflush_r+0x58>
 800b45c:	686c      	ldr	r4, [r5, #4]
 800b45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d0ef      	beq.n	800b446 <_fflush_r+0xa>
 800b466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b468:	07d0      	lsls	r0, r2, #31
 800b46a:	d404      	bmi.n	800b476 <_fflush_r+0x3a>
 800b46c:	0599      	lsls	r1, r3, #22
 800b46e:	d402      	bmi.n	800b476 <_fflush_r+0x3a>
 800b470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b472:	f000 f915 	bl	800b6a0 <__retarget_lock_acquire_recursive>
 800b476:	4628      	mov	r0, r5
 800b478:	4621      	mov	r1, r4
 800b47a:	f7ff ff59 	bl	800b330 <__sflush_r>
 800b47e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b480:	07da      	lsls	r2, r3, #31
 800b482:	4605      	mov	r5, r0
 800b484:	d4e0      	bmi.n	800b448 <_fflush_r+0xc>
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	059b      	lsls	r3, r3, #22
 800b48a:	d4dd      	bmi.n	800b448 <_fflush_r+0xc>
 800b48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48e:	f000 f908 	bl	800b6a2 <__retarget_lock_release_recursive>
 800b492:	e7d9      	b.n	800b448 <_fflush_r+0xc>
 800b494:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <_fflush_r+0x70>)
 800b496:	429c      	cmp	r4, r3
 800b498:	d101      	bne.n	800b49e <_fflush_r+0x62>
 800b49a:	68ac      	ldr	r4, [r5, #8]
 800b49c:	e7df      	b.n	800b45e <_fflush_r+0x22>
 800b49e:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <_fflush_r+0x74>)
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	bf08      	it	eq
 800b4a4:	68ec      	ldreq	r4, [r5, #12]
 800b4a6:	e7da      	b.n	800b45e <_fflush_r+0x22>
 800b4a8:	0800c14c 	.word	0x0800c14c
 800b4ac:	0800c16c 	.word	0x0800c16c
 800b4b0:	0800c12c 	.word	0x0800c12c

0800b4b4 <std>:
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b4be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4c2:	6083      	str	r3, [r0, #8]
 800b4c4:	8181      	strh	r1, [r0, #12]
 800b4c6:	6643      	str	r3, [r0, #100]	; 0x64
 800b4c8:	81c2      	strh	r2, [r0, #14]
 800b4ca:	6183      	str	r3, [r0, #24]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	305c      	adds	r0, #92	; 0x5c
 800b4d2:	f7ff fdd7 	bl	800b084 <memset>
 800b4d6:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <std+0x38>)
 800b4d8:	6263      	str	r3, [r4, #36]	; 0x24
 800b4da:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <std+0x3c>)
 800b4dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <std+0x40>)
 800b4e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4e2:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <std+0x44>)
 800b4e4:	6224      	str	r4, [r4, #32]
 800b4e6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4e8:	bd10      	pop	{r4, pc}
 800b4ea:	bf00      	nop
 800b4ec:	0800bebd 	.word	0x0800bebd
 800b4f0:	0800bedf 	.word	0x0800bedf
 800b4f4:	0800bf17 	.word	0x0800bf17
 800b4f8:	0800bf3b 	.word	0x0800bf3b

0800b4fc <_cleanup_r>:
 800b4fc:	4901      	ldr	r1, [pc, #4]	; (800b504 <_cleanup_r+0x8>)
 800b4fe:	f000 b8af 	b.w	800b660 <_fwalk_reent>
 800b502:	bf00      	nop
 800b504:	0800b43d 	.word	0x0800b43d

0800b508 <__sfmoreglue>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	1e4a      	subs	r2, r1, #1
 800b50c:	2568      	movs	r5, #104	; 0x68
 800b50e:	4355      	muls	r5, r2
 800b510:	460e      	mov	r6, r1
 800b512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b516:	f000 f979 	bl	800b80c <_malloc_r>
 800b51a:	4604      	mov	r4, r0
 800b51c:	b140      	cbz	r0, 800b530 <__sfmoreglue+0x28>
 800b51e:	2100      	movs	r1, #0
 800b520:	e9c0 1600 	strd	r1, r6, [r0]
 800b524:	300c      	adds	r0, #12
 800b526:	60a0      	str	r0, [r4, #8]
 800b528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b52c:	f7ff fdaa 	bl	800b084 <memset>
 800b530:	4620      	mov	r0, r4
 800b532:	bd70      	pop	{r4, r5, r6, pc}

0800b534 <__sfp_lock_acquire>:
 800b534:	4801      	ldr	r0, [pc, #4]	; (800b53c <__sfp_lock_acquire+0x8>)
 800b536:	f000 b8b3 	b.w	800b6a0 <__retarget_lock_acquire_recursive>
 800b53a:	bf00      	nop
 800b53c:	2400066c 	.word	0x2400066c

0800b540 <__sfp_lock_release>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__sfp_lock_release+0x8>)
 800b542:	f000 b8ae 	b.w	800b6a2 <__retarget_lock_release_recursive>
 800b546:	bf00      	nop
 800b548:	2400066c 	.word	0x2400066c

0800b54c <__sinit_lock_acquire>:
 800b54c:	4801      	ldr	r0, [pc, #4]	; (800b554 <__sinit_lock_acquire+0x8>)
 800b54e:	f000 b8a7 	b.w	800b6a0 <__retarget_lock_acquire_recursive>
 800b552:	bf00      	nop
 800b554:	24000667 	.word	0x24000667

0800b558 <__sinit_lock_release>:
 800b558:	4801      	ldr	r0, [pc, #4]	; (800b560 <__sinit_lock_release+0x8>)
 800b55a:	f000 b8a2 	b.w	800b6a2 <__retarget_lock_release_recursive>
 800b55e:	bf00      	nop
 800b560:	24000667 	.word	0x24000667

0800b564 <__sinit>:
 800b564:	b510      	push	{r4, lr}
 800b566:	4604      	mov	r4, r0
 800b568:	f7ff fff0 	bl	800b54c <__sinit_lock_acquire>
 800b56c:	69a3      	ldr	r3, [r4, #24]
 800b56e:	b11b      	cbz	r3, 800b578 <__sinit+0x14>
 800b570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b574:	f7ff bff0 	b.w	800b558 <__sinit_lock_release>
 800b578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b57c:	6523      	str	r3, [r4, #80]	; 0x50
 800b57e:	4b13      	ldr	r3, [pc, #76]	; (800b5cc <__sinit+0x68>)
 800b580:	4a13      	ldr	r2, [pc, #76]	; (800b5d0 <__sinit+0x6c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	62a2      	str	r2, [r4, #40]	; 0x28
 800b586:	42a3      	cmp	r3, r4
 800b588:	bf04      	itt	eq
 800b58a:	2301      	moveq	r3, #1
 800b58c:	61a3      	streq	r3, [r4, #24]
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 f820 	bl	800b5d4 <__sfp>
 800b594:	6060      	str	r0, [r4, #4]
 800b596:	4620      	mov	r0, r4
 800b598:	f000 f81c 	bl	800b5d4 <__sfp>
 800b59c:	60a0      	str	r0, [r4, #8]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f818 	bl	800b5d4 <__sfp>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	60e0      	str	r0, [r4, #12]
 800b5a8:	2104      	movs	r1, #4
 800b5aa:	6860      	ldr	r0, [r4, #4]
 800b5ac:	f7ff ff82 	bl	800b4b4 <std>
 800b5b0:	68a0      	ldr	r0, [r4, #8]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	2109      	movs	r1, #9
 800b5b6:	f7ff ff7d 	bl	800b4b4 <std>
 800b5ba:	68e0      	ldr	r0, [r4, #12]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	2112      	movs	r1, #18
 800b5c0:	f7ff ff78 	bl	800b4b4 <std>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	61a3      	str	r3, [r4, #24]
 800b5c8:	e7d2      	b.n	800b570 <__sinit+0xc>
 800b5ca:	bf00      	nop
 800b5cc:	0800c128 	.word	0x0800c128
 800b5d0:	0800b4fd 	.word	0x0800b4fd

0800b5d4 <__sfp>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	4607      	mov	r7, r0
 800b5d8:	f7ff ffac 	bl	800b534 <__sfp_lock_acquire>
 800b5dc:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <__sfp+0x84>)
 800b5de:	681e      	ldr	r6, [r3, #0]
 800b5e0:	69b3      	ldr	r3, [r6, #24]
 800b5e2:	b913      	cbnz	r3, 800b5ea <__sfp+0x16>
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff ffbd 	bl	800b564 <__sinit>
 800b5ea:	3648      	adds	r6, #72	; 0x48
 800b5ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	d503      	bpl.n	800b5fc <__sfp+0x28>
 800b5f4:	6833      	ldr	r3, [r6, #0]
 800b5f6:	b30b      	cbz	r3, 800b63c <__sfp+0x68>
 800b5f8:	6836      	ldr	r6, [r6, #0]
 800b5fa:	e7f7      	b.n	800b5ec <__sfp+0x18>
 800b5fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b600:	b9d5      	cbnz	r5, 800b638 <__sfp+0x64>
 800b602:	4b16      	ldr	r3, [pc, #88]	; (800b65c <__sfp+0x88>)
 800b604:	60e3      	str	r3, [r4, #12]
 800b606:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b60a:	6665      	str	r5, [r4, #100]	; 0x64
 800b60c:	f000 f847 	bl	800b69e <__retarget_lock_init_recursive>
 800b610:	f7ff ff96 	bl	800b540 <__sfp_lock_release>
 800b614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b61c:	6025      	str	r5, [r4, #0]
 800b61e:	61a5      	str	r5, [r4, #24]
 800b620:	2208      	movs	r2, #8
 800b622:	4629      	mov	r1, r5
 800b624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b628:	f7ff fd2c 	bl	800b084 <memset>
 800b62c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b634:	4620      	mov	r0, r4
 800b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b638:	3468      	adds	r4, #104	; 0x68
 800b63a:	e7d9      	b.n	800b5f0 <__sfp+0x1c>
 800b63c:	2104      	movs	r1, #4
 800b63e:	4638      	mov	r0, r7
 800b640:	f7ff ff62 	bl	800b508 <__sfmoreglue>
 800b644:	4604      	mov	r4, r0
 800b646:	6030      	str	r0, [r6, #0]
 800b648:	2800      	cmp	r0, #0
 800b64a:	d1d5      	bne.n	800b5f8 <__sfp+0x24>
 800b64c:	f7ff ff78 	bl	800b540 <__sfp_lock_release>
 800b650:	230c      	movs	r3, #12
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	e7ee      	b.n	800b634 <__sfp+0x60>
 800b656:	bf00      	nop
 800b658:	0800c128 	.word	0x0800c128
 800b65c:	ffff0001 	.word	0xffff0001

0800b660 <_fwalk_reent>:
 800b660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b664:	4606      	mov	r6, r0
 800b666:	4688      	mov	r8, r1
 800b668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b66c:	2700      	movs	r7, #0
 800b66e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b672:	f1b9 0901 	subs.w	r9, r9, #1
 800b676:	d505      	bpl.n	800b684 <_fwalk_reent+0x24>
 800b678:	6824      	ldr	r4, [r4, #0]
 800b67a:	2c00      	cmp	r4, #0
 800b67c:	d1f7      	bne.n	800b66e <_fwalk_reent+0xe>
 800b67e:	4638      	mov	r0, r7
 800b680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b684:	89ab      	ldrh	r3, [r5, #12]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d907      	bls.n	800b69a <_fwalk_reent+0x3a>
 800b68a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b68e:	3301      	adds	r3, #1
 800b690:	d003      	beq.n	800b69a <_fwalk_reent+0x3a>
 800b692:	4629      	mov	r1, r5
 800b694:	4630      	mov	r0, r6
 800b696:	47c0      	blx	r8
 800b698:	4307      	orrs	r7, r0
 800b69a:	3568      	adds	r5, #104	; 0x68
 800b69c:	e7e9      	b.n	800b672 <_fwalk_reent+0x12>

0800b69e <__retarget_lock_init_recursive>:
 800b69e:	4770      	bx	lr

0800b6a0 <__retarget_lock_acquire_recursive>:
 800b6a0:	4770      	bx	lr

0800b6a2 <__retarget_lock_release_recursive>:
 800b6a2:	4770      	bx	lr

0800b6a4 <__swhatbuf_r>:
 800b6a4:	b570      	push	{r4, r5, r6, lr}
 800b6a6:	460e      	mov	r6, r1
 800b6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	b096      	sub	sp, #88	; 0x58
 800b6b0:	4614      	mov	r4, r2
 800b6b2:	461d      	mov	r5, r3
 800b6b4:	da07      	bge.n	800b6c6 <__swhatbuf_r+0x22>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	89b3      	ldrh	r3, [r6, #12]
 800b6bc:	061a      	lsls	r2, r3, #24
 800b6be:	d410      	bmi.n	800b6e2 <__swhatbuf_r+0x3e>
 800b6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c4:	e00e      	b.n	800b6e4 <__swhatbuf_r+0x40>
 800b6c6:	466a      	mov	r2, sp
 800b6c8:	f000 fc5e 	bl	800bf88 <_fstat_r>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	dbf2      	blt.n	800b6b6 <__swhatbuf_r+0x12>
 800b6d0:	9a01      	ldr	r2, [sp, #4]
 800b6d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6da:	425a      	negs	r2, r3
 800b6dc:	415a      	adcs	r2, r3
 800b6de:	602a      	str	r2, [r5, #0]
 800b6e0:	e7ee      	b.n	800b6c0 <__swhatbuf_r+0x1c>
 800b6e2:	2340      	movs	r3, #64	; 0x40
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	b016      	add	sp, #88	; 0x58
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}

0800b6ec <__smakebuf_r>:
 800b6ec:	898b      	ldrh	r3, [r1, #12]
 800b6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6f0:	079d      	lsls	r5, r3, #30
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	d507      	bpl.n	800b708 <__smakebuf_r+0x1c>
 800b6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	2301      	movs	r3, #1
 800b702:	6163      	str	r3, [r4, #20]
 800b704:	b002      	add	sp, #8
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	ab01      	add	r3, sp, #4
 800b70a:	466a      	mov	r2, sp
 800b70c:	f7ff ffca 	bl	800b6a4 <__swhatbuf_r>
 800b710:	9900      	ldr	r1, [sp, #0]
 800b712:	4605      	mov	r5, r0
 800b714:	4630      	mov	r0, r6
 800b716:	f000 f879 	bl	800b80c <_malloc_r>
 800b71a:	b948      	cbnz	r0, 800b730 <__smakebuf_r+0x44>
 800b71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b720:	059a      	lsls	r2, r3, #22
 800b722:	d4ef      	bmi.n	800b704 <__smakebuf_r+0x18>
 800b724:	f023 0303 	bic.w	r3, r3, #3
 800b728:	f043 0302 	orr.w	r3, r3, #2
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	e7e3      	b.n	800b6f8 <__smakebuf_r+0xc>
 800b730:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <__smakebuf_r+0x7c>)
 800b732:	62b3      	str	r3, [r6, #40]	; 0x28
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	6020      	str	r0, [r4, #0]
 800b738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	9b00      	ldr	r3, [sp, #0]
 800b740:	6163      	str	r3, [r4, #20]
 800b742:	9b01      	ldr	r3, [sp, #4]
 800b744:	6120      	str	r0, [r4, #16]
 800b746:	b15b      	cbz	r3, 800b760 <__smakebuf_r+0x74>
 800b748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b74c:	4630      	mov	r0, r6
 800b74e:	f000 fc2d 	bl	800bfac <_isatty_r>
 800b752:	b128      	cbz	r0, 800b760 <__smakebuf_r+0x74>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f023 0303 	bic.w	r3, r3, #3
 800b75a:	f043 0301 	orr.w	r3, r3, #1
 800b75e:	81a3      	strh	r3, [r4, #12]
 800b760:	89a0      	ldrh	r0, [r4, #12]
 800b762:	4305      	orrs	r5, r0
 800b764:	81a5      	strh	r5, [r4, #12]
 800b766:	e7cd      	b.n	800b704 <__smakebuf_r+0x18>
 800b768:	0800b4fd 	.word	0x0800b4fd

0800b76c <_free_r>:
 800b76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b76e:	2900      	cmp	r1, #0
 800b770:	d048      	beq.n	800b804 <_free_r+0x98>
 800b772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b776:	9001      	str	r0, [sp, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f1a1 0404 	sub.w	r4, r1, #4
 800b77e:	bfb8      	it	lt
 800b780:	18e4      	addlt	r4, r4, r3
 800b782:	f000 fc35 	bl	800bff0 <__malloc_lock>
 800b786:	4a20      	ldr	r2, [pc, #128]	; (800b808 <_free_r+0x9c>)
 800b788:	9801      	ldr	r0, [sp, #4]
 800b78a:	6813      	ldr	r3, [r2, #0]
 800b78c:	4615      	mov	r5, r2
 800b78e:	b933      	cbnz	r3, 800b79e <_free_r+0x32>
 800b790:	6063      	str	r3, [r4, #4]
 800b792:	6014      	str	r4, [r2, #0]
 800b794:	b003      	add	sp, #12
 800b796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b79a:	f000 bc2f 	b.w	800bffc <__malloc_unlock>
 800b79e:	42a3      	cmp	r3, r4
 800b7a0:	d90b      	bls.n	800b7ba <_free_r+0x4e>
 800b7a2:	6821      	ldr	r1, [r4, #0]
 800b7a4:	1862      	adds	r2, r4, r1
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	bf04      	itt	eq
 800b7aa:	681a      	ldreq	r2, [r3, #0]
 800b7ac:	685b      	ldreq	r3, [r3, #4]
 800b7ae:	6063      	str	r3, [r4, #4]
 800b7b0:	bf04      	itt	eq
 800b7b2:	1852      	addeq	r2, r2, r1
 800b7b4:	6022      	streq	r2, [r4, #0]
 800b7b6:	602c      	str	r4, [r5, #0]
 800b7b8:	e7ec      	b.n	800b794 <_free_r+0x28>
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	b10b      	cbz	r3, 800b7c4 <_free_r+0x58>
 800b7c0:	42a3      	cmp	r3, r4
 800b7c2:	d9fa      	bls.n	800b7ba <_free_r+0x4e>
 800b7c4:	6811      	ldr	r1, [r2, #0]
 800b7c6:	1855      	adds	r5, r2, r1
 800b7c8:	42a5      	cmp	r5, r4
 800b7ca:	d10b      	bne.n	800b7e4 <_free_r+0x78>
 800b7cc:	6824      	ldr	r4, [r4, #0]
 800b7ce:	4421      	add	r1, r4
 800b7d0:	1854      	adds	r4, r2, r1
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	6011      	str	r1, [r2, #0]
 800b7d6:	d1dd      	bne.n	800b794 <_free_r+0x28>
 800b7d8:	681c      	ldr	r4, [r3, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	6053      	str	r3, [r2, #4]
 800b7de:	4421      	add	r1, r4
 800b7e0:	6011      	str	r1, [r2, #0]
 800b7e2:	e7d7      	b.n	800b794 <_free_r+0x28>
 800b7e4:	d902      	bls.n	800b7ec <_free_r+0x80>
 800b7e6:	230c      	movs	r3, #12
 800b7e8:	6003      	str	r3, [r0, #0]
 800b7ea:	e7d3      	b.n	800b794 <_free_r+0x28>
 800b7ec:	6825      	ldr	r5, [r4, #0]
 800b7ee:	1961      	adds	r1, r4, r5
 800b7f0:	428b      	cmp	r3, r1
 800b7f2:	bf04      	itt	eq
 800b7f4:	6819      	ldreq	r1, [r3, #0]
 800b7f6:	685b      	ldreq	r3, [r3, #4]
 800b7f8:	6063      	str	r3, [r4, #4]
 800b7fa:	bf04      	itt	eq
 800b7fc:	1949      	addeq	r1, r1, r5
 800b7fe:	6021      	streq	r1, [r4, #0]
 800b800:	6054      	str	r4, [r2, #4]
 800b802:	e7c7      	b.n	800b794 <_free_r+0x28>
 800b804:	b003      	add	sp, #12
 800b806:	bd30      	pop	{r4, r5, pc}
 800b808:	240000a0 	.word	0x240000a0

0800b80c <_malloc_r>:
 800b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80e:	1ccd      	adds	r5, r1, #3
 800b810:	f025 0503 	bic.w	r5, r5, #3
 800b814:	3508      	adds	r5, #8
 800b816:	2d0c      	cmp	r5, #12
 800b818:	bf38      	it	cc
 800b81a:	250c      	movcc	r5, #12
 800b81c:	2d00      	cmp	r5, #0
 800b81e:	4606      	mov	r6, r0
 800b820:	db01      	blt.n	800b826 <_malloc_r+0x1a>
 800b822:	42a9      	cmp	r1, r5
 800b824:	d903      	bls.n	800b82e <_malloc_r+0x22>
 800b826:	230c      	movs	r3, #12
 800b828:	6033      	str	r3, [r6, #0]
 800b82a:	2000      	movs	r0, #0
 800b82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b82e:	f000 fbdf 	bl	800bff0 <__malloc_lock>
 800b832:	4921      	ldr	r1, [pc, #132]	; (800b8b8 <_malloc_r+0xac>)
 800b834:	680a      	ldr	r2, [r1, #0]
 800b836:	4614      	mov	r4, r2
 800b838:	b99c      	cbnz	r4, 800b862 <_malloc_r+0x56>
 800b83a:	4f20      	ldr	r7, [pc, #128]	; (800b8bc <_malloc_r+0xb0>)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	b923      	cbnz	r3, 800b84a <_malloc_r+0x3e>
 800b840:	4621      	mov	r1, r4
 800b842:	4630      	mov	r0, r6
 800b844:	f000 fb2a 	bl	800be9c <_sbrk_r>
 800b848:	6038      	str	r0, [r7, #0]
 800b84a:	4629      	mov	r1, r5
 800b84c:	4630      	mov	r0, r6
 800b84e:	f000 fb25 	bl	800be9c <_sbrk_r>
 800b852:	1c43      	adds	r3, r0, #1
 800b854:	d123      	bne.n	800b89e <_malloc_r+0x92>
 800b856:	230c      	movs	r3, #12
 800b858:	6033      	str	r3, [r6, #0]
 800b85a:	4630      	mov	r0, r6
 800b85c:	f000 fbce 	bl	800bffc <__malloc_unlock>
 800b860:	e7e3      	b.n	800b82a <_malloc_r+0x1e>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	1b5b      	subs	r3, r3, r5
 800b866:	d417      	bmi.n	800b898 <_malloc_r+0x8c>
 800b868:	2b0b      	cmp	r3, #11
 800b86a:	d903      	bls.n	800b874 <_malloc_r+0x68>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	441c      	add	r4, r3
 800b870:	6025      	str	r5, [r4, #0]
 800b872:	e004      	b.n	800b87e <_malloc_r+0x72>
 800b874:	6863      	ldr	r3, [r4, #4]
 800b876:	42a2      	cmp	r2, r4
 800b878:	bf0c      	ite	eq
 800b87a:	600b      	streq	r3, [r1, #0]
 800b87c:	6053      	strne	r3, [r2, #4]
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 fbbc 	bl	800bffc <__malloc_unlock>
 800b884:	f104 000b 	add.w	r0, r4, #11
 800b888:	1d23      	adds	r3, r4, #4
 800b88a:	f020 0007 	bic.w	r0, r0, #7
 800b88e:	1ac2      	subs	r2, r0, r3
 800b890:	d0cc      	beq.n	800b82c <_malloc_r+0x20>
 800b892:	1a1b      	subs	r3, r3, r0
 800b894:	50a3      	str	r3, [r4, r2]
 800b896:	e7c9      	b.n	800b82c <_malloc_r+0x20>
 800b898:	4622      	mov	r2, r4
 800b89a:	6864      	ldr	r4, [r4, #4]
 800b89c:	e7cc      	b.n	800b838 <_malloc_r+0x2c>
 800b89e:	1cc4      	adds	r4, r0, #3
 800b8a0:	f024 0403 	bic.w	r4, r4, #3
 800b8a4:	42a0      	cmp	r0, r4
 800b8a6:	d0e3      	beq.n	800b870 <_malloc_r+0x64>
 800b8a8:	1a21      	subs	r1, r4, r0
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f000 faf6 	bl	800be9c <_sbrk_r>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d1dd      	bne.n	800b870 <_malloc_r+0x64>
 800b8b4:	e7cf      	b.n	800b856 <_malloc_r+0x4a>
 800b8b6:	bf00      	nop
 800b8b8:	240000a0 	.word	0x240000a0
 800b8bc:	240000a4 	.word	0x240000a4

0800b8c0 <__sfputc_r>:
 800b8c0:	6893      	ldr	r3, [r2, #8]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	b410      	push	{r4}
 800b8c8:	6093      	str	r3, [r2, #8]
 800b8ca:	da08      	bge.n	800b8de <__sfputc_r+0x1e>
 800b8cc:	6994      	ldr	r4, [r2, #24]
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	db01      	blt.n	800b8d6 <__sfputc_r+0x16>
 800b8d2:	290a      	cmp	r1, #10
 800b8d4:	d103      	bne.n	800b8de <__sfputc_r+0x1e>
 800b8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8da:	f7ff bc69 	b.w	800b1b0 <__swbuf_r>
 800b8de:	6813      	ldr	r3, [r2, #0]
 800b8e0:	1c58      	adds	r0, r3, #1
 800b8e2:	6010      	str	r0, [r2, #0]
 800b8e4:	7019      	strb	r1, [r3, #0]
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <__sfputs_r>:
 800b8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	460f      	mov	r7, r1
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	18d5      	adds	r5, r2, r3
 800b8f8:	42ac      	cmp	r4, r5
 800b8fa:	d101      	bne.n	800b900 <__sfputs_r+0x12>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e007      	b.n	800b910 <__sfputs_r+0x22>
 800b900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b904:	463a      	mov	r2, r7
 800b906:	4630      	mov	r0, r6
 800b908:	f7ff ffda 	bl	800b8c0 <__sfputc_r>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d1f3      	bne.n	800b8f8 <__sfputs_r+0xa>
 800b910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b914 <_vfiprintf_r>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	460d      	mov	r5, r1
 800b91a:	b09d      	sub	sp, #116	; 0x74
 800b91c:	4614      	mov	r4, r2
 800b91e:	4698      	mov	r8, r3
 800b920:	4606      	mov	r6, r0
 800b922:	b118      	cbz	r0, 800b92c <_vfiprintf_r+0x18>
 800b924:	6983      	ldr	r3, [r0, #24]
 800b926:	b90b      	cbnz	r3, 800b92c <_vfiprintf_r+0x18>
 800b928:	f7ff fe1c 	bl	800b564 <__sinit>
 800b92c:	4b89      	ldr	r3, [pc, #548]	; (800bb54 <_vfiprintf_r+0x240>)
 800b92e:	429d      	cmp	r5, r3
 800b930:	d11b      	bne.n	800b96a <_vfiprintf_r+0x56>
 800b932:	6875      	ldr	r5, [r6, #4]
 800b934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b936:	07d9      	lsls	r1, r3, #31
 800b938:	d405      	bmi.n	800b946 <_vfiprintf_r+0x32>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	059a      	lsls	r2, r3, #22
 800b93e:	d402      	bmi.n	800b946 <_vfiprintf_r+0x32>
 800b940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b942:	f7ff fead 	bl	800b6a0 <__retarget_lock_acquire_recursive>
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	071b      	lsls	r3, r3, #28
 800b94a:	d501      	bpl.n	800b950 <_vfiprintf_r+0x3c>
 800b94c:	692b      	ldr	r3, [r5, #16]
 800b94e:	b9eb      	cbnz	r3, 800b98c <_vfiprintf_r+0x78>
 800b950:	4629      	mov	r1, r5
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff fc7e 	bl	800b254 <__swsetup_r>
 800b958:	b1c0      	cbz	r0, 800b98c <_vfiprintf_r+0x78>
 800b95a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95c:	07dc      	lsls	r4, r3, #31
 800b95e:	d50e      	bpl.n	800b97e <_vfiprintf_r+0x6a>
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	b01d      	add	sp, #116	; 0x74
 800b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96a:	4b7b      	ldr	r3, [pc, #492]	; (800bb58 <_vfiprintf_r+0x244>)
 800b96c:	429d      	cmp	r5, r3
 800b96e:	d101      	bne.n	800b974 <_vfiprintf_r+0x60>
 800b970:	68b5      	ldr	r5, [r6, #8]
 800b972:	e7df      	b.n	800b934 <_vfiprintf_r+0x20>
 800b974:	4b79      	ldr	r3, [pc, #484]	; (800bb5c <_vfiprintf_r+0x248>)
 800b976:	429d      	cmp	r5, r3
 800b978:	bf08      	it	eq
 800b97a:	68f5      	ldreq	r5, [r6, #12]
 800b97c:	e7da      	b.n	800b934 <_vfiprintf_r+0x20>
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	0598      	lsls	r0, r3, #22
 800b982:	d4ed      	bmi.n	800b960 <_vfiprintf_r+0x4c>
 800b984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b986:	f7ff fe8c 	bl	800b6a2 <__retarget_lock_release_recursive>
 800b98a:	e7e9      	b.n	800b960 <_vfiprintf_r+0x4c>
 800b98c:	2300      	movs	r3, #0
 800b98e:	9309      	str	r3, [sp, #36]	; 0x24
 800b990:	2320      	movs	r3, #32
 800b992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b996:	f8cd 800c 	str.w	r8, [sp, #12]
 800b99a:	2330      	movs	r3, #48	; 0x30
 800b99c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb60 <_vfiprintf_r+0x24c>
 800b9a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a4:	f04f 0901 	mov.w	r9, #1
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	469a      	mov	sl, r3
 800b9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b0:	b10a      	cbz	r2, 800b9b6 <_vfiprintf_r+0xa2>
 800b9b2:	2a25      	cmp	r2, #37	; 0x25
 800b9b4:	d1f9      	bne.n	800b9aa <_vfiprintf_r+0x96>
 800b9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ba:	d00b      	beq.n	800b9d4 <_vfiprintf_r+0xc0>
 800b9bc:	465b      	mov	r3, fp
 800b9be:	4622      	mov	r2, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7ff ff93 	bl	800b8ee <__sfputs_r>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	f000 80aa 	beq.w	800bb22 <_vfiprintf_r+0x20e>
 800b9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d0:	445a      	add	r2, fp
 800b9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 80a2 	beq.w	800bb22 <_vfiprintf_r+0x20e>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e8:	f10a 0a01 	add.w	sl, sl, #1
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f6:	4654      	mov	r4, sl
 800b9f8:	2205      	movs	r2, #5
 800b9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fe:	4858      	ldr	r0, [pc, #352]	; (800bb60 <_vfiprintf_r+0x24c>)
 800ba00:	f7f4 fc86 	bl	8000310 <memchr>
 800ba04:	9a04      	ldr	r2, [sp, #16]
 800ba06:	b9d8      	cbnz	r0, 800ba40 <_vfiprintf_r+0x12c>
 800ba08:	06d1      	lsls	r1, r2, #27
 800ba0a:	bf44      	itt	mi
 800ba0c:	2320      	movmi	r3, #32
 800ba0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba12:	0713      	lsls	r3, r2, #28
 800ba14:	bf44      	itt	mi
 800ba16:	232b      	movmi	r3, #43	; 0x2b
 800ba18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba20:	2b2a      	cmp	r3, #42	; 0x2a
 800ba22:	d015      	beq.n	800ba50 <_vfiprintf_r+0x13c>
 800ba24:	9a07      	ldr	r2, [sp, #28]
 800ba26:	4654      	mov	r4, sl
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f04f 0c0a 	mov.w	ip, #10
 800ba2e:	4621      	mov	r1, r4
 800ba30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba34:	3b30      	subs	r3, #48	; 0x30
 800ba36:	2b09      	cmp	r3, #9
 800ba38:	d94e      	bls.n	800bad8 <_vfiprintf_r+0x1c4>
 800ba3a:	b1b0      	cbz	r0, 800ba6a <_vfiprintf_r+0x156>
 800ba3c:	9207      	str	r2, [sp, #28]
 800ba3e:	e014      	b.n	800ba6a <_vfiprintf_r+0x156>
 800ba40:	eba0 0308 	sub.w	r3, r0, r8
 800ba44:	fa09 f303 	lsl.w	r3, r9, r3
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	46a2      	mov	sl, r4
 800ba4e:	e7d2      	b.n	800b9f6 <_vfiprintf_r+0xe2>
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	1d19      	adds	r1, r3, #4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9103      	str	r1, [sp, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfbb      	ittet	lt
 800ba5c:	425b      	neglt	r3, r3
 800ba5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba62:	9307      	strge	r3, [sp, #28]
 800ba64:	9307      	strlt	r3, [sp, #28]
 800ba66:	bfb8      	it	lt
 800ba68:	9204      	strlt	r2, [sp, #16]
 800ba6a:	7823      	ldrb	r3, [r4, #0]
 800ba6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba6e:	d10c      	bne.n	800ba8a <_vfiprintf_r+0x176>
 800ba70:	7863      	ldrb	r3, [r4, #1]
 800ba72:	2b2a      	cmp	r3, #42	; 0x2a
 800ba74:	d135      	bne.n	800bae2 <_vfiprintf_r+0x1ce>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	1d1a      	adds	r2, r3, #4
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	9203      	str	r2, [sp, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bfb8      	it	lt
 800ba82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba86:	3402      	adds	r4, #2
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb70 <_vfiprintf_r+0x25c>
 800ba8e:	7821      	ldrb	r1, [r4, #0]
 800ba90:	2203      	movs	r2, #3
 800ba92:	4650      	mov	r0, sl
 800ba94:	f7f4 fc3c 	bl	8000310 <memchr>
 800ba98:	b140      	cbz	r0, 800baac <_vfiprintf_r+0x198>
 800ba9a:	2340      	movs	r3, #64	; 0x40
 800ba9c:	eba0 000a 	sub.w	r0, r0, sl
 800baa0:	fa03 f000 	lsl.w	r0, r3, r0
 800baa4:	9b04      	ldr	r3, [sp, #16]
 800baa6:	4303      	orrs	r3, r0
 800baa8:	3401      	adds	r4, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab0:	482c      	ldr	r0, [pc, #176]	; (800bb64 <_vfiprintf_r+0x250>)
 800bab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bab6:	2206      	movs	r2, #6
 800bab8:	f7f4 fc2a 	bl	8000310 <memchr>
 800babc:	2800      	cmp	r0, #0
 800babe:	d03f      	beq.n	800bb40 <_vfiprintf_r+0x22c>
 800bac0:	4b29      	ldr	r3, [pc, #164]	; (800bb68 <_vfiprintf_r+0x254>)
 800bac2:	bb1b      	cbnz	r3, 800bb0c <_vfiprintf_r+0x1f8>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	3307      	adds	r3, #7
 800bac8:	f023 0307 	bic.w	r3, r3, #7
 800bacc:	3308      	adds	r3, #8
 800bace:	9303      	str	r3, [sp, #12]
 800bad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad2:	443b      	add	r3, r7
 800bad4:	9309      	str	r3, [sp, #36]	; 0x24
 800bad6:	e767      	b.n	800b9a8 <_vfiprintf_r+0x94>
 800bad8:	fb0c 3202 	mla	r2, ip, r2, r3
 800badc:	460c      	mov	r4, r1
 800bade:	2001      	movs	r0, #1
 800bae0:	e7a5      	b.n	800ba2e <_vfiprintf_r+0x11a>
 800bae2:	2300      	movs	r3, #0
 800bae4:	3401      	adds	r4, #1
 800bae6:	9305      	str	r3, [sp, #20]
 800bae8:	4619      	mov	r1, r3
 800baea:	f04f 0c0a 	mov.w	ip, #10
 800baee:	4620      	mov	r0, r4
 800baf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf4:	3a30      	subs	r2, #48	; 0x30
 800baf6:	2a09      	cmp	r2, #9
 800baf8:	d903      	bls.n	800bb02 <_vfiprintf_r+0x1ee>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0c5      	beq.n	800ba8a <_vfiprintf_r+0x176>
 800bafe:	9105      	str	r1, [sp, #20]
 800bb00:	e7c3      	b.n	800ba8a <_vfiprintf_r+0x176>
 800bb02:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb06:	4604      	mov	r4, r0
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e7f0      	b.n	800baee <_vfiprintf_r+0x1da>
 800bb0c:	ab03      	add	r3, sp, #12
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	462a      	mov	r2, r5
 800bb12:	4b16      	ldr	r3, [pc, #88]	; (800bb6c <_vfiprintf_r+0x258>)
 800bb14:	a904      	add	r1, sp, #16
 800bb16:	4630      	mov	r0, r6
 800bb18:	f3af 8000 	nop.w
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	1c78      	adds	r0, r7, #1
 800bb20:	d1d6      	bne.n	800bad0 <_vfiprintf_r+0x1bc>
 800bb22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb24:	07d9      	lsls	r1, r3, #31
 800bb26:	d405      	bmi.n	800bb34 <_vfiprintf_r+0x220>
 800bb28:	89ab      	ldrh	r3, [r5, #12]
 800bb2a:	059a      	lsls	r2, r3, #22
 800bb2c:	d402      	bmi.n	800bb34 <_vfiprintf_r+0x220>
 800bb2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb30:	f7ff fdb7 	bl	800b6a2 <__retarget_lock_release_recursive>
 800bb34:	89ab      	ldrh	r3, [r5, #12]
 800bb36:	065b      	lsls	r3, r3, #25
 800bb38:	f53f af12 	bmi.w	800b960 <_vfiprintf_r+0x4c>
 800bb3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb3e:	e711      	b.n	800b964 <_vfiprintf_r+0x50>
 800bb40:	ab03      	add	r3, sp, #12
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	462a      	mov	r2, r5
 800bb46:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <_vfiprintf_r+0x258>)
 800bb48:	a904      	add	r1, sp, #16
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f000 f880 	bl	800bc50 <_printf_i>
 800bb50:	e7e4      	b.n	800bb1c <_vfiprintf_r+0x208>
 800bb52:	bf00      	nop
 800bb54:	0800c14c 	.word	0x0800c14c
 800bb58:	0800c16c 	.word	0x0800c16c
 800bb5c:	0800c12c 	.word	0x0800c12c
 800bb60:	0800c18c 	.word	0x0800c18c
 800bb64:	0800c196 	.word	0x0800c196
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	0800b8ef 	.word	0x0800b8ef
 800bb70:	0800c192 	.word	0x0800c192

0800bb74 <_printf_common>:
 800bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb78:	4616      	mov	r6, r2
 800bb7a:	4699      	mov	r9, r3
 800bb7c:	688a      	ldr	r2, [r1, #8]
 800bb7e:	690b      	ldr	r3, [r1, #16]
 800bb80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb84:	4293      	cmp	r3, r2
 800bb86:	bfb8      	it	lt
 800bb88:	4613      	movlt	r3, r2
 800bb8a:	6033      	str	r3, [r6, #0]
 800bb8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb90:	4607      	mov	r7, r0
 800bb92:	460c      	mov	r4, r1
 800bb94:	b10a      	cbz	r2, 800bb9a <_printf_common+0x26>
 800bb96:	3301      	adds	r3, #1
 800bb98:	6033      	str	r3, [r6, #0]
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	0699      	lsls	r1, r3, #26
 800bb9e:	bf42      	ittt	mi
 800bba0:	6833      	ldrmi	r3, [r6, #0]
 800bba2:	3302      	addmi	r3, #2
 800bba4:	6033      	strmi	r3, [r6, #0]
 800bba6:	6825      	ldr	r5, [r4, #0]
 800bba8:	f015 0506 	ands.w	r5, r5, #6
 800bbac:	d106      	bne.n	800bbbc <_printf_common+0x48>
 800bbae:	f104 0a19 	add.w	sl, r4, #25
 800bbb2:	68e3      	ldr	r3, [r4, #12]
 800bbb4:	6832      	ldr	r2, [r6, #0]
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	42ab      	cmp	r3, r5
 800bbba:	dc26      	bgt.n	800bc0a <_printf_common+0x96>
 800bbbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbc0:	1e13      	subs	r3, r2, #0
 800bbc2:	6822      	ldr	r2, [r4, #0]
 800bbc4:	bf18      	it	ne
 800bbc6:	2301      	movne	r3, #1
 800bbc8:	0692      	lsls	r2, r2, #26
 800bbca:	d42b      	bmi.n	800bc24 <_printf_common+0xb0>
 800bbcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	47c0      	blx	r8
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d01e      	beq.n	800bc18 <_printf_common+0xa4>
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	68e5      	ldr	r5, [r4, #12]
 800bbde:	6832      	ldr	r2, [r6, #0]
 800bbe0:	f003 0306 	and.w	r3, r3, #6
 800bbe4:	2b04      	cmp	r3, #4
 800bbe6:	bf08      	it	eq
 800bbe8:	1aad      	subeq	r5, r5, r2
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	6922      	ldr	r2, [r4, #16]
 800bbee:	bf0c      	ite	eq
 800bbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbf4:	2500      	movne	r5, #0
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	bfc4      	itt	gt
 800bbfa:	1a9b      	subgt	r3, r3, r2
 800bbfc:	18ed      	addgt	r5, r5, r3
 800bbfe:	2600      	movs	r6, #0
 800bc00:	341a      	adds	r4, #26
 800bc02:	42b5      	cmp	r5, r6
 800bc04:	d11a      	bne.n	800bc3c <_printf_common+0xc8>
 800bc06:	2000      	movs	r0, #0
 800bc08:	e008      	b.n	800bc1c <_printf_common+0xa8>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4652      	mov	r2, sl
 800bc0e:	4649      	mov	r1, r9
 800bc10:	4638      	mov	r0, r7
 800bc12:	47c0      	blx	r8
 800bc14:	3001      	adds	r0, #1
 800bc16:	d103      	bne.n	800bc20 <_printf_common+0xac>
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc20:	3501      	adds	r5, #1
 800bc22:	e7c6      	b.n	800bbb2 <_printf_common+0x3e>
 800bc24:	18e1      	adds	r1, r4, r3
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	2030      	movs	r0, #48	; 0x30
 800bc2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc2e:	4422      	add	r2, r4
 800bc30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc38:	3302      	adds	r3, #2
 800bc3a:	e7c7      	b.n	800bbcc <_printf_common+0x58>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4622      	mov	r2, r4
 800bc40:	4649      	mov	r1, r9
 800bc42:	4638      	mov	r0, r7
 800bc44:	47c0      	blx	r8
 800bc46:	3001      	adds	r0, #1
 800bc48:	d0e6      	beq.n	800bc18 <_printf_common+0xa4>
 800bc4a:	3601      	adds	r6, #1
 800bc4c:	e7d9      	b.n	800bc02 <_printf_common+0x8e>
	...

0800bc50 <_printf_i>:
 800bc50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc54:	460c      	mov	r4, r1
 800bc56:	4691      	mov	r9, r2
 800bc58:	7e27      	ldrb	r7, [r4, #24]
 800bc5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc5c:	2f78      	cmp	r7, #120	; 0x78
 800bc5e:	4680      	mov	r8, r0
 800bc60:	469a      	mov	sl, r3
 800bc62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc66:	d807      	bhi.n	800bc78 <_printf_i+0x28>
 800bc68:	2f62      	cmp	r7, #98	; 0x62
 800bc6a:	d80a      	bhi.n	800bc82 <_printf_i+0x32>
 800bc6c:	2f00      	cmp	r7, #0
 800bc6e:	f000 80d8 	beq.w	800be22 <_printf_i+0x1d2>
 800bc72:	2f58      	cmp	r7, #88	; 0x58
 800bc74:	f000 80a3 	beq.w	800bdbe <_printf_i+0x16e>
 800bc78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc80:	e03a      	b.n	800bcf8 <_printf_i+0xa8>
 800bc82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc86:	2b15      	cmp	r3, #21
 800bc88:	d8f6      	bhi.n	800bc78 <_printf_i+0x28>
 800bc8a:	a001      	add	r0, pc, #4	; (adr r0, 800bc90 <_printf_i+0x40>)
 800bc8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bcfd 	.word	0x0800bcfd
 800bc98:	0800bc79 	.word	0x0800bc79
 800bc9c:	0800bc79 	.word	0x0800bc79
 800bca0:	0800bc79 	.word	0x0800bc79
 800bca4:	0800bc79 	.word	0x0800bc79
 800bca8:	0800bcfd 	.word	0x0800bcfd
 800bcac:	0800bc79 	.word	0x0800bc79
 800bcb0:	0800bc79 	.word	0x0800bc79
 800bcb4:	0800bc79 	.word	0x0800bc79
 800bcb8:	0800bc79 	.word	0x0800bc79
 800bcbc:	0800be09 	.word	0x0800be09
 800bcc0:	0800bd2d 	.word	0x0800bd2d
 800bcc4:	0800bdeb 	.word	0x0800bdeb
 800bcc8:	0800bc79 	.word	0x0800bc79
 800bccc:	0800bc79 	.word	0x0800bc79
 800bcd0:	0800be2b 	.word	0x0800be2b
 800bcd4:	0800bc79 	.word	0x0800bc79
 800bcd8:	0800bd2d 	.word	0x0800bd2d
 800bcdc:	0800bc79 	.word	0x0800bc79
 800bce0:	0800bc79 	.word	0x0800bc79
 800bce4:	0800bdf3 	.word	0x0800bdf3
 800bce8:	680b      	ldr	r3, [r1, #0]
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	600a      	str	r2, [r1, #0]
 800bcf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bcf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e0a3      	b.n	800be44 <_printf_i+0x1f4>
 800bcfc:	6825      	ldr	r5, [r4, #0]
 800bcfe:	6808      	ldr	r0, [r1, #0]
 800bd00:	062e      	lsls	r6, r5, #24
 800bd02:	f100 0304 	add.w	r3, r0, #4
 800bd06:	d50a      	bpl.n	800bd1e <_printf_i+0xce>
 800bd08:	6805      	ldr	r5, [r0, #0]
 800bd0a:	600b      	str	r3, [r1, #0]
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	da03      	bge.n	800bd18 <_printf_i+0xc8>
 800bd10:	232d      	movs	r3, #45	; 0x2d
 800bd12:	426d      	negs	r5, r5
 800bd14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd18:	485e      	ldr	r0, [pc, #376]	; (800be94 <_printf_i+0x244>)
 800bd1a:	230a      	movs	r3, #10
 800bd1c:	e019      	b.n	800bd52 <_printf_i+0x102>
 800bd1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bd22:	6805      	ldr	r5, [r0, #0]
 800bd24:	600b      	str	r3, [r1, #0]
 800bd26:	bf18      	it	ne
 800bd28:	b22d      	sxthne	r5, r5
 800bd2a:	e7ef      	b.n	800bd0c <_printf_i+0xbc>
 800bd2c:	680b      	ldr	r3, [r1, #0]
 800bd2e:	6825      	ldr	r5, [r4, #0]
 800bd30:	1d18      	adds	r0, r3, #4
 800bd32:	6008      	str	r0, [r1, #0]
 800bd34:	0628      	lsls	r0, r5, #24
 800bd36:	d501      	bpl.n	800bd3c <_printf_i+0xec>
 800bd38:	681d      	ldr	r5, [r3, #0]
 800bd3a:	e002      	b.n	800bd42 <_printf_i+0xf2>
 800bd3c:	0669      	lsls	r1, r5, #25
 800bd3e:	d5fb      	bpl.n	800bd38 <_printf_i+0xe8>
 800bd40:	881d      	ldrh	r5, [r3, #0]
 800bd42:	4854      	ldr	r0, [pc, #336]	; (800be94 <_printf_i+0x244>)
 800bd44:	2f6f      	cmp	r7, #111	; 0x6f
 800bd46:	bf0c      	ite	eq
 800bd48:	2308      	moveq	r3, #8
 800bd4a:	230a      	movne	r3, #10
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd52:	6866      	ldr	r6, [r4, #4]
 800bd54:	60a6      	str	r6, [r4, #8]
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	bfa2      	ittt	ge
 800bd5a:	6821      	ldrge	r1, [r4, #0]
 800bd5c:	f021 0104 	bicge.w	r1, r1, #4
 800bd60:	6021      	strge	r1, [r4, #0]
 800bd62:	b90d      	cbnz	r5, 800bd68 <_printf_i+0x118>
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	d04d      	beq.n	800be04 <_printf_i+0x1b4>
 800bd68:	4616      	mov	r6, r2
 800bd6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd6e:	fb03 5711 	mls	r7, r3, r1, r5
 800bd72:	5dc7      	ldrb	r7, [r0, r7]
 800bd74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd78:	462f      	mov	r7, r5
 800bd7a:	42bb      	cmp	r3, r7
 800bd7c:	460d      	mov	r5, r1
 800bd7e:	d9f4      	bls.n	800bd6a <_printf_i+0x11a>
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d10b      	bne.n	800bd9c <_printf_i+0x14c>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	07df      	lsls	r7, r3, #31
 800bd88:	d508      	bpl.n	800bd9c <_printf_i+0x14c>
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	6861      	ldr	r1, [r4, #4]
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	bfde      	ittt	le
 800bd92:	2330      	movle	r3, #48	; 0x30
 800bd94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd9c:	1b92      	subs	r2, r2, r6
 800bd9e:	6122      	str	r2, [r4, #16]
 800bda0:	f8cd a000 	str.w	sl, [sp]
 800bda4:	464b      	mov	r3, r9
 800bda6:	aa03      	add	r2, sp, #12
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4640      	mov	r0, r8
 800bdac:	f7ff fee2 	bl	800bb74 <_printf_common>
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	d14c      	bne.n	800be4e <_printf_i+0x1fe>
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb8:	b004      	add	sp, #16
 800bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdbe:	4835      	ldr	r0, [pc, #212]	; (800be94 <_printf_i+0x244>)
 800bdc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	680e      	ldr	r6, [r1, #0]
 800bdc8:	061f      	lsls	r7, r3, #24
 800bdca:	f856 5b04 	ldr.w	r5, [r6], #4
 800bdce:	600e      	str	r6, [r1, #0]
 800bdd0:	d514      	bpl.n	800bdfc <_printf_i+0x1ac>
 800bdd2:	07d9      	lsls	r1, r3, #31
 800bdd4:	bf44      	itt	mi
 800bdd6:	f043 0320 	orrmi.w	r3, r3, #32
 800bdda:	6023      	strmi	r3, [r4, #0]
 800bddc:	b91d      	cbnz	r5, 800bde6 <_printf_i+0x196>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	f023 0320 	bic.w	r3, r3, #32
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	2310      	movs	r3, #16
 800bde8:	e7b0      	b.n	800bd4c <_printf_i+0xfc>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	f043 0320 	orr.w	r3, r3, #32
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	2378      	movs	r3, #120	; 0x78
 800bdf4:	4828      	ldr	r0, [pc, #160]	; (800be98 <_printf_i+0x248>)
 800bdf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdfa:	e7e3      	b.n	800bdc4 <_printf_i+0x174>
 800bdfc:	065e      	lsls	r6, r3, #25
 800bdfe:	bf48      	it	mi
 800be00:	b2ad      	uxthmi	r5, r5
 800be02:	e7e6      	b.n	800bdd2 <_printf_i+0x182>
 800be04:	4616      	mov	r6, r2
 800be06:	e7bb      	b.n	800bd80 <_printf_i+0x130>
 800be08:	680b      	ldr	r3, [r1, #0]
 800be0a:	6826      	ldr	r6, [r4, #0]
 800be0c:	6960      	ldr	r0, [r4, #20]
 800be0e:	1d1d      	adds	r5, r3, #4
 800be10:	600d      	str	r5, [r1, #0]
 800be12:	0635      	lsls	r5, r6, #24
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	d501      	bpl.n	800be1c <_printf_i+0x1cc>
 800be18:	6018      	str	r0, [r3, #0]
 800be1a:	e002      	b.n	800be22 <_printf_i+0x1d2>
 800be1c:	0671      	lsls	r1, r6, #25
 800be1e:	d5fb      	bpl.n	800be18 <_printf_i+0x1c8>
 800be20:	8018      	strh	r0, [r3, #0]
 800be22:	2300      	movs	r3, #0
 800be24:	6123      	str	r3, [r4, #16]
 800be26:	4616      	mov	r6, r2
 800be28:	e7ba      	b.n	800bda0 <_printf_i+0x150>
 800be2a:	680b      	ldr	r3, [r1, #0]
 800be2c:	1d1a      	adds	r2, r3, #4
 800be2e:	600a      	str	r2, [r1, #0]
 800be30:	681e      	ldr	r6, [r3, #0]
 800be32:	6862      	ldr	r2, [r4, #4]
 800be34:	2100      	movs	r1, #0
 800be36:	4630      	mov	r0, r6
 800be38:	f7f4 fa6a 	bl	8000310 <memchr>
 800be3c:	b108      	cbz	r0, 800be42 <_printf_i+0x1f2>
 800be3e:	1b80      	subs	r0, r0, r6
 800be40:	6060      	str	r0, [r4, #4]
 800be42:	6863      	ldr	r3, [r4, #4]
 800be44:	6123      	str	r3, [r4, #16]
 800be46:	2300      	movs	r3, #0
 800be48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be4c:	e7a8      	b.n	800bda0 <_printf_i+0x150>
 800be4e:	6923      	ldr	r3, [r4, #16]
 800be50:	4632      	mov	r2, r6
 800be52:	4649      	mov	r1, r9
 800be54:	4640      	mov	r0, r8
 800be56:	47d0      	blx	sl
 800be58:	3001      	adds	r0, #1
 800be5a:	d0ab      	beq.n	800bdb4 <_printf_i+0x164>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	079b      	lsls	r3, r3, #30
 800be60:	d413      	bmi.n	800be8a <_printf_i+0x23a>
 800be62:	68e0      	ldr	r0, [r4, #12]
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	4298      	cmp	r0, r3
 800be68:	bfb8      	it	lt
 800be6a:	4618      	movlt	r0, r3
 800be6c:	e7a4      	b.n	800bdb8 <_printf_i+0x168>
 800be6e:	2301      	movs	r3, #1
 800be70:	4632      	mov	r2, r6
 800be72:	4649      	mov	r1, r9
 800be74:	4640      	mov	r0, r8
 800be76:	47d0      	blx	sl
 800be78:	3001      	adds	r0, #1
 800be7a:	d09b      	beq.n	800bdb4 <_printf_i+0x164>
 800be7c:	3501      	adds	r5, #1
 800be7e:	68e3      	ldr	r3, [r4, #12]
 800be80:	9903      	ldr	r1, [sp, #12]
 800be82:	1a5b      	subs	r3, r3, r1
 800be84:	42ab      	cmp	r3, r5
 800be86:	dcf2      	bgt.n	800be6e <_printf_i+0x21e>
 800be88:	e7eb      	b.n	800be62 <_printf_i+0x212>
 800be8a:	2500      	movs	r5, #0
 800be8c:	f104 0619 	add.w	r6, r4, #25
 800be90:	e7f5      	b.n	800be7e <_printf_i+0x22e>
 800be92:	bf00      	nop
 800be94:	0800c19d 	.word	0x0800c19d
 800be98:	0800c1ae 	.word	0x0800c1ae

0800be9c <_sbrk_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d06      	ldr	r5, [pc, #24]	; (800beb8 <_sbrk_r+0x1c>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	f7f6 fbc4 	bl	8002634 <_sbrk>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_sbrk_r+0x1a>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_sbrk_r+0x1a>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	24000670 	.word	0x24000670

0800bebc <__sread>:
 800bebc:	b510      	push	{r4, lr}
 800bebe:	460c      	mov	r4, r1
 800bec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec4:	f000 f8a0 	bl	800c008 <_read_r>
 800bec8:	2800      	cmp	r0, #0
 800beca:	bfab      	itete	ge
 800becc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bece:	89a3      	ldrhlt	r3, [r4, #12]
 800bed0:	181b      	addge	r3, r3, r0
 800bed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bed6:	bfac      	ite	ge
 800bed8:	6563      	strge	r3, [r4, #84]	; 0x54
 800beda:	81a3      	strhlt	r3, [r4, #12]
 800bedc:	bd10      	pop	{r4, pc}

0800bede <__swrite>:
 800bede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee2:	461f      	mov	r7, r3
 800bee4:	898b      	ldrh	r3, [r1, #12]
 800bee6:	05db      	lsls	r3, r3, #23
 800bee8:	4605      	mov	r5, r0
 800beea:	460c      	mov	r4, r1
 800beec:	4616      	mov	r6, r2
 800beee:	d505      	bpl.n	800befc <__swrite+0x1e>
 800bef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef4:	2302      	movs	r3, #2
 800bef6:	2200      	movs	r2, #0
 800bef8:	f000 f868 	bl	800bfcc <_lseek_r>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf06:	81a3      	strh	r3, [r4, #12]
 800bf08:	4632      	mov	r2, r6
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf12:	f000 b817 	b.w	800bf44 <_write_r>

0800bf16 <__sseek>:
 800bf16:	b510      	push	{r4, lr}
 800bf18:	460c      	mov	r4, r1
 800bf1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1e:	f000 f855 	bl	800bfcc <_lseek_r>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	bf15      	itete	ne
 800bf28:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf32:	81a3      	strheq	r3, [r4, #12]
 800bf34:	bf18      	it	ne
 800bf36:	81a3      	strhne	r3, [r4, #12]
 800bf38:	bd10      	pop	{r4, pc}

0800bf3a <__sclose>:
 800bf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf3e:	f000 b813 	b.w	800bf68 <_close_r>
	...

0800bf44 <_write_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d07      	ldr	r5, [pc, #28]	; (800bf64 <_write_r+0x20>)
 800bf48:	4604      	mov	r4, r0
 800bf4a:	4608      	mov	r0, r1
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	602a      	str	r2, [r5, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	f7f6 fb1d 	bl	8002592 <_write>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	d102      	bne.n	800bf62 <_write_r+0x1e>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	b103      	cbz	r3, 800bf62 <_write_r+0x1e>
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	24000670 	.word	0x24000670

0800bf68 <_close_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4d06      	ldr	r5, [pc, #24]	; (800bf84 <_close_r+0x1c>)
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	4608      	mov	r0, r1
 800bf72:	602b      	str	r3, [r5, #0]
 800bf74:	f7f6 fb29 	bl	80025ca <_close>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_close_r+0x1a>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_close_r+0x1a>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	24000670 	.word	0x24000670

0800bf88 <_fstat_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d07      	ldr	r5, [pc, #28]	; (800bfa8 <_fstat_r+0x20>)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	4611      	mov	r1, r2
 800bf94:	602b      	str	r3, [r5, #0]
 800bf96:	f7f6 fb24 	bl	80025e2 <_fstat>
 800bf9a:	1c43      	adds	r3, r0, #1
 800bf9c:	d102      	bne.n	800bfa4 <_fstat_r+0x1c>
 800bf9e:	682b      	ldr	r3, [r5, #0]
 800bfa0:	b103      	cbz	r3, 800bfa4 <_fstat_r+0x1c>
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	bd38      	pop	{r3, r4, r5, pc}
 800bfa6:	bf00      	nop
 800bfa8:	24000670 	.word	0x24000670

0800bfac <_isatty_r>:
 800bfac:	b538      	push	{r3, r4, r5, lr}
 800bfae:	4d06      	ldr	r5, [pc, #24]	; (800bfc8 <_isatty_r+0x1c>)
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	602b      	str	r3, [r5, #0]
 800bfb8:	f7f6 fb23 	bl	8002602 <_isatty>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_isatty_r+0x1a>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_isatty_r+0x1a>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	24000670 	.word	0x24000670

0800bfcc <_lseek_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	; (800bfec <_lseek_r+0x20>)
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f7f6 fb1c 	bl	8002618 <_lseek>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_lseek_r+0x1e>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_lseek_r+0x1e>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	24000670 	.word	0x24000670

0800bff0 <__malloc_lock>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__malloc_lock+0x8>)
 800bff2:	f7ff bb55 	b.w	800b6a0 <__retarget_lock_acquire_recursive>
 800bff6:	bf00      	nop
 800bff8:	24000668 	.word	0x24000668

0800bffc <__malloc_unlock>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__malloc_unlock+0x8>)
 800bffe:	f7ff bb50 	b.w	800b6a2 <__retarget_lock_release_recursive>
 800c002:	bf00      	nop
 800c004:	24000668 	.word	0x24000668

0800c008 <_read_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	; (800c028 <_read_r+0x20>)
 800c00c:	4604      	mov	r4, r0
 800c00e:	4608      	mov	r0, r1
 800c010:	4611      	mov	r1, r2
 800c012:	2200      	movs	r2, #0
 800c014:	602a      	str	r2, [r5, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f7f6 fa9e 	bl	8002558 <_read>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_read_r+0x1e>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	b103      	cbz	r3, 800c026 <_read_r+0x1e>
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	24000670 	.word	0x24000670

0800c02c <_init>:
 800c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02e:	bf00      	nop
 800c030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c032:	bc08      	pop	{r3}
 800c034:	469e      	mov	lr, r3
 800c036:	4770      	bx	lr

0800c038 <_fini>:
 800c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03a:	bf00      	nop
 800c03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03e:	bc08      	pop	{r3}
 800c040:	469e      	mov	lr, r3
 800c042:	4770      	bx	lr
