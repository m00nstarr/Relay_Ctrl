
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c320  0800c320  0001c320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c324  0800c324  0001c324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800c328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000600  24000074  0800c39c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000674  0800c39c  00020674  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033b3b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000440e  00000000  00000000  00053bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  00057ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c18  00000000  00000000  00059d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c27  00000000  00000000  0005b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023389  00000000  00000000  0009558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017db4b  00000000  00000000  000b8918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00236463  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008990  00000000  00000000  002364b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c184 	.word	0x0800c184

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800c184 	.word	0x0800c184

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__io_putchar>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <__io_putchar+0x20>)
 80006ba:	f009 fbab 	bl	8009e14 <HAL_UART_Transmit>

  return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	24000158 	.word	0x24000158

080006cc <print_timestamp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_timestamp(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

	//timestamp = HAL_GetTick();
	timestamp = timing_counter*400 + TIM13->CNT *10 ;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <print_timestamp+0x78>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006d8:	fb02 f103 	mul.w	r1, r2, r3
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <print_timestamp+0x7c>)
 80006de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	440b      	add	r3, r1
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <print_timestamp+0x80>)
 80006ec:	6013      	str	r3, [r2, #0]
	timespan = timestamp - timespan;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <print_timestamp+0x80>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <print_timestamp+0x84>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <print_timestamp+0x84>)
 80006fa:	6013      	str	r3, [r2, #0]

	printf("timing_counter(%d): %ld\r\n", timing_counter, timestamp*10);
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <print_timestamp+0x78>)
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <print_timestamp+0x80>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	461a      	mov	r2, r3
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <print_timestamp+0x88>)
 8000710:	f00a fd6c 	bl	800b1ec <iprintf>
	if(timing_counter > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <print_timestamp+0x78>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <print_timestamp+0x64>
		printf("%ld ms ellapsed after prev timestamp. \r\n", timespan*10);
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <print_timestamp+0x84>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4619      	mov	r1, r3
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <print_timestamp+0x8c>)
 800072c:	f00a fd5e 	bl	800b1ec <iprintf>
	}

	printf("--------------------\r\n");
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <print_timestamp+0x90>)
 8000732:	f00a fde1 	bl	800b2f8 <puts>

	timespan = timestamp;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <print_timestamp+0x80>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <print_timestamp+0x84>)
 800073c:	6013      	str	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	24000090 	.word	0x24000090
 8000748:	40001c00 	.word	0x40001c00
 800074c:	240001e8 	.word	0x240001e8
 8000750:	240000f4 	.word	0x240000f4
 8000754:	0800c19c 	.word	0x0800c19c
 8000758:	0800c1b8 	.word	0x0800c1b8
 800075c:	0800c1e4 	.word	0x0800c1e4

08000760 <autostart>:

void autostart(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if(timing_counter == 0){
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <autostart+0xb4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d107      	bne.n	800077c <autostart+0x1c>
		HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	4829      	ldr	r0, [pc, #164]	; (8000818 <autostart+0xb8>)
 8000772:	f004 fc61 	bl	8005038 <HAL_GPIO_WritePin>
		print_timestamp();
 8000776:	f7ff ffa9 	bl	80006cc <print_timestamp>
 800077a:	e043      	b.n	8000804 <autostart+0xa4>
	}
	else if(timing_counter == 1){
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <autostart+0xb4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d107      	bne.n	8000794 <autostart+0x34>
		HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2108      	movs	r1, #8
 8000788:	4823      	ldr	r0, [pc, #140]	; (8000818 <autostart+0xb8>)
 800078a:	f004 fc55 	bl	8005038 <HAL_GPIO_WritePin>
		print_timestamp();
 800078e:	f7ff ff9d 	bl	80006cc <print_timestamp>
 8000792:	e037      	b.n	8000804 <autostart+0xa4>
	}
	else if(timing_counter == 10){
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <autostart+0xb4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b0a      	cmp	r3, #10
 800079a:	d107      	bne.n	80007ac <autostart+0x4c>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	481e      	ldr	r0, [pc, #120]	; (800081c <autostart+0xbc>)
 80007a2:	f004 fc49 	bl	8005038 <HAL_GPIO_WritePin>
		print_timestamp();
 80007a6:	f7ff ff91 	bl	80006cc <print_timestamp>
 80007aa:	e02b      	b.n	8000804 <autostart+0xa4>
	}
	else if(timing_counter == 20){
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <autostart+0xb4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b14      	cmp	r3, #20
 80007b2:	d108      	bne.n	80007c6 <autostart+0x66>
		HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	4819      	ldr	r0, [pc, #100]	; (8000820 <autostart+0xc0>)
 80007bc:	f004 fc3c 	bl	8005038 <HAL_GPIO_WritePin>
		print_timestamp();
 80007c0:	f7ff ff84 	bl	80006cc <print_timestamp>
 80007c4:	e01e      	b.n	8000804 <autostart+0xa4>
	}
	else if(timing_counter == 21){
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <autostart+0xb4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b15      	cmp	r3, #21
 80007cc:	d108      	bne.n	80007e0 <autostart+0x80>
		HAL_GPIO_WritePin(GPIOA, MP_Relay_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <autostart+0xc4>)
 80007d6:	f004 fc2f 	bl	8005038 <HAL_GPIO_WritePin>
		print_timestamp();
 80007da:	f7ff ff77 	bl	80006cc <print_timestamp>
 80007de:	e011      	b.n	8000804 <autostart+0xa4>
	}
	else if(timing_counter == 30){
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <autostart+0xb4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b1e      	cmp	r3, #30
 80007e6:	d10d      	bne.n	8000804 <autostart+0xa4>
		HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <autostart+0xbc>)
 80007ee:	f004 fc23 	bl	8005038 <HAL_GPIO_WritePin>
		print_timestamp();
 80007f2:	f7ff ff6b 	bl	80006cc <print_timestamp>
		HAL_TIM_Base_Stop_IT(&htim13);
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <autostart+0xc8>)
 80007f8:	f008 f8d2 	bl	80089a0 <HAL_TIM_Base_Stop_IT>
		timing_counter = -1;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <autostart+0xb4>)
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000802:	601a      	str	r2, [r3, #0]
	}
	timing_counter += 1;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <autostart+0xb4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a02      	ldr	r2, [pc, #8]	; (8000814 <autostart+0xb4>)
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	24000090 	.word	0x24000090
 8000818:	58020800 	.word	0x58020800
 800081c:	58021400 	.word	0x58021400
 8000820:	58021800 	.word	0x58021800
 8000824:	58020000 	.word	0x58020000
 8000828:	24000388 	.word	0x24000388

0800082c <HAL_TIM_PeriodElapsedCallback>:

//Timer interrupted every 0.4s
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x16>
		autostart();
 800083e:	f7ff ff8f 	bl	8000760 <autostart>
	}
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40001c00 	.word	0x40001c00

08000850 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	d102      	bne.n	8000868 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_TIM_Base_Start_IT(&htim13);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <HAL_GPIO_EXTI_Callback+0x20>)
 8000864:	f008 f816 	bl	8008894 <HAL_TIM_Base_Start_IT>
		// step 1: turn on MN IGBT & Relay
		//HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, RESET);
		//HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, RESET);
	}
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	24000388 	.word	0x24000388

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f002 f832 	bl	80028e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f83c 	bl	80008f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000880:	f000 f8b4 	bl	80009ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 fe30 	bl	80014e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000888:	f000 f8dc 	bl	8000a44 <MX_ADC1_Init>
  MX_ADC2_Init();
 800088c:	f000 f952 	bl	8000b34 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000890:	f000 f9b2 	bl	8000bf8 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000894:	f000 fa22 	bl	8000cdc <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000898:	f000 fa52 	bl	8000d40 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800089c:	f000 fab4 	bl	8000e08 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 80008a0:	f000 fb16 	bl	8000ed0 <MX_I2C4_Init>
  MX_TIM1_Init();
 80008a4:	f000 fbb0 	bl	8001008 <MX_TIM1_Init>
  MX_TIM4_Init();
 80008a8:	f000 fc3c 	bl	8001124 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008ac:	f000 fcaa 	bl	8001204 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80008b0:	f000 fd82 	bl	80013b8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80008b4:	f000 fdcc 	bl	8001450 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 80008b8:	f000 fd36 	bl	8001328 <MX_TIM13_Init>
  MX_TIM7_Init();
 80008bc:	f000 fcfc 	bl	80012b8 <MX_TIM7_Init>
  MX_RTC_Init();
 80008c0:	f000 fb46 	bl	8000f50 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timespan = 0;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <main+0x78>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2104      	movs	r1, #4
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <main+0x7c>)
 80008d0:	f004 fbb2 	bl	8005038 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2108      	movs	r1, #8
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <main+0x7c>)
 80008da:	f004 fbad 	bl	8005038 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <main+0x80>)
 80008e6:	f004 fba7 	bl	8005038 <HAL_GPIO_WritePin>

  while (1)
 80008ea:	e7fe      	b.n	80008ea <main+0x76>
 80008ec:	240000f4 	.word	0x240000f4
 80008f0:	58020800 	.word	0x58020800
 80008f4:	58021800 	.word	0x58021800

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09c      	sub	sp, #112	; 0x70
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	224c      	movs	r2, #76	; 0x4c
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00a fc68 	bl	800b1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2220      	movs	r2, #32
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00a fc62 	bl	800b1dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000918:	2004      	movs	r0, #4
 800091a:	f004 fce9 	bl	80052f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <SystemClock_Config+0xec>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <SystemClock_Config+0xec>)
 8000928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <SystemClock_Config+0xec>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093a:	bf00      	nop
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <SystemClock_Config+0xec>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000948:	d1f8      	bne.n	800093c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800094a:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <SystemClock_Config+0xf0>)
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	f023 0303 	bic.w	r3, r3, #3
 8000952:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <SystemClock_Config+0xf0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800095a:	2309      	movs	r3, #9
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096c:	2302      	movs	r3, #2
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000970:	2305      	movs	r3, #5
 8000972:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000974:	236e      	movs	r3, #110	; 0x6e
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000984:	2308      	movs	r3, #8
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000988:	2300      	movs	r3, #0
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4618      	mov	r0, r3
 8000996:	f004 fd05 	bl	80053a4 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009a0:	f001 f930 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	233f      	movs	r3, #63	; 0x3f
 80009a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2303      	movs	r3, #3
 80009aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b0:	2308      	movs	r3, #8
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2103      	movs	r1, #3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 f896 	bl	8005afc <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009d6:	f001 f915 	bl	8001c04 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3770      	adds	r7, #112	; 0x70
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58024800 	.word	0x58024800
 80009e8:	58024400 	.word	0x58024400

080009ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ae      	sub	sp, #184	; 0xb8
 80009f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	22b4      	movs	r2, #180	; 0xb4
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f00a fbef 	bl	800b1dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a02:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000a04:	2305      	movs	r3, #5
 8000a06:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000a08:	2350      	movs	r3, #80	; 0x50
 8000a0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f005 fbf1 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000a38:	f001 f8e4 	bl	8001c04 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	37b8      	adds	r7, #184	; 0xb8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2224      	movs	r2, #36	; 0x24
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00a fbbd 	bl	800b1dc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a64:	4a31      	ldr	r2, [pc, #196]	; (8000b2c <MX_ADC1_Init+0xe8>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000ac2:	f002 fa1f 	bl	8002f04 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f001 f89a 	bl	8001c04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000adc:	f003 fa58 	bl	8003f90 <HAL_ADCEx_MultiModeConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ae6:	f001 f88d 	bl	8001c04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aee:	2306      	movs	r3, #6
 8000af0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000afa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afc:	2304      	movs	r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_ADC1_Init+0xe4>)
 8000b10:	f002 fc00 	bl	8003314 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b1a:	f001 f873 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	240002a8 	.word	0x240002a8
 8000b2c:	40022000 	.word	0x40022000
 8000b30:	04300002 	.word	0x04300002

08000b34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2224      	movs	r2, #36	; 0x24
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00a fb4b 	bl	800b1dc <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b48:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <MX_ADC2_Init+0xc0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000ba6:	f002 f9ad 	bl	8002f04 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000bb0:	f001 f828 	bl	8001c04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bc4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000bda:	f002 fb9b 	bl	8003314 <HAL_ADC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000be4:	f001 f80e 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	240001ec 	.word	0x240001ec
 8000bf4:	40022100 	.word	0x40022100

08000bf8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2224      	movs	r2, #36	; 0x24
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a fae9 	bl	800b1dc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <MX_ADC3_Init+0xe0>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c18:	2208      	movs	r2, #8
 8000c1a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000c7e:	f002 f941 	bl	8002f04 <HAL_ADC_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000c88:	f000 ffbc 	bl	8001c04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c90:	2306      	movs	r3, #6
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_ADC3_Init+0xdc>)
 8000cbc:	f002 fb2a 	bl	8003314 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000cc6:	f000 ff9d 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	24000318 	.word	0x24000318
 8000cd8:	58026000 	.word	0x58026000

08000cdc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2224      	movs	r2, #36	; 0x24
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00a fa77 	bl	800b1dc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_DAC1_Init+0x5c>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_DAC1_Init+0x60>)
 8000cf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <MX_DAC1_Init+0x5c>)
 8000cf6:	f003 fb3c 	bl	8004372 <HAL_DAC_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d00:	f000 ff80 	bl	8001c04 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_DAC1_Init+0x5c>)
 8000d20:	f003 fb4a 	bl	80043b8 <HAL_DAC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 ff6b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000144 	.word	0x24000144
 8000d3c:	40007400 	.word	0x40007400

08000d40 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <MX_FDCAN1_Init+0xc4>)
 8000d48:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dca:	2204      	movs	r2, #4
 8000dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000de8:	2204      	movs	r2, #4
 8000dea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_FDCAN1_Init+0xc0>)
 8000dee:	f003 fc13 	bl	8004618 <HAL_FDCAN_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000df8:	f000 ff04 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000488 	.word	0x24000488
 8000e04:	4000a000 	.word	0x4000a000

08000e08 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ecc <MX_FDCAN2_Init+0xc4>)
 8000e10:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_FDCAN2_Init+0xc0>)
 8000eb6:	f003 fbaf 	bl	8004618 <HAL_FDCAN_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ec0:	f000 fea0 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	240005c0 	.word	0x240005c0
 8000ecc:	4000a400 	.word	0x4000a400

08000ed0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_I2C4_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MX_I2C4_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000f0c:	f004 f8c8 	bl	80050a0 <HAL_I2C_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f16:	f000 fe75 	bl	8001c04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000f1e:	f004 f94f 	bl	80051c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 fe6c 	bl	8001c04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_I2C4_Init+0x74>)
 8000f30:	f004 f991 	bl	8005256 <HAL_I2CEx_ConfigDigitalFilter>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fe63 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	240000a8 	.word	0x240000a8
 8000f48:	58001c00 	.word	0x58001c00
 8000f4c:	60404e72 	.word	0x60404e72

08000f50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <MX_RTC_Init+0xb4>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f76:	227f      	movs	r2, #127	; 0x7f
 8000f78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f98:	4819      	ldr	r0, [pc, #100]	; (8001000 <MX_RTC_Init+0xb0>)
 8000f9a:	f007 f9cd 	bl	8008338 <HAL_RTC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000fa4:	f000 fe2e 	bl	8001c04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8000fa8:	2322      	movs	r3, #34	; 0x22
 8000faa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22;
 8000fac:	2322      	movs	r3, #34	; 0x22
 8000fae:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x22;
 8000fb0:	2322      	movs	r3, #34	; 0x22
 8000fb2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480f      	ldr	r0, [pc, #60]	; (8001000 <MX_RTC_Init+0xb0>)
 8000fc4:	f007 fa30 	bl	8008428 <HAL_RTC_SetTime>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000fce:	f000 fe19 	bl	8001c04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000fde:	2322      	movs	r3, #34	; 0x22
 8000fe0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_RTC_Init+0xb0>)
 8000fea:	f007 fabb 	bl	8008564 <HAL_RTC_SetDate>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ff4:	f000 fe06 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	24000464 	.word	0x24000464
 8001004:	58004000 	.word	0x58004000

08001008 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b098      	sub	sp, #96	; 0x60
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2234      	movs	r2, #52	; 0x34
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f00a f8d1 	bl	800b1dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <MX_TIM1_Init+0x114>)
 800103c:	4a38      	ldr	r2, [pc, #224]	; (8001120 <MX_TIM1_Init+0x118>)
 800103e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <MX_TIM1_Init+0x114>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <MX_TIM1_Init+0x114>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <MX_TIM1_Init+0x114>)
 800104e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001052:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <MX_TIM1_Init+0x114>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <MX_TIM1_Init+0x114>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <MX_TIM1_Init+0x114>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001066:	482d      	ldr	r0, [pc, #180]	; (800111c <MX_TIM1_Init+0x114>)
 8001068:	f007 fcc9 	bl	80089fe <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 fdc7 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001082:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001086:	4619      	mov	r1, r3
 8001088:	4824      	ldr	r0, [pc, #144]	; (800111c <MX_TIM1_Init+0x114>)
 800108a:	f008 fd19 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001094:	f000 fdb6 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b4:	220c      	movs	r2, #12
 80010b6:	4619      	mov	r1, r3
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_TIM1_Init+0x114>)
 80010ba:	f007 ff13 	bl	8008ee4 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80010c4:	f000 fd9e 	bl	8001c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM1_Init+0x114>)
 80010fe:	f008 fd7b 	bl	8009bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001108:	f000 fd7c 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM1_Init+0x114>)
 800110e:	f001 f8f5 	bl	80022fc <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3760      	adds	r7, #96	; 0x60
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000528 	.word	0x24000528
 8001120:	40010000 	.word	0x40010000

08001124 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <MX_TIM4_Init+0xd8>)
 800114a:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <MX_TIM4_Init+0xdc>)
 800114c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_TIM4_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_TIM4_Init+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_TIM4_Init+0xd8>)
 800115c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001160:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_TIM4_Init+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_TIM4_Init+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800116e:	4823      	ldr	r0, [pc, #140]	; (80011fc <MX_TIM4_Init+0xd8>)
 8001170:	f007 fc45 	bl	80089fe <HAL_TIM_PWM_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 fd43 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <MX_TIM4_Init+0xd8>)
 800118e:	f008 fc97 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001198:	f000 fd34 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2204      	movs	r2, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <MX_TIM4_Init+0xd8>)
 80011b4:	f007 fe96 	bl	8008ee4 <HAL_TIM_PWM_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80011be:	f000 fd21 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	2208      	movs	r2, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM4_Init+0xd8>)
 80011ca:	f007 fe8b 	bl	8008ee4 <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80011d4:	f000 fd16 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	220c      	movs	r2, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM4_Init+0xd8>)
 80011e0:	f007 fe80 	bl	8008ee4 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80011ea:	f000 fd0b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM4_Init+0xd8>)
 80011f0:	f001 f884 	bl	80022fc <HAL_TIM_MspPostInit>

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000f8 	.word	0x240000f8
 8001200:	40000800 	.word	0x40000800

08001204 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_TIM5_Init+0xac>)
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <MX_TIM5_Init+0xb0>)
 800122c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MX_TIM5_Init+0xac>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_TIM5_Init+0xac>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_TIM5_Init+0xac>)
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_TIM5_Init+0xac>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_TIM5_Init+0xac>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800124e:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MX_TIM5_Init+0xac>)
 8001250:	f007 fbd5 	bl	80089fe <HAL_TIM_PWM_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800125a:	f000 fcd3 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4810      	ldr	r0, [pc, #64]	; (80012b0 <MX_TIM5_Init+0xac>)
 800126e:	f008 fc27 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001278:	f000 fcc4 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM5_Init+0xac>)
 8001294:	f007 fe26 	bl	8008ee4 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800129e:	f000 fcb1 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM5_Init+0xac>)
 80012a4:	f001 f82a 	bl	80022fc <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2400025c 	.word	0x2400025c
 80012b4:	40000c00 	.word	0x40000c00

080012b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_TIM7_Init+0x68>)
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <MX_TIM7_Init+0x6c>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2750-1;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_TIM7_Init+0x68>)
 80012d0:	f640 22bd 	movw	r2, #2749	; 0xabd
 80012d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_TIM7_Init+0x68>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_TIM7_Init+0x68>)
 80012de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_TIM7_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_TIM7_Init+0x68>)
 80012ec:	f007 fa7a 	bl	80087e4 <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012f6:	f000 fc85 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_TIM7_Init+0x68>)
 8001308:	f008 fbda 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001312:	f000 fc77 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24000574 	.word	0x24000574
 8001324:	40001400 	.word	0x40001400

08001328 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM13_Init+0x88>)
 800133c:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <MX_TIM13_Init+0x8c>)
 800133e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 27500 -1;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM13_Init+0x88>)
 8001342:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8001346:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM13_Init+0x88>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4000-1;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM13_Init+0x88>)
 8001350:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001354:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM13_Init+0x88>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_TIM13_Init+0x88>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM13_Init+0x88>)
 8001364:	f007 fa3e 	bl	80087e4 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 800136e:	f000 fc49 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <MX_TIM13_Init+0x88>)
 8001374:	f007 fb9a 	bl	8008aac <HAL_TIM_IC_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM13_Init+0x5a>
  {
    Error_Handler();
 800137e:	f000 fc41 	bl	8001c04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001386:	2301      	movs	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM13_Init+0x88>)
 800139a:	f007 fd07 	bl	8008dac <HAL_TIM_IC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM13_Init+0x80>
  {
    Error_Handler();
 80013a4:	f000 fc2e 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  /* USER CODE END TIM13_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	24000388 	.word	0x24000388
 80013b4:	40001c00 	.word	0x40001c00

080013b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <MX_USART1_UART_Init+0x94>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART1_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <MX_USART1_UART_Init+0x90>)
 8001402:	f008 fcb7 	bl	8009d74 <HAL_UART_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800140c:	f000 fbfa 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001410:	2100      	movs	r1, #0
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_USART1_UART_Init+0x90>)
 8001414:	f009 fde0 	bl	800afd8 <HAL_UARTEx_SetTxFifoThreshold>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800141e:	f000 fbf1 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_USART1_UART_Init+0x90>)
 8001426:	f009 fe15 	bl	800b054 <HAL_UARTEx_SetRxFifoThreshold>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001430:	f000 fbe8 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_USART1_UART_Init+0x90>)
 8001436:	f009 fd96 	bl	800af66 <HAL_UARTEx_DisableFifoMode>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001440:	f000 fbe0 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	240003d4 	.word	0x240003d4
 800144c:	40011000 	.word	0x40011000

08001450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <MX_USART3_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800149a:	f008 fc6b 	bl	8009d74 <HAL_UART_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014a4:	f000 fbae 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ac:	f009 fd94 	bl	800afd8 <HAL_UARTEx_SetTxFifoThreshold>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014b6:	f000 fba5 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 80014be:	f009 fdc9 	bl	800b054 <HAL_UARTEx_SetRxFifoThreshold>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f000 fb9c 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ce:	f009 fd4a 	bl	800af66 <HAL_UARTEx_DisableFifoMode>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f000 fb94 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24000158 	.word	0x24000158
 80014e4:	40004800 	.word	0x40004800

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	; 0x38
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4bbf      	ldr	r3, [pc, #764]	; (80017fc <MX_GPIO_Init+0x314>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	4abd      	ldr	r2, [pc, #756]	; (80017fc <MX_GPIO_Init+0x314>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150e:	4bbb      	ldr	r3, [pc, #748]	; (80017fc <MX_GPIO_Init+0x314>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800151c:	4bb7      	ldr	r3, [pc, #732]	; (80017fc <MX_GPIO_Init+0x314>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	4ab6      	ldr	r2, [pc, #728]	; (80017fc <MX_GPIO_Init+0x314>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152c:	4bb3      	ldr	r3, [pc, #716]	; (80017fc <MX_GPIO_Init+0x314>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	4bb0      	ldr	r3, [pc, #704]	; (80017fc <MX_GPIO_Init+0x314>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	4aae      	ldr	r2, [pc, #696]	; (80017fc <MX_GPIO_Init+0x314>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154a:	4bac      	ldr	r3, [pc, #688]	; (80017fc <MX_GPIO_Init+0x314>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4ba8      	ldr	r3, [pc, #672]	; (80017fc <MX_GPIO_Init+0x314>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	4aa7      	ldr	r2, [pc, #668]	; (80017fc <MX_GPIO_Init+0x314>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001568:	4ba4      	ldr	r3, [pc, #656]	; (80017fc <MX_GPIO_Init+0x314>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001576:	4ba1      	ldr	r3, [pc, #644]	; (80017fc <MX_GPIO_Init+0x314>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	4a9f      	ldr	r2, [pc, #636]	; (80017fc <MX_GPIO_Init+0x314>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001586:	4b9d      	ldr	r3, [pc, #628]	; (80017fc <MX_GPIO_Init+0x314>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	4b99      	ldr	r3, [pc, #612]	; (80017fc <MX_GPIO_Init+0x314>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	4a98      	ldr	r2, [pc, #608]	; (80017fc <MX_GPIO_Init+0x314>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a4:	4b95      	ldr	r3, [pc, #596]	; (80017fc <MX_GPIO_Init+0x314>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b92      	ldr	r3, [pc, #584]	; (80017fc <MX_GPIO_Init+0x314>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	4a90      	ldr	r2, [pc, #576]	; (80017fc <MX_GPIO_Init+0x314>)
 80015ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c2:	4b8e      	ldr	r3, [pc, #568]	; (80017fc <MX_GPIO_Init+0x314>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d0:	4b8a      	ldr	r3, [pc, #552]	; (80017fc <MX_GPIO_Init+0x314>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	4a89      	ldr	r2, [pc, #548]	; (80017fc <MX_GPIO_Init+0x314>)
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e0:	4b86      	ldr	r3, [pc, #536]	; (80017fc <MX_GPIO_Init+0x314>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f240 4102 	movw	r1, #1026	; 0x402
 80015f4:	4882      	ldr	r0, [pc, #520]	; (8001800 <MX_GPIO_Init+0x318>)
 80015f6:	f003 fd1f 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8001600:	4880      	ldr	r0, [pc, #512]	; (8001804 <MX_GPIO_Init+0x31c>)
 8001602:	f003 fd19 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 8001606:	2200      	movs	r2, #0
 8001608:	f24a 1138 	movw	r1, #41272	; 0xa138
 800160c:	487e      	ldr	r0, [pc, #504]	; (8001808 <MX_GPIO_Init+0x320>)
 800160e:	f003 fd13 	bl	8005038 <HAL_GPIO_WritePin>
                          |ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MP_Relay_GPIO_Port, MP_Relay_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001618:	487c      	ldr	r0, [pc, #496]	; (800180c <MX_GPIO_Init+0x324>)
 800161a:	f003 fd0d 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8001624:	487a      	ldr	r0, [pc, #488]	; (8001810 <MX_GPIO_Init+0x328>)
 8001626:	f003 fd07 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin|MN_Relay_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	210c      	movs	r1, #12
 800162e:	4879      	ldr	r0, [pc, #484]	; (8001814 <MX_GPIO_Init+0x32c>)
 8001630:	f003 fd02 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2160      	movs	r1, #96	; 0x60
 8001638:	4877      	ldr	r0, [pc, #476]	; (8001818 <MX_GPIO_Init+0x330>)
 800163a:	f003 fcfd 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 800163e:	f240 3303 	movw	r3, #771	; 0x303
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001650:	230e      	movs	r3, #14
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4870      	ldr	r0, [pc, #448]	; (800181c <MX_GPIO_Init+0x334>)
 800165c:	f003 fb44 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001660:	f640 0303 	movw	r3, #2051	; 0x803
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001672:	2309      	movs	r3, #9
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4862      	ldr	r0, [pc, #392]	; (8001808 <MX_GPIO_Init+0x320>)
 800167e:	f003 fb33 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001694:	2309      	movs	r3, #9
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	485a      	ldr	r0, [pc, #360]	; (8001808 <MX_GPIO_Init+0x320>)
 80016a0:	f003 fb22 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 80016a4:	2349      	movs	r3, #73	; 0x49
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016b4:	230e      	movs	r3, #14
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	4850      	ldr	r0, [pc, #320]	; (8001800 <MX_GPIO_Init+0x318>)
 80016c0:	f003 fb12 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 80016c4:	f240 4302 	movw	r3, #1026	; 0x402
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4848      	ldr	r0, [pc, #288]	; (8001800 <MX_GPIO_Init+0x318>)
 80016de:	f003 fb03 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80016e2:	2330      	movs	r3, #48	; 0x30
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016f2:	230a      	movs	r3, #10
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4841      	ldr	r0, [pc, #260]	; (8001804 <MX_GPIO_Init+0x31c>)
 80016fe:	f003 faf3 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001702:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	483a      	ldr	r0, [pc, #232]	; (8001804 <MX_GPIO_Init+0x31c>)
 800171c:	f003 fae4 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001720:	f64b 0303 	movw	r3, #47107	; 0xb803
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001732:	230e      	movs	r3, #14
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	4831      	ldr	r0, [pc, #196]	; (8001804 <MX_GPIO_Init+0x31c>)
 800173e:	f003 fad3 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP_IGBT_Pin LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 8001742:	f24a 1338 	movw	r3, #41272	; 0xa138
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	482b      	ldr	r0, [pc, #172]	; (8001808 <MX_GPIO_Init+0x320>)
 800175c:	f003 fac4 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001760:	23b0      	movs	r3, #176	; 0xb0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001770:	230a      	movs	r3, #10
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4821      	ldr	r0, [pc, #132]	; (8001800 <MX_GPIO_Init+0x318>)
 800177c:	f003 fab4 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001780:	2304      	movs	r3, #4
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001790:	230c      	movs	r3, #12
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4819      	ldr	r0, [pc, #100]	; (8001800 <MX_GPIO_Init+0x318>)
 800179c:	f003 faa4 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 80017a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017b2:	230c      	movs	r3, #12
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	4815      	ldr	r0, [pc, #84]	; (8001814 <MX_GPIO_Init+0x32c>)
 80017be:	f003 fa93 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80017d4:	230d      	movs	r3, #13
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	; (800180c <MX_GPIO_Init+0x324>)
 80017e0:	f003 fa82 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 80017e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	e011      	b.n	8001820 <MX_GPIO_Init+0x338>
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020c00 	.word	0x58020c00
 8001804:	58021000 	.word	0x58021000
 8001808:	58021800 	.word	0x58021800
 800180c:	58020000 	.word	0x58020000
 8001810:	58021400 	.word	0x58021400
 8001814:	58020800 	.word	0x58020800
 8001818:	58021c00 	.word	0x58021c00
 800181c:	58020400 	.word	0x58020400
 8001820:	4619      	mov	r1, r3
 8001822:	48bc      	ldr	r0, [pc, #752]	; (8001b14 <MX_GPIO_Init+0x62c>)
 8001824:	f003 fa60 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	48b6      	ldr	r0, [pc, #728]	; (8001b18 <MX_GPIO_Init+0x630>)
 8001840:	f003 fa52 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8001844:	2304      	movs	r3, #4
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001854:	2309      	movs	r3, #9
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	48af      	ldr	r0, [pc, #700]	; (8001b1c <MX_GPIO_Init+0x634>)
 8001860:	f003 fa42 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001864:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001876:	230e      	movs	r3, #14
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	48a7      	ldr	r0, [pc, #668]	; (8001b20 <MX_GPIO_Init+0x638>)
 8001882:	f003 fa31 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8001886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001898:	2303      	movs	r3, #3
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	489f      	ldr	r0, [pc, #636]	; (8001b20 <MX_GPIO_Init+0x638>)
 80018a4:	f003 fa20 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80018a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80018ba:	230a      	movs	r3, #10
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4893      	ldr	r0, [pc, #588]	; (8001b14 <MX_GPIO_Init+0x62c>)
 80018c6:	f003 fa0f 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 80018ca:	f648 7308 	movw	r3, #36616	; 0x8f08
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018dc:	230e      	movs	r3, #14
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	488f      	ldr	r0, [pc, #572]	; (8001b24 <MX_GPIO_Init+0x63c>)
 80018e8:	f003 f9fe 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MP_Relay_Pin */
  GPIO_InitStruct.Pin = MP_Relay_Pin;
 80018ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MP_Relay_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	4883      	ldr	r0, [pc, #524]	; (8001b14 <MX_GPIO_Init+0x62c>)
 8001906:	f003 f9ef 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800191a:	230e      	movs	r3, #14
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	487c      	ldr	r0, [pc, #496]	; (8001b18 <MX_GPIO_Init+0x630>)
 8001926:	f003 f9df 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800193a:	2306      	movs	r3, #6
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4875      	ldr	r0, [pc, #468]	; (8001b1c <MX_GPIO_Init+0x634>)
 8001946:	f003 f9cf 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 800194a:	f241 031f 	movw	r3, #4127	; 0x101f
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800195c:	2309      	movs	r3, #9
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	4619      	mov	r1, r3
 8001966:	4870      	ldr	r0, [pc, #448]	; (8001b28 <MX_GPIO_Init+0x640>)
 8001968:	f003 f9be 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 800196c:	2340      	movs	r3, #64	; 0x40
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800197c:	230a      	movs	r3, #10
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4866      	ldr	r0, [pc, #408]	; (8001b20 <MX_GPIO_Init+0x638>)
 8001988:	f003 f9ae 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800198c:	2304      	movs	r3, #4
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001990:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	485f      	ldr	r0, [pc, #380]	; (8001b20 <MX_GPIO_Init+0x638>)
 80019a2:	f003 f9a1 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_FS_B_Pin;
 80019a6:	f44f 7350 	mov.w	r3, #832	; 0x340
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019b8:	2306      	movs	r3, #6
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4859      	ldr	r0, [pc, #356]	; (8001b28 <MX_GPIO_Init+0x640>)
 80019c4:	f003 f990 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019c8:	2320      	movs	r3, #32
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	4619      	mov	r1, r3
 80019dc:	4852      	ldr	r0, [pc, #328]	; (8001b28 <MX_GPIO_Init+0x640>)
 80019de:	f003 f983 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 80019e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019f4:	2309      	movs	r3, #9
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	484b      	ldr	r0, [pc, #300]	; (8001b2c <MX_GPIO_Init+0x644>)
 8001a00:	f003 f972 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_IGBT_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = PC_IGBT_Pin|STMOD_20_Pin;
 8001a04:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4842      	ldr	r0, [pc, #264]	; (8001b28 <MX_GPIO_Init+0x640>)
 8001a1e:	f003 f963 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a34:	2309      	movs	r3, #9
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	483a      	ldr	r0, [pc, #232]	; (8001b28 <MX_GPIO_Init+0x640>)
 8001a40:	f003 f952 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001a44:	2332      	movs	r3, #50	; 0x32
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a54:	230b      	movs	r3, #11
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482e      	ldr	r0, [pc, #184]	; (8001b18 <MX_GPIO_Init+0x630>)
 8001a60:	f003 f942 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001a64:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a76:	230b      	movs	r3, #11
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	482b      	ldr	r0, [pc, #172]	; (8001b30 <MX_GPIO_Init+0x648>)
 8001a82:	f003 f931 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_IGBT_Pin MN_Relay_Pin */
  GPIO_InitStruct.Pin = MN_IGBT_Pin|MN_Relay_Pin;
 8001a86:	230c      	movs	r3, #12
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <MX_GPIO_Init+0x630>)
 8001a9e:	f003 f923 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	4819      	ldr	r0, [pc, #100]	; (8001b24 <MX_GPIO_Init+0x63c>)
 8001abe:	f003 f913 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 8001ac2:	2318      	movs	r3, #24
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ad2:	230e      	movs	r3, #14
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_GPIO_Init+0x62c>)
 8001ade:	f003 f903 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001ae2:	2386      	movs	r3, #134	; 0x86
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af2:	230b      	movs	r3, #11
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_GPIO_Init+0x62c>)
 8001afe:	f003 f8f3 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b10:	e010      	b.n	8001b34 <MX_GPIO_Init+0x64c>
 8001b12:	bf00      	nop
 8001b14:	58020000 	.word	0x58020000
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58021000 	.word	0x58021000
 8001b20:	58021800 	.word	0x58021800
 8001b24:	58021c00 	.word	0x58021c00
 8001b28:	58021400 	.word	0x58021400
 8001b2c:	58020c00 	.word	0x58020c00
 8001b30:	58020400 	.word	0x58020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <MX_GPIO_Init+0x70c>)
 8001b44:	f003 f8d0 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4826      	ldr	r0, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0x710>)
 8001b60:	f003 f8c2 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4820      	ldr	r0, [pc, #128]	; (8001bfc <MX_GPIO_Init+0x714>)
 8001b7c:	f003 f8b4 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001b80:	2310      	movs	r3, #16
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b90:	2309      	movs	r3, #9
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <MX_GPIO_Init+0x714>)
 8001b9c:	f003 f8a4 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_GPIO_Init+0x718>)
 8001bbc:	f003 f894 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001bc0:	2360      	movs	r3, #96	; 0x60
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_GPIO_Init+0x714>)
 8001bd8:	f003 f886 	bl	8004ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2028      	movs	r0, #40	; 0x28
 8001be2:	f002 fb92 	bl	800430a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be6:	2028      	movs	r0, #40	; 0x28
 8001be8:	f002 fba9 	bl	800433e <HAL_NVIC_EnableIRQ>

}
 8001bec:	bf00      	nop
 8001bee:	3738      	adds	r7, #56	; 0x38
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58021400 	.word	0x58021400
 8001bf8:	58021000 	.word	0x58021000
 8001bfc:	58021c00 	.word	0x58021c00
 8001c00:	58020400 	.word	0x58020400

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_MspInit+0x30>)
 8001c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x30>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x30>)
 8001c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	58024400 	.word	0x58024400

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b090      	sub	sp, #64	; 0x40
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6c      	ldr	r2, [pc, #432]	; (8001e14 <HAL_ADC_MspInit+0x1d0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d14e      	bne.n	8001d04 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c66:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <HAL_ADC_MspInit+0x1d4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a6a      	ldr	r2, [pc, #424]	; (8001e18 <HAL_ADC_MspInit+0x1d4>)
 8001c6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c70:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <HAL_ADC_MspInit+0x1d4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10e      	bne.n	8001c96 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c78:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c7e:	4a67      	ldr	r2, [pc, #412]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c88:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	4a5f      	ldr	r2, [pc, #380]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc4:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	484e      	ldr	r0, [pc, #312]	; (8001e20 <HAL_ADC_MspInit+0x1dc>)
 8001ce6:	f002 ffff 	bl	8004ce8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001cea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cee:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001cf2:	f000 feab 	bl	8002a4c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001cf6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001cfa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001cfe:	f000 fea5 	bl	8002a4c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d02:	e082      	b.n	8001e0a <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a46      	ldr	r2, [pc, #280]	; (8001e24 <HAL_ADC_MspInit+0x1e0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d133      	bne.n	8001d76 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d0e:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <HAL_ADC_MspInit+0x1d4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a40      	ldr	r2, [pc, #256]	; (8001e18 <HAL_ADC_MspInit+0x1d4>)
 8001d16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d18:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_ADC_MspInit+0x1d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10e      	bne.n	8001d3e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d20:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d26:	4a3d      	ldr	r2, [pc, #244]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001d5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d60:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001d64:	f000 fe72 	bl	8002a4c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001d68:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001d6c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001d70:	f000 fe6c 	bl	8002a4c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001d74:	e049      	b.n	8001e0a <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <HAL_ADC_MspInit+0x1e4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d144      	bne.n	8001e0a <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_ADC_MspInit+0x1d8>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001dda:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001dde:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001de2:	f000 fe33 	bl	8002a4c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001de6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001dea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001dee:	f000 fe2d 	bl	8002a4c <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001df2:	2304      	movs	r3, #4
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df6:	2303      	movs	r3, #3
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e02:	4619      	mov	r1, r3
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <HAL_ADC_MspInit+0x1e8>)
 8001e06:	f002 ff6f 	bl	8004ce8 <HAL_GPIO_Init>
}
 8001e0a:	bf00      	nop
 8001e0c:	3740      	adds	r7, #64	; 0x40
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40022000 	.word	0x40022000
 8001e18:	24000094 	.word	0x24000094
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020800 	.word	0x58020800
 8001e24:	40022100 	.word	0x40022100
 8001e28:	58026000 	.word	0x58026000
 8001e2c:	58021c00 	.word	0x58021c00

08001e30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_DAC_MspInit+0x80>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d129      	bne.n	8001ea6 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_DAC_MspInit+0x84>)
 8001e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_DAC_MspInit+0x84>)
 8001e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_DAC_MspInit+0x84>)
 8001e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_DAC_MspInit+0x84>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_DAC_MspInit+0x84>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_DAC_MspInit+0x84>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e92:	2303      	movs	r3, #3
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_DAC_MspInit+0x88>)
 8001ea2:	f002 ff21 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40007400 	.word	0x40007400
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	58020000 	.word	0x58020000

08001ebc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0b8      	sub	sp, #224	; 0xe0
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	22b4      	movs	r2, #180	; 0xb4
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f009 f97d 	bl	800b1dc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_FDCAN_MspInit+0x17c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d14e      	bne.n	8001f8a <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 f988 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001f0a:	f7ff fe7b 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_FDCAN_MspInit+0x180>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_FDCAN_MspInit+0x180>)
 8001f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f18:	4b48      	ldr	r3, [pc, #288]	; (800203c <HAL_FDCAN_MspInit+0x180>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10e      	bne.n	8001f3e <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001f22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001f32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3e:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	4a3e      	ldr	r2, [pc, #248]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4e:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001f5c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f76:	2309      	movs	r3, #9
 8001f78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f80:	4619      	mov	r1, r3
 8001f82:	4830      	ldr	r0, [pc, #192]	; (8002044 <HAL_FDCAN_MspInit+0x188>)
 8001f84:	f002 feb0 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f88:	e051      	b.n	800202e <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	; (8002048 <HAL_FDCAN_MspInit+0x18c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d14c      	bne.n	800202e <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa2:	f107 0318 	add.w	r3, r7, #24
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 f934 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001fb2:	f7ff fe27 	bl	8001c04 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_FDCAN_MspInit+0x180>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_FDCAN_MspInit+0x180>)
 8001fbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_FDCAN_MspInit+0x180>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10e      	bne.n	8001fe6 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001fca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001fda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_FDCAN_MspInit+0x184>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8002004:	2360      	movs	r3, #96	; 0x60
 8002006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800201c:	2309      	movs	r3, #9
 800201e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002026:	4619      	mov	r1, r3
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <HAL_FDCAN_MspInit+0x190>)
 800202a:	f002 fe5d 	bl	8004ce8 <HAL_GPIO_Init>
}
 800202e:	bf00      	nop
 8002030:	37e0      	adds	r7, #224	; 0xe0
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	4000a000 	.word	0x4000a000
 800203c:	24000098 	.word	0x24000098
 8002040:	58024400 	.word	0x58024400
 8002044:	58021c00 	.word	0x58021c00
 8002048:	4000a400 	.word	0x4000a400
 800204c:	58020400 	.word	0x58020400

08002050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0b6      	sub	sp, #216	; 0xd8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	22b4      	movs	r2, #180	; 0xb4
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f009 f8b3 	bl	800b1dc <memset>
  if(hi2c->Instance==I2C4)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a25      	ldr	r2, [pc, #148]	; (8002110 <HAL_I2C_MspInit+0xc0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d142      	bne.n	8002106 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002080:	2310      	movs	r3, #16
 8002082:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f004 f8c0 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800209a:	f7ff fdb3 	bl	8001c04 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_I2C_MspInit+0xc4>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_I2C_MspInit+0xc4>)
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_I2C_MspInit+0xc4>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80020bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80020d6:	2304      	movs	r3, #4
 80020d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020e0:	4619      	mov	r1, r3
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <HAL_I2C_MspInit+0xc8>)
 80020e4:	f002 fe00 	bl	8004ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_I2C_MspInit+0xc4>)
 80020ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_I2C_MspInit+0xc4>)
 80020f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_I2C_MspInit+0xc4>)
 80020fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	37d8      	adds	r7, #216	; 0xd8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	58001c00 	.word	0x58001c00
 8002114:	58024400 	.word	0x58024400
 8002118:	58021400 	.word	0x58021400

0800211c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0b0      	sub	sp, #192	; 0xc0
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	22b4      	movs	r2, #180	; 0xb4
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f009 f855 	bl	800b1dc <memset>
  if(hrtc->Instance==RTC)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_RTC_MspInit+0x58>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d116      	bne.n	800216a <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800213c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002140:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f860 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800215a:	f7ff fd53 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RTC_MspInit+0x5c>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_RTC_MspInit+0x5c>)
 8002164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	37c0      	adds	r7, #192	; 0xc0
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	58004000 	.word	0x58004000
 8002178:	58024400 	.word	0x58024400

0800217c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a20      	ldr	r2, [pc, #128]	; (800220c <HAL_TIM_PWM_MspInit+0x90>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10f      	bne.n	80021ae <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 8002190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021ac:	e028      	b.n	8002200 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_TIM_PWM_MspInit+0x98>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10f      	bne.n	80021d8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
}
 80021d6:	e013      	b.n	8002200 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_TIM_PWM_MspInit+0x9c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e8:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_TIM_PWM_MspInit+0x94>)
 80021f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40010000 	.word	0x40010000
 8002210:	58024400 	.word	0x58024400
 8002214:	40000800 	.word	0x40000800
 8002218:	40000c00 	.word	0x40000c00

0800221c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM7)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2c      	ldr	r2, [pc, #176]	; (80022ec <HAL_TIM_Base_MspInit+0xd0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d117      	bne.n	800226e <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 8002246:	f043 0320 	orr.w	r3, r3, #32
 800224a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	2037      	movs	r0, #55	; 0x37
 8002262:	f002 f852 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002266:	2037      	movs	r0, #55	; 0x37
 8002268:	f002 f869 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800226c:	e03a      	b.n	80022e4 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM13)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_TIM_Base_MspInit+0xd8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d135      	bne.n	80022e4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 800227a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 8002280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002284:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 800228a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 8002298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_TIM_Base_MspInit+0xd4>)
 80022a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022b4:	2340      	movs	r3, #64	; 0x40
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80022c4:	2309      	movs	r3, #9
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	480a      	ldr	r0, [pc, #40]	; (80022f8 <HAL_TIM_Base_MspInit+0xdc>)
 80022d0:	f002 fd0a 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	202c      	movs	r0, #44	; 0x2c
 80022da:	f002 f816 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80022de:	202c      	movs	r0, #44	; 0x2c
 80022e0:	f002 f82d 	bl	800433e <HAL_NVIC_EnableIRQ>
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40001400 	.word	0x40001400
 80022f0:	58024400 	.word	0x58024400
 80022f4:	40001c00 	.word	0x40001c00
 80022f8:	58020000 	.word	0x58020000

080022fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_TIM_MspPostInit+0x140>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d120      	bne.n	8002360 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800231e:	4b48      	ldr	r3, [pc, #288]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 800233c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800234e:	2301      	movs	r3, #1
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	483a      	ldr	r0, [pc, #232]	; (8002444 <HAL_TIM_MspPostInit+0x148>)
 800235a:	f002 fcc5 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800235e:	e068      	b.n	8002432 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a38      	ldr	r2, [pc, #224]	; (8002448 <HAL_TIM_MspPostInit+0x14c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d13f      	bne.n	80023ea <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	4a33      	ldr	r2, [pc, #204]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023b6:	2302      	movs	r3, #2
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4822      	ldr	r0, [pc, #136]	; (800244c <HAL_TIM_MspPostInit+0x150>)
 80023c2:	f002 fc91 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 80023c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023d8:	2302      	movs	r3, #2
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	481b      	ldr	r0, [pc, #108]	; (8002450 <HAL_TIM_MspPostInit+0x154>)
 80023e4:	f002 fc80 	bl	8004ce8 <HAL_GPIO_Init>
}
 80023e8:	e023      	b.n	8002432 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_TIM_MspPostInit+0x158>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d11e      	bne.n	8002432 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_TIM_MspPostInit+0x144>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002412:	2301      	movs	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002422:	2302      	movs	r3, #2
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	480a      	ldr	r0, [pc, #40]	; (8002458 <HAL_TIM_MspPostInit+0x15c>)
 800242e:	f002 fc5b 	bl	8004ce8 <HAL_GPIO_Init>
}
 8002432:	bf00      	nop
 8002434:	3730      	adds	r7, #48	; 0x30
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40010000 	.word	0x40010000
 8002440:	58024400 	.word	0x58024400
 8002444:	58021000 	.word	0x58021000
 8002448:	40000800 	.word	0x40000800
 800244c:	58020400 	.word	0x58020400
 8002450:	58020c00 	.word	0x58020c00
 8002454:	40000c00 	.word	0x40000c00
 8002458:	58020000 	.word	0x58020000

0800245c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0b8      	sub	sp, #224	; 0xe0
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002474:	f107 0318 	add.w	r3, r7, #24
 8002478:	22b4      	movs	r2, #180	; 0xb4
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f008 fead 	bl	800b1dc <memset>
  if(huart->Instance==USART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a49      	ldr	r2, [pc, #292]	; (80025ac <HAL_UART_MspInit+0x150>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d143      	bne.n	8002514 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800248c:	2301      	movs	r3, #1
 800248e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002496:	f107 0318 	add.w	r3, r7, #24
 800249a:	4618      	mov	r0, r3
 800249c:	f003 feba 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024a6:	f7ff fbad 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_UART_MspInit+0x154>)
 80024ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <HAL_UART_MspInit+0x154>)
 80024b2:	f043 0310 	orr.w	r3, r3, #16
 80024b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_UART_MspInit+0x154>)
 80024bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <HAL_UART_MspInit+0x154>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <HAL_UART_MspInit+0x154>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_UART_MspInit+0x154>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80024e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002500:	2304      	movs	r3, #4
 8002502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800250a:	4619      	mov	r1, r3
 800250c:	4829      	ldr	r0, [pc, #164]	; (80025b4 <HAL_UART_MspInit+0x158>)
 800250e:	f002 fbeb 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002512:	e047      	b.n	80025a4 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_UART_MspInit+0x15c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d142      	bne.n	80025a4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fe71 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002538:	f7ff fb64 	bl	8001c04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_MspInit+0x154>)
 800253e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0x154>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_UART_MspInit+0x154>)
 800254e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_UART_MspInit+0x154>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <HAL_UART_MspInit+0x154>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_UART_MspInit+0x154>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800257c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002592:	2307      	movs	r3, #7
 8002594:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002598:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800259c:	4619      	mov	r1, r3
 800259e:	4807      	ldr	r0, [pc, #28]	; (80025bc <HAL_UART_MspInit+0x160>)
 80025a0:	f002 fba2 	bl	8004ce8 <HAL_GPIO_Init>
}
 80025a4:	bf00      	nop
 80025a6:	37e0      	adds	r7, #224	; 0xe0
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40011000 	.word	0x40011000
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58020400 	.word	0x58020400
 80025b8:	40004800 	.word	0x40004800
 80025bc:	58020c00 	.word	0x58020c00

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <NMI_Handler+0x4>

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f000 f9da 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002618:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800261c:	f002 fd25 	bl	800506a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002620:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002624:	f002 fd21 	bl	800506a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002632:	f006 fa9c 	bl	8008b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000388 	.word	0x24000388

08002640 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <TIM7_IRQHandler+0x10>)
 8002646:	f006 fa92 	bl	8008b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24000574 	.word	0x24000574

08002654 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e00a      	b.n	800267c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002666:	f3af 8000 	nop.w
 800266a:	4601      	mov	r1, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	60ba      	str	r2, [r7, #8]
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	dbf0      	blt.n	8002666 <_read+0x12>
	}

return len;
 8002684:	687b      	ldr	r3, [r7, #4]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e009      	b.n	80026b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	60ba      	str	r2, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd fffd 	bl	80006a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf1      	blt.n	80026a0 <_write+0x12>
	}
	return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_close>:

int _close(int file)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
	return -1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ee:	605a      	str	r2, [r3, #4]
	return 0;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_isatty>:

int _isatty(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	return 1;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f008 fd04 	bl	800b16c <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	24050000 	.word	0x24050000
 8002790:	00000400 	.word	0x00000400
 8002794:	2400009c 	.word	0x2400009c
 8002798:	24000678 	.word	0x24000678

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <SystemInit+0xd0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	4a31      	ldr	r2, [pc, #196]	; (800286c <SystemInit+0xd0>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <SystemInit+0xd4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d807      	bhi.n	80027cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <SystemInit+0xd4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <SystemInit+0xd4>)
 80027c6:	f043 0307 	orr.w	r3, r3, #7
 80027ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <SystemInit+0xd8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <SystemInit+0xd8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <SystemInit+0xd8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027de:	4b25      	ldr	r3, [pc, #148]	; (8002874 <SystemInit+0xd8>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4924      	ldr	r1, [pc, #144]	; (8002874 <SystemInit+0xd8>)
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <SystemInit+0xdc>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <SystemInit+0xd4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <SystemInit+0xd4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 030f 	bic.w	r3, r3, #15
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <SystemInit+0xd4>)
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <SystemInit+0xd8>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <SystemInit+0xd8>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <SystemInit+0xd8>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <SystemInit+0xd8>)
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <SystemInit+0xe0>)
 800281c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <SystemInit+0xd8>)
 8002820:	4a17      	ldr	r2, [pc, #92]	; (8002880 <SystemInit+0xe4>)
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <SystemInit+0xd8>)
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <SystemInit+0xe8>)
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <SystemInit+0xd8>)
 800282c:	2200      	movs	r2, #0
 800282e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <SystemInit+0xd8>)
 8002832:	4a14      	ldr	r2, [pc, #80]	; (8002884 <SystemInit+0xe8>)
 8002834:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <SystemInit+0xd8>)
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <SystemInit+0xd8>)
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <SystemInit+0xe8>)
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <SystemInit+0xd8>)
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <SystemInit+0xd8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a09      	ldr	r2, [pc, #36]	; (8002874 <SystemInit+0xd8>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <SystemInit+0xd8>)
 8002856:	2200      	movs	r2, #0
 8002858:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <SystemInit+0xec>)
 800285c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002860:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	52002000 	.word	0x52002000
 8002874:	58024400 	.word	0x58024400
 8002878:	eaf6ed7f 	.word	0xeaf6ed7f
 800287c:	02020200 	.word	0x02020200
 8002880:	01ff0000 	.word	0x01ff0000
 8002884:	01010280 	.word	0x01010280
 8002888:	52004000 	.word	0x52004000

0800288c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002890:	f7ff ff84 	bl	800279c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	; (80028c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	; (80028cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	; (80028d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ba:	f008 fc5d 	bl	800b178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028be:	f7fd ffd9 	bl	8000874 <main>
  bx  lr
 80028c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80028c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028cc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80028d0:	0800c328 	.word	0x0800c328
  ldr r2, =_sbss
 80028d4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80028d8:	24000674 	.word	0x24000674

080028dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC3_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e6:	2003      	movs	r0, #3
 80028e8:	f001 fd04 	bl	80042f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028ec:	f003 fabc 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_Init+0x68>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	4913      	ldr	r1, [pc, #76]	; (800294c <HAL_Init+0x6c>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_Init+0x68>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_Init+0x6c>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <HAL_Init+0x70>)
 8002922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_Init+0x74>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800292a:	2000      	movs	r0, #0
 800292c:	f000 f814 	bl	8002958 <HAL_InitTick>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e002      	b.n	8002940 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800293a:	f7ff f969 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	58024400 	.word	0x58024400
 800294c:	0800c248 	.word	0x0800c248
 8002950:	24000004 	.word	0x24000004
 8002954:	24000000 	.word	0x24000000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_InitTick+0x60>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e021      	b.n	80029b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_InitTick+0x64>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_InitTick+0x60>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297a:	fbb3 f3f1 	udiv	r3, r3, r1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fce9 	bl	800435a <HAL_SYSTICK_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00e      	b.n	80029b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0f      	cmp	r3, #15
 8002996:	d80a      	bhi.n	80029ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002998:	2200      	movs	r2, #0
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f001 fcb3 	bl	800430a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_InitTick+0x68>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2400000c 	.word	0x2400000c
 80029bc:	24000000 	.word	0x24000000
 80029c0:	24000008 	.word	0x24000008

080029c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	2400000c 	.word	0x2400000c
 80029e8:	24000660 	.word	0x24000660

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	24000660 	.word	0x24000660

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_Delay+0x44>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2400000c 	.word	0x2400000c

08002a4c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	58000400 	.word	0x58000400

08002a78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <LL_ADC_SetOffset+0x60>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10b      	bne.n	8002b1c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b1a:	e00b      	b.n	8002b34 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	58026000 	.word	0x58026000

08002b44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	461a      	mov	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	611a      	str	r2, [r3, #16]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3360      	adds	r3, #96	; 0x60
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	58026000 	.word	0x58026000

08002be8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <LL_ADC_SetOffsetSaturation+0x40>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10e      	bne.n	8002c1a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	58026000 	.word	0x58026000

08002c2c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <LL_ADC_SetOffsetSign+0x40>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10e      	bne.n	8002c5e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3360      	adds	r3, #96	; 0x60
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	58026000 	.word	0x58026000

08002c70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3360      	adds	r3, #96	; 0x60
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <LL_ADC_SetOffsetState+0x50>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ca2:	e007      	b.n	8002cb4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	58026000 	.word	0x58026000

08002cc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3330      	adds	r3, #48	; 0x30
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	4413      	add	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	211f      	movs	r1, #31
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0e9b      	lsrs	r3, r3, #26
 8002cfc:	f003 011f 	and.w	r1, r3, #31
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	0e5b      	lsrs	r3, r3, #25
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	0d1b      	lsrs	r3, r3, #20
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2107      	movs	r1, #7
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	401a      	ands	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	0d1b      	lsrs	r3, r3, #20
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d115      	bne.n	8002db4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0318 	and.w	r3, r3, #24
 8002d9e:	4914      	ldr	r1, [pc, #80]	; (8002df0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002da0:	40d9      	lsrs	r1, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	400b      	ands	r3, r1
 8002da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002daa:	431a      	orrs	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002db2:	e014      	b.n	8002dde <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0318 	and.w	r3, r3, #24
 8002dca:	4909      	ldr	r1, [pc, #36]	; (8002df0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dcc:	40d9      	lsrs	r1, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	58026000 	.word	0x58026000
 8002df0:	000fffff 	.word	0x000fffff

08002df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6093      	str	r3, [r2, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	5fffffc0 	.word	0x5fffffc0

08002e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	6fffffc0 	.word	0x6fffffc0

08002e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <LL_ADC_IsEnabled+0x18>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <LL_ADC_IsEnabled+0x1a>
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d101      	bne.n	8002ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d101      	bne.n	8002ef4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1ee      	b.n	80032fc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe fe89 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff67 	bl	8002e18 <LL_ADC_IsDeepPowerDownEnabled>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff4d 	bl	8002df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff82 	bl	8002e68 <LL_ADC_IsInternalRegulatorEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff66 	bl	8002e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f74:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <HAL_ADC_Init+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	099b      	lsrs	r3, r3, #6
 8002f7a:	4a8e      	ldr	r2, [pc, #568]	; (80031b4 <HAL_ADC_Init+0x2b0>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	3301      	adds	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff65 	bl	8002e68 <LL_ADC_IsInternalRegulatorEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff76 	bl	8002eb6 <LL_ADC_REG_IsConversionOngoing>
 8002fca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8188 	bne.w	80032ea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 8184 	bne.w	80032ea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fea:	f043 0202 	orr.w	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff4a 	bl	8002e90 <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d136      	bne.n	8003070 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6c      	ldr	r2, [pc, #432]	; (80031b8 <HAL_ADC_Init+0x2b4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_ADC_Init+0x112>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_ADC_Init+0x2b8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10e      	bne.n	8003034 <HAL_ADC_Init+0x130>
 8003016:	4868      	ldr	r0, [pc, #416]	; (80031b8 <HAL_ADC_Init+0x2b4>)
 8003018:	f7ff ff3a 	bl	8002e90 <LL_ADC_IsEnabled>
 800301c:	4604      	mov	r4, r0
 800301e:	4867      	ldr	r0, [pc, #412]	; (80031bc <HAL_ADC_Init+0x2b8>)
 8003020:	f7ff ff36 	bl	8002e90 <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	4323      	orrs	r3, r4
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e008      	b.n	8003046 <HAL_ADC_Init+0x142>
 8003034:	4862      	ldr	r0, [pc, #392]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003036:	f7ff ff2b 	bl	8002e90 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_ADC_Init+0x2b4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_ADC_Init+0x15a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_ADC_Init+0x2b8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Init+0x15e>
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <HAL_ADC_Init+0x2c0>)
 8003060:	e000      	b.n	8003064 <HAL_ADC_Init+0x160>
 8003062:	4a59      	ldr	r2, [pc, #356]	; (80031c8 <HAL_ADC_Init+0x2c4>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7ff fd04 	bl	8002a78 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d129      	bne.n	80030ce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7e5b      	ldrb	r3, [r3, #25]
 800307e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003084:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800308a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d013      	beq.n	80030bc <HAL_ADC_Init+0x1b8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d00d      	beq.n	80030b8 <HAL_ADC_Init+0x1b4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b1c      	cmp	r3, #28
 80030a2:	d007      	beq.n	80030b4 <HAL_ADC_Init+0x1b0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b18      	cmp	r3, #24
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_Init+0x1ac>
 80030ac:	2318      	movs	r3, #24
 80030ae:	e006      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030b0:	2300      	movs	r3, #0
 80030b2:	e004      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030b4:	2310      	movs	r3, #16
 80030b6:	e002      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030b8:	2308      	movs	r3, #8
 80030ba:	e000      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030bc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80030be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	e00e      	b.n	80030ec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7e5b      	ldrb	r3, [r3, #25]
 80030d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	3b01      	subs	r3, #1
 80030fc:	045b      	lsls	r3, r3, #17
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d115      	bne.n	8003156 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_ADC_Init+0x2c8>)
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e009      	b.n	800316a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_ADC_Init+0x2cc>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	69b9      	ldr	r1, [r7, #24]
 8003166:	430b      	orrs	r3, r1
 8003168:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fea1 	bl	8002eb6 <LL_ADC_REG_IsConversionOngoing>
 8003174:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff feae 	bl	8002edc <LL_ADC_INJ_IsConversionOngoing>
 8003180:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 808e 	bne.w	80032a6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 808a 	bne.w	80032a6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d11b      	bne.n	80031d4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
 80031a0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031a8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e018      	b.n	80031e2 <HAL_ADC_Init+0x2de>
 80031b0:	24000000 	.word	0x24000000
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40022100 	.word	0x40022100
 80031c0:	58026000 	.word	0x58026000
 80031c4:	40022300 	.word	0x40022300
 80031c8:	58026300 	.word	0x58026300
 80031cc:	fff04007 	.word	0xfff04007
 80031d0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7e1b      	ldrb	r3, [r3, #24]
 80031d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b46      	ldr	r3, [pc, #280]	; (8003304 <HAL_ADC_Init+0x400>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	69b9      	ldr	r1, [r7, #24]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d137      	bne.n	8003270 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3f      	ldr	r2, [pc, #252]	; (8003308 <HAL_ADC_Init+0x404>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d116      	bne.n	800323e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	4b3d      	ldr	r3, [pc, #244]	; (800330c <HAL_ADC_Init+0x408>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800322e:	430a      	orrs	r2, r1
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	611a      	str	r2, [r3, #16]
 800323c:	e020      	b.n	8003280 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_ADC_Init+0x40c>)
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800324c:	3a01      	subs	r2, #1
 800324e:	0411      	lsls	r1, r2, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003260:	430a      	orrs	r2, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	e007      	b.n	8003280 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_ADC_Init+0x404>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d002      	beq.n	80032a6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fd63 	bl	8003d6c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10c      	bne.n	80032c8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f023 010f 	bic.w	r1, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
 80032c6:	e007      	b.n	80032d8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020f 	bic.w	r2, r2, #15
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032dc:	f023 0303 	bic.w	r3, r3, #3
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
 80032e8:	e007      	b.n	80032fa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	ffffbffc 	.word	0xffffbffc
 8003308:	58026000 	.word	0x58026000
 800330c:	fc00f81f 	.word	0xfc00f81f
 8003310:	fc00f81e 	.word	0xfc00f81e

08003314 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b0b9      	sub	sp, #228	; 0xe4
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800332e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4ab3      	ldr	r2, [pc, #716]	; (8003604 <HAL_ADC_ConfigChannel+0x2f0>)
 8003336:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x34>
 8003342:	2302      	movs	r3, #2
 8003344:	f000 bcfa 	b.w	8003d3c <HAL_ADC_ConfigChannel+0xa28>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fdae 	bl	8002eb6 <LL_ADC_REG_IsConversionOngoing>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 84de 	bne.w	8003d1e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4aa8      	ldr	r2, [pc, #672]	; (8003608 <HAL_ADC_ConfigChannel+0x2f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d033      	beq.n	80033d4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <HAL_ADC_ConfigChannel+0x76>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2201      	movs	r2, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	e01d      	b.n	80033c6 <HAL_ADC_ConfigChannel+0xb2>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800339e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80033b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	69d1      	ldr	r1, [r2, #28]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	f7ff fc6f 	bl	8002cc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fd63 	bl	8002eb6 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fd6f 	bl	8002edc <LL_ADC_INJ_IsConversionOngoing>
 80033fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 8270 	bne.w	80038ec <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800340c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 826b 	bne.w	80038ec <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	461a      	mov	r2, r3
 8003424:	f7ff fc7a 	bl	8002d1c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a76      	ldr	r2, [pc, #472]	; (8003608 <HAL_ADC_ConfigChannel+0x2f4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10d      	bne.n	800344e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800344c:	e032      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800344e:	4b6f      	ldr	r3, [pc, #444]	; (800360c <HAL_ADC_ConfigChannel+0x2f8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345a:	d10b      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x160>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	e01d      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x19c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_ADC_ConfigChannel+0x186>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	e00a      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x19c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d048      	beq.n	800354e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6919      	ldr	r1, [r3, #16]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034cc:	f7ff fb08 	bl	8002ae0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_ADC_ConfigChannel+0x2f4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d119      	bne.n	800350e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6919      	ldr	r1, [r3, #16]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f7ff fba0 	bl	8002c2c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6919      	ldr	r1, [r3, #16]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x1f0>
 80034fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003502:	e000      	b.n	8003506 <HAL_ADC_ConfigChannel+0x1f2>
 8003504:	2300      	movs	r3, #0
 8003506:	461a      	mov	r2, r3
 8003508:	f7ff fb6e 	bl	8002be8 <LL_ADC_SetOffsetSaturation>
 800350c:	e1ee      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6919      	ldr	r1, [r3, #16]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x212>
 8003520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003524:	e000      	b.n	8003528 <HAL_ADC_ConfigChannel+0x214>
 8003526:	2300      	movs	r3, #0
 8003528:	461a      	mov	r2, r3
 800352a:	f7ff fb3b 	bl	8002ba4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7e1b      	ldrb	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x230>
 800353e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003542:	e000      	b.n	8003546 <HAL_ADC_ConfigChannel+0x232>
 8003544:	2300      	movs	r3, #0
 8003546:	461a      	mov	r2, r3
 8003548:	f7ff fb12 	bl	8002b70 <LL_ADC_SetDataRightShift>
 800354c:	e1ce      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <HAL_ADC_ConfigChannel+0x2f4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	f040 8181 	bne.w	800385c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff faef 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x272>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fae4 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	e01e      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x2b0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fad9 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80035a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80035ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e004      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80035b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x2c8>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	e01e      	b.n	800361a <HAL_ADC_ConfigChannel+0x306>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80035f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80035f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e00a      	b.n	800361a <HAL_ADC_ConfigChannel+0x306>
 8003604:	47ff0000 	.word	0x47ff0000
 8003608:	58026000 	.word	0x58026000
 800360c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	429a      	cmp	r2, r3
 800361c:	d106      	bne.n	800362c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fb22 	bl	8002c70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fa86 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003638:	4603      	mov	r3, r0
 800363a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x344>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fa7b 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 021f 	and.w	r2, r3, #31
 8003656:	e01e      	b.n	8003696 <HAL_ADC_ConfigChannel+0x382>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fa70 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800367a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800367e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e004      	b.n	8003694 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800368a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x39a>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	e018      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x3cc>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80036c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80036ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e004      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80036d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d106      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fabf 	bl	8002c70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2102      	movs	r1, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fa23 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <HAL_ADC_ConfigChannel+0x40a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fa18 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	e01e      	b.n	800375c <HAL_ADC_ConfigChannel+0x448>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fa0d 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 800372a:	4603      	mov	r3, r0
 800372c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800373c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e004      	b.n	800375a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x460>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	e014      	b.n	800379e <HAL_ADC_ConfigChannel+0x48a>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003788:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e004      	b.n	800379e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	429a      	cmp	r2, r3
 80037a0:	d106      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fa60 	bl	8002c70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2103      	movs	r1, #3
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff f9c4 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80037bc:	4603      	mov	r3, r0
 80037be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x4c8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2103      	movs	r1, #3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f9b9 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	f003 021f 	and.w	r2, r3, #31
 80037da:	e017      	b.n	800380c <HAL_ADC_ConfigChannel+0x4f8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2103      	movs	r1, #3
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f9ae 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80037f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80037fe:	2320      	movs	r3, #32
 8003800:	e003      	b.n	800380a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x510>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	e011      	b.n	8003848 <HAL_ADC_ConfigChannel+0x534>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003834:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800383c:	2320      	movs	r3, #32
 800383e:	e003      	b.n	8003848 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	429a      	cmp	r2, r3
 800384a:	d14f      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	2103      	movs	r1, #3
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fa0b 	bl	8002c70 <LL_ADC_SetOffsetState>
 800385a:	e047      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	429a      	cmp	r2, r3
 800386e:	d107      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800387e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	069b      	lsls	r3, r3, #26
 8003890:	429a      	cmp	r2, r3
 8003892:	d107      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	069b      	lsls	r3, r3, #26
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	069b      	lsls	r3, r3, #26
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff facd 	bl	8002e90 <LL_ADC_IsEnabled>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f040 8219 	bne.w	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	f7ff fa32 	bl	8002d74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4aa1      	ldr	r2, [pc, #644]	; (8003b9c <HAL_ADC_ConfigChannel+0x888>)
 8003916:	4293      	cmp	r3, r2
 8003918:	f040 812e 	bne.w	8003b78 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x630>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	3301      	adds	r3, #1
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2b09      	cmp	r3, #9
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e019      	b.n	8003978 <HAL_ADC_ConfigChannel+0x664>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003954:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e003      	b.n	8003968 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	3301      	adds	r3, #1
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2b09      	cmp	r3, #9
 8003970:	bf94      	ite	ls
 8003972:	2301      	movls	r3, #1
 8003974:	2300      	movhi	r3, #0
 8003976:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	2b00      	cmp	r3, #0
 800397a:	d079      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x684>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0e9b      	lsrs	r3, r3, #26
 800398e:	3301      	adds	r3, #1
 8003990:	069b      	lsls	r3, r3, #26
 8003992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003996:	e015      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x6b0>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80039aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e003      	b.n	80039bc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80039b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	069b      	lsls	r3, r3, #26
 80039c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x6d0>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0e9b      	lsrs	r3, r3, #26
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	e017      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x700>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80039f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80039f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e003      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	ea42 0103 	orr.w	r1, r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x726>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	051b      	lsls	r3, r3, #20
 8003a38:	e018      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x758>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e003      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	e07e      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d107      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x778>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	3301      	adds	r3, #1
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a8a:	e015      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	e003      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	069b      	lsls	r3, r3, #26
 8003ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x7c4>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	3301      	adds	r3, #1
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	e017      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x7f4>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
  return result;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e003      	b.n	8003afc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	ea42 0103 	orr.w	r1, r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x820>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b1e      	subs	r3, #30
 8003b2c:	051b      	lsls	r3, r3, #20
 8003b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b32:	e01b      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x858>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	60fb      	str	r3, [r7, #12]
  return result;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e003      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f003 021f 	and.w	r2, r3, #31
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	3b1e      	subs	r3, #30
 8003b66:	051b      	lsls	r3, r3, #20
 8003b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7ff f8d2 	bl	8002d1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f280 80d7 	bge.w	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <HAL_ADC_ConfigChannel+0x88c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x882>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_ADC_ConfigChannel+0x890>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10a      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x898>
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <HAL_ADC_ConfigChannel+0x894>)
 8003b98:	e009      	b.n	8003bae <HAL_ADC_ConfigChannel+0x89a>
 8003b9a:	bf00      	nop
 8003b9c:	47ff0000 	.word	0x47ff0000
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	40022100 	.word	0x40022100
 8003ba8:	40022300 	.word	0x40022300
 8003bac:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_ADC_ConfigChannel+0xa30>)
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe ff88 	bl	8002ac4 <LL_ADC_GetCommonPathInternalCh>
 8003bb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a62      	ldr	r2, [pc, #392]	; (8003d48 <HAL_ADC_ConfigChannel+0xa34>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_ADC_ConfigChannel+0x8b8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a61      	ldr	r2, [pc, #388]	; (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10e      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x8d6>
 8003bcc:	485e      	ldr	r0, [pc, #376]	; (8003d48 <HAL_ADC_ConfigChannel+0xa34>)
 8003bce:	f7ff f95f 	bl	8002e90 <LL_ADC_IsEnabled>
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	485d      	ldr	r0, [pc, #372]	; (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003bd6:	f7ff f95b 	bl	8002e90 <LL_ADC_IsEnabled>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4323      	orrs	r3, r4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	e008      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x8e8>
 8003bea:	4859      	ldr	r0, [pc, #356]	; (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003bec:	f7ff f950 	bl	8002e90 <LL_ADC_IsEnabled>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8084 	beq.w	8003d0a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <HAL_ADC_ConfigChannel+0xa40>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d132      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x95e>
 8003c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d12c      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a4c      	ldr	r2, [pc, #304]	; (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f040 8086 	bne.w	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a47      	ldr	r2, [pc, #284]	; (8003d48 <HAL_ADC_ConfigChannel+0xa34>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x924>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a46      	ldr	r2, [pc, #280]	; (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x928>
 8003c38:	4a47      	ldr	r2, [pc, #284]	; (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003c3a:	e000      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x92a>
 8003c3c:	4a41      	ldr	r2, [pc, #260]	; (8003d44 <HAL_ADC_ConfigChannel+0xa30>)
 8003c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe ff28 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c4e:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <HAL_ADC_ConfigChannel+0xa48>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <HAL_ADC_ConfigChannel+0xa4c>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c62:	e002      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f9      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c70:	e05e      	b.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_ADC_ConfigChannel+0xa50>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d120      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x9aa>
 8003c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11a      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d14e      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <HAL_ADC_ConfigChannel+0xa34>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_ADC_ConfigChannel+0x992>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x996>
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	; (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003ca8:	e000      	b.n	8003cac <HAL_ADC_ConfigChannel+0x998>
 8003caa:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_ADC_ConfigChannel+0xa30>)
 8003cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7fe fef1 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cbc:	e038      	b.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <HAL_ADC_ConfigChannel+0xa54>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d133      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
 8003cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d12d      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d128      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <HAL_ADC_ConfigChannel+0xa34>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_ADC_ConfigChannel+0x9de>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x9e2>
 8003cf2:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003cf4:	e000      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x9e4>
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <HAL_ADC_ConfigChannel+0xa30>)
 8003cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f7fe fecb 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
 8003d08:	e012      	b.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003d1c:	e008      	b.n	8003d30 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003d38:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	37e4      	adds	r7, #228	; 0xe4
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}
 8003d44:	58026300 	.word	0x58026300
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40022100 	.word	0x40022100
 8003d50:	58026000 	.word	0x58026000
 8003d54:	c7520000 	.word	0xc7520000
 8003d58:	40022300 	.word	0x40022300
 8003d5c:	24000000 	.word	0x24000000
 8003d60:	053e2d63 	.word	0x053e2d63
 8003d64:	c3210000 	.word	0xc3210000
 8003d68:	cb840000 	.word	0xcb840000

08003d6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6b      	ldr	r2, [pc, #428]	; (8003f28 <ADC_ConfigureBoostMode+0x1bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <ADC_ConfigureBoostMode+0x1c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6a      	ldr	r2, [pc, #424]	; (8003f2c <ADC_ConfigureBoostMode+0x1c0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d109      	bne.n	8003d9c <ADC_ConfigureBoostMode+0x30>
 8003d88:	4b69      	ldr	r3, [pc, #420]	; (8003f30 <ADC_ConfigureBoostMode+0x1c4>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e008      	b.n	8003dae <ADC_ConfigureBoostMode+0x42>
 8003d9c:	4b65      	ldr	r3, [pc, #404]	; (8003f34 <ADC_ConfigureBoostMode+0x1c8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01c      	beq.n	8003dec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003db2:	f002 f9d3 	bl	800615c <HAL_RCC_GetHCLKFreq>
 8003db6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc0:	d010      	beq.n	8003de4 <ADC_ConfigureBoostMode+0x78>
 8003dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc6:	d871      	bhi.n	8003eac <ADC_ConfigureBoostMode+0x140>
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d002      	beq.n	8003dd4 <ADC_ConfigureBoostMode+0x68>
 8003dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd2:	d16b      	bne.n	8003eac <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	e066      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e062      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003dec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003df0:	f003 f90a 	bl	8007008 <HAL_RCCEx_GetPeriphCLKFreq>
 8003df4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dfe:	d051      	beq.n	8003ea4 <ADC_ConfigureBoostMode+0x138>
 8003e00:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e04:	d854      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e06:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e0a:	d047      	beq.n	8003e9c <ADC_ConfigureBoostMode+0x130>
 8003e0c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e10:	d84e      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e12:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e16:	d03d      	beq.n	8003e94 <ADC_ConfigureBoostMode+0x128>
 8003e18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e1c:	d848      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e22:	d033      	beq.n	8003e8c <ADC_ConfigureBoostMode+0x120>
 8003e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e28:	d842      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e2a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e2e:	d029      	beq.n	8003e84 <ADC_ConfigureBoostMode+0x118>
 8003e30:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e34:	d83c      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e36:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e3a:	d01a      	beq.n	8003e72 <ADC_ConfigureBoostMode+0x106>
 8003e3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e40:	d836      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e42:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e46:	d014      	beq.n	8003e72 <ADC_ConfigureBoostMode+0x106>
 8003e48:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e4c:	d830      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e52:	d00e      	beq.n	8003e72 <ADC_ConfigureBoostMode+0x106>
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d82a      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e5e:	d008      	beq.n	8003e72 <ADC_ConfigureBoostMode+0x106>
 8003e60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e64:	d824      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
 8003e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e6a:	d002      	beq.n	8003e72 <ADC_ConfigureBoostMode+0x106>
 8003e6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e70:	d11e      	bne.n	8003eb0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0c9b      	lsrs	r3, r3, #18
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	60fb      	str	r3, [r7, #12]
        break;
 8003e82:	e016      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
        break;
 8003e8a:	e012      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	60fb      	str	r3, [r7, #12]
        break;
 8003e92:	e00e      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	60fb      	str	r3, [r7, #12]
        break;
 8003e9a:	e00a      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	09db      	lsrs	r3, r3, #7
 8003ea0:	60fb      	str	r3, [r7, #12]
        break;
 8003ea2:	e006      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	60fb      	str	r3, [r7, #12]
        break;
 8003eaa:	e002      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
        break;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003eb0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <ADC_ConfigureBoostMode+0x1cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d808      	bhi.n	8003ed2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ece:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ed0:	e025      	b.n	8003f1e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <ADC_ConfigureBoostMode+0x1d0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d80a      	bhi.n	8003ef0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	609a      	str	r2, [r3, #8]
}
 8003eee:	e016      	b.n	8003f1e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <ADC_ConfigureBoostMode+0x1d4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d80a      	bhi.n	8003f0e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	e007      	b.n	8003f1e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f1c:	609a      	str	r2, [r3, #8]
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40022100 	.word	0x40022100
 8003f30:	40022300 	.word	0x40022300
 8003f34:	58026300 	.word	0x58026300
 8003f38:	005f5e10 	.word	0x005f5e10
 8003f3c:	00bebc20 	.word	0x00bebc20
 8003f40:	017d7840 	.word	0x017d7840

08003f44 <LL_ADC_IsEnabled>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <LL_ADC_IsEnabled+0x18>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <LL_ADC_IsEnabled+0x1a>
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d101      	bne.n	8003f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b0a3      	sub	sp, #140	; 0x8c
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0c1      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5e      	ldr	r2, [pc, #376]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d102      	bne.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fc8:	4b5d      	ldr	r3, [pc, #372]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e001      	b.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0a0      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ffb9 	bl	8003f6a <LL_ADC_REG_IsConversionOngoing>
 8003ff8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ffb2 	bl	8003f6a <LL_ADC_REG_IsConversionOngoing>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 8081 	bne.w	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800400e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d17c      	bne.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a48      	ldr	r2, [pc, #288]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a46      	ldr	r2, [pc, #280]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800402a:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800402c:	e000      	b.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800402e:	4b46      	ldr	r3, [pc, #280]	; (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004030:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d039      	beq.n	80040ae <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800403a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	431a      	orrs	r2, r3
 8004048:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800404a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3a      	ldr	r2, [pc, #232]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a39      	ldr	r2, [pc, #228]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10e      	bne.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004060:	4836      	ldr	r0, [pc, #216]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004062:	f7ff ff6f 	bl	8003f44 <LL_ADC_IsEnabled>
 8004066:	4604      	mov	r4, r0
 8004068:	4835      	ldr	r0, [pc, #212]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800406a:	f7ff ff6b 	bl	8003f44 <LL_ADC_IsEnabled>
 800406e:	4603      	mov	r3, r0
 8004070:	4323      	orrs	r3, r4
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e008      	b.n	8004090 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800407e:	4833      	ldr	r0, [pc, #204]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004080:	f7ff ff60 	bl	8003f44 <LL_ADC_IsEnabled>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d047      	beq.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800409a:	4013      	ands	r3, r2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	6811      	ldr	r1, [r2, #0]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	6892      	ldr	r2, [r2, #8]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	431a      	orrs	r2, r3
 80040a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ac:	e03a      	b.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80040ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10e      	bne.n	80040ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80040ce:	481b      	ldr	r0, [pc, #108]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040d0:	f7ff ff38 	bl	8003f44 <LL_ADC_IsEnabled>
 80040d4:	4604      	mov	r4, r0
 80040d6:	481a      	ldr	r0, [pc, #104]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040d8:	f7ff ff34 	bl	8003f44 <LL_ADC_IsEnabled>
 80040dc:	4603      	mov	r3, r0
 80040de:	4323      	orrs	r3, r4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e008      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80040ec:	4817      	ldr	r0, [pc, #92]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80040ee:	f7ff ff29 	bl	8003f44 <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004108:	4013      	ands	r3, r2
 800410a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800410c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800410e:	e009      	b.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004122:	e000      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004124:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800412e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004132:	4618      	mov	r0, r3
 8004134:	378c      	adds	r7, #140	; 0x8c
 8004136:	46bd      	mov	sp, r7
 8004138:	bd90      	pop	{r4, r7, pc}
 800413a:	bf00      	nop
 800413c:	40022000 	.word	0x40022000
 8004140:	40022100 	.word	0x40022100
 8004144:	40022300 	.word	0x40022300
 8004148:	58026300 	.word	0x58026300
 800414c:	58026000 	.word	0x58026000
 8004150:	fffff0e0 	.word	0xfffff0e0

08004154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <__NVIC_SetPriorityGrouping+0x40>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004170:	4013      	ands	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <__NVIC_SetPriorityGrouping+0x44>)
 800417e:	4313      	orrs	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004182:	4a04      	ldr	r2, [pc, #16]	; (8004194 <__NVIC_SetPriorityGrouping+0x40>)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	60d3      	str	r3, [r2, #12]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00
 8004198:	05fa0000 	.word	0x05fa0000

0800419c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <__NVIC_GetPriorityGrouping+0x18>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	f003 0307 	and.w	r3, r3, #7
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	db0b      	blt.n	80041e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	f003 021f 	and.w	r2, r3, #31
 80041d0:	4907      	ldr	r1, [pc, #28]	; (80041f0 <__NVIC_EnableIRQ+0x38>)
 80041d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2001      	movs	r0, #1
 80041da:	fa00 f202 	lsl.w	r2, r0, r2
 80041de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	490c      	ldr	r1, [pc, #48]	; (8004240 <__NVIC_SetPriority+0x4c>)
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800421c:	e00a      	b.n	8004234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4908      	ldr	r1, [pc, #32]	; (8004244 <__NVIC_SetPriority+0x50>)
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3b04      	subs	r3, #4
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	440b      	add	r3, r1
 8004232:	761a      	strb	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000e100 	.word	0xe000e100
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf28      	it	cs
 8004266:	2304      	movcs	r3, #4
 8004268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	2b06      	cmp	r3, #6
 8004270:	d902      	bls.n	8004278 <NVIC_EncodePriority+0x30>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3b03      	subs	r3, #3
 8004276:	e000      	b.n	800427a <NVIC_EncodePriority+0x32>
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	f04f 31ff 	mov.w	r1, #4294967295
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	4313      	orrs	r3, r2
         );
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c0:	d301      	bcc.n	80042c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00f      	b.n	80042e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <SysTick_Config+0x40>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ce:	210f      	movs	r1, #15
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	f7ff ff8e 	bl	80041f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <SysTick_Config+0x40>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <SysTick_Config+0x40>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000e010 	.word	0xe000e010

080042f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff29 	bl	8004154 <__NVIC_SetPriorityGrouping>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004318:	f7ff ff40 	bl	800419c <__NVIC_GetPriorityGrouping>
 800431c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff ff90 	bl	8004248 <NVIC_EncodePriority>
 8004328:	4602      	mov	r2, r0
 800432a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff5f 	bl	80041f4 <__NVIC_SetPriority>
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	4603      	mov	r3, r0
 8004346:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff33 	bl	80041b8 <__NVIC_EnableIRQ>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ffa4 	bl	80042b0 <SysTick_Config>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e014      	b.n	80043ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fd fd4b 	bl	8001e30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	795b      	ldrb	r3, [r3, #5]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_DAC_ConfigChannel+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e11d      	b.n	800460c <HAL_DAC_ConfigChannel+0x254>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d174      	bne.n	80044ce <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80043e4:	f7fe fb02 	bl	80029ec <HAL_GetTick>
 80043e8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d134      	bne.n	800445a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043f0:	e011      	b.n	8004416 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043f2:	f7fe fafb 	bl	80029ec <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d90a      	bls.n	8004416 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f043 0208 	orr.w	r2, r3, #8
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2203      	movs	r2, #3
 8004410:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0fa      	b.n	800460c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441c:	4b7d      	ldr	r3, [pc, #500]	; (8004614 <HAL_DAC_ConfigChannel+0x25c>)
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004424:	2001      	movs	r0, #1
 8004426:	f7fe faed 	bl	8002a04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	6992      	ldr	r2, [r2, #24]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
 8004434:	e01e      	b.n	8004474 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004436:	f7fe fad9 	bl	80029ec <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d90a      	bls.n	800445a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f043 0208 	orr.w	r2, r3, #8
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2203      	movs	r2, #3
 8004454:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e0d8      	b.n	800460c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	2b00      	cmp	r3, #0
 8004462:	dbe8      	blt.n	8004436 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004464:	2001      	movs	r0, #1
 8004466:	f7fe facd 	bl	8002a04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	6992      	ldr	r2, [r2, #24]
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	ea02 0103 	and.w	r1, r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	409a      	lsls	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	21ff      	movs	r1, #255	; 0xff
 80044b0:	fa01 f303 	lsl.w	r3, r1, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	ea02 0103 	and.w	r1, r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	409a      	lsls	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d11d      	bne.n	8004512 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	221f      	movs	r2, #31
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4013      	ands	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2207      	movs	r2, #7
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4013      	ands	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d102      	bne.n	800453c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e00f      	b.n	800455c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d102      	bne.n	800454a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004544:	2301      	movs	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e008      	b.n	800455c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e001      	b.n	800455c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	400a      	ands	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4013      	ands	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	22c0      	movs	r2, #192	; 0xc0
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43da      	mvns	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	400a      	ands	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20008000 	.word	0x20008000

08004618 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b098      	sub	sp, #96	; 0x60
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004620:	4a84      	ldr	r2, [pc, #528]	; (8004834 <HAL_FDCAN_Init+0x21c>)
 8004622:	f107 030c 	add.w	r3, r7, #12
 8004626:	4611      	mov	r1, r2
 8004628:	224c      	movs	r2, #76	; 0x4c
 800462a:	4618      	mov	r0, r3
 800462c:	f006 fdc8 	bl	800b1c0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1ca      	b.n	80049d0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7e      	ldr	r2, [pc, #504]	; (8004838 <HAL_FDCAN_Init+0x220>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d106      	bne.n	8004652 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800464c:	461a      	mov	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd fc28 	bl	8001ebc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0210 	bic.w	r2, r2, #16
 800467a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800467c:	f7fe f9b6 	bl	80029ec <HAL_GetTick>
 8004680:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004682:	e014      	b.n	80046ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004684:	f7fe f9b2 	bl	80029ec <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b0a      	cmp	r3, #10
 8004690:	d90d      	bls.n	80046ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2203      	movs	r2, #3
 80046a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e190      	b.n	80049d0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d0e3      	beq.n	8004684 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046cc:	f7fe f98e 	bl	80029ec <HAL_GetTick>
 80046d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046d2:	e014      	b.n	80046fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046d4:	f7fe f98a 	bl	80029ec <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d90d      	bls.n	80046fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2203      	movs	r2, #3
 80046f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e168      	b.n	80049d0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0e3      	beq.n	80046d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0202 	orr.w	r2, r2, #2
 800471a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7c1b      	ldrb	r3, [r3, #16]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d108      	bne.n	8004736 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	619a      	str	r2, [r3, #24]
 8004734:	e007      	b.n	8004746 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004744:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	7c5b      	ldrb	r3, [r3, #17]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d108      	bne.n	8004760 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475c:	619a      	str	r2, [r3, #24]
 800475e:	e007      	b.n	8004770 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800476e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	7c9b      	ldrb	r3, [r3, #18]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d108      	bne.n	800478a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004786:	619a      	str	r2, [r3, #24]
 8004788:	e007      	b.n	800479a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004798:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80047be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0210 	bic.w	r2, r2, #16
 80047ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0204 	orr.w	r2, r2, #4
 80047e6:	619a      	str	r2, [r3, #24]
 80047e8:	e030      	b.n	800484c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d02c      	beq.n	800484c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d020      	beq.n	800483c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004808:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0210 	orr.w	r2, r2, #16
 8004818:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d114      	bne.n	800484c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0220 	orr.w	r2, r2, #32
 8004830:	619a      	str	r2, [r3, #24]
 8004832:	e00b      	b.n	800484c <HAL_FDCAN_Init+0x234>
 8004834:	0800c1fc 	.word	0x0800c1fc
 8004838:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0220 	orr.w	r2, r2, #32
 800484a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	3b01      	subs	r3, #1
 8004852:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	3b01      	subs	r3, #1
 800485a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800485c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004864:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	3b01      	subs	r3, #1
 800486e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004874:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004876:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d115      	bne.n	80048ae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	3b01      	subs	r3, #1
 800488e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004890:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	3b01      	subs	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800489a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	3b01      	subs	r3, #1
 80048a4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80048aa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048ac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d4:	4413      	add	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80048e2:	f023 0107 	bic.w	r1, r3, #7
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048f0:	4413      	add	r3, r2
 80048f2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d012      	beq.n	800492e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004910:	f023 0107 	bic.w	r1, r3, #7
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800491e:	4413      	add	r3, r2
 8004920:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004932:	2b00      	cmp	r3, #0
 8004934:	d013      	beq.n	800495e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800493e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800494c:	4413      	add	r3, r2
 800494e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004952:	011a      	lsls	r2, r3, #4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800496e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800497c:	4413      	add	r3, r2
 800497e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_FDCAN_Init+0x3c0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d107      	bne.n	80049a8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f022 0203 	bic.w	r2, r2, #3
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f80b 	bl	80049dc <FDCAN_CalcultateRamBlockAddresses>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80049cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3760      	adds	r7, #96	; 0x60
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	4000a000 	.word	0x4000a000

080049dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049f2:	4ba7      	ldr	r3, [pc, #668]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	0091      	lsls	r1, r2, #2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	430b      	orrs	r3, r1
 8004a00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	4413      	add	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a32:	4b97      	ldr	r3, [pc, #604]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0091      	lsls	r1, r2, #2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	041a      	lsls	r2, r3, #16
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004a74:	4b86      	ldr	r3, [pc, #536]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	0091      	lsls	r1, r2, #2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a8e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	041a      	lsls	r2, r3, #16
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004abc:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	0091      	lsls	r1, r2, #2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ad6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ade:	041a      	lsls	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4413      	add	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b04:	4b62      	ldr	r3, [pc, #392]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	0091      	lsls	r1, r2, #2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	430b      	orrs	r3, r1
 8004b12:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004b30:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	0091      	lsls	r1, r2, #2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b4a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	041a      	lsls	r2, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4413      	add	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	0091      	lsls	r1, r2, #2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b8c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b94:	041a      	lsls	r2, r3, #16
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ba8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	061a      	lsls	r2, r3, #24
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009a      	lsls	r2, r3, #2
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004c26:	fb01 f303 	mul.w	r3, r1, r3
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	441a      	add	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d915      	bls.n	8004cb8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c8c:	e006      	b.n	8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c8e:	bf00      	nop
 8004c90:	ffff0003 	.word	0xffff0003
 8004c94:	10002b00 	.word	0x10002b00
 8004c98:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2203      	movs	r2, #3
 8004cb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e010      	b.n	8004cda <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e005      	b.n	8004ccc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d3f3      	bcc.n	8004cc0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cf6:	4b86      	ldr	r3, [pc, #536]	; (8004f10 <HAL_GPIO_Init+0x228>)
 8004cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cfa:	e18c      	b.n	8005016 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 817e 	beq.w	8005010 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d005      	beq.n	8004d2c <HAL_GPIO_Init+0x44>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d130      	bne.n	8004d8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d62:	2201      	movs	r2, #1
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0201 	and.w	r2, r3, #1
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d017      	beq.n	8004dca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d123      	bne.n	8004e1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	08da      	lsrs	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3208      	adds	r2, #8
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	220f      	movs	r2, #15
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	08da      	lsrs	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3208      	adds	r2, #8
 8004e18:	69b9      	ldr	r1, [r7, #24]
 8004e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80d8 	beq.w	8005010 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e60:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <HAL_GPIO_Init+0x22c>)
 8004e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e66:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <HAL_GPIO_Init+0x22c>)
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e70:	4b28      	ldr	r3, [pc, #160]	; (8004f14 <HAL_GPIO_Init+0x22c>)
 8004e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7e:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <HAL_GPIO_Init+0x230>)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <HAL_GPIO_Init+0x234>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d04a      	beq.n	8004f40 <HAL_GPIO_Init+0x258>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_GPIO_Init+0x238>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02b      	beq.n	8004f0a <HAL_GPIO_Init+0x222>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_GPIO_Init+0x23c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d025      	beq.n	8004f06 <HAL_GPIO_Init+0x21e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <HAL_GPIO_Init+0x240>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <HAL_GPIO_Init+0x21a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_GPIO_Init+0x244>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d019      	beq.n	8004efe <HAL_GPIO_Init+0x216>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <HAL_GPIO_Init+0x248>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_GPIO_Init+0x212>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a17      	ldr	r2, [pc, #92]	; (8004f34 <HAL_GPIO_Init+0x24c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_GPIO_Init+0x20e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <HAL_GPIO_Init+0x250>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <HAL_GPIO_Init+0x20a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <HAL_GPIO_Init+0x254>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_GPIO_Init+0x206>
 8004eea:	2309      	movs	r3, #9
 8004eec:	e029      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004eee:	230a      	movs	r3, #10
 8004ef0:	e027      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004ef2:	2307      	movs	r3, #7
 8004ef4:	e025      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004ef6:	2306      	movs	r3, #6
 8004ef8:	e023      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004efa:	2305      	movs	r3, #5
 8004efc:	e021      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004efe:	2304      	movs	r3, #4
 8004f00:	e01f      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004f02:	2303      	movs	r3, #3
 8004f04:	e01d      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e01b      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e019      	b.n	8004f42 <HAL_GPIO_Init+0x25a>
 8004f0e:	bf00      	nop
 8004f10:	58000080 	.word	0x58000080
 8004f14:	58024400 	.word	0x58024400
 8004f18:	58000400 	.word	0x58000400
 8004f1c:	58020000 	.word	0x58020000
 8004f20:	58020400 	.word	0x58020400
 8004f24:	58020800 	.word	0x58020800
 8004f28:	58020c00 	.word	0x58020c00
 8004f2c:	58021000 	.word	0x58021000
 8004f30:	58021400 	.word	0x58021400
 8004f34:	58021800 	.word	0x58021800
 8004f38:	58021c00 	.word	0x58021c00
 8004f3c:	58022400 	.word	0x58022400
 8004f40:	2300      	movs	r3, #0
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	4093      	lsls	r3, r2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f52:	4938      	ldr	r1, [pc, #224]	; (8005034 <HAL_GPIO_Init+0x34c>)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f ae6b 	bne.w	8004cfc <HAL_GPIO_Init+0x14>
  }
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	3724      	adds	r7, #36	; 0x24
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	58000400 	.word	0x58000400

08005038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
 8005044:	4613      	mov	r3, r2
 8005046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005048:	787b      	ldrb	r3, [r7, #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005054:	e003      	b.n	800505e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	041a      	lsls	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	4603      	mov	r3, r0
 8005072:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005078:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fb fbdd 	bl	8000850 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07f      	b.n	80051b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc ffc2 	bl	8002050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005100:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d107      	bne.n	800511a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	e006      	b.n	8005128 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005126:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d104      	bne.n	800513a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6859      	ldr	r1, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <HAL_I2C_Init+0x11c>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69d9      	ldr	r1, [r3, #28]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	02008000 	.word	0x02008000

080051c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d138      	bne.n	8005248 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e032      	b.n	800524a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005212:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b20      	cmp	r3, #32
 800526a:	d139      	bne.n	80052e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005276:	2302      	movs	r3, #2
 8005278:	e033      	b.n	80052e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2224      	movs	r2, #36	; 0x24
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80052f8:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	2b06      	cmp	r3, #6
 8005302:	d00a      	beq.n	800531a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005304:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d001      	beq.n	8005316 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e03f      	b.n	8005396 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e03d      	b.n	8005396 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005322:	491f      	ldr	r1, [pc, #124]	; (80053a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4313      	orrs	r3, r2
 8005328:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800532a:	f7fd fb5f 	bl	80029ec <HAL_GetTick>
 800532e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005330:	e009      	b.n	8005346 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005332:	f7fd fb5b 	bl	80029ec <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005340:	d901      	bls.n	8005346 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e027      	b.n	8005396 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005352:	d1ee      	bne.n	8005332 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b1e      	cmp	r3, #30
 8005358:	d008      	beq.n	800536c <HAL_PWREx_ConfigSupply+0x7c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b2e      	cmp	r3, #46	; 0x2e
 800535e:	d005      	beq.n	800536c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b1d      	cmp	r3, #29
 8005364:	d002      	beq.n	800536c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b2d      	cmp	r3, #45	; 0x2d
 800536a:	d113      	bne.n	8005394 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800536c:	f7fd fb3e 	bl	80029ec <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005372:	e009      	b.n	8005388 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005374:	f7fd fb3a 	bl	80029ec <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005382:	d901      	bls.n	8005388 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e006      	b.n	8005396 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0311 	and.w	r3, r3, #17
 8005390:	2b11      	cmp	r3, #17
 8005392:	d1ef      	bne.n	8005374 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	58024800 	.word	0x58024800

080053a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08c      	sub	sp, #48	; 0x30
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e397      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8087 	beq.w	80054d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c4:	4b9e      	ldr	r3, [pc, #632]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ce:	4b9c      	ldr	r3, [pc, #624]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d007      	beq.n	80053ea <HAL_RCC_OscConfig+0x46>
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2b18      	cmp	r3, #24
 80053de:	d110      	bne.n	8005402 <HAL_RCC_OscConfig+0x5e>
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d10b      	bne.n	8005402 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ea:	4b95      	ldr	r3, [pc, #596]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x12c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d168      	bne.n	80054d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e371      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0x76>
 800540c:	4b8c      	ldr	r3, [pc, #560]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a8b      	ldr	r2, [pc, #556]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e02e      	b.n	8005478 <HAL_RCC_OscConfig+0xd4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x98>
 8005422:	4b87      	ldr	r3, [pc, #540]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a86      	ldr	r2, [pc, #536]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b84      	ldr	r3, [pc, #528]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a83      	ldr	r2, [pc, #524]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e01d      	b.n	8005478 <HAL_RCC_OscConfig+0xd4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0xbc>
 8005446:	4b7e      	ldr	r3, [pc, #504]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7d      	ldr	r2, [pc, #500]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b7b      	ldr	r3, [pc, #492]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7a      	ldr	r2, [pc, #488]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0xd4>
 8005460:	4b77      	ldr	r3, [pc, #476]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a76      	ldr	r2, [pc, #472]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b74      	ldr	r3, [pc, #464]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a73      	ldr	r2, [pc, #460]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd fab4 	bl	80029ec <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd fab0 	bl	80029ec <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e325      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800549a:	4b69      	ldr	r3, [pc, #420]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0xe4>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd faa0 	bl	80029ec <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fa9c 	bl	80029ec <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e311      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054c2:	4b5f      	ldr	r3, [pc, #380]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x10c>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 808a 	beq.w	80055f4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e0:	4b57      	ldr	r3, [pc, #348]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054ea:	4b55      	ldr	r3, [pc, #340]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_RCC_OscConfig+0x162>
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	2b18      	cmp	r3, #24
 80054fa:	d137      	bne.n	800556c <HAL_RCC_OscConfig+0x1c8>
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d132      	bne.n	800556c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005506:	4b4e      	ldr	r3, [pc, #312]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x17a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e2e3      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800551e:	4b48      	ldr	r3, [pc, #288]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 0219 	bic.w	r2, r3, #25
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4945      	ldr	r1, [pc, #276]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005530:	f7fd fa5c 	bl	80029ec <HAL_GetTick>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005538:	f7fd fa58 	bl	80029ec <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e2cd      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554a:	4b3d      	ldr	r3, [pc, #244]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	061b      	lsls	r3, r3, #24
 8005564:	4936      	ldr	r1, [pc, #216]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556a:	e043      	b.n	80055f4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d026      	beq.n	80055c2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 0219 	bic.w	r2, r3, #25
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	492f      	ldr	r1, [pc, #188]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fd fa31 	bl	80029ec <HAL_GetTick>
 800558a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558e:	f7fd fa2d 	bl	80029ec <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e2a2      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055a0:	4b27      	ldr	r3, [pc, #156]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ac:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	061b      	lsls	r3, r3, #24
 80055ba:	4921      	ldr	r1, [pc, #132]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	604b      	str	r3, [r1, #4]
 80055c0:	e018      	b.n	80055f4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c2:	4b1f      	ldr	r3, [pc, #124]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fd fa0d 	bl	80029ec <HAL_GetTick>
 80055d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d6:	f7fd fa09 	bl	80029ec <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e27e      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d06d      	beq.n	80056dc <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005608:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d007      	beq.n	8005626 <HAL_RCC_OscConfig+0x282>
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b18      	cmp	r3, #24
 800561a:	d11e      	bne.n	800565a <HAL_RCC_OscConfig+0x2b6>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d119      	bne.n	800565a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_RCC_OscConfig+0x29c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_RCC_OscConfig+0x2a0>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d004      	beq.n	8005644 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e253      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
 800563e:	bf00      	nop
 8005640:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005644:	4ba3      	ldr	r3, [pc, #652]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	061b      	lsls	r3, r3, #24
 8005652:	49a0      	ldr	r1, [pc, #640]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005654:	4313      	orrs	r3, r2
 8005656:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005658:	e040      	b.n	80056dc <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d023      	beq.n	80056aa <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005662:	4b9c      	ldr	r3, [pc, #624]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a9b      	ldr	r2, [pc, #620]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566e:	f7fd f9bd 	bl	80029ec <HAL_GetTick>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005676:	f7fd f9b9 	bl	80029ec <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e22e      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005688:	4b92      	ldr	r3, [pc, #584]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005694:	4b8f      	ldr	r3, [pc, #572]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	061b      	lsls	r3, r3, #24
 80056a2:	498c      	ldr	r1, [pc, #560]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60cb      	str	r3, [r1, #12]
 80056a8:	e018      	b.n	80056dc <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056aa:	4b8a      	ldr	r3, [pc, #552]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a89      	ldr	r2, [pc, #548]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80056b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fd f999 	bl	80029ec <HAL_GetTick>
 80056ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056be:	f7fd f995 	bl	80029ec <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e20a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056d0:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d036      	beq.n	8005756 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d019      	beq.n	8005724 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f0:	4b78      	ldr	r3, [pc, #480]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80056f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f4:	4a77      	ldr	r2, [pc, #476]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fd f976 	bl	80029ec <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005704:	f7fd f972 	bl	80029ec <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e1e7      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005716:	4b6f      	ldr	r3, [pc, #444]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0x360>
 8005722:	e018      	b.n	8005756 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005724:	4b6b      	ldr	r3, [pc, #428]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005728:	4a6a      	ldr	r2, [pc, #424]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fd f95c 	bl	80029ec <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005738:	f7fd f958 	bl	80029ec <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1cd      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800574a:	4b62      	ldr	r3, [pc, #392]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800574c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d036      	beq.n	80057d0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d019      	beq.n	800579e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800576a:	4b5a      	ldr	r3, [pc, #360]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a59      	ldr	r2, [pc, #356]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005776:	f7fd f939 	bl	80029ec <HAL_GetTick>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800577e:	f7fd f935 	bl	80029ec <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e1aa      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005790:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x3da>
 800579c:	e018      	b.n	80057d0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800579e:	4b4d      	ldr	r3, [pc, #308]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4c      	ldr	r2, [pc, #304]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80057a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057aa:	f7fd f91f 	bl	80029ec <HAL_GetTick>
 80057ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057b2:	f7fd f91b 	bl	80029ec <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e190      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057c4:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8085 	beq.w	80058e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057de:	4b3e      	ldr	r3, [pc, #248]	; (80058d8 <HAL_RCC_OscConfig+0x534>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3d      	ldr	r2, [pc, #244]	; (80058d8 <HAL_RCC_OscConfig+0x534>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ea:	f7fd f8ff 	bl	80029ec <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057f2:	f7fd f8fb 	bl	80029ec <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b64      	cmp	r3, #100	; 0x64
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e170      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005804:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <HAL_RCC_OscConfig+0x534>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <HAL_RCC_OscConfig+0x482>
 8005818:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	e02d      	b.n	8005882 <HAL_RCC_OscConfig+0x4de>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x4a4>
 800582e:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a28      	ldr	r2, [pc, #160]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	e01c      	b.n	8005882 <HAL_RCC_OscConfig+0x4de>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b05      	cmp	r3, #5
 800584e:	d10c      	bne.n	800586a <HAL_RCC_OscConfig+0x4c6>
 8005850:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6713      	str	r3, [r2, #112]	; 0x70
 8005868:	e00b      	b.n	8005882 <HAL_RCC_OscConfig+0x4de>
 800586a:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6713      	str	r3, [r2, #112]	; 0x70
 8005876:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fd f8af 	bl	80029ec <HAL_GetTick>
 800588e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fd f8ab 	bl	80029ec <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e11e      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <HAL_RCC_OscConfig+0x530>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ee      	beq.n	8005892 <HAL_RCC_OscConfig+0x4ee>
 80058b4:	e018      	b.n	80058e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fd f899 	bl	80029ec <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058bc:	e00e      	b.n	80058dc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fd f895 	bl	80029ec <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d905      	bls.n	80058dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e108      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
 80058d4:	58024400 	.word	0x58024400
 80058d8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058dc:	4b84      	ldr	r3, [pc, #528]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1ea      	bne.n	80058be <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80f9 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058f2:	4b7f      	ldr	r3, [pc, #508]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058fa:	2b18      	cmp	r3, #24
 80058fc:	f000 80b4 	beq.w	8005a68 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b02      	cmp	r3, #2
 8005906:	f040 8095 	bne.w	8005a34 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590a:	4b79      	ldr	r3, [pc, #484]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a78      	ldr	r2, [pc, #480]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fd f869 	bl	80029ec <HAL_GetTick>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591e:	f7fd f865 	bl	80029ec <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e0da      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005930:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800593c:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 800593e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005940:	4b6c      	ldr	r3, [pc, #432]	; (8005af4 <HAL_RCC_OscConfig+0x750>)
 8005942:	4013      	ands	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800594c:	0112      	lsls	r2, r2, #4
 800594e:	430a      	orrs	r2, r1
 8005950:	4967      	ldr	r1, [pc, #412]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	628b      	str	r3, [r1, #40]	; 0x28
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	3b01      	subs	r3, #1
 800595c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	3b01      	subs	r3, #1
 8005966:	025b      	lsls	r3, r3, #9
 8005968:	b29b      	uxth	r3, r3
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	3b01      	subs	r3, #1
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	3b01      	subs	r3, #1
 8005980:	061b      	lsls	r3, r3, #24
 8005982:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005986:	495a      	ldr	r1, [pc, #360]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800598c:	4b58      	ldr	r3, [pc, #352]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a57      	ldr	r2, [pc, #348]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005998:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 800599a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599c:	4b56      	ldr	r3, [pc, #344]	; (8005af8 <HAL_RCC_OscConfig+0x754>)
 800599e:	4013      	ands	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059a4:	00d2      	lsls	r2, r2, #3
 80059a6:	4952      	ldr	r1, [pc, #328]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059ac:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	f023 020c 	bic.w	r2, r3, #12
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	494d      	ldr	r1, [pc, #308]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059be:	4b4c      	ldr	r3, [pc, #304]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	f023 0202 	bic.w	r2, r3, #2
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	4949      	ldr	r1, [pc, #292]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059d0:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4a46      	ldr	r2, [pc, #280]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a43      	ldr	r2, [pc, #268]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059e8:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a40      	ldr	r2, [pc, #256]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059f4:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a00:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a3a      	ldr	r2, [pc, #232]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fc ffee 	bl	80029ec <HAL_GetTick>
 8005a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fc ffea 	bl	80029ec <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e05f      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a26:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0x670>
 8005a32:	e057      	b.n	8005ae4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a34:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fc ffd4 	bl	80029ec <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fc ffd0 	bl	80029ec <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e045      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a5a:	4b25      	ldr	r3, [pc, #148]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x6a4>
 8005a66:	e03d      	b.n	8005ae4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a68:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a6e:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <HAL_RCC_OscConfig+0x74c>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d031      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 0203 	and.w	r2, r3, #3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d12a      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d122      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d11a      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	0a5b      	lsrs	r3, r3, #9
 8005aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d111      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3730      	adds	r7, #48	; 0x30
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
 8005af4:	fffffc0c 	.word	0xfffffc0c
 8005af8:	ffff0007 	.word	0xffff0007

08005afc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e19c      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d910      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	4b87      	ldr	r3, [pc, #540]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	4985      	ldr	r1, [pc, #532]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b83      	ldr	r3, [pc, #524]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e184      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	4b7b      	ldr	r3, [pc, #492]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d908      	bls.n	8005b6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b5c:	4b78      	ldr	r3, [pc, #480]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	4975      	ldr	r1, [pc, #468]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d010      	beq.n	8005b9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	4b70      	ldr	r3, [pc, #448]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d908      	bls.n	8005b9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b8a:	4b6d      	ldr	r3, [pc, #436]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	496a      	ldr	r1, [pc, #424]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d010      	beq.n	8005bca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	4b64      	ldr	r3, [pc, #400]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d908      	bls.n	8005bca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	495e      	ldr	r1, [pc, #376]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	4b59      	ldr	r3, [pc, #356]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d908      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005be6:	4b56      	ldr	r3, [pc, #344]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4953      	ldr	r1, [pc, #332]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	4b4d      	ldr	r3, [pc, #308]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d908      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f023 020f 	bic.w	r2, r3, #15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4947      	ldr	r1, [pc, #284]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d055      	beq.n	8005cde <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c32:	4b43      	ldr	r3, [pc, #268]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4940      	ldr	r1, [pc, #256]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c4c:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d121      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0f6      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0ea      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c7c:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0de      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0d6      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c9c:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f023 0207 	bic.w	r2, r3, #7
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4925      	ldr	r1, [pc, #148]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cae:	f7fc fe9d 	bl	80029ec <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb6:	f7fc fe99 	bl	80029ec <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0be      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d1eb      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d010      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d208      	bcs.n	8005d0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f023 020f 	bic.w	r2, r3, #15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	490e      	ldr	r1, [pc, #56]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d214      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 020f 	bic.w	r2, r3, #15
 8005d22:	4906      	ldr	r1, [pc, #24]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e086      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
 8005d3c:	52002000 	.word	0x52002000
 8005d40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	4b3f      	ldr	r3, [pc, #252]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d208      	bcs.n	8005d72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d60:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	4939      	ldr	r1, [pc, #228]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d010      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d208      	bcs.n	8005da0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d8e:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	492e      	ldr	r1, [pc, #184]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	4b28      	ldr	r3, [pc, #160]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d208      	bcs.n	8005dce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	4922      	ldr	r1, [pc, #136]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d208      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dea:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4917      	ldr	r1, [pc, #92]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dfc:	f000 f834 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	4912      	ldr	r1, [pc, #72]	; (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e24:	5cd3      	ldrb	r3, [r2, r3]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <HAL_RCC_ClockConfig+0x360>)
 8005e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e34:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <HAL_RCC_ClockConfig+0x364>)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_RCC_ClockConfig+0x368>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fc fd8a 	bl	8002958 <HAL_InitTick>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	58024400 	.word	0x58024400
 8005e58:	0800c248 	.word	0x0800c248
 8005e5c:	24000004 	.word	0x24000004
 8005e60:	24000000 	.word	0x24000000
 8005e64:	24000008 	.word	0x24000008

08005e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e6e:	4bb3      	ldr	r3, [pc, #716]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e76:	2b18      	cmp	r3, #24
 8005e78:	f200 8155 	bhi.w	8006126 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005ee9 	.word	0x08005ee9
 8005e88:	08006127 	.word	0x08006127
 8005e8c:	08006127 	.word	0x08006127
 8005e90:	08006127 	.word	0x08006127
 8005e94:	08006127 	.word	0x08006127
 8005e98:	08006127 	.word	0x08006127
 8005e9c:	08006127 	.word	0x08006127
 8005ea0:	08006127 	.word	0x08006127
 8005ea4:	08005f0f 	.word	0x08005f0f
 8005ea8:	08006127 	.word	0x08006127
 8005eac:	08006127 	.word	0x08006127
 8005eb0:	08006127 	.word	0x08006127
 8005eb4:	08006127 	.word	0x08006127
 8005eb8:	08006127 	.word	0x08006127
 8005ebc:	08006127 	.word	0x08006127
 8005ec0:	08006127 	.word	0x08006127
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08006127 	.word	0x08006127
 8005ecc:	08006127 	.word	0x08006127
 8005ed0:	08006127 	.word	0x08006127
 8005ed4:	08006127 	.word	0x08006127
 8005ed8:	08006127 	.word	0x08006127
 8005edc:	08006127 	.word	0x08006127
 8005ee0:	08006127 	.word	0x08006127
 8005ee4:	08005f1b 	.word	0x08005f1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee8:	4b94      	ldr	r3, [pc, #592]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d009      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ef4:	4b91      	ldr	r3, [pc, #580]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	4a90      	ldr	r2, [pc, #576]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f06:	e111      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f08:	4b8d      	ldr	r3, [pc, #564]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f0a:	61bb      	str	r3, [r7, #24]
    break;
 8005f0c:	e10e      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f0e:	4b8d      	ldr	r3, [pc, #564]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f10:	61bb      	str	r3, [r7, #24]
    break;
 8005f12:	e10b      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f14:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f16:	61bb      	str	r3, [r7, #24]
    break;
 8005f18:	e108      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f1a:	4b88      	ldr	r3, [pc, #544]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f24:	4b85      	ldr	r3, [pc, #532]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f30:	4b82      	ldr	r3, [pc, #520]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f3a:	4b80      	ldr	r3, [pc, #512]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	08db      	lsrs	r3, r3, #3
 8005f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80e1 	beq.w	8006120 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	f000 8083 	beq.w	800606c <HAL_RCC_GetSysClockFreq+0x204>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	f200 80a1 	bhi.w	80060b0 <HAL_RCC_GetSysClockFreq+0x248>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x114>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d056      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f7a:	e099      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f7c:	4b6f      	ldr	r3, [pc, #444]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02d      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f88:	4b6c      	ldr	r3, [pc, #432]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	4a6b      	ldr	r2, [pc, #428]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b62      	ldr	r3, [pc, #392]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fe2:	e087      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b51      	ldr	r3, [pc, #324]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a02 	vldr	s12, [r7, #8]
 800600a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006026:	e065      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006154 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b40      	ldr	r3, [pc, #256]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a02 	vldr	s12, [r7, #8]
 800604e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	e043      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006158 <HAL_RCC_GetSysClockFreq+0x2f0>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b2f      	ldr	r3, [pc, #188]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006092:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	e021      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006154 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b1e      	ldr	r3, [pc, #120]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	0a5b      	lsrs	r3, r3, #9
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	3301      	adds	r3, #1
 8006100:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800610c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006118:	ee17 3a90 	vmov	r3, s15
 800611c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800611e:	e005      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	61bb      	str	r3, [r7, #24]
    break;
 8006124:	e002      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006128:	61bb      	str	r3, [r7, #24]
    break;
 800612a:	bf00      	nop
  }

  return sysclockfreq;
 800612c:	69bb      	ldr	r3, [r7, #24]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3724      	adds	r7, #36	; 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	58024400 	.word	0x58024400
 8006140:	03d09000 	.word	0x03d09000
 8006144:	003d0900 	.word	0x003d0900
 8006148:	017d7840 	.word	0x017d7840
 800614c:	46000000 	.word	0x46000000
 8006150:	4c742400 	.word	0x4c742400
 8006154:	4a742400 	.word	0x4a742400
 8006158:	4bbebc20 	.word	0x4bbebc20

0800615c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006162:	f7ff fe81 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8006166:	4602      	mov	r2, r0
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <HAL_RCC_GetHCLKFreq+0x50>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	490f      	ldr	r1, [pc, #60]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006174:	5ccb      	ldrb	r3, [r1, r3]
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	fa22 f303 	lsr.w	r3, r2, r3
 800617e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <HAL_RCC_GetHCLKFreq+0x50>)
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006198:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800619a:	4a07      	ldr	r2, [pc, #28]	; (80061b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	58024400 	.word	0x58024400
 80061b0:	0800c248 	.word	0x0800c248
 80061b4:	24000004 	.word	0x24000004
 80061b8:	24000000 	.word	0x24000000

080061bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061c0:	f7ff ffcc 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4904      	ldr	r1, [pc, #16]	; (80061e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	58024400 	.word	0x58024400
 80061e4:	0800c248 	.word	0x0800c248

080061e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061ec:	f7ff ffb6 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4904      	ldr	r1, [pc, #16]	; (8006210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006208:	4618      	mov	r0, r3
 800620a:	bd80      	pop	{r7, pc}
 800620c:	58024400 	.word	0x58024400
 8006210:	0800c248 	.word	0x0800c248

08006214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800621c:	2300      	movs	r3, #0
 800621e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006220:	2300      	movs	r3, #0
 8006222:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d03f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006238:	d02a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800623a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800623e:	d824      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006244:	d018      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800624a:	d81e      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006254:	d007      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006256:	e018      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006258:	4bab      	ldr	r3, [pc, #684]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	4aaa      	ldr	r2, [pc, #680]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800625e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006264:	e015      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f001 feff 	bl	8008070 <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006276:	e00c      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	2102      	movs	r1, #2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 ffa8 	bl	80081d4 <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006288:	e003      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
      break;
 800628e:	e000      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006298:	4b9b      	ldr	r3, [pc, #620]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	4998      	ldr	r1, [pc, #608]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	650b      	str	r3, [r1, #80]	; 0x50
 80062aa:	e001      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d826      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062e1 	.word	0x080062e1
 80062d0:	080062ef 	.word	0x080062ef
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006319 	.word	0x08006319
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e0:	4b89      	ldr	r3, [pc, #548]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a88      	ldr	r2, [pc, #544]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ec:	e015      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 febb 	bl	8008070 <RCCEx_PLL2_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062fe:	e00c      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3324      	adds	r3, #36	; 0x24
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 ff64 	bl	80081d4 <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	e000      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006320:	4b79      	ldr	r3, [pc, #484]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	f023 0207 	bic.w	r2, r3, #7
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	4976      	ldr	r1, [pc, #472]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	650b      	str	r3, [r1, #80]	; 0x50
 8006332:	e001      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d051      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800634a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800634e:	d036      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006350:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006354:	d830      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800635a:	d032      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800635c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006360:	d82a      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006362:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006366:	d02e      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006368:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800636c:	d824      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800636e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006372:	d018      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006378:	d81e      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800637e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006382:	d007      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006384:	e018      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006386:	4b60      	ldr	r3, [pc, #384]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	4a5f      	ldr	r2, [pc, #380]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800638c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006392:	e019      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f001 fe68 	bl	8008070 <RCCEx_PLL2_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063a4:	e010      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 ff11 	bl	80081d4 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b6:	e007      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
      break;
 80063bc:	e004      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80063c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063ce:	4b4e      	ldr	r3, [pc, #312]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063dc:	494a      	ldr	r1, [pc, #296]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	658b      	str	r3, [r1, #88]	; 0x58
 80063e2:	e001      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d051      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80063fe:	d036      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006400:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006404:	d830      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800640a:	d032      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800640c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006410:	d82a      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006412:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006416:	d02e      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800641c:	d824      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800641e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006422:	d018      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006428:	d81e      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800642e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006432:	d007      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006434:	e018      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006436:	4b34      	ldr	r3, [pc, #208]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a33      	ldr	r2, [pc, #204]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006442:	e019      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f001 fe10 	bl	8008070 <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006454:	e010      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 feb9 	bl	80081d4 <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006466:	e007      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e004      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800648c:	491e      	ldr	r1, [pc, #120]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	658b      	str	r3, [r1, #88]	; 0x58
 8006492:	e001      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d035      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a8:	2b30      	cmp	r3, #48	; 0x30
 80064aa:	d01c      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	d817      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d00c      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d813      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d016      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d10f      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a10      	ldr	r2, [pc, #64]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80064cc:	e00e      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fdcb 	bl	8008070 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80064de:	e005      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80064ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10c      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fe:	4902      	ldr	r1, [pc, #8]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006500:	4313      	orrs	r3, r2
 8006502:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006504:	e004      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d047      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006524:	d030      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652a:	d82a      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800652c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006530:	d02c      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006536:	d824      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653c:	d018      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800653e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006542:	d81e      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654c:	d007      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800654e:	e018      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006550:	4bac      	ldr	r3, [pc, #688]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	4aab      	ldr	r2, [pc, #684]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800655c:	e017      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2100      	movs	r1, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f001 fd83 	bl	8008070 <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800656e:	e00e      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f001 fe2c 	bl	80081d4 <RCCEx_PLL3_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006580:	e005      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75fb      	strb	r3, [r7, #23]
      break;
 8006586:	e002      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006588:	bf00      	nop
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800658c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006594:	4b9b      	ldr	r3, [pc, #620]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	4998      	ldr	r1, [pc, #608]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	650b      	str	r3, [r1, #80]	; 0x50
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d049      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c0:	d02e      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80065c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c6:	d828      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065cc:	d02a      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80065ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065d2:	d822      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065d8:	d026      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80065da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065de:	d81c      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e4:	d010      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80065e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ea:	d816      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01d      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d111      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	2101      	movs	r1, #1
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fd37 	bl	8008070 <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006606:	e012      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3324      	adds	r3, #36	; 0x24
 800660c:	2101      	movs	r1, #1
 800660e:	4618      	mov	r0, r3
 8006610:	f001 fde0 	bl	80081d4 <RCCEx_PLL3_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006618:	e009      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
      break;
 800661e:	e006      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006620:	bf00      	nop
 8006622:	e004      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800662c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006634:	4b73      	ldr	r3, [pc, #460]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	4970      	ldr	r1, [pc, #448]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006642:	4313      	orrs	r3, r2
 8006644:	650b      	str	r3, [r1, #80]	; 0x50
 8006646:	e001      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d04b      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800665e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006662:	d02e      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006668:	d828      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d02a      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d822      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800667a:	d026      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800667c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006680:	d81c      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006686:	d010      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668c:	d816      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01d      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006696:	d111      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	2101      	movs	r1, #1
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fce6 	bl	8008070 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066a8:	e012      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3324      	adds	r3, #36	; 0x24
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fd8f 	bl	80081d4 <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066ba:	e009      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
      break;
 80066c0:	e006      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80066c2:	bf00      	nop
 80066c4:	e004      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80066c6:	bf00      	nop
 80066c8:	e002      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80066ca:	bf00      	nop
 80066cc:	e000      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80066ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066d6:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066e4:	4947      	ldr	r1, [pc, #284]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	658b      	str	r3, [r1, #88]	; 0x58
 80066ea:	e001      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d02f      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006704:	d00e      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670a:	d814      	bhi.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d015      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006714:	d10f      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006716:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	4a3a      	ldr	r2, [pc, #232]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800671c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006720:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006722:	e00c      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	2101      	movs	r1, #1
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fca0 	bl	8008070 <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
      break;
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800673c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006744:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006748:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006750:	492c      	ldr	r1, [pc, #176]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	650b      	str	r3, [r1, #80]	; 0x50
 8006756:	e001      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d032      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676c:	2b03      	cmp	r3, #3
 800676e:	d81b      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	080067af 	.word	0x080067af
 800677c:	08006789 	.word	0x08006789
 8006780:	08006797 	.word	0x08006797
 8006784:	080067af 	.word	0x080067af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006794:	e00c      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2102      	movs	r1, #2
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fc67 	bl	8008070 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80067ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067b6:	4b13      	ldr	r3, [pc, #76]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f023 0203 	bic.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4910      	ldr	r1, [pc, #64]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067c8:	e001      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 808a 	beq.w	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a09      	ldr	r2, [pc, #36]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80067e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067e8:	f7fc f900 	bl	80029ec <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ee:	e00d      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f0:	f7fc f8fc 	bl	80029ec <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	; 0x64
 80067fc:	d906      	bls.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	75fb      	strb	r3, [r7, #23]
        break;
 8006802:	e009      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006804:	58024400 	.word	0x58024400
 8006808:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800680c:	4bb9      	ldr	r3, [pc, #740]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0eb      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d166      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800681e:	4bb6      	ldr	r3, [pc, #728]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006820:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006828:	4053      	eors	r3, r2
 800682a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682e:	2b00      	cmp	r3, #0
 8006830:	d013      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006832:	4bb1      	ldr	r3, [pc, #708]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800683c:	4bae      	ldr	r3, [pc, #696]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	4aad      	ldr	r2, [pc, #692]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006846:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006848:	4bab      	ldr	r3, [pc, #684]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	4aaa      	ldr	r2, [pc, #680]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800684e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006852:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006854:	4aa8      	ldr	r2, [pc, #672]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006864:	d115      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006866:	f7fc f8c1 	bl	80029ec <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686c:	e00b      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686e:	f7fc f8bd 	bl	80029ec <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f241 3288 	movw	r2, #5000	; 0x1388
 800687c:	4293      	cmp	r3, r2
 800687e:	d902      	bls.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	75fb      	strb	r3, [r7, #23]
            break;
 8006884:	e005      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006886:	4b9c      	ldr	r3, [pc, #624]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0ed      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d126      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800689e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a6:	d10d      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80068a8:	4b93      	ldr	r3, [pc, #588]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068b6:	0919      	lsrs	r1, r3, #4
 80068b8:	4b90      	ldr	r3, [pc, #576]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068ba:	400b      	ands	r3, r1
 80068bc:	498e      	ldr	r1, [pc, #568]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	610b      	str	r3, [r1, #16]
 80068c2:	e005      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80068c4:	4b8c      	ldr	r3, [pc, #560]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	4a8b      	ldr	r2, [pc, #556]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068ce:	6113      	str	r3, [r2, #16]
 80068d0:	4b89      	ldr	r3, [pc, #548]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068de:	4986      	ldr	r1, [pc, #536]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	670b      	str	r3, [r1, #112]	; 0x70
 80068e4:	e004      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	75bb      	strb	r3, [r7, #22]
 80068ea:	e001      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d07e      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006900:	2b28      	cmp	r3, #40	; 0x28
 8006902:	d867      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	080069db 	.word	0x080069db
 8006910:	080069d5 	.word	0x080069d5
 8006914:	080069d5 	.word	0x080069d5
 8006918:	080069d5 	.word	0x080069d5
 800691c:	080069d5 	.word	0x080069d5
 8006920:	080069d5 	.word	0x080069d5
 8006924:	080069d5 	.word	0x080069d5
 8006928:	080069d5 	.word	0x080069d5
 800692c:	080069b1 	.word	0x080069b1
 8006930:	080069d5 	.word	0x080069d5
 8006934:	080069d5 	.word	0x080069d5
 8006938:	080069d5 	.word	0x080069d5
 800693c:	080069d5 	.word	0x080069d5
 8006940:	080069d5 	.word	0x080069d5
 8006944:	080069d5 	.word	0x080069d5
 8006948:	080069d5 	.word	0x080069d5
 800694c:	080069c3 	.word	0x080069c3
 8006950:	080069d5 	.word	0x080069d5
 8006954:	080069d5 	.word	0x080069d5
 8006958:	080069d5 	.word	0x080069d5
 800695c:	080069d5 	.word	0x080069d5
 8006960:	080069d5 	.word	0x080069d5
 8006964:	080069d5 	.word	0x080069d5
 8006968:	080069d5 	.word	0x080069d5
 800696c:	080069db 	.word	0x080069db
 8006970:	080069d5 	.word	0x080069d5
 8006974:	080069d5 	.word	0x080069d5
 8006978:	080069d5 	.word	0x080069d5
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069d5 	.word	0x080069d5
 8006984:	080069d5 	.word	0x080069d5
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069db 	.word	0x080069db
 8006990:	080069d5 	.word	0x080069d5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069d5 	.word	0x080069d5
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	080069db 	.word	0x080069db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	2101      	movs	r1, #1
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fb5a 	bl	8008070 <RCCEx_PLL2_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3324      	adds	r3, #36	; 0x24
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fc03 	bl	80081d4 <RCCEx_PLL3_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069d2:	e003      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80069da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069e2:	4b45      	ldr	r3, [pc, #276]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ee:	4942      	ldr	r1, [pc, #264]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	654b      	str	r3, [r1, #84]	; 0x54
 80069f4:	e001      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d037      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d820      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a57 	.word	0x08006a57
 8006a18:	08006a2d 	.word	0x08006a2d
 8006a1c:	08006a3f 	.word	0x08006a3f
 8006a20:	08006a57 	.word	0x08006a57
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a57 	.word	0x08006a57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fb1c 	bl	8008070 <RCCEx_PLL2_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a3c:	e00c      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3324      	adds	r3, #36	; 0x24
 8006a42:	2101      	movs	r1, #1
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fbc5 	bl	80081d4 <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a4e:	e003      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
      break;
 8006a54:	e000      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a5e:	4b26      	ldr	r3, [pc, #152]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f023 0207 	bic.w	r2, r3, #7
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	4923      	ldr	r1, [pc, #140]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a70:	e001      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d040      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d821      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ad7 	.word	0x08006ad7
 8006a98:	08006aad 	.word	0x08006aad
 8006a9c:	08006abf 	.word	0x08006abf
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fadc 	bl	8008070 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006abc:	e00c      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fb85 	bl	80081d4 <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ace:	e003      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d110      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	f023 0207 	bic.w	r2, r3, #7
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aec:	4902      	ldr	r1, [pc, #8]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	658b      	str	r3, [r1, #88]	; 0x58
 8006af2:	e007      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006af4:	58024800 	.word	0x58024800
 8006af8:	58024400 	.word	0x58024400
 8006afc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04b      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b1a:	d02e      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b20:	d828      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b26:	d02a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d822      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b32:	d026      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006b34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b38:	d81c      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d816      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b4e:	d111      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 fa8a 	bl	8008070 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b60:	e012      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3324      	adds	r3, #36	; 0x24
 8006b66:	2102      	movs	r1, #2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fb33 	bl	80081d4 <RCCEx_PLL3_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b72:	e009      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
      break;
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b8e:	4bb2      	ldr	r3, [pc, #712]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	49ae      	ldr	r1, [pc, #696]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	654b      	str	r3, [r1, #84]	; 0x54
 8006ba2:	e001      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d04b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bbe:	d02e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006bc0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bc4:	d828      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bca:	d02a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd0:	d822      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd6:	d026      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bdc:	d81c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be2:	d010      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be8:	d816      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf2:	d111      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 fa38 	bl	8008070 <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c04:	e012      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3324      	adds	r3, #36	; 0x24
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fae1 	bl	80081d4 <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c16:	e009      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c32:	4b89      	ldr	r3, [pc, #548]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c40:	4985      	ldr	r1, [pc, #532]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	658b      	str	r3, [r1, #88]	; 0x58
 8006c46:	e001      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d04b      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c62:	d02e      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006c64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c68:	d828      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6e:	d02a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c74:	d822      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c7a:	d026      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006c7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c80:	d81c      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c86:	d010      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c8c:	d816      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01d      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c96:	d111      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 f9e6 	bl	8008070 <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ca8:	e012      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	; 0x24
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 fa8f 	bl	80081d4 <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cba:	e009      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cd6:	4b60      	ldr	r3, [pc, #384]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ce4:	495c      	ldr	r1, [pc, #368]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8006cea:	e001      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d018      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d04:	d10a      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fa61 	bl	80081d4 <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006d1c:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d28:	494b      	ldr	r1, [pc, #300]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d44:	d10a      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3324      	adds	r3, #36	; 0x24
 8006d4a:	2102      	movs	r1, #2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 fa41 	bl	80081d4 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d5c:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6a:	493b      	ldr	r1, [pc, #236]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d034      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d86:	d01d      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8c:	d817      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d96:	d009      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d98:	e011      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f965 	bl	8008070 <RCCEx_PLL2_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006daa:	e00c      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3324      	adds	r3, #36	; 0x24
 8006db0:	2102      	movs	r1, #2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fa0e 	bl	80081d4 <RCCEx_PLL3_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dcc:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dda:	491f      	ldr	r1, [pc, #124]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	658b      	str	r3, [r1, #88]	; 0x58
 8006de0:	e001      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d036      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dfc:	d01c      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006dfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e02:	d816      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e08:	d003      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e0e:	d007      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e1e:	e00c      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3324      	adds	r3, #36	; 0x24
 8006e24:	2101      	movs	r1, #1
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f9d4 	bl	80081d4 <RCCEx_PLL3_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	e000      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e4e:	4902      	ldr	r1, [pc, #8]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	654b      	str	r3, [r1, #84]	; 0x54
 8006e54:	e004      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d029      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d007      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006e7a:	e00f      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4b61      	ldr	r3, [pc, #388]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a60      	ldr	r2, [pc, #384]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e88:	e00b      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	2102      	movs	r1, #2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 f8ed 	bl	8008070 <RCCEx_PLL2_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ea8:	4b56      	ldr	r3, [pc, #344]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb4:	4953      	ldr	r1, [pc, #332]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3324      	adds	r3, #36	; 0x24
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 f97e 	bl	80081d4 <RCCEx_PLL3_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d030      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef6:	d017      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efc:	d811      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f02:	d013      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f08:	d80b      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f12:	d106      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f14:	4b3b      	ldr	r3, [pc, #236]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4a3a      	ldr	r2, [pc, #232]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f20:	e007      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
      break;
 8006f26:	e004      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f38:	4b32      	ldr	r3, [pc, #200]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f44:	492f      	ldr	r1, [pc, #188]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	654b      	str	r3, [r1, #84]	; 0x54
 8006f4a:	e001      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f5c:	4b29      	ldr	r3, [pc, #164]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	4926      	ldr	r1, [pc, #152]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d008      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f86:	491f      	ldr	r1, [pc, #124]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f98:	4b1a      	ldr	r3, [pc, #104]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fa2:	6113      	str	r3, [r2, #16]
 8006fa4:	4b17      	ldr	r3, [pc, #92]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fae:	4915      	ldr	r1, [pc, #84]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da08      	bge.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fbc:	4b11      	ldr	r3, [pc, #68]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	490e      	ldr	r1, [pc, #56]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe8:	4906      	ldr	r1, [pc, #24]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fee:	7dbb      	ldrb	r3, [r7, #22]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400

08007008 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b090      	sub	sp, #64	; 0x40
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007016:	f040 8089 	bne.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800701a:	4b95      	ldr	r3, [pc, #596]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800701c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	633b      	str	r3, [r7, #48]	; 0x30
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	2b04      	cmp	r3, #4
 8007028:	d87d      	bhi.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007045 	.word	0x08007045
 8007034:	08007069 	.word	0x08007069
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007121 	.word	0x08007121
 8007040:	080070b1 	.word	0x080070b1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007044:	4b8a      	ldr	r3, [pc, #552]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007050:	d107      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007056:	4618      	mov	r0, r3
 8007058:	f000 feb8 	bl	8007dcc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007060:	e3ed      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007066:	e3ea      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007068:	4b81      	ldr	r3, [pc, #516]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007074:	d107      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007076:	f107 0318 	add.w	r3, r7, #24
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fbfe 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007084:	e3db      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708a:	e3d8      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800708c:	4b78      	ldr	r3, [pc, #480]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007098:	d107      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800709a:	f107 030c 	add.w	r3, r7, #12
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fd40 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070a8:	e3c9      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ae:	e3c6      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070b0:	4b6f      	ldr	r3, [pc, #444]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070ba:	4b6d      	ldr	r3, [pc, #436]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d10c      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d109      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070cc:	4b68      	ldr	r3, [pc, #416]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	08db      	lsrs	r3, r3, #3
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	4a67      	ldr	r2, [pc, #412]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070de:	e01e      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070e0:	4b63      	ldr	r3, [pc, #396]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ec:	d106      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070f4:	d102      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80070f6:	4b60      	ldr	r3, [pc, #384]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fa:	e010      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070fc:	4b5c      	ldr	r3, [pc, #368]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007108:	d106      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007110:	d102      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007112:	4b5a      	ldr	r3, [pc, #360]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007116:	e002      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800711c:	e38f      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800711e:	e38e      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007120:	4b57      	ldr	r3, [pc, #348]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007124:	e38b      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712a:	e388      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007132:	f040 80a7 	bne.w	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007136:	4b4e      	ldr	r3, [pc, #312]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800713e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007146:	d054      	beq.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800714e:	f200 808b 	bhi.w	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007158:	f000 8083 	beq.w	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007162:	f200 8081 	bhi.w	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800716c:	d02f      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007174:	d878      	bhi.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007182:	d012      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007184:	e070      	b.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007186:	4b3a      	ldr	r3, [pc, #232]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007192:	d107      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fe17 	bl	8007dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071a2:	e34c      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a8:	e349      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071aa:	4b31      	ldr	r3, [pc, #196]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b6:	d107      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071b8:	f107 0318 	add.w	r3, r7, #24
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fb5d 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071c6:	e33a      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071cc:	e337      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ce:	4b28      	ldr	r3, [pc, #160]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071da:	d107      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fc9f 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071ea:	e328      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f0:	e325      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071f2:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b04      	cmp	r3, #4
 8007206:	d10c      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800720e:	4b18      	ldr	r3, [pc, #96]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	08db      	lsrs	r3, r3, #3
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	4a16      	ldr	r2, [pc, #88]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800721a:	fa22 f303 	lsr.w	r3, r2, r3
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007220:	e01e      	b.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722e:	d106      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007236:	d102      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800723c:	e010      	b.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800723e:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800724a:	d106      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007252:	d102      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007254:	4b09      	ldr	r3, [pc, #36]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007258:	e002      	b.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800725e:	e2ee      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007260:	e2ed      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007262:	4b07      	ldr	r3, [pc, #28]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007266:	e2ea      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800726c:	e2e7      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	03d09000 	.word	0x03d09000
 8007278:	003d0900 	.word	0x003d0900
 800727c:	017d7840 	.word	0x017d7840
 8007280:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728a:	f040 809c 	bne.w	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800728e:	4b9e      	ldr	r3, [pc, #632]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007296:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800729e:	d054      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072a6:	f200 808b 	bhi.w	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072b0:	f000 8083 	beq.w	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072ba:	f200 8081 	bhi.w	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072c4:	d02f      	beq.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072cc:	d878      	bhi.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072da:	d012      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80072dc:	e070      	b.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072de:	4b8a      	ldr	r3, [pc, #552]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ea:	d107      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fd6b 	bl	8007dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072fa:	e2a0      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007300:	e29d      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007302:	4b81      	ldr	r3, [pc, #516]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800730e:	d107      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007310:	f107 0318 	add.w	r3, r7, #24
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fab1 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800731e:	e28e      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007324:	e28b      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007326:	4b78      	ldr	r3, [pc, #480]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800732e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007332:	d107      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fbf3 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007342:	e27c      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007348:	e279      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800734a:	4b6f      	ldr	r3, [pc, #444]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800734c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007352:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007354:	4b6c      	ldr	r3, [pc, #432]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b04      	cmp	r3, #4
 800735e:	d10c      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007366:	4b68      	ldr	r3, [pc, #416]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	08db      	lsrs	r3, r3, #3
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	4a66      	ldr	r2, [pc, #408]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007372:	fa22 f303 	lsr.w	r3, r2, r3
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007378:	e01e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800737a:	4b63      	ldr	r3, [pc, #396]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007386:	d106      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800738e:	d102      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007390:	4b5f      	ldr	r3, [pc, #380]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007394:	e010      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007396:	4b5c      	ldr	r3, [pc, #368]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073a2:	d106      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80073a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073aa:	d102      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80073ac:	4b59      	ldr	r3, [pc, #356]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80073b6:	e242      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80073b8:	e241      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073ba:	4b57      	ldr	r3, [pc, #348]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073be:	e23e      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073c4:	e23b      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073cc:	f040 80a6 	bne.w	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80073d0:	4b4d      	ldr	r3, [pc, #308]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e0:	d054      	beq.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e8:	f200 808b 	bhi.w	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073f2:	f000 8083 	beq.w	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073fc:	f200 8081 	bhi.w	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007406:	d02f      	beq.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	d878      	bhi.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741c:	d012      	beq.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800741e:	e070      	b.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007420:	4b39      	ldr	r3, [pc, #228]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800742c:	d107      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800742e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fcca 	bl	8007dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800743c:	e1ff      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007442:	e1fc      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007444:	4b30      	ldr	r3, [pc, #192]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007450:	d107      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007452:	f107 0318 	add.w	r3, r7, #24
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fa10 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007460:	e1ed      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007466:	e1ea      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007468:	4b27      	ldr	r3, [pc, #156]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007474:	d107      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007476:	f107 030c 	add.w	r3, r7, #12
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fb52 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007484:	e1db      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748a:	e1d8      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800748c:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800748e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007494:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d10c      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a8:	4b17      	ldr	r3, [pc, #92]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	08db      	lsrs	r3, r3, #3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	4a16      	ldr	r2, [pc, #88]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ba:	e01e      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074bc:	4b12      	ldr	r3, [pc, #72]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c8:	d106      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d0:	d102      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d6:	e010      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074d8:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e4:	d106      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ec:	d102      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f2:	e002      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80074f8:	e1a1      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80074fa:	e1a0      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007500:	e19d      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007506:	e19a      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007508:	58024400 	.word	0x58024400
 800750c:	03d09000 	.word	0x03d09000
 8007510:	003d0900 	.word	0x003d0900
 8007514:	017d7840 	.word	0x017d7840
 8007518:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007522:	d173      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007524:	4b9a      	ldr	r3, [pc, #616]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007534:	d02f      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800753c:	d863      	bhi.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754a:	d012      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800754c:	e05b      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800754e:	4b90      	ldr	r3, [pc, #576]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800755a:	d107      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800755c:	f107 0318 	add.w	r3, r7, #24
 8007560:	4618      	mov	r0, r3
 8007562:	f000 f98b 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800756a:	e168      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007570:	e165      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007572:	4b87      	ldr	r3, [pc, #540]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800757e:	d107      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	4618      	mov	r0, r3
 8007586:	f000 facd 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800758e:	e156      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007594:	e153      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007596:	4b7e      	ldr	r3, [pc, #504]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800759e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075a0:	4b7b      	ldr	r3, [pc, #492]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d10c      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b2:	4b77      	ldr	r3, [pc, #476]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a75      	ldr	r2, [pc, #468]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075c4:	e01e      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075c6:	4b72      	ldr	r3, [pc, #456]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d2:	d106      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075da:	d102      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80075dc:	4b6e      	ldr	r3, [pc, #440]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075e0:	e010      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075e2:	4b6b      	ldr	r3, [pc, #428]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ee:	d106      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80075f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f6:	d102      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80075f8:	4b68      	ldr	r3, [pc, #416]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fc:	e002      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007602:	e11c      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007604:	e11b      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760a:	e118      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	d133      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007614:	4b5e      	ldr	r3, [pc, #376]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762a:	d012      	beq.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800762c:	e023      	b.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800762e:	4b58      	ldr	r3, [pc, #352]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800763a:	d107      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800763c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fbc3 	bl	8007dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800764a:	e0f8      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007650:	e0f5      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007652:	4b4f      	ldr	r3, [pc, #316]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800765a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800765e:	d107      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007660:	f107 0318 	add.w	r3, r7, #24
 8007664:	4618      	mov	r0, r3
 8007666:	f000 f909 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800766e:	e0e6      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007674:	e0e3      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800767a:	e0e0      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007682:	f040 808d 	bne.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007686:	4b42      	ldr	r3, [pc, #264]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800768e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007696:	d06b      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769e:	d874      	bhi.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d056      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ae:	d86c      	bhi.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076b6:	d03b      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076be:	d864      	bhi.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c6:	d021      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ce:	d85c      	bhi.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076dc:	d004      	beq.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80076de:	e054      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80076e0:	f000 f8b6 	bl	8007850 <HAL_RCCEx_GetD3PCLK1Freq>
 80076e4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80076e6:	e0aa      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f4:	d107      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f6:	f107 0318 	add.w	r3, r7, #24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f8be 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007704:	e09b      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770a:	e098      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800770c:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007718:	d107      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800771a:	f107 030c 	add.w	r3, r7, #12
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fa00 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007728:	e089      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800772e:	e086      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007730:	4b17      	ldr	r3, [pc, #92]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b04      	cmp	r3, #4
 800773a:	d109      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800773c:	4b14      	ldr	r3, [pc, #80]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	08db      	lsrs	r3, r3, #3
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	4a13      	ldr	r2, [pc, #76]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
 800774c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800774e:	e076      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007754:	e073      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007762:	d102      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007764:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007768:	e069      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776e:	e066      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800777c:	d102      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800777e:	4b07      	ldr	r3, [pc, #28]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007782:	e05c      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007788:	e059      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778e:	e056      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007790:	58024400 	.word	0x58024400
 8007794:	03d09000 	.word	0x03d09000
 8007798:	003d0900 	.word	0x003d0900
 800779c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a6:	d148      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80077a8:	4b27      	ldr	r3, [pc, #156]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b8:	d02a      	beq.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077c0:	d838      	bhi.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ce:	d00d      	beq.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80077d0:	e030      	b.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077d2:	4b1d      	ldr	r3, [pc, #116]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077de:	d102      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80077e0:	4b1a      	ldr	r3, [pc, #104]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80077e4:	e02b      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ea:	e028      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077ec:	4b16      	ldr	r3, [pc, #88]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077f8:	d107      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fae4 	bl	8007dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007808:	e019      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780e:	e016      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007810:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781c:	d107      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800781e:	f107 0318 	add.w	r3, r7, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f82a 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800782c:	e007      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007832:	e004      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007838:	e001      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800783e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007840:	4618      	mov	r0, r3
 8007842:	3740      	adds	r7, #64	; 0x40
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	58024400 	.word	0x58024400
 800784c:	017d7840 	.word	0x017d7840

08007850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007854:	f7fe fc82 	bl	800615c <HAL_RCC_GetHCLKFreq>
 8007858:	4602      	mov	r2, r0
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	4904      	ldr	r1, [pc, #16]	; (8007878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007866:	5ccb      	ldrb	r3, [r1, r3]
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007870:	4618      	mov	r0, r3
 8007872:	bd80      	pop	{r7, pc}
 8007874:	58024400 	.word	0x58024400
 8007878:	0800c248 	.word	0x0800c248

0800787c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800787c:	b480      	push	{r7}
 800787e:	b089      	sub	sp, #36	; 0x24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007884:	4ba1      	ldr	r3, [pc, #644]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800788e:	4b9f      	ldr	r3, [pc, #636]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	0b1b      	lsrs	r3, r3, #12
 8007894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800789a:	4b9c      	ldr	r3, [pc, #624]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	091b      	lsrs	r3, r3, #4
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80078a6:	4b99      	ldr	r3, [pc, #612]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	08db      	lsrs	r3, r3, #3
 80078ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8111 	beq.w	8007aec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f000 8083 	beq.w	80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	f200 80a1 	bhi.w	8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d056      	beq.n	8007994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80078e6:	e099      	b.n	8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e8:	4b88      	ldr	r3, [pc, #544]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02d      	beq.n	8007950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078f4:	4b85      	ldr	r3, [pc, #532]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	08db      	lsrs	r3, r3, #3
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	4a84      	ldr	r2, [pc, #528]	; (8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791e:	4b7b      	ldr	r3, [pc, #492]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800794e:	e087      	b.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007962:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007972:	ed97 6a03 	vldr	s12, [r7, #12]
 8007976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007992:	e065      	b.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a6:	4b59      	ldr	r3, [pc, #356]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079d6:	e043      	b.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b48      	ldr	r3, [pc, #288]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a1a:	e021      	b.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b37      	ldr	r3, [pc, #220]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007a60:	4b2a      	ldr	r3, [pc, #168]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	0a5b      	lsrs	r3, r3, #9
 8007a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a86:	ee17 2a90 	vmov	r2, s15
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007a8e:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	0c1b      	lsrs	r3, r3, #16
 8007a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab4:	ee17 2a90 	vmov	r2, s15
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007abc:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	0e1b      	lsrs	r3, r3, #24
 8007ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae2:	ee17 2a90 	vmov	r2, s15
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007aea:	e008      	b.n	8007afe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
}
 8007afe:	bf00      	nop
 8007b00:	3724      	adds	r7, #36	; 0x24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	46000000 	.word	0x46000000
 8007b18:	4c742400 	.word	0x4c742400
 8007b1c:	4a742400 	.word	0x4a742400
 8007b20:	4bbebc20 	.word	0x4bbebc20

08007b24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b089      	sub	sp, #36	; 0x24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b2c:	4ba1      	ldr	r3, [pc, #644]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007b36:	4b9f      	ldr	r3, [pc, #636]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	0d1b      	lsrs	r3, r3, #20
 8007b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b42:	4b9c      	ldr	r3, [pc, #624]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007b4e:	4b99      	ldr	r3, [pc, #612]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	08db      	lsrs	r3, r3, #3
 8007b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	fb02 f303 	mul.w	r3, r2, r3
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8111 	beq.w	8007d94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	f000 8083 	beq.w	8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f200 80a1 	bhi.w	8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d056      	beq.n	8007c3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b8e:	e099      	b.n	8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b90:	4b88      	ldr	r3, [pc, #544]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d02d      	beq.n	8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b9c:	4b85      	ldr	r3, [pc, #532]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	4a84      	ldr	r2, [pc, #528]	; (8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b7b      	ldr	r3, [pc, #492]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bf6:	e087      	b.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b6a      	ldr	r3, [pc, #424]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c3a:	e065      	b.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4e:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c7e:	e043      	b.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b48      	ldr	r3, [pc, #288]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cc2:	e021      	b.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007d08:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	0a5b      	lsrs	r3, r3, #9
 8007d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2e:	ee17 2a90 	vmov	r2, s15
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	0c1b      	lsrs	r3, r3, #16
 8007d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d40:	ee07 3a90 	vmov	s15, r3
 8007d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d5c:	ee17 2a90 	vmov	r2, s15
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007d64:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	0e1b      	lsrs	r3, r3, #24
 8007d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d8a:	ee17 2a90 	vmov	r2, s15
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d92:	e008      	b.n	8007da6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	609a      	str	r2, [r3, #8]
}
 8007da6:	bf00      	nop
 8007da8:	3724      	adds	r7, #36	; 0x24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	58024400 	.word	0x58024400
 8007db8:	03d09000 	.word	0x03d09000
 8007dbc:	46000000 	.word	0x46000000
 8007dc0:	4c742400 	.word	0x4c742400
 8007dc4:	4a742400 	.word	0x4a742400
 8007dc8:	4bbebc20 	.word	0x4bbebc20

08007dcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b089      	sub	sp, #36	; 0x24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dd4:	4ba0      	ldr	r3, [pc, #640]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007dde:	4b9e      	ldr	r3, [pc, #632]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	091b      	lsrs	r3, r3, #4
 8007de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007dea:	4b9b      	ldr	r3, [pc, #620]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007df4:	4b98      	ldr	r3, [pc, #608]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	08db      	lsrs	r3, r3, #3
 8007dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	fb02 f303 	mul.w	r3, r2, r3
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8111 	beq.w	800803a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	f000 8083 	beq.w	8007f26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	f200 80a1 	bhi.w	8007f6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d056      	beq.n	8007ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007e34:	e099      	b.n	8007f6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e36:	4b88      	ldr	r3, [pc, #544]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d02d      	beq.n	8007e9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e42:	4b85      	ldr	r3, [pc, #532]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	08db      	lsrs	r3, r3, #3
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	4a83      	ldr	r2, [pc, #524]	; (800805c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e52:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	ee07 3a90 	vmov	s15, r3
 8007e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6c:	4b7a      	ldr	r3, [pc, #488]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e80:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e98:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e9c:	e087      	b.n	8007fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb0:	4b69      	ldr	r3, [pc, #420]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007edc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee0:	e065      	b.n	8007fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008068 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef4:	4b58      	ldr	r3, [pc, #352]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efc:	ee07 3a90 	vmov	s15, r3
 8007f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f08:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f24:	e043      	b.n	8007fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800806c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f38:	4b47      	ldr	r3, [pc, #284]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f68:	e021      	b.n	8007fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7c:	4b36      	ldr	r3, [pc, #216]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f90:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007fae:	4b2a      	ldr	r3, [pc, #168]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	0a5b      	lsrs	r3, r3, #9
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd4:	ee17 2a90 	vmov	r2, s15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007fdc:	4b1e      	ldr	r3, [pc, #120]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008002:	ee17 2a90 	vmov	r2, s15
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800800a:	4b13      	ldr	r3, [pc, #76]	; (8008058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	0e1b      	lsrs	r3, r3, #24
 8008010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008014:	ee07 3a90 	vmov	s15, r3
 8008018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008024:	edd7 6a07 	vldr	s13, [r7, #28]
 8008028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008030:	ee17 2a90 	vmov	r2, s15
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008038:	e008      	b.n	800804c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	bf00      	nop
 800804e:	3724      	adds	r7, #36	; 0x24
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	58024400 	.word	0x58024400
 800805c:	03d09000 	.word	0x03d09000
 8008060:	46000000 	.word	0x46000000
 8008064:	4c742400 	.word	0x4c742400
 8008068:	4a742400 	.word	0x4a742400
 800806c:	4bbebc20 	.word	0x4bbebc20

08008070 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800807e:	4b53      	ldr	r3, [pc, #332]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b03      	cmp	r3, #3
 8008088:	d101      	bne.n	800808e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e099      	b.n	80081c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800808e:	4b4f      	ldr	r3, [pc, #316]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a4e      	ldr	r2, [pc, #312]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809a:	f7fa fca7 	bl	80029ec <HAL_GetTick>
 800809e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080a0:	e008      	b.n	80080b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a2:	f7fa fca3 	bl	80029ec <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e086      	b.n	80081c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b4:	4b45      	ldr	r3, [pc, #276]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f0      	bne.n	80080a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080c0:	4b42      	ldr	r3, [pc, #264]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	031b      	lsls	r3, r3, #12
 80080ce:	493f      	ldr	r1, [pc, #252]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	628b      	str	r3, [r1, #40]	; 0x28
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	025b      	lsls	r3, r3, #9
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	061b      	lsls	r3, r3, #24
 8008100:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008104:	4931      	ldr	r1, [pc, #196]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800810a:	4b30      	ldr	r3, [pc, #192]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	492d      	ldr	r1, [pc, #180]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008118:	4313      	orrs	r3, r2
 800811a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800811c:	4b2b      	ldr	r3, [pc, #172]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	f023 0220 	bic.w	r2, r3, #32
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	4928      	ldr	r1, [pc, #160]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800812a:	4313      	orrs	r3, r2
 800812c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800812e:	4b27      	ldr	r3, [pc, #156]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a26      	ldr	r2, [pc, #152]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008134:	f023 0310 	bic.w	r3, r3, #16
 8008138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800813a:	4b24      	ldr	r3, [pc, #144]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800813c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <RCCEx_PLL2_Config+0x160>)
 8008140:	4013      	ands	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	69d2      	ldr	r2, [r2, #28]
 8008146:	00d2      	lsls	r2, r2, #3
 8008148:	4920      	ldr	r1, [pc, #128]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008154:	f043 0310 	orr.w	r3, r3, #16
 8008158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008160:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	4a19      	ldr	r2, [pc, #100]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800816c:	e00f      	b.n	800818e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d106      	bne.n	8008182 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	4a14      	ldr	r2, [pc, #80]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800817a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800817e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008180:	e005      	b.n	800818e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008182:	4b12      	ldr	r3, [pc, #72]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800818c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a0e      	ldr	r2, [pc, #56]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008194:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819a:	f7fa fc27 	bl	80029ec <HAL_GetTick>
 800819e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081a2:	f7fa fc23 	bl	80029ec <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e006      	b.n	80081c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	ffff0007 	.word	0xffff0007

080081d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081e2:	4b53      	ldr	r3, [pc, #332]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d101      	bne.n	80081f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e099      	b.n	8008326 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081f2:	4b4f      	ldr	r3, [pc, #316]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a4e      	ldr	r2, [pc, #312]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081fe:	f7fa fbf5 	bl	80029ec <HAL_GetTick>
 8008202:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008204:	e008      	b.n	8008218 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008206:	f7fa fbf1 	bl	80029ec <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e086      	b.n	8008326 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008218:	4b45      	ldr	r3, [pc, #276]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f0      	bne.n	8008206 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008224:	4b42      	ldr	r3, [pc, #264]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	051b      	lsls	r3, r3, #20
 8008232:	493f      	ldr	r1, [pc, #252]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008234:	4313      	orrs	r3, r2
 8008236:	628b      	str	r3, [r1, #40]	; 0x28
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	3b01      	subs	r3, #1
 800823e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	3b01      	subs	r3, #1
 8008248:	025b      	lsls	r3, r3, #9
 800824a:	b29b      	uxth	r3, r3
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	3b01      	subs	r3, #1
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	3b01      	subs	r3, #1
 8008262:	061b      	lsls	r3, r3, #24
 8008264:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008268:	4931      	ldr	r1, [pc, #196]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800826a:	4313      	orrs	r3, r2
 800826c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800826e:	4b30      	ldr	r3, [pc, #192]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	492d      	ldr	r1, [pc, #180]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800827c:	4313      	orrs	r3, r2
 800827e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008280:	4b2b      	ldr	r3, [pc, #172]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4928      	ldr	r1, [pc, #160]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800828e:	4313      	orrs	r3, r2
 8008290:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008292:	4b27      	ldr	r3, [pc, #156]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	4a26      	ldr	r2, [pc, #152]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <RCCEx_PLL3_Config+0x160>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	69d2      	ldr	r2, [r2, #28]
 80082aa:	00d2      	lsls	r2, r2, #3
 80082ac:	4920      	ldr	r1, [pc, #128]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082b2:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082d0:	e00f      	b.n	80082f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d106      	bne.n	80082e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082d8:	4b15      	ldr	r3, [pc, #84]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	4a14      	ldr	r2, [pc, #80]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082e4:	e005      	b.n	80082f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	4a11      	ldr	r2, [pc, #68]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a0e      	ldr	r2, [pc, #56]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082fe:	f7fa fb75 	bl	80029ec <HAL_GetTick>
 8008302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008304:	e008      	b.n	8008318 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008306:	f7fa fb71 	bl	80029ec <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e006      	b.n	8008326 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	58024400 	.word	0x58024400
 8008334:	ffff0007 	.word	0xffff0007

08008338 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d067      	beq.n	800841a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7f9 fedc 	bl	800211c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	22ca      	movs	r2, #202	; 0xca
 8008372:	625a      	str	r2, [r3, #36]	; 0x24
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2253      	movs	r2, #83	; 0x53
 800837a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f99f 	bl	80086c0 <RTC_EnterInitMode>
 8008382:	4603      	mov	r3, r0
 8008384:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d13b      	bne.n	8008404 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6899      	ldr	r1, [r3, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b23      	ldr	r3, [pc, #140]	; (8008424 <HAL_RTC_Init+0xec>)
 8008398:	400b      	ands	r3, r1
 800839a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6899      	ldr	r1, [r3, #8]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	0419      	lsls	r1, r3, #16
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f9ab 	bl	8008728 <RTC_ExitInitMode>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d113      	bne.n	8008404 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0203 	bic.w	r2, r2, #3
 80083ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69da      	ldr	r2, [r3, #28]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	22ff      	movs	r2, #255	; 0xff
 800840a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	ff8fffbf 	.word	0xff8fffbf

08008428 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_RTC_SetTime+0x1a>
 800843e:	2302      	movs	r3, #2
 8008440:	e089      	b.n	8008556 <HAL_RTC_SetTime+0x12e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2202      	movs	r2, #2
 800844e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	22ca      	movs	r2, #202	; 0xca
 8008458:	625a      	str	r2, [r3, #36]	; 0x24
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2253      	movs	r2, #83	; 0x53
 8008460:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f92c 	bl	80086c0 <RTC_EnterInitMode>
 8008468:	4603      	mov	r3, r0
 800846a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800846c:	7cfb      	ldrb	r3, [r7, #19]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d161      	bne.n	8008536 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d126      	bne.n	80084c6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2200      	movs	r2, #0
 800848a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 f987 	bl	80087a4 <RTC_ByteToBcd2>
 8008496:	4603      	mov	r3, r0
 8008498:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f980 	bl	80087a4 <RTC_ByteToBcd2>
 80084a4:	4603      	mov	r3, r0
 80084a6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084a8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	789b      	ldrb	r3, [r3, #2]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f978 	bl	80087a4 <RTC_ByteToBcd2>
 80084b4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084b6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	78db      	ldrb	r3, [r3, #3]
 80084be:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e018      	b.n	80084f8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2200      	movs	r2, #0
 80084d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084e6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084ec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	78db      	ldrb	r3, [r3, #3]
 80084f2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	6979      	ldr	r1, [r7, #20]
 80084fe:	4b18      	ldr	r3, [pc, #96]	; (8008560 <HAL_RTC_SetTime+0x138>)
 8008500:	400b      	ands	r3, r1
 8008502:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008512:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6899      	ldr	r1, [r3, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f8fb 	bl	8008728 <RTC_ExitInitMode>
 8008532:	4603      	mov	r3, r0
 8008534:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	22ff      	movs	r2, #255	; 0xff
 800853c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800853e:	7cfb      	ldrb	r3, [r7, #19]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008554:	7cfb      	ldrb	r3, [r7, #19]
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd90      	pop	{r4, r7, pc}
 800855e:	bf00      	nop
 8008560:	007f7f7f 	.word	0x007f7f7f

08008564 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d101      	bne.n	800857e <HAL_RTC_SetDate+0x1a>
 800857a:	2302      	movs	r3, #2
 800857c:	e073      	b.n	8008666 <HAL_RTC_SetDate+0x102>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10e      	bne.n	80085b2 <HAL_RTC_SetDate+0x4e>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	f023 0310 	bic.w	r3, r3, #16
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	330a      	adds	r3, #10
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d11c      	bne.n	80085f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	78db      	ldrb	r3, [r3, #3]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f8f1 	bl	80087a4 <RTC_ByteToBcd2>
 80085c2:	4603      	mov	r3, r0
 80085c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f8ea 	bl	80087a4 <RTC_ByteToBcd2>
 80085d0:	4603      	mov	r3, r0
 80085d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	789b      	ldrb	r3, [r3, #2]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f8e2 	bl	80087a4 <RTC_ByteToBcd2>
 80085e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085ec:	4313      	orrs	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e00e      	b.n	8008610 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	78db      	ldrb	r3, [r3, #3]
 80085f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80085fe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008604:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	22ca      	movs	r2, #202	; 0xca
 8008616:	625a      	str	r2, [r3, #36]	; 0x24
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2253      	movs	r2, #83	; 0x53
 800861e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f84d 	bl	80086c0 <RTC_EnterInitMode>
 8008626:	4603      	mov	r3, r0
 8008628:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800862a:	7cfb      	ldrb	r3, [r7, #19]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	6979      	ldr	r1, [r7, #20]
 8008636:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <HAL_RTC_SetDate+0x10c>)
 8008638:	400b      	ands	r3, r1
 800863a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f873 	bl	8008728 <RTC_ExitInitMode>
 8008642:	4603      	mov	r3, r0
 8008644:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	22ff      	movs	r2, #255	; 0xff
 800864c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800864e:	7cfb      	ldrb	r3, [r7, #19]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d103      	bne.n	800865c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008664:	7cfb      	ldrb	r3, [r7, #19]


}
 8008666:	4618      	mov	r0, r3
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd90      	pop	{r4, r7, pc}
 800866e:	bf00      	nop
 8008670:	00ffff3f 	.word	0x00ffff3f

08008674 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800868a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800868c:	f7fa f9ae 	bl	80029ec <HAL_GetTick>
 8008690:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008692:	e009      	b.n	80086a8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008694:	f7fa f9aa 	bl	80029ec <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a2:	d901      	bls.n	80086a8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e007      	b.n	80086b8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0ee      	beq.n	8008694 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d120      	bne.n	800871c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80086e4:	f7fa f982 	bl	80029ec <HAL_GetTick>
 80086e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80086ea:	e00d      	b.n	8008708 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80086ec:	f7fa f97e 	bl	80029ec <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086fa:	d905      	bls.n	8008708 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2203      	movs	r2, #3
 8008704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <RTC_EnterInitMode+0x5c>
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b03      	cmp	r3, #3
 800871a:	d1e7      	bne.n	80086ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800871c:	7bfb      	ldrb	r3, [r7, #15]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008734:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <RTC_ExitInitMode+0x78>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a19      	ldr	r2, [pc, #100]	; (80087a0 <RTC_ExitInitMode+0x78>)
 800873a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <RTC_ExitInitMode+0x78>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10c      	bne.n	8008766 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ff91 	bl	8008674 <HAL_RTC_WaitForSynchro>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01e      	beq.n	8008796 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2203      	movs	r2, #3
 800875c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	73fb      	strb	r3, [r7, #15]
 8008764:	e017      	b.n	8008796 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <RTC_ExitInitMode+0x78>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	4a0d      	ldr	r2, [pc, #52]	; (80087a0 <RTC_ExitInitMode+0x78>)
 800876c:	f023 0320 	bic.w	r3, r3, #32
 8008770:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff ff7e 	bl	8008674 <HAL_RTC_WaitForSynchro>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2203      	movs	r2, #3
 8008782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <RTC_ExitInitMode+0x78>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4a04      	ldr	r2, [pc, #16]	; (80087a0 <RTC_ExitInitMode+0x78>)
 8008790:	f043 0320 	orr.w	r3, r3, #32
 8008794:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58004000 	.word	0x58004000

080087a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80087b6:	e005      	b.n	80087c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80087be:	7afb      	ldrb	r3, [r7, #11]
 80087c0:	3b0a      	subs	r3, #10
 80087c2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d8f6      	bhi.n	80087b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	b2db      	uxtb	r3, r3
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e049      	b.n	800888a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7f9 fd06 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f000 fc9a 	bl	800915c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d001      	beq.n	80088ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e05e      	b.n	800896a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0201 	orr.w	r2, r2, #1
 80088c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a2b      	ldr	r2, [pc, #172]	; (8008978 <HAL_TIM_Base_Start_IT+0xe4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d02c      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d6:	d027      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a27      	ldr	r2, [pc, #156]	; (800897c <HAL_TIM_Base_Start_IT+0xe8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d022      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a26      	ldr	r2, [pc, #152]	; (8008980 <HAL_TIM_Base_Start_IT+0xec>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d01d      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a24      	ldr	r2, [pc, #144]	; (8008984 <HAL_TIM_Base_Start_IT+0xf0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d018      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a23      	ldr	r2, [pc, #140]	; (8008988 <HAL_TIM_Base_Start_IT+0xf4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d013      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a21      	ldr	r2, [pc, #132]	; (800898c <HAL_TIM_Base_Start_IT+0xf8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00e      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a20      	ldr	r2, [pc, #128]	; (8008990 <HAL_TIM_Base_Start_IT+0xfc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d009      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a1e      	ldr	r2, [pc, #120]	; (8008994 <HAL_TIM_Base_Start_IT+0x100>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d004      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x94>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <HAL_TIM_Base_Start_IT+0x104>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d115      	bne.n	8008954 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	4b1b      	ldr	r3, [pc, #108]	; (800899c <HAL_TIM_Base_Start_IT+0x108>)
 8008930:	4013      	ands	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b06      	cmp	r3, #6
 8008938:	d015      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0xd2>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008940:	d011      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0201 	orr.w	r2, r2, #1
 8008950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008952:	e008      	b.n	8008966 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0201 	orr.w	r2, r2, #1
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e000      	b.n	8008968 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	40010000 	.word	0x40010000
 800897c:	40000400 	.word	0x40000400
 8008980:	40000800 	.word	0x40000800
 8008984:	40000c00 	.word	0x40000c00
 8008988:	40010400 	.word	0x40010400
 800898c:	40001800 	.word	0x40001800
 8008990:	40014000 	.word	0x40014000
 8008994:	4000e000 	.word	0x4000e000
 8008998:	4000e400 	.word	0x4000e400
 800899c:	00010007 	.word	0x00010007

080089a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0201 	bic.w	r2, r2, #1
 80089b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6a1a      	ldr	r2, [r3, #32]
 80089be:	f241 1311 	movw	r3, #4369	; 0x1111
 80089c2:	4013      	ands	r3, r2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10f      	bne.n	80089e8 <HAL_TIM_Base_Stop_IT+0x48>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6a1a      	ldr	r2, [r3, #32]
 80089ce:	f240 4344 	movw	r3, #1092	; 0x444
 80089d2:	4013      	ands	r3, r2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d107      	bne.n	80089e8 <HAL_TIM_Base_Stop_IT+0x48>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0201 	bic.w	r2, r2, #1
 80089e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e049      	b.n	8008aa4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d106      	bne.n	8008a2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7f9 fba9 	bl	800217c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f000 fb8d 	bl	800915c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e049      	b.n	8008b52 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f841 	bl	8008b5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f000 fb36 	bl	800915c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d122      	bne.n	8008bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d11b      	bne.n	8008bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f06f 0202 	mvn.w	r2, #2
 8008b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f003 0303 	and.w	r3, r3, #3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fab5 	bl	8009120 <HAL_TIM_IC_CaptureCallback>
 8008bb6:	e005      	b.n	8008bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 faa7 	bl	800910c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fab8 	bl	8009134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d122      	bne.n	8008c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f003 0304 	and.w	r3, r3, #4
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d11b      	bne.n	8008c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f06f 0204 	mvn.w	r2, #4
 8008bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fa8b 	bl	8009120 <HAL_TIM_IC_CaptureCallback>
 8008c0a:	e005      	b.n	8008c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fa7d 	bl	800910c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa8e 	bl	8009134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d122      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d11b      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f06f 0208 	mvn.w	r2, #8
 8008c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2204      	movs	r2, #4
 8008c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa61 	bl	8009120 <HAL_TIM_IC_CaptureCallback>
 8008c5e:	e005      	b.n	8008c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fa53 	bl	800910c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa64 	bl	8009134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b10      	cmp	r3, #16
 8008c7e:	d122      	bne.n	8008cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b10      	cmp	r3, #16
 8008c8c:	d11b      	bne.n	8008cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f06f 0210 	mvn.w	r2, #16
 8008c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fa37 	bl	8009120 <HAL_TIM_IC_CaptureCallback>
 8008cb2:	e005      	b.n	8008cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fa29 	bl	800910c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa3a 	bl	8009134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d10e      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d107      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f06f 0201 	mvn.w	r2, #1
 8008cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7f7 fd9d 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d10e      	bne.n	8008d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0a:	2b80      	cmp	r3, #128	; 0x80
 8008d0c:	d107      	bne.n	8008d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 f817 	bl	8009d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d2c:	d10e      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d38:	2b80      	cmp	r3, #128	; 0x80
 8008d3a:	d107      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 f80a 	bl	8009d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d10e      	bne.n	8008d78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d64:	2b40      	cmp	r3, #64	; 0x40
 8008d66:	d107      	bne.n	8008d78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f9e8 	bl	8009148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	d10e      	bne.n	8008da4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0320 	and.w	r3, r3, #32
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	d107      	bne.n	8008da4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0220 	mvn.w	r2, #32
 8008d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 ffca 	bl	8009d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <HAL_TIM_IC_ConfigChannel+0x1e>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e088      	b.n	8008edc <HAL_TIM_IC_ConfigChannel+0x130>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11b      	bne.n	8008e10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f000 fd34 	bl	8009854 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699a      	ldr	r2, [r3, #24]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 020c 	bic.w	r2, r2, #12
 8008dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6999      	ldr	r1, [r3, #24]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	619a      	str	r2, [r3, #24]
 8008e0e:	e060      	b.n	8008ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d11c      	bne.n	8008e50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6819      	ldr	r1, [r3, #0]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f000 fd95 	bl	8009954 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	699a      	ldr	r2, [r3, #24]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008e38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6999      	ldr	r1, [r3, #24]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	021a      	lsls	r2, r3, #8
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	619a      	str	r2, [r3, #24]
 8008e4e:	e040      	b.n	8008ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d11b      	bne.n	8008e8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f000 fdb2 	bl	80099ce <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 020c 	bic.w	r2, r2, #12
 8008e78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69d9      	ldr	r1, [r3, #28]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	61da      	str	r2, [r3, #28]
 8008e8c:	e021      	b.n	8008ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b0c      	cmp	r3, #12
 8008e92:	d11c      	bne.n	8008ece <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6819      	ldr	r1, [r3, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f000 fdcf 	bl	8009a46 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69da      	ldr	r2, [r3, #28]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008eb6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	69d9      	ldr	r1, [r3, #28]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	021a      	lsls	r2, r3, #8
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	61da      	str	r2, [r3, #28]
 8008ecc:	e001      	b.n	8008ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e0ff      	b.n	8009102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b14      	cmp	r3, #20
 8008f0e:	f200 80f0 	bhi.w	80090f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	080090f3 	.word	0x080090f3
 8008f20:	080090f3 	.word	0x080090f3
 8008f24:	080090f3 	.word	0x080090f3
 8008f28:	08008fad 	.word	0x08008fad
 8008f2c:	080090f3 	.word	0x080090f3
 8008f30:	080090f3 	.word	0x080090f3
 8008f34:	080090f3 	.word	0x080090f3
 8008f38:	08008fef 	.word	0x08008fef
 8008f3c:	080090f3 	.word	0x080090f3
 8008f40:	080090f3 	.word	0x080090f3
 8008f44:	080090f3 	.word	0x080090f3
 8008f48:	0800902f 	.word	0x0800902f
 8008f4c:	080090f3 	.word	0x080090f3
 8008f50:	080090f3 	.word	0x080090f3
 8008f54:	080090f3 	.word	0x080090f3
 8008f58:	08009071 	.word	0x08009071
 8008f5c:	080090f3 	.word	0x080090f3
 8008f60:	080090f3 	.word	0x080090f3
 8008f64:	080090f3 	.word	0x080090f3
 8008f68:	080090b1 	.word	0x080090b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68b9      	ldr	r1, [r7, #8]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f998 	bl	80092a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699a      	ldr	r2, [r3, #24]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0208 	orr.w	r2, r2, #8
 8008f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699a      	ldr	r2, [r3, #24]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0204 	bic.w	r2, r2, #4
 8008f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6999      	ldr	r1, [r3, #24]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	691a      	ldr	r2, [r3, #16]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	619a      	str	r2, [r3, #24]
      break;
 8008faa:	e0a5      	b.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fa08 	bl	80093c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699a      	ldr	r2, [r3, #24]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6999      	ldr	r1, [r3, #24]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	021a      	lsls	r2, r3, #8
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	619a      	str	r2, [r3, #24]
      break;
 8008fec:	e084      	b.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fa71 	bl	80094dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	69da      	ldr	r2, [r3, #28]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f042 0208 	orr.w	r2, r2, #8
 8009008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69da      	ldr	r2, [r3, #28]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0204 	bic.w	r2, r2, #4
 8009018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69d9      	ldr	r1, [r3, #28]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	61da      	str	r2, [r3, #28]
      break;
 800902c:	e064      	b.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68b9      	ldr	r1, [r7, #8]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fad9 	bl	80095ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69da      	ldr	r2, [r3, #28]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69d9      	ldr	r1, [r3, #28]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	021a      	lsls	r2, r3, #8
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	61da      	str	r2, [r3, #28]
      break;
 800906e:	e043      	b.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fb22 	bl	80096c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0208 	orr.w	r2, r2, #8
 800908a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0204 	bic.w	r2, r2, #4
 800909a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	691a      	ldr	r2, [r3, #16]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090ae:	e023      	b.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fb66 	bl	8009788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	021a      	lsls	r2, r3, #8
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090f0:	e002      	b.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	75fb      	strb	r3, [r7, #23]
      break;
 80090f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop

0800910c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a44      	ldr	r2, [pc, #272]	; (8009280 <TIM_Base_SetConfig+0x124>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d013      	beq.n	800919c <TIM_Base_SetConfig+0x40>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917a:	d00f      	beq.n	800919c <TIM_Base_SetConfig+0x40>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a41      	ldr	r2, [pc, #260]	; (8009284 <TIM_Base_SetConfig+0x128>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00b      	beq.n	800919c <TIM_Base_SetConfig+0x40>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a40      	ldr	r2, [pc, #256]	; (8009288 <TIM_Base_SetConfig+0x12c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d007      	beq.n	800919c <TIM_Base_SetConfig+0x40>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a3f      	ldr	r2, [pc, #252]	; (800928c <TIM_Base_SetConfig+0x130>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d003      	beq.n	800919c <TIM_Base_SetConfig+0x40>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a3e      	ldr	r2, [pc, #248]	; (8009290 <TIM_Base_SetConfig+0x134>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d108      	bne.n	80091ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a33      	ldr	r2, [pc, #204]	; (8009280 <TIM_Base_SetConfig+0x124>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d027      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091bc:	d023      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a30      	ldr	r2, [pc, #192]	; (8009284 <TIM_Base_SetConfig+0x128>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d01f      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a2f      	ldr	r2, [pc, #188]	; (8009288 <TIM_Base_SetConfig+0x12c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d01b      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a2e      	ldr	r2, [pc, #184]	; (800928c <TIM_Base_SetConfig+0x130>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d017      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a2d      	ldr	r2, [pc, #180]	; (8009290 <TIM_Base_SetConfig+0x134>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d013      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <TIM_Base_SetConfig+0x138>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00f      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a2b      	ldr	r2, [pc, #172]	; (8009298 <TIM_Base_SetConfig+0x13c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00b      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a2a      	ldr	r2, [pc, #168]	; (800929c <TIM_Base_SetConfig+0x140>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d007      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a29      	ldr	r2, [pc, #164]	; (80092a0 <TIM_Base_SetConfig+0x144>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d003      	beq.n	8009206 <TIM_Base_SetConfig+0xaa>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a28      	ldr	r2, [pc, #160]	; (80092a4 <TIM_Base_SetConfig+0x148>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d108      	bne.n	8009218 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800920c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a10      	ldr	r2, [pc, #64]	; (8009280 <TIM_Base_SetConfig+0x124>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d00f      	beq.n	8009264 <TIM_Base_SetConfig+0x108>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a12      	ldr	r2, [pc, #72]	; (8009290 <TIM_Base_SetConfig+0x134>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00b      	beq.n	8009264 <TIM_Base_SetConfig+0x108>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a11      	ldr	r2, [pc, #68]	; (8009294 <TIM_Base_SetConfig+0x138>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d007      	beq.n	8009264 <TIM_Base_SetConfig+0x108>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a10      	ldr	r2, [pc, #64]	; (8009298 <TIM_Base_SetConfig+0x13c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d003      	beq.n	8009264 <TIM_Base_SetConfig+0x108>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a0f      	ldr	r2, [pc, #60]	; (800929c <TIM_Base_SetConfig+0x140>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d103      	bne.n	800926c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	615a      	str	r2, [r3, #20]
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40010000 	.word	0x40010000
 8009284:	40000400 	.word	0x40000400
 8009288:	40000800 	.word	0x40000800
 800928c:	40000c00 	.word	0x40000c00
 8009290:	40010400 	.word	0x40010400
 8009294:	40014000 	.word	0x40014000
 8009298:	40014400 	.word	0x40014400
 800929c:	40014800 	.word	0x40014800
 80092a0:	4000e000 	.word	0x4000e000
 80092a4:	4000e400 	.word	0x4000e400

080092a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0201 	bic.w	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4b37      	ldr	r3, [pc, #220]	; (80093b0 <TIM_OC1_SetConfig+0x108>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f023 0302 	bic.w	r3, r3, #2
 80092f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a2d      	ldr	r2, [pc, #180]	; (80093b4 <TIM_OC1_SetConfig+0x10c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00f      	beq.n	8009324 <TIM_OC1_SetConfig+0x7c>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a2c      	ldr	r2, [pc, #176]	; (80093b8 <TIM_OC1_SetConfig+0x110>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00b      	beq.n	8009324 <TIM_OC1_SetConfig+0x7c>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a2b      	ldr	r2, [pc, #172]	; (80093bc <TIM_OC1_SetConfig+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d007      	beq.n	8009324 <TIM_OC1_SetConfig+0x7c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a2a      	ldr	r2, [pc, #168]	; (80093c0 <TIM_OC1_SetConfig+0x118>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d003      	beq.n	8009324 <TIM_OC1_SetConfig+0x7c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a29      	ldr	r2, [pc, #164]	; (80093c4 <TIM_OC1_SetConfig+0x11c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d10c      	bne.n	800933e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f023 0308 	bic.w	r3, r3, #8
 800932a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f023 0304 	bic.w	r3, r3, #4
 800933c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a1c      	ldr	r2, [pc, #112]	; (80093b4 <TIM_OC1_SetConfig+0x10c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d00f      	beq.n	8009366 <TIM_OC1_SetConfig+0xbe>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a1b      	ldr	r2, [pc, #108]	; (80093b8 <TIM_OC1_SetConfig+0x110>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00b      	beq.n	8009366 <TIM_OC1_SetConfig+0xbe>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <TIM_OC1_SetConfig+0x114>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d007      	beq.n	8009366 <TIM_OC1_SetConfig+0xbe>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a19      	ldr	r2, [pc, #100]	; (80093c0 <TIM_OC1_SetConfig+0x118>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d003      	beq.n	8009366 <TIM_OC1_SetConfig+0xbe>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a18      	ldr	r2, [pc, #96]	; (80093c4 <TIM_OC1_SetConfig+0x11c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d111      	bne.n	800938a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800936c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	4313      	orrs	r3, r2
 800937e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	4313      	orrs	r3, r2
 8009388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	621a      	str	r2, [r3, #32]
}
 80093a4:	bf00      	nop
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	fffeff8f 	.word	0xfffeff8f
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40010400 	.word	0x40010400
 80093bc:	40014000 	.word	0x40014000
 80093c0:	40014400 	.word	0x40014400
 80093c4:	40014800 	.word	0x40014800

080093c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f023 0210 	bic.w	r2, r3, #16
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4b34      	ldr	r3, [pc, #208]	; (80094c4 <TIM_OC2_SetConfig+0xfc>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	021b      	lsls	r3, r3, #8
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f023 0320 	bic.w	r3, r3, #32
 8009412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a29      	ldr	r2, [pc, #164]	; (80094c8 <TIM_OC2_SetConfig+0x100>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_OC2_SetConfig+0x68>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a28      	ldr	r2, [pc, #160]	; (80094cc <TIM_OC2_SetConfig+0x104>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d10d      	bne.n	800944c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4313      	orrs	r3, r2
 8009442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800944a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <TIM_OC2_SetConfig+0x100>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00f      	beq.n	8009474 <TIM_OC2_SetConfig+0xac>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <TIM_OC2_SetConfig+0x104>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <TIM_OC2_SetConfig+0xac>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a1c      	ldr	r2, [pc, #112]	; (80094d0 <TIM_OC2_SetConfig+0x108>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_OC2_SetConfig+0xac>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1b      	ldr	r2, [pc, #108]	; (80094d4 <TIM_OC2_SetConfig+0x10c>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_OC2_SetConfig+0xac>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a1a      	ldr	r2, [pc, #104]	; (80094d8 <TIM_OC2_SetConfig+0x110>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d113      	bne.n	800949c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800947a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	4313      	orrs	r3, r2
 800949a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	621a      	str	r2, [r3, #32]
}
 80094b6:	bf00      	nop
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	feff8fff 	.word	0xfeff8fff
 80094c8:	40010000 	.word	0x40010000
 80094cc:	40010400 	.word	0x40010400
 80094d0:	40014000 	.word	0x40014000
 80094d4:	40014400 	.word	0x40014400
 80094d8:	40014800 	.word	0x40014800

080094dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <TIM_OC3_SetConfig+0xf8>)
 8009508:	4013      	ands	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0303 	bic.w	r3, r3, #3
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <TIM_OC3_SetConfig+0xfc>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d003      	beq.n	8009542 <TIM_OC3_SetConfig+0x66>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a27      	ldr	r2, [pc, #156]	; (80095dc <TIM_OC3_SetConfig+0x100>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d10d      	bne.n	800955e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	021b      	lsls	r3, r3, #8
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800955c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a1d      	ldr	r2, [pc, #116]	; (80095d8 <TIM_OC3_SetConfig+0xfc>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00f      	beq.n	8009586 <TIM_OC3_SetConfig+0xaa>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a1c      	ldr	r2, [pc, #112]	; (80095dc <TIM_OC3_SetConfig+0x100>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00b      	beq.n	8009586 <TIM_OC3_SetConfig+0xaa>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a1b      	ldr	r2, [pc, #108]	; (80095e0 <TIM_OC3_SetConfig+0x104>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d007      	beq.n	8009586 <TIM_OC3_SetConfig+0xaa>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a1a      	ldr	r2, [pc, #104]	; (80095e4 <TIM_OC3_SetConfig+0x108>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d003      	beq.n	8009586 <TIM_OC3_SetConfig+0xaa>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <TIM_OC3_SetConfig+0x10c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d113      	bne.n	80095ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800958c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	621a      	str	r2, [r3, #32]
}
 80095c8:	bf00      	nop
 80095ca:	371c      	adds	r7, #28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	fffeff8f 	.word	0xfffeff8f
 80095d8:	40010000 	.word	0x40010000
 80095dc:	40010400 	.word	0x40010400
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40014400 	.word	0x40014400
 80095e8:	40014800 	.word	0x40014800

080095ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4b24      	ldr	r3, [pc, #144]	; (80096a8 <TIM_OC4_SetConfig+0xbc>)
 8009618:	4013      	ands	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	031b      	lsls	r3, r3, #12
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a19      	ldr	r2, [pc, #100]	; (80096ac <TIM_OC4_SetConfig+0xc0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00f      	beq.n	800966c <TIM_OC4_SetConfig+0x80>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a18      	ldr	r2, [pc, #96]	; (80096b0 <TIM_OC4_SetConfig+0xc4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00b      	beq.n	800966c <TIM_OC4_SetConfig+0x80>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a17      	ldr	r2, [pc, #92]	; (80096b4 <TIM_OC4_SetConfig+0xc8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d007      	beq.n	800966c <TIM_OC4_SetConfig+0x80>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <TIM_OC4_SetConfig+0xcc>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d003      	beq.n	800966c <TIM_OC4_SetConfig+0x80>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a15      	ldr	r2, [pc, #84]	; (80096bc <TIM_OC4_SetConfig+0xd0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d109      	bne.n	8009680 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	019b      	lsls	r3, r3, #6
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	621a      	str	r2, [r3, #32]
}
 800969a:	bf00      	nop
 800969c:	371c      	adds	r7, #28
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	feff8fff 	.word	0xfeff8fff
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40014400 	.word	0x40014400
 80096bc:	40014800 	.word	0x40014800

080096c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4b21      	ldr	r3, [pc, #132]	; (8009770 <TIM_OC5_SetConfig+0xb0>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	041b      	lsls	r3, r3, #16
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	4313      	orrs	r3, r2
 800970c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a18      	ldr	r2, [pc, #96]	; (8009774 <TIM_OC5_SetConfig+0xb4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00f      	beq.n	8009736 <TIM_OC5_SetConfig+0x76>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a17      	ldr	r2, [pc, #92]	; (8009778 <TIM_OC5_SetConfig+0xb8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00b      	beq.n	8009736 <TIM_OC5_SetConfig+0x76>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a16      	ldr	r2, [pc, #88]	; (800977c <TIM_OC5_SetConfig+0xbc>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d007      	beq.n	8009736 <TIM_OC5_SetConfig+0x76>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a15      	ldr	r2, [pc, #84]	; (8009780 <TIM_OC5_SetConfig+0xc0>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d003      	beq.n	8009736 <TIM_OC5_SetConfig+0x76>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a14      	ldr	r2, [pc, #80]	; (8009784 <TIM_OC5_SetConfig+0xc4>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d109      	bne.n	800974a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800973c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	621a      	str	r2, [r3, #32]
}
 8009764:	bf00      	nop
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	fffeff8f 	.word	0xfffeff8f
 8009774:	40010000 	.word	0x40010000
 8009778:	40010400 	.word	0x40010400
 800977c:	40014000 	.word	0x40014000
 8009780:	40014400 	.word	0x40014400
 8009784:	40014800 	.word	0x40014800

08009788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4b22      	ldr	r3, [pc, #136]	; (800983c <TIM_OC6_SetConfig+0xb4>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	051b      	lsls	r3, r3, #20
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a19      	ldr	r2, [pc, #100]	; (8009840 <TIM_OC6_SetConfig+0xb8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00f      	beq.n	8009800 <TIM_OC6_SetConfig+0x78>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a18      	ldr	r2, [pc, #96]	; (8009844 <TIM_OC6_SetConfig+0xbc>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00b      	beq.n	8009800 <TIM_OC6_SetConfig+0x78>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a17      	ldr	r2, [pc, #92]	; (8009848 <TIM_OC6_SetConfig+0xc0>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d007      	beq.n	8009800 <TIM_OC6_SetConfig+0x78>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a16      	ldr	r2, [pc, #88]	; (800984c <TIM_OC6_SetConfig+0xc4>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_OC6_SetConfig+0x78>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a15      	ldr	r2, [pc, #84]	; (8009850 <TIM_OC6_SetConfig+0xc8>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d109      	bne.n	8009814 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	029b      	lsls	r3, r3, #10
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	621a      	str	r2, [r3, #32]
}
 800982e:	bf00      	nop
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	feff8fff 	.word	0xfeff8fff
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400
 8009848:	40014000 	.word	0x40014000
 800984c:	40014400 	.word	0x40014400
 8009850:	40014800 	.word	0x40014800

08009854 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f023 0201 	bic.w	r2, r3, #1
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a2c      	ldr	r2, [pc, #176]	; (8009930 <TIM_TI1_SetConfig+0xdc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d023      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009888:	d01f      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4a29      	ldr	r2, [pc, #164]	; (8009934 <TIM_TI1_SetConfig+0xe0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d01b      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4a28      	ldr	r2, [pc, #160]	; (8009938 <TIM_TI1_SetConfig+0xe4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d017      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4a27      	ldr	r2, [pc, #156]	; (800993c <TIM_TI1_SetConfig+0xe8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d013      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4a26      	ldr	r2, [pc, #152]	; (8009940 <TIM_TI1_SetConfig+0xec>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00f      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4a25      	ldr	r2, [pc, #148]	; (8009944 <TIM_TI1_SetConfig+0xf0>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00b      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4a24      	ldr	r2, [pc, #144]	; (8009948 <TIM_TI1_SetConfig+0xf4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d007      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4a23      	ldr	r2, [pc, #140]	; (800994c <TIM_TI1_SetConfig+0xf8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_TI1_SetConfig+0x76>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4a22      	ldr	r2, [pc, #136]	; (8009950 <TIM_TI1_SetConfig+0xfc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d101      	bne.n	80098ce <TIM_TI1_SetConfig+0x7a>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e000      	b.n	80098d0 <TIM_TI1_SetConfig+0x7c>
 80098ce:	2300      	movs	r3, #0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f023 0303 	bic.w	r3, r3, #3
 80098da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	e003      	b.n	80098ee <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f043 0301 	orr.w	r3, r3, #1
 80098ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	011b      	lsls	r3, r3, #4
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	4313      	orrs	r3, r2
 8009900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f023 030a 	bic.w	r3, r3, #10
 8009908:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f003 030a 	and.w	r3, r3, #10
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40010400 	.word	0x40010400
 8009944:	40001800 	.word	0x40001800
 8009948:	40014000 	.word	0x40014000
 800994c:	4000e000 	.word	0x4000e000
 8009950:	4000e400 	.word	0x4000e400

08009954 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	f023 0210 	bic.w	r2, r3, #16
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009992:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	031b      	lsls	r3, r3, #12
 8009998:	b29b      	uxth	r3, r3
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	621a      	str	r2, [r3, #32]
}
 80099c2:	bf00      	nop
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b087      	sub	sp, #28
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	621a      	str	r2, [r3, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b087      	sub	sp, #28
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
 8009a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	031b      	lsls	r3, r3, #12
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	031b      	lsls	r3, r3, #12
 8009a9e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	621a      	str	r2, [r3, #32]
}
 8009ab4:	bf00      	nop
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e077      	b.n	8009bc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a35      	ldr	r2, [pc, #212]	; (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d004      	beq.n	8009b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a34      	ldr	r2, [pc, #208]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d108      	bne.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a25      	ldr	r2, [pc, #148]	; (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d02c      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4a:	d027      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a22      	ldr	r2, [pc, #136]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d022      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d01d      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a1f      	ldr	r2, [pc, #124]	; (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d018      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a1a      	ldr	r2, [pc, #104]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a1b      	ldr	r2, [pc, #108]	; (8009be8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00e      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1a      	ldr	r2, [pc, #104]	; (8009bec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d009      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a18      	ldr	r2, [pc, #96]	; (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d004      	beq.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a17      	ldr	r2, [pc, #92]	; (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d10c      	bne.n	8009bb6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40010400 	.word	0x40010400
 8009bdc:	40000400 	.word	0x40000400
 8009be0:	40000800 	.word	0x40000800
 8009be4:	40000c00 	.word	0x40000c00
 8009be8:	40001800 	.word	0x40001800
 8009bec:	40014000 	.word	0x40014000
 8009bf0:	4000e000 	.word	0x4000e000
 8009bf4:	4000e400 	.word	0x4000e400

08009bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e087      	b.n	8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	041b      	lsls	r3, r3, #16
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a27      	ldr	r2, [pc, #156]	; (8009d30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d004      	beq.n	8009ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a25      	ldr	r2, [pc, #148]	; (8009d34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d106      	bne.n	8009cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a1e      	ldr	r2, [pc, #120]	; (8009d30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a1d      	ldr	r2, [pc, #116]	; (8009d34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d126      	bne.n	8009d12 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cce:	051b      	lsls	r3, r3, #20
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a0e      	ldr	r2, [pc, #56]	; (8009d30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d004      	beq.n	8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a0d      	ldr	r2, [pc, #52]	; (8009d34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d106      	bne.n	8009d12 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	40010000 	.word	0x40010000
 8009d34:	40010400 	.word	0x40010400

08009d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e042      	b.n	8009e0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d106      	bne.n	8009d9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7f8 fb5f 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2224      	movs	r2, #36	; 0x24
 8009da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0201 	bic.w	r2, r2, #1
 8009db4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8c2 	bl	8009f40 <UART_SetConfig>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d101      	bne.n	8009dc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e022      	b.n	8009e0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 ff14 	bl	800abfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0201 	orr.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 ff9b 	bl	800ad40 <UART_CheckIdleState>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08a      	sub	sp, #40	; 0x28
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4613      	mov	r3, r2
 8009e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2a:	2b20      	cmp	r3, #32
 8009e2c:	f040 8083 	bne.w	8009f36 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <HAL_UART_Transmit+0x28>
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e07b      	b.n	8009f38 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_UART_Transmit+0x3a>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e074      	b.n	8009f38 <HAL_UART_Transmit+0x124>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2221      	movs	r2, #33	; 0x21
 8009e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e66:	f7f8 fdc1 	bl	80029ec <HAL_GetTick>
 8009e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	88fa      	ldrh	r2, [r7, #6]
 8009e70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	88fa      	ldrh	r2, [r7, #6]
 8009e78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e84:	d108      	bne.n	8009e98 <HAL_UART_Transmit+0x84>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	e003      	b.n	8009ea0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009ea8:	e02c      	b.n	8009f04 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2180      	movs	r1, #128	; 0x80
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 ff8e 	bl	800add6 <UART_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e039      	b.n	8009f38 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ed8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	3302      	adds	r3, #2
 8009ede:	61bb      	str	r3, [r7, #24]
 8009ee0:	e007      	b.n	8009ef2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	781a      	ldrb	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1cc      	bne.n	8009eaa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2200      	movs	r2, #0
 8009f18:	2140      	movs	r1, #64	; 0x40
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 ff5b 	bl	800add6 <UART_WaitOnFlagUntilTimeout>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e006      	b.n	8009f38 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e000      	b.n	8009f38 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009f36:	2302      	movs	r3, #2
  }
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3720      	adds	r7, #32
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f40:	b5b0      	push	{r4, r5, r7, lr}
 8009f42:	b08e      	sub	sp, #56	; 0x38
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	4bbf      	ldr	r3, [pc, #764]	; (800a26c <UART_SetConfig+0x32c>)
 8009f6e:	4013      	ands	r3, r2
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6812      	ldr	r2, [r2, #0]
 8009f74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f76:	430b      	orrs	r3, r1
 8009f78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4ab5      	ldr	r2, [pc, #724]	; (800a270 <UART_SetConfig+0x330>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d004      	beq.n	8009faa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689a      	ldr	r2, [r3, #8]
 8009fb0:	4bb0      	ldr	r3, [pc, #704]	; (800a274 <UART_SetConfig+0x334>)
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6812      	ldr	r2, [r2, #0]
 8009fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	f023 010f 	bic.w	r1, r3, #15
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4aa7      	ldr	r2, [pc, #668]	; (800a278 <UART_SetConfig+0x338>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d176      	bne.n	800a0cc <UART_SetConfig+0x18c>
 8009fde:	4ba7      	ldr	r3, [pc, #668]	; (800a27c <UART_SetConfig+0x33c>)
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fe6:	2b28      	cmp	r3, #40	; 0x28
 8009fe8:	d86c      	bhi.n	800a0c4 <UART_SetConfig+0x184>
 8009fea:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <UART_SetConfig+0xb0>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a095 	.word	0x0800a095
 8009ff4:	0800a0c5 	.word	0x0800a0c5
 8009ff8:	0800a0c5 	.word	0x0800a0c5
 8009ffc:	0800a0c5 	.word	0x0800a0c5
 800a000:	0800a0c5 	.word	0x0800a0c5
 800a004:	0800a0c5 	.word	0x0800a0c5
 800a008:	0800a0c5 	.word	0x0800a0c5
 800a00c:	0800a0c5 	.word	0x0800a0c5
 800a010:	0800a09d 	.word	0x0800a09d
 800a014:	0800a0c5 	.word	0x0800a0c5
 800a018:	0800a0c5 	.word	0x0800a0c5
 800a01c:	0800a0c5 	.word	0x0800a0c5
 800a020:	0800a0c5 	.word	0x0800a0c5
 800a024:	0800a0c5 	.word	0x0800a0c5
 800a028:	0800a0c5 	.word	0x0800a0c5
 800a02c:	0800a0c5 	.word	0x0800a0c5
 800a030:	0800a0a5 	.word	0x0800a0a5
 800a034:	0800a0c5 	.word	0x0800a0c5
 800a038:	0800a0c5 	.word	0x0800a0c5
 800a03c:	0800a0c5 	.word	0x0800a0c5
 800a040:	0800a0c5 	.word	0x0800a0c5
 800a044:	0800a0c5 	.word	0x0800a0c5
 800a048:	0800a0c5 	.word	0x0800a0c5
 800a04c:	0800a0c5 	.word	0x0800a0c5
 800a050:	0800a0ad 	.word	0x0800a0ad
 800a054:	0800a0c5 	.word	0x0800a0c5
 800a058:	0800a0c5 	.word	0x0800a0c5
 800a05c:	0800a0c5 	.word	0x0800a0c5
 800a060:	0800a0c5 	.word	0x0800a0c5
 800a064:	0800a0c5 	.word	0x0800a0c5
 800a068:	0800a0c5 	.word	0x0800a0c5
 800a06c:	0800a0c5 	.word	0x0800a0c5
 800a070:	0800a0b5 	.word	0x0800a0b5
 800a074:	0800a0c5 	.word	0x0800a0c5
 800a078:	0800a0c5 	.word	0x0800a0c5
 800a07c:	0800a0c5 	.word	0x0800a0c5
 800a080:	0800a0c5 	.word	0x0800a0c5
 800a084:	0800a0c5 	.word	0x0800a0c5
 800a088:	0800a0c5 	.word	0x0800a0c5
 800a08c:	0800a0c5 	.word	0x0800a0c5
 800a090:	0800a0bd 	.word	0x0800a0bd
 800a094:	2301      	movs	r3, #1
 800a096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09a:	e326      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a09c:	2304      	movs	r3, #4
 800a09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a2:	e322      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a0a4:	2308      	movs	r3, #8
 800a0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0aa:	e31e      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a0ac:	2310      	movs	r3, #16
 800a0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b2:	e31a      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a0b4:	2320      	movs	r3, #32
 800a0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ba:	e316      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c2:	e312      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a0c4:	2380      	movs	r3, #128	; 0x80
 800a0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ca:	e30e      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a6b      	ldr	r2, [pc, #428]	; (800a280 <UART_SetConfig+0x340>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d130      	bne.n	800a138 <UART_SetConfig+0x1f8>
 800a0d6:	4b69      	ldr	r3, [pc, #420]	; (800a27c <UART_SetConfig+0x33c>)
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	d826      	bhi.n	800a130 <UART_SetConfig+0x1f0>
 800a0e2:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <UART_SetConfig+0x1a8>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a101 	.word	0x0800a101
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a111 	.word	0x0800a111
 800a0f4:	0800a119 	.word	0x0800a119
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	2300      	movs	r3, #0
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a106:	e2f0      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10e:	e2ec      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a116:	e2e8      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11e:	e2e4      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a120:	2320      	movs	r3, #32
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e2e0      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e2dc      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e2d8      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a51      	ldr	r2, [pc, #324]	; (800a284 <UART_SetConfig+0x344>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d130      	bne.n	800a1a4 <UART_SetConfig+0x264>
 800a142:	4b4e      	ldr	r3, [pc, #312]	; (800a27c <UART_SetConfig+0x33c>)
 800a144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d826      	bhi.n	800a19c <UART_SetConfig+0x25c>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <UART_SetConfig+0x214>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a16d 	.word	0x0800a16d
 800a158:	0800a175 	.word	0x0800a175
 800a15c:	0800a17d 	.word	0x0800a17d
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a18d 	.word	0x0800a18d
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	2300      	movs	r3, #0
 800a16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a172:	e2ba      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a174:	2304      	movs	r3, #4
 800a176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a17a:	e2b6      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a17c:	2308      	movs	r3, #8
 800a17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a182:	e2b2      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a184:	2310      	movs	r3, #16
 800a186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a18a:	e2ae      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a18c:	2320      	movs	r3, #32
 800a18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a192:	e2aa      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a194:	2340      	movs	r3, #64	; 0x40
 800a196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19a:	e2a6      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a19c:	2380      	movs	r3, #128	; 0x80
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a2:	e2a2      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a37      	ldr	r2, [pc, #220]	; (800a288 <UART_SetConfig+0x348>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d130      	bne.n	800a210 <UART_SetConfig+0x2d0>
 800a1ae:	4b33      	ldr	r3, [pc, #204]	; (800a27c <UART_SetConfig+0x33c>)
 800a1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d826      	bhi.n	800a208 <UART_SetConfig+0x2c8>
 800a1ba:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <UART_SetConfig+0x280>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a1d9 	.word	0x0800a1d9
 800a1c4:	0800a1e1 	.word	0x0800a1e1
 800a1c8:	0800a1e9 	.word	0x0800a1e9
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a201 	.word	0x0800a201
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1de:	e284      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e6:	e280      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ee:	e27c      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f6:	e278      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a1f8:	2320      	movs	r3, #32
 800a1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fe:	e274      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a206:	e270      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a208:	2380      	movs	r3, #128	; 0x80
 800a20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20e:	e26c      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1d      	ldr	r2, [pc, #116]	; (800a28c <UART_SetConfig+0x34c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d142      	bne.n	800a2a0 <UART_SetConfig+0x360>
 800a21a:	4b18      	ldr	r3, [pc, #96]	; (800a27c <UART_SetConfig+0x33c>)
 800a21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	2b05      	cmp	r3, #5
 800a224:	d838      	bhi.n	800a298 <UART_SetConfig+0x358>
 800a226:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <UART_SetConfig+0x2ec>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a245 	.word	0x0800a245
 800a230:	0800a24d 	.word	0x0800a24d
 800a234:	0800a255 	.word	0x0800a255
 800a238:	0800a25d 	.word	0x0800a25d
 800a23c:	0800a265 	.word	0x0800a265
 800a240:	0800a291 	.word	0x0800a291
 800a244:	2300      	movs	r3, #0
 800a246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24a:	e24e      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a24c:	2304      	movs	r3, #4
 800a24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a252:	e24a      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a254:	2308      	movs	r3, #8
 800a256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25a:	e246      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a25c:	2310      	movs	r3, #16
 800a25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a262:	e242      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a264:	2320      	movs	r3, #32
 800a266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a26a:	e23e      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a26c:	cfff69f3 	.word	0xcfff69f3
 800a270:	58000c00 	.word	0x58000c00
 800a274:	11fff4ff 	.word	0x11fff4ff
 800a278:	40011000 	.word	0x40011000
 800a27c:	58024400 	.word	0x58024400
 800a280:	40004400 	.word	0x40004400
 800a284:	40004800 	.word	0x40004800
 800a288:	40004c00 	.word	0x40004c00
 800a28c:	40005000 	.word	0x40005000
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a296:	e228      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a298:	2380      	movs	r3, #128	; 0x80
 800a29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29e:	e224      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4ab1      	ldr	r2, [pc, #708]	; (800a56c <UART_SetConfig+0x62c>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d176      	bne.n	800a398 <UART_SetConfig+0x458>
 800a2aa:	4bb1      	ldr	r3, [pc, #708]	; (800a570 <UART_SetConfig+0x630>)
 800a2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2b2:	2b28      	cmp	r3, #40	; 0x28
 800a2b4:	d86c      	bhi.n	800a390 <UART_SetConfig+0x450>
 800a2b6:	a201      	add	r2, pc, #4	; (adr r2, 800a2bc <UART_SetConfig+0x37c>)
 800a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2bc:	0800a361 	.word	0x0800a361
 800a2c0:	0800a391 	.word	0x0800a391
 800a2c4:	0800a391 	.word	0x0800a391
 800a2c8:	0800a391 	.word	0x0800a391
 800a2cc:	0800a391 	.word	0x0800a391
 800a2d0:	0800a391 	.word	0x0800a391
 800a2d4:	0800a391 	.word	0x0800a391
 800a2d8:	0800a391 	.word	0x0800a391
 800a2dc:	0800a369 	.word	0x0800a369
 800a2e0:	0800a391 	.word	0x0800a391
 800a2e4:	0800a391 	.word	0x0800a391
 800a2e8:	0800a391 	.word	0x0800a391
 800a2ec:	0800a391 	.word	0x0800a391
 800a2f0:	0800a391 	.word	0x0800a391
 800a2f4:	0800a391 	.word	0x0800a391
 800a2f8:	0800a391 	.word	0x0800a391
 800a2fc:	0800a371 	.word	0x0800a371
 800a300:	0800a391 	.word	0x0800a391
 800a304:	0800a391 	.word	0x0800a391
 800a308:	0800a391 	.word	0x0800a391
 800a30c:	0800a391 	.word	0x0800a391
 800a310:	0800a391 	.word	0x0800a391
 800a314:	0800a391 	.word	0x0800a391
 800a318:	0800a391 	.word	0x0800a391
 800a31c:	0800a379 	.word	0x0800a379
 800a320:	0800a391 	.word	0x0800a391
 800a324:	0800a391 	.word	0x0800a391
 800a328:	0800a391 	.word	0x0800a391
 800a32c:	0800a391 	.word	0x0800a391
 800a330:	0800a391 	.word	0x0800a391
 800a334:	0800a391 	.word	0x0800a391
 800a338:	0800a391 	.word	0x0800a391
 800a33c:	0800a381 	.word	0x0800a381
 800a340:	0800a391 	.word	0x0800a391
 800a344:	0800a391 	.word	0x0800a391
 800a348:	0800a391 	.word	0x0800a391
 800a34c:	0800a391 	.word	0x0800a391
 800a350:	0800a391 	.word	0x0800a391
 800a354:	0800a391 	.word	0x0800a391
 800a358:	0800a391 	.word	0x0800a391
 800a35c:	0800a389 	.word	0x0800a389
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a366:	e1c0      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36e:	e1bc      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a376:	e1b8      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37e:	e1b4      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a380:	2320      	movs	r3, #32
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e1b0      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e1ac      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a390:	2380      	movs	r3, #128	; 0x80
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e1a8      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a75      	ldr	r2, [pc, #468]	; (800a574 <UART_SetConfig+0x634>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d130      	bne.n	800a404 <UART_SetConfig+0x4c4>
 800a3a2:	4b73      	ldr	r3, [pc, #460]	; (800a570 <UART_SetConfig+0x630>)
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d826      	bhi.n	800a3fc <UART_SetConfig+0x4bc>
 800a3ae:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <UART_SetConfig+0x474>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a3d5 	.word	0x0800a3d5
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e18a      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a3d4:	2304      	movs	r3, #4
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e186      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a3dc:	2308      	movs	r3, #8
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e182      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e17e      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e17a      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a3f4:	2340      	movs	r3, #64	; 0x40
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e176      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a3fc:	2380      	movs	r3, #128	; 0x80
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e172      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a5b      	ldr	r2, [pc, #364]	; (800a578 <UART_SetConfig+0x638>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d130      	bne.n	800a470 <UART_SetConfig+0x530>
 800a40e:	4b58      	ldr	r3, [pc, #352]	; (800a570 <UART_SetConfig+0x630>)
 800a410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	2b05      	cmp	r3, #5
 800a418:	d826      	bhi.n	800a468 <UART_SetConfig+0x528>
 800a41a:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <UART_SetConfig+0x4e0>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a439 	.word	0x0800a439
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a449 	.word	0x0800a449
 800a42c:	0800a451 	.word	0x0800a451
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a461 	.word	0x0800a461
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e154      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a440:	2304      	movs	r3, #4
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e150      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e14c      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a450:	2310      	movs	r3, #16
 800a452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a456:	e148      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a458:	2320      	movs	r3, #32
 800a45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45e:	e144      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a460:	2340      	movs	r3, #64	; 0x40
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e140      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a468:	2380      	movs	r3, #128	; 0x80
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46e:	e13c      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a41      	ldr	r2, [pc, #260]	; (800a57c <UART_SetConfig+0x63c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	f040 8082 	bne.w	800a580 <UART_SetConfig+0x640>
 800a47c:	4b3c      	ldr	r3, [pc, #240]	; (800a570 <UART_SetConfig+0x630>)
 800a47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a480:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a484:	2b28      	cmp	r3, #40	; 0x28
 800a486:	d86d      	bhi.n	800a564 <UART_SetConfig+0x624>
 800a488:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x550>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a535 	.word	0x0800a535
 800a494:	0800a565 	.word	0x0800a565
 800a498:	0800a565 	.word	0x0800a565
 800a49c:	0800a565 	.word	0x0800a565
 800a4a0:	0800a565 	.word	0x0800a565
 800a4a4:	0800a565 	.word	0x0800a565
 800a4a8:	0800a565 	.word	0x0800a565
 800a4ac:	0800a565 	.word	0x0800a565
 800a4b0:	0800a53d 	.word	0x0800a53d
 800a4b4:	0800a565 	.word	0x0800a565
 800a4b8:	0800a565 	.word	0x0800a565
 800a4bc:	0800a565 	.word	0x0800a565
 800a4c0:	0800a565 	.word	0x0800a565
 800a4c4:	0800a565 	.word	0x0800a565
 800a4c8:	0800a565 	.word	0x0800a565
 800a4cc:	0800a565 	.word	0x0800a565
 800a4d0:	0800a545 	.word	0x0800a545
 800a4d4:	0800a565 	.word	0x0800a565
 800a4d8:	0800a565 	.word	0x0800a565
 800a4dc:	0800a565 	.word	0x0800a565
 800a4e0:	0800a565 	.word	0x0800a565
 800a4e4:	0800a565 	.word	0x0800a565
 800a4e8:	0800a565 	.word	0x0800a565
 800a4ec:	0800a565 	.word	0x0800a565
 800a4f0:	0800a54d 	.word	0x0800a54d
 800a4f4:	0800a565 	.word	0x0800a565
 800a4f8:	0800a565 	.word	0x0800a565
 800a4fc:	0800a565 	.word	0x0800a565
 800a500:	0800a565 	.word	0x0800a565
 800a504:	0800a565 	.word	0x0800a565
 800a508:	0800a565 	.word	0x0800a565
 800a50c:	0800a565 	.word	0x0800a565
 800a510:	0800a555 	.word	0x0800a555
 800a514:	0800a565 	.word	0x0800a565
 800a518:	0800a565 	.word	0x0800a565
 800a51c:	0800a565 	.word	0x0800a565
 800a520:	0800a565 	.word	0x0800a565
 800a524:	0800a565 	.word	0x0800a565
 800a528:	0800a565 	.word	0x0800a565
 800a52c:	0800a565 	.word	0x0800a565
 800a530:	0800a55d 	.word	0x0800a55d
 800a534:	2301      	movs	r3, #1
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e0d6      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a53c:	2304      	movs	r3, #4
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e0d2      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a544:	2308      	movs	r3, #8
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e0ce      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a54c:	2310      	movs	r3, #16
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e0ca      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a554:	2320      	movs	r3, #32
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e0c6      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a55c:	2340      	movs	r3, #64	; 0x40
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e0c2      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a564:	2380      	movs	r3, #128	; 0x80
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e0be      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a56c:	40011400 	.word	0x40011400
 800a570:	58024400 	.word	0x58024400
 800a574:	40007800 	.word	0x40007800
 800a578:	40007c00 	.word	0x40007c00
 800a57c:	40011800 	.word	0x40011800
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4aad      	ldr	r2, [pc, #692]	; (800a83c <UART_SetConfig+0x8fc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d176      	bne.n	800a678 <UART_SetConfig+0x738>
 800a58a:	4bad      	ldr	r3, [pc, #692]	; (800a840 <UART_SetConfig+0x900>)
 800a58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a592:	2b28      	cmp	r3, #40	; 0x28
 800a594:	d86c      	bhi.n	800a670 <UART_SetConfig+0x730>
 800a596:	a201      	add	r2, pc, #4	; (adr r2, 800a59c <UART_SetConfig+0x65c>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a641 	.word	0x0800a641
 800a5a0:	0800a671 	.word	0x0800a671
 800a5a4:	0800a671 	.word	0x0800a671
 800a5a8:	0800a671 	.word	0x0800a671
 800a5ac:	0800a671 	.word	0x0800a671
 800a5b0:	0800a671 	.word	0x0800a671
 800a5b4:	0800a671 	.word	0x0800a671
 800a5b8:	0800a671 	.word	0x0800a671
 800a5bc:	0800a649 	.word	0x0800a649
 800a5c0:	0800a671 	.word	0x0800a671
 800a5c4:	0800a671 	.word	0x0800a671
 800a5c8:	0800a671 	.word	0x0800a671
 800a5cc:	0800a671 	.word	0x0800a671
 800a5d0:	0800a671 	.word	0x0800a671
 800a5d4:	0800a671 	.word	0x0800a671
 800a5d8:	0800a671 	.word	0x0800a671
 800a5dc:	0800a651 	.word	0x0800a651
 800a5e0:	0800a671 	.word	0x0800a671
 800a5e4:	0800a671 	.word	0x0800a671
 800a5e8:	0800a671 	.word	0x0800a671
 800a5ec:	0800a671 	.word	0x0800a671
 800a5f0:	0800a671 	.word	0x0800a671
 800a5f4:	0800a671 	.word	0x0800a671
 800a5f8:	0800a671 	.word	0x0800a671
 800a5fc:	0800a659 	.word	0x0800a659
 800a600:	0800a671 	.word	0x0800a671
 800a604:	0800a671 	.word	0x0800a671
 800a608:	0800a671 	.word	0x0800a671
 800a60c:	0800a671 	.word	0x0800a671
 800a610:	0800a671 	.word	0x0800a671
 800a614:	0800a671 	.word	0x0800a671
 800a618:	0800a671 	.word	0x0800a671
 800a61c:	0800a661 	.word	0x0800a661
 800a620:	0800a671 	.word	0x0800a671
 800a624:	0800a671 	.word	0x0800a671
 800a628:	0800a671 	.word	0x0800a671
 800a62c:	0800a671 	.word	0x0800a671
 800a630:	0800a671 	.word	0x0800a671
 800a634:	0800a671 	.word	0x0800a671
 800a638:	0800a671 	.word	0x0800a671
 800a63c:	0800a669 	.word	0x0800a669
 800a640:	2301      	movs	r3, #1
 800a642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a646:	e050      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a648:	2304      	movs	r3, #4
 800a64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64e:	e04c      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a650:	2308      	movs	r3, #8
 800a652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a656:	e048      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a658:	2310      	movs	r3, #16
 800a65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65e:	e044      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a660:	2320      	movs	r3, #32
 800a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a666:	e040      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a668:	2340      	movs	r3, #64	; 0x40
 800a66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66e:	e03c      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a670:	2380      	movs	r3, #128	; 0x80
 800a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a676:	e038      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a71      	ldr	r2, [pc, #452]	; (800a844 <UART_SetConfig+0x904>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d130      	bne.n	800a6e4 <UART_SetConfig+0x7a4>
 800a682:	4b6f      	ldr	r3, [pc, #444]	; (800a840 <UART_SetConfig+0x900>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	2b05      	cmp	r3, #5
 800a68c:	d826      	bhi.n	800a6dc <UART_SetConfig+0x79c>
 800a68e:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <UART_SetConfig+0x754>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6ad 	.word	0x0800a6ad
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6bd 	.word	0x0800a6bd
 800a6a0:	0800a6c5 	.word	0x0800a6c5
 800a6a4:	0800a6cd 	.word	0x0800a6cd
 800a6a8:	0800a6d5 	.word	0x0800a6d5
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b2:	e01a      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ba:	e016      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c2:	e012      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ca:	e00e      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d2:	e00a      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6da:	e006      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6dc:	2380      	movs	r3, #128	; 0x80
 800a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e2:	e002      	b.n	800a6ea <UART_SetConfig+0x7aa>
 800a6e4:	2380      	movs	r3, #128	; 0x80
 800a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a55      	ldr	r2, [pc, #340]	; (800a844 <UART_SetConfig+0x904>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	f040 80f0 	bne.w	800a8d6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6fa:	2b20      	cmp	r3, #32
 800a6fc:	dc46      	bgt.n	800a78c <UART_SetConfig+0x84c>
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	db75      	blt.n	800a7ee <UART_SetConfig+0x8ae>
 800a702:	3b02      	subs	r3, #2
 800a704:	2b1e      	cmp	r3, #30
 800a706:	d872      	bhi.n	800a7ee <UART_SetConfig+0x8ae>
 800a708:	a201      	add	r2, pc, #4	; (adr r2, 800a710 <UART_SetConfig+0x7d0>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a793 	.word	0x0800a793
 800a714:	0800a7ef 	.word	0x0800a7ef
 800a718:	0800a79b 	.word	0x0800a79b
 800a71c:	0800a7ef 	.word	0x0800a7ef
 800a720:	0800a7ef 	.word	0x0800a7ef
 800a724:	0800a7ef 	.word	0x0800a7ef
 800a728:	0800a7ab 	.word	0x0800a7ab
 800a72c:	0800a7ef 	.word	0x0800a7ef
 800a730:	0800a7ef 	.word	0x0800a7ef
 800a734:	0800a7ef 	.word	0x0800a7ef
 800a738:	0800a7ef 	.word	0x0800a7ef
 800a73c:	0800a7ef 	.word	0x0800a7ef
 800a740:	0800a7ef 	.word	0x0800a7ef
 800a744:	0800a7ef 	.word	0x0800a7ef
 800a748:	0800a7bb 	.word	0x0800a7bb
 800a74c:	0800a7ef 	.word	0x0800a7ef
 800a750:	0800a7ef 	.word	0x0800a7ef
 800a754:	0800a7ef 	.word	0x0800a7ef
 800a758:	0800a7ef 	.word	0x0800a7ef
 800a75c:	0800a7ef 	.word	0x0800a7ef
 800a760:	0800a7ef 	.word	0x0800a7ef
 800a764:	0800a7ef 	.word	0x0800a7ef
 800a768:	0800a7ef 	.word	0x0800a7ef
 800a76c:	0800a7ef 	.word	0x0800a7ef
 800a770:	0800a7ef 	.word	0x0800a7ef
 800a774:	0800a7ef 	.word	0x0800a7ef
 800a778:	0800a7ef 	.word	0x0800a7ef
 800a77c:	0800a7ef 	.word	0x0800a7ef
 800a780:	0800a7ef 	.word	0x0800a7ef
 800a784:	0800a7ef 	.word	0x0800a7ef
 800a788:	0800a7e1 	.word	0x0800a7e1
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d02a      	beq.n	800a7e6 <UART_SetConfig+0x8a6>
 800a790:	e02d      	b.n	800a7ee <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a792:	f7fd f85d 	bl	8007850 <HAL_RCCEx_GetD3PCLK1Freq>
 800a796:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a798:	e02f      	b.n	800a7fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a79a:	f107 0314 	add.w	r3, r7, #20
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fd f86c 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7a8:	e027      	b.n	800a7fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7aa:	f107 0308 	add.w	r3, r7, #8
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fd f9b8 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7b8:	e01f      	b.n	800a7fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <UART_SetConfig+0x900>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d009      	beq.n	800a7da <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7c6:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <UART_SetConfig+0x900>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	08db      	lsrs	r3, r3, #3
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	4a1d      	ldr	r2, [pc, #116]	; (800a848 <UART_SetConfig+0x908>)
 800a7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7d8:	e00f      	b.n	800a7fa <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a7da:	4b1b      	ldr	r3, [pc, #108]	; (800a848 <UART_SetConfig+0x908>)
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7de:	e00c      	b.n	800a7fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7e0:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <UART_SetConfig+0x90c>)
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7e4:	e009      	b.n	800a7fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ec:	e005      	b.n	800a7fa <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 81e6 	beq.w	800abce <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	4a12      	ldr	r2, [pc, #72]	; (800a850 <UART_SetConfig+0x910>)
 800a808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a80c:	461a      	mov	r2, r3
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	fbb3 f3f2 	udiv	r3, r3, r2
 800a814:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	4613      	mov	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	4413      	add	r3, r2
 800a820:	6a3a      	ldr	r2, [r7, #32]
 800a822:	429a      	cmp	r2, r3
 800a824:	d305      	bcc.n	800a832 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a82c:	6a3a      	ldr	r2, [r7, #32]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d910      	bls.n	800a854 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a838:	e1c9      	b.n	800abce <UART_SetConfig+0xc8e>
 800a83a:	bf00      	nop
 800a83c:	40011c00 	.word	0x40011c00
 800a840:	58024400 	.word	0x58024400
 800a844:	58000c00 	.word	0x58000c00
 800a848:	03d09000 	.word	0x03d09000
 800a84c:	003d0900 	.word	0x003d0900
 800a850:	0800c258 	.word	0x0800c258
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	4618      	mov	r0, r3
 800a858:	f04f 0100 	mov.w	r1, #0
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	4ac1      	ldr	r2, [pc, #772]	; (800ab68 <UART_SetConfig+0xc28>)
 800a862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a866:	b29a      	uxth	r2, r3
 800a868:	f04f 0300 	mov.w	r3, #0
 800a86c:	f7f5 fda0 	bl	80003b0 <__aeabi_uldivmod>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4610      	mov	r0, r2
 800a876:	4619      	mov	r1, r3
 800a878:	f04f 0200 	mov.w	r2, #0
 800a87c:	f04f 0300 	mov.w	r3, #0
 800a880:	020b      	lsls	r3, r1, #8
 800a882:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a886:	0202      	lsls	r2, r0, #8
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	6849      	ldr	r1, [r1, #4]
 800a88c:	0849      	lsrs	r1, r1, #1
 800a88e:	4608      	mov	r0, r1
 800a890:	f04f 0100 	mov.w	r1, #0
 800a894:	1814      	adds	r4, r2, r0
 800a896:	eb43 0501 	adc.w	r5, r3, r1
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f04f 0300 	mov.w	r3, #0
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 fd82 	bl	80003b0 <__aeabi_uldivmod>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ba:	d308      	bcc.n	800a8ce <UART_SetConfig+0x98e>
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8c2:	d204      	bcs.n	800a8ce <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ca:	60da      	str	r2, [r3, #12]
 800a8cc:	e17f      	b.n	800abce <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a8d4:	e17b      	b.n	800abce <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8de:	f040 80bd 	bne.w	800aa5c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a8e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	dc48      	bgt.n	800a97c <UART_SetConfig+0xa3c>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	db7b      	blt.n	800a9e6 <UART_SetConfig+0xaa6>
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d879      	bhi.n	800a9e6 <UART_SetConfig+0xaa6>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <UART_SetConfig+0x9b8>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a983 	.word	0x0800a983
 800a8fc:	0800a98b 	.word	0x0800a98b
 800a900:	0800a9e7 	.word	0x0800a9e7
 800a904:	0800a9e7 	.word	0x0800a9e7
 800a908:	0800a993 	.word	0x0800a993
 800a90c:	0800a9e7 	.word	0x0800a9e7
 800a910:	0800a9e7 	.word	0x0800a9e7
 800a914:	0800a9e7 	.word	0x0800a9e7
 800a918:	0800a9a3 	.word	0x0800a9a3
 800a91c:	0800a9e7 	.word	0x0800a9e7
 800a920:	0800a9e7 	.word	0x0800a9e7
 800a924:	0800a9e7 	.word	0x0800a9e7
 800a928:	0800a9e7 	.word	0x0800a9e7
 800a92c:	0800a9e7 	.word	0x0800a9e7
 800a930:	0800a9e7 	.word	0x0800a9e7
 800a934:	0800a9e7 	.word	0x0800a9e7
 800a938:	0800a9b3 	.word	0x0800a9b3
 800a93c:	0800a9e7 	.word	0x0800a9e7
 800a940:	0800a9e7 	.word	0x0800a9e7
 800a944:	0800a9e7 	.word	0x0800a9e7
 800a948:	0800a9e7 	.word	0x0800a9e7
 800a94c:	0800a9e7 	.word	0x0800a9e7
 800a950:	0800a9e7 	.word	0x0800a9e7
 800a954:	0800a9e7 	.word	0x0800a9e7
 800a958:	0800a9e7 	.word	0x0800a9e7
 800a95c:	0800a9e7 	.word	0x0800a9e7
 800a960:	0800a9e7 	.word	0x0800a9e7
 800a964:	0800a9e7 	.word	0x0800a9e7
 800a968:	0800a9e7 	.word	0x0800a9e7
 800a96c:	0800a9e7 	.word	0x0800a9e7
 800a970:	0800a9e7 	.word	0x0800a9e7
 800a974:	0800a9e7 	.word	0x0800a9e7
 800a978:	0800a9d9 	.word	0x0800a9d9
 800a97c:	2b40      	cmp	r3, #64	; 0x40
 800a97e:	d02e      	beq.n	800a9de <UART_SetConfig+0xa9e>
 800a980:	e031      	b.n	800a9e6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a982:	f7fb fc1b 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 800a986:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a988:	e033      	b.n	800a9f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a98a:	f7fb fc2d 	bl	80061e8 <HAL_RCC_GetPCLK2Freq>
 800a98e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a990:	e02f      	b.n	800a9f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a992:	f107 0314 	add.w	r3, r7, #20
 800a996:	4618      	mov	r0, r3
 800a998:	f7fc ff70 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9a0:	e027      	b.n	800a9f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fd f8bc 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9b0:	e01f      	b.n	800a9f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b2:	4b6e      	ldr	r3, [pc, #440]	; (800ab6c <UART_SetConfig+0xc2c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d009      	beq.n	800a9d2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9be:	4b6b      	ldr	r3, [pc, #428]	; (800ab6c <UART_SetConfig+0xc2c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	08db      	lsrs	r3, r3, #3
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	4a69      	ldr	r2, [pc, #420]	; (800ab70 <UART_SetConfig+0xc30>)
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9d0:	e00f      	b.n	800a9f2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a9d2:	4b67      	ldr	r3, [pc, #412]	; (800ab70 <UART_SetConfig+0xc30>)
 800a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9d6:	e00c      	b.n	800a9f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9d8:	4b66      	ldr	r3, [pc, #408]	; (800ab74 <UART_SetConfig+0xc34>)
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9dc:	e009      	b.n	800a9f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9e4:	e005      	b.n	800a9f2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a9f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 80ea 	beq.w	800abce <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	4a5a      	ldr	r2, [pc, #360]	; (800ab68 <UART_SetConfig+0xc28>)
 800aa00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa0c:	005a      	lsls	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	085b      	lsrs	r3, r3, #1
 800aa14:	441a      	add	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	2b0f      	cmp	r3, #15
 800aa24:	d916      	bls.n	800aa54 <UART_SetConfig+0xb14>
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2c:	d212      	bcs.n	800aa54 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	f023 030f 	bic.w	r3, r3, #15
 800aa36:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	085b      	lsrs	r3, r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa46:	4313      	orrs	r3, r2
 800aa48:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa50:	60da      	str	r2, [r3, #12]
 800aa52:	e0bc      	b.n	800abce <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa5a:	e0b8      	b.n	800abce <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	dc4b      	bgt.n	800aafc <UART_SetConfig+0xbbc>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f2c0 8087 	blt.w	800ab78 <UART_SetConfig+0xc38>
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	f200 8084 	bhi.w	800ab78 <UART_SetConfig+0xc38>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <UART_SetConfig+0xb38>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800ab03 	.word	0x0800ab03
 800aa7c:	0800ab0b 	.word	0x0800ab0b
 800aa80:	0800ab79 	.word	0x0800ab79
 800aa84:	0800ab79 	.word	0x0800ab79
 800aa88:	0800ab13 	.word	0x0800ab13
 800aa8c:	0800ab79 	.word	0x0800ab79
 800aa90:	0800ab79 	.word	0x0800ab79
 800aa94:	0800ab79 	.word	0x0800ab79
 800aa98:	0800ab23 	.word	0x0800ab23
 800aa9c:	0800ab79 	.word	0x0800ab79
 800aaa0:	0800ab79 	.word	0x0800ab79
 800aaa4:	0800ab79 	.word	0x0800ab79
 800aaa8:	0800ab79 	.word	0x0800ab79
 800aaac:	0800ab79 	.word	0x0800ab79
 800aab0:	0800ab79 	.word	0x0800ab79
 800aab4:	0800ab79 	.word	0x0800ab79
 800aab8:	0800ab33 	.word	0x0800ab33
 800aabc:	0800ab79 	.word	0x0800ab79
 800aac0:	0800ab79 	.word	0x0800ab79
 800aac4:	0800ab79 	.word	0x0800ab79
 800aac8:	0800ab79 	.word	0x0800ab79
 800aacc:	0800ab79 	.word	0x0800ab79
 800aad0:	0800ab79 	.word	0x0800ab79
 800aad4:	0800ab79 	.word	0x0800ab79
 800aad8:	0800ab79 	.word	0x0800ab79
 800aadc:	0800ab79 	.word	0x0800ab79
 800aae0:	0800ab79 	.word	0x0800ab79
 800aae4:	0800ab79 	.word	0x0800ab79
 800aae8:	0800ab79 	.word	0x0800ab79
 800aaec:	0800ab79 	.word	0x0800ab79
 800aaf0:	0800ab79 	.word	0x0800ab79
 800aaf4:	0800ab79 	.word	0x0800ab79
 800aaf8:	0800ab59 	.word	0x0800ab59
 800aafc:	2b40      	cmp	r3, #64	; 0x40
 800aafe:	d02e      	beq.n	800ab5e <UART_SetConfig+0xc1e>
 800ab00:	e03a      	b.n	800ab78 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab02:	f7fb fb5b 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 800ab06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab08:	e03c      	b.n	800ab84 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab0a:	f7fb fb6d 	bl	80061e8 <HAL_RCC_GetPCLK2Freq>
 800ab0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab10:	e038      	b.n	800ab84 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab12:	f107 0314 	add.w	r3, r7, #20
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fc feb0 	bl	800787c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab20:	e030      	b.n	800ab84 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fc fffc 	bl	8007b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab30:	e028      	b.n	800ab84 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab32:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <UART_SetConfig+0xc2c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d009      	beq.n	800ab52 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	; (800ab6c <UART_SetConfig+0xc2c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	08db      	lsrs	r3, r3, #3
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <UART_SetConfig+0xc30>)
 800ab4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab50:	e018      	b.n	800ab84 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ab52:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <UART_SetConfig+0xc30>)
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab56:	e015      	b.n	800ab84 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab58:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <UART_SetConfig+0xc34>)
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab5c:	e012      	b.n	800ab84 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab64:	e00e      	b.n	800ab84 <UART_SetConfig+0xc44>
 800ab66:	bf00      	nop
 800ab68:	0800c258 	.word	0x0800c258
 800ab6c:	58024400 	.word	0x58024400
 800ab70:	03d09000 	.word	0x03d09000
 800ab74:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab82:	bf00      	nop
    }

    if (pclk != 0U)
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d021      	beq.n	800abce <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	4a1a      	ldr	r2, [pc, #104]	; (800abf8 <UART_SetConfig+0xcb8>)
 800ab90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	085b      	lsrs	r3, r3, #1
 800aba2:	441a      	add	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	d909      	bls.n	800abc8 <UART_SetConfig+0xc88>
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abba:	d205      	bcs.n	800abc8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60da      	str	r2, [r3, #12]
 800abc6:	e002      	b.n	800abce <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800abea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3738      	adds	r7, #56	; 0x38
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bdb0      	pop	{r4, r5, r7, pc}
 800abf6:	bf00      	nop
 800abf8:	0800c258 	.word	0x0800c258

0800abfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	430a      	orrs	r2, r1
 800ac46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	f003 0308 	and.w	r3, r3, #8
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac90:	f003 0310 	and.w	r3, r3, #16
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00a      	beq.n	800acae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01a      	beq.n	800ad12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acfa:	d10a      	bne.n	800ad12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00a      	beq.n	800ad34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	605a      	str	r2, [r3, #4]
  }
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad50:	f7f7 fe4c 	bl	80029ec <HAL_GetTick>
 800ad54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d10e      	bne.n	800ad82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f82f 	bl	800add6 <UART_WaitOnFlagUntilTimeout>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e025      	b.n	800adce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	d10e      	bne.n	800adae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f819 	bl	800add6 <UART_WaitOnFlagUntilTimeout>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e00f      	b.n	800adce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b09c      	sub	sp, #112	; 0x70
 800adda:	af00      	add	r7, sp, #0
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	603b      	str	r3, [r7, #0]
 800ade2:	4613      	mov	r3, r2
 800ade4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade6:	e0a9      	b.n	800af3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ade8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adee:	f000 80a5 	beq.w	800af3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adf2:	f7f7 fdfb 	bl	80029ec <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d302      	bcc.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d140      	bne.n	800ae8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e6      	bne.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	f023 0301 	bic.w	r3, r3, #1
 800ae50:	663b      	str	r3, [r7, #96]	; 0x60
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e5      	bne.n	800ae3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2220      	movs	r2, #32
 800ae72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e069      	b.n	800af5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d051      	beq.n	800af3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aea6:	d149      	bne.n	800af3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	e853 3f00 	ldrex	r3, [r3]
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	461a      	mov	r2, r3
 800aece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
 800aed2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed8:	e841 2300 	strex	r3, r2, [r1]
 800aedc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e6      	bne.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3308      	adds	r3, #8
 800aeea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	613b      	str	r3, [r7, #16]
   return(result);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f023 0301 	bic.w	r3, r3, #1
 800aefa:	66bb      	str	r3, [r7, #104]	; 0x68
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3308      	adds	r3, #8
 800af02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af04:	623a      	str	r2, [r7, #32]
 800af06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af08:	69f9      	ldr	r1, [r7, #28]
 800af0a:	6a3a      	ldr	r2, [r7, #32]
 800af0c:	e841 2300 	strex	r3, r2, [r1]
 800af10:	61bb      	str	r3, [r7, #24]
   return(result);
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e5      	bne.n	800aee4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2220      	movs	r2, #32
 800af24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2220      	movs	r2, #32
 800af2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e010      	b.n	800af5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69da      	ldr	r2, [r3, #28]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	4013      	ands	r3, r2
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	429a      	cmp	r2, r3
 800af4a:	bf0c      	ite	eq
 800af4c:	2301      	moveq	r3, #1
 800af4e:	2300      	movne	r3, #0
 800af50:	b2db      	uxtb	r3, r3
 800af52:	461a      	mov	r2, r3
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	429a      	cmp	r2, r3
 800af58:	f43f af46 	beq.w	800ade8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3770      	adds	r7, #112	; 0x70
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af74:	2b01      	cmp	r3, #1
 800af76:	d101      	bne.n	800af7c <HAL_UARTEx_DisableFifoMode+0x16>
 800af78:	2302      	movs	r3, #2
 800af7a:	e027      	b.n	800afcc <HAL_UARTEx_DisableFifoMode+0x66>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2224      	movs	r2, #36	; 0x24
 800af88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0201 	bic.w	r2, r2, #1
 800afa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afec:	2302      	movs	r3, #2
 800afee:	e02d      	b.n	800b04c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2224      	movs	r2, #36	; 0x24
 800affc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 0201 	bic.w	r2, r2, #1
 800b016:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f84f 	bl	800b0d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b064:	2b01      	cmp	r3, #1
 800b066:	d101      	bne.n	800b06c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b068:	2302      	movs	r3, #2
 800b06a:	e02d      	b.n	800b0c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2224      	movs	r2, #36	; 0x24
 800b078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 0201 	bic.w	r2, r2, #1
 800b092:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f811 	bl	800b0d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d108      	bne.n	800b0f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0f0:	e031      	b.n	800b156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0f2:	2310      	movs	r3, #16
 800b0f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	0e5b      	lsrs	r3, r3, #25
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f003 0307 	and.w	r3, r3, #7
 800b108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	0f5b      	lsrs	r3, r3, #29
 800b112:	b2db      	uxtb	r3, r3
 800b114:	f003 0307 	and.w	r3, r3, #7
 800b118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	7b3a      	ldrb	r2, [r7, #12]
 800b11e:	4911      	ldr	r1, [pc, #68]	; (800b164 <UARTEx_SetNbDataToProcess+0x94>)
 800b120:	5c8a      	ldrb	r2, [r1, r2]
 800b122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b126:	7b3a      	ldrb	r2, [r7, #12]
 800b128:	490f      	ldr	r1, [pc, #60]	; (800b168 <UARTEx_SetNbDataToProcess+0x98>)
 800b12a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b12c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b130:	b29a      	uxth	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	7b7a      	ldrb	r2, [r7, #13]
 800b13c:	4909      	ldr	r1, [pc, #36]	; (800b164 <UARTEx_SetNbDataToProcess+0x94>)
 800b13e:	5c8a      	ldrb	r2, [r1, r2]
 800b140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b144:	7b7a      	ldrb	r2, [r7, #13]
 800b146:	4908      	ldr	r1, [pc, #32]	; (800b168 <UARTEx_SetNbDataToProcess+0x98>)
 800b148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b14a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b14e:	b29a      	uxth	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b156:	bf00      	nop
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	0800c270 	.word	0x0800c270
 800b168:	0800c278 	.word	0x0800c278

0800b16c <__errno>:
 800b16c:	4b01      	ldr	r3, [pc, #4]	; (800b174 <__errno+0x8>)
 800b16e:	6818      	ldr	r0, [r3, #0]
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	24000010 	.word	0x24000010

0800b178 <__libc_init_array>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	4d0d      	ldr	r5, [pc, #52]	; (800b1b0 <__libc_init_array+0x38>)
 800b17c:	4c0d      	ldr	r4, [pc, #52]	; (800b1b4 <__libc_init_array+0x3c>)
 800b17e:	1b64      	subs	r4, r4, r5
 800b180:	10a4      	asrs	r4, r4, #2
 800b182:	2600      	movs	r6, #0
 800b184:	42a6      	cmp	r6, r4
 800b186:	d109      	bne.n	800b19c <__libc_init_array+0x24>
 800b188:	4d0b      	ldr	r5, [pc, #44]	; (800b1b8 <__libc_init_array+0x40>)
 800b18a:	4c0c      	ldr	r4, [pc, #48]	; (800b1bc <__libc_init_array+0x44>)
 800b18c:	f000 fffa 	bl	800c184 <_init>
 800b190:	1b64      	subs	r4, r4, r5
 800b192:	10a4      	asrs	r4, r4, #2
 800b194:	2600      	movs	r6, #0
 800b196:	42a6      	cmp	r6, r4
 800b198:	d105      	bne.n	800b1a6 <__libc_init_array+0x2e>
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a0:	4798      	blx	r3
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7ee      	b.n	800b184 <__libc_init_array+0xc>
 800b1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1aa:	4798      	blx	r3
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	e7f2      	b.n	800b196 <__libc_init_array+0x1e>
 800b1b0:	0800c320 	.word	0x0800c320
 800b1b4:	0800c320 	.word	0x0800c320
 800b1b8:	0800c320 	.word	0x0800c320
 800b1bc:	0800c324 	.word	0x0800c324

0800b1c0 <memcpy>:
 800b1c0:	440a      	add	r2, r1
 800b1c2:	4291      	cmp	r1, r2
 800b1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1c8:	d100      	bne.n	800b1cc <memcpy+0xc>
 800b1ca:	4770      	bx	lr
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	d1f9      	bne.n	800b1ce <memcpy+0xe>
 800b1da:	bd10      	pop	{r4, pc}

0800b1dc <memset>:
 800b1dc:	4402      	add	r2, r0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d100      	bne.n	800b1e6 <memset+0xa>
 800b1e4:	4770      	bx	lr
 800b1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ea:	e7f9      	b.n	800b1e0 <memset+0x4>

0800b1ec <iprintf>:
 800b1ec:	b40f      	push	{r0, r1, r2, r3}
 800b1ee:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <iprintf+0x2c>)
 800b1f0:	b513      	push	{r0, r1, r4, lr}
 800b1f2:	681c      	ldr	r4, [r3, #0]
 800b1f4:	b124      	cbz	r4, 800b200 <iprintf+0x14>
 800b1f6:	69a3      	ldr	r3, [r4, #24]
 800b1f8:	b913      	cbnz	r3, 800b200 <iprintf+0x14>
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fa5e 	bl	800b6bc <__sinit>
 800b200:	ab05      	add	r3, sp, #20
 800b202:	9a04      	ldr	r2, [sp, #16]
 800b204:	68a1      	ldr	r1, [r4, #8]
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fc2f 	bl	800ba6c <_vfiprintf_r>
 800b20e:	b002      	add	sp, #8
 800b210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b214:	b004      	add	sp, #16
 800b216:	4770      	bx	lr
 800b218:	24000010 	.word	0x24000010

0800b21c <_puts_r>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	460e      	mov	r6, r1
 800b220:	4605      	mov	r5, r0
 800b222:	b118      	cbz	r0, 800b22c <_puts_r+0x10>
 800b224:	6983      	ldr	r3, [r0, #24]
 800b226:	b90b      	cbnz	r3, 800b22c <_puts_r+0x10>
 800b228:	f000 fa48 	bl	800b6bc <__sinit>
 800b22c:	69ab      	ldr	r3, [r5, #24]
 800b22e:	68ac      	ldr	r4, [r5, #8]
 800b230:	b913      	cbnz	r3, 800b238 <_puts_r+0x1c>
 800b232:	4628      	mov	r0, r5
 800b234:	f000 fa42 	bl	800b6bc <__sinit>
 800b238:	4b2c      	ldr	r3, [pc, #176]	; (800b2ec <_puts_r+0xd0>)
 800b23a:	429c      	cmp	r4, r3
 800b23c:	d120      	bne.n	800b280 <_puts_r+0x64>
 800b23e:	686c      	ldr	r4, [r5, #4]
 800b240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b242:	07db      	lsls	r3, r3, #31
 800b244:	d405      	bmi.n	800b252 <_puts_r+0x36>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	0598      	lsls	r0, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_puts_r+0x36>
 800b24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24e:	f000 fad3 	bl	800b7f8 <__retarget_lock_acquire_recursive>
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	0719      	lsls	r1, r3, #28
 800b256:	d51d      	bpl.n	800b294 <_puts_r+0x78>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	b1db      	cbz	r3, 800b294 <_puts_r+0x78>
 800b25c:	3e01      	subs	r6, #1
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b264:	3b01      	subs	r3, #1
 800b266:	60a3      	str	r3, [r4, #8]
 800b268:	bb39      	cbnz	r1, 800b2ba <_puts_r+0x9e>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	da38      	bge.n	800b2e0 <_puts_r+0xc4>
 800b26e:	4622      	mov	r2, r4
 800b270:	210a      	movs	r1, #10
 800b272:	4628      	mov	r0, r5
 800b274:	f000 f848 	bl	800b308 <__swbuf_r>
 800b278:	3001      	adds	r0, #1
 800b27a:	d011      	beq.n	800b2a0 <_puts_r+0x84>
 800b27c:	250a      	movs	r5, #10
 800b27e:	e011      	b.n	800b2a4 <_puts_r+0x88>
 800b280:	4b1b      	ldr	r3, [pc, #108]	; (800b2f0 <_puts_r+0xd4>)
 800b282:	429c      	cmp	r4, r3
 800b284:	d101      	bne.n	800b28a <_puts_r+0x6e>
 800b286:	68ac      	ldr	r4, [r5, #8]
 800b288:	e7da      	b.n	800b240 <_puts_r+0x24>
 800b28a:	4b1a      	ldr	r3, [pc, #104]	; (800b2f4 <_puts_r+0xd8>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	bf08      	it	eq
 800b290:	68ec      	ldreq	r4, [r5, #12]
 800b292:	e7d5      	b.n	800b240 <_puts_r+0x24>
 800b294:	4621      	mov	r1, r4
 800b296:	4628      	mov	r0, r5
 800b298:	f000 f888 	bl	800b3ac <__swsetup_r>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d0dd      	beq.n	800b25c <_puts_r+0x40>
 800b2a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b2a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2a6:	07da      	lsls	r2, r3, #31
 800b2a8:	d405      	bmi.n	800b2b6 <_puts_r+0x9a>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	059b      	lsls	r3, r3, #22
 800b2ae:	d402      	bmi.n	800b2b6 <_puts_r+0x9a>
 800b2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2b2:	f000 faa2 	bl	800b7fa <__retarget_lock_release_recursive>
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	da04      	bge.n	800b2c8 <_puts_r+0xac>
 800b2be:	69a2      	ldr	r2, [r4, #24]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	dc06      	bgt.n	800b2d2 <_puts_r+0xb6>
 800b2c4:	290a      	cmp	r1, #10
 800b2c6:	d004      	beq.n	800b2d2 <_puts_r+0xb6>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	6022      	str	r2, [r4, #0]
 800b2ce:	7019      	strb	r1, [r3, #0]
 800b2d0:	e7c5      	b.n	800b25e <_puts_r+0x42>
 800b2d2:	4622      	mov	r2, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f000 f817 	bl	800b308 <__swbuf_r>
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d1bf      	bne.n	800b25e <_puts_r+0x42>
 800b2de:	e7df      	b.n	800b2a0 <_puts_r+0x84>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	250a      	movs	r5, #10
 800b2e4:	1c5a      	adds	r2, r3, #1
 800b2e6:	6022      	str	r2, [r4, #0]
 800b2e8:	701d      	strb	r5, [r3, #0]
 800b2ea:	e7db      	b.n	800b2a4 <_puts_r+0x88>
 800b2ec:	0800c2a4 	.word	0x0800c2a4
 800b2f0:	0800c2c4 	.word	0x0800c2c4
 800b2f4:	0800c284 	.word	0x0800c284

0800b2f8 <puts>:
 800b2f8:	4b02      	ldr	r3, [pc, #8]	; (800b304 <puts+0xc>)
 800b2fa:	4601      	mov	r1, r0
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	f7ff bf8d 	b.w	800b21c <_puts_r>
 800b302:	bf00      	nop
 800b304:	24000010 	.word	0x24000010

0800b308 <__swbuf_r>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	460e      	mov	r6, r1
 800b30c:	4614      	mov	r4, r2
 800b30e:	4605      	mov	r5, r0
 800b310:	b118      	cbz	r0, 800b31a <__swbuf_r+0x12>
 800b312:	6983      	ldr	r3, [r0, #24]
 800b314:	b90b      	cbnz	r3, 800b31a <__swbuf_r+0x12>
 800b316:	f000 f9d1 	bl	800b6bc <__sinit>
 800b31a:	4b21      	ldr	r3, [pc, #132]	; (800b3a0 <__swbuf_r+0x98>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	d12b      	bne.n	800b378 <__swbuf_r+0x70>
 800b320:	686c      	ldr	r4, [r5, #4]
 800b322:	69a3      	ldr	r3, [r4, #24]
 800b324:	60a3      	str	r3, [r4, #8]
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	071a      	lsls	r2, r3, #28
 800b32a:	d52f      	bpl.n	800b38c <__swbuf_r+0x84>
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	b36b      	cbz	r3, 800b38c <__swbuf_r+0x84>
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	6820      	ldr	r0, [r4, #0]
 800b334:	1ac0      	subs	r0, r0, r3
 800b336:	6963      	ldr	r3, [r4, #20]
 800b338:	b2f6      	uxtb	r6, r6
 800b33a:	4283      	cmp	r3, r0
 800b33c:	4637      	mov	r7, r6
 800b33e:	dc04      	bgt.n	800b34a <__swbuf_r+0x42>
 800b340:	4621      	mov	r1, r4
 800b342:	4628      	mov	r0, r5
 800b344:	f000 f926 	bl	800b594 <_fflush_r>
 800b348:	bb30      	cbnz	r0, 800b398 <__swbuf_r+0x90>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	60a3      	str	r3, [r4, #8]
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	6022      	str	r2, [r4, #0]
 800b356:	701e      	strb	r6, [r3, #0]
 800b358:	6963      	ldr	r3, [r4, #20]
 800b35a:	3001      	adds	r0, #1
 800b35c:	4283      	cmp	r3, r0
 800b35e:	d004      	beq.n	800b36a <__swbuf_r+0x62>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	07db      	lsls	r3, r3, #31
 800b364:	d506      	bpl.n	800b374 <__swbuf_r+0x6c>
 800b366:	2e0a      	cmp	r6, #10
 800b368:	d104      	bne.n	800b374 <__swbuf_r+0x6c>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 f911 	bl	800b594 <_fflush_r>
 800b372:	b988      	cbnz	r0, 800b398 <__swbuf_r+0x90>
 800b374:	4638      	mov	r0, r7
 800b376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <__swbuf_r+0x9c>)
 800b37a:	429c      	cmp	r4, r3
 800b37c:	d101      	bne.n	800b382 <__swbuf_r+0x7a>
 800b37e:	68ac      	ldr	r4, [r5, #8]
 800b380:	e7cf      	b.n	800b322 <__swbuf_r+0x1a>
 800b382:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <__swbuf_r+0xa0>)
 800b384:	429c      	cmp	r4, r3
 800b386:	bf08      	it	eq
 800b388:	68ec      	ldreq	r4, [r5, #12]
 800b38a:	e7ca      	b.n	800b322 <__swbuf_r+0x1a>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 f80c 	bl	800b3ac <__swsetup_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	d0cb      	beq.n	800b330 <__swbuf_r+0x28>
 800b398:	f04f 37ff 	mov.w	r7, #4294967295
 800b39c:	e7ea      	b.n	800b374 <__swbuf_r+0x6c>
 800b39e:	bf00      	nop
 800b3a0:	0800c2a4 	.word	0x0800c2a4
 800b3a4:	0800c2c4 	.word	0x0800c2c4
 800b3a8:	0800c284 	.word	0x0800c284

0800b3ac <__swsetup_r>:
 800b3ac:	4b32      	ldr	r3, [pc, #200]	; (800b478 <__swsetup_r+0xcc>)
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	681d      	ldr	r5, [r3, #0]
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	b125      	cbz	r5, 800b3c2 <__swsetup_r+0x16>
 800b3b8:	69ab      	ldr	r3, [r5, #24]
 800b3ba:	b913      	cbnz	r3, 800b3c2 <__swsetup_r+0x16>
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f000 f97d 	bl	800b6bc <__sinit>
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <__swsetup_r+0xd0>)
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	d10f      	bne.n	800b3e8 <__swsetup_r+0x3c>
 800b3c8:	686c      	ldr	r4, [r5, #4]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d0:	0719      	lsls	r1, r3, #28
 800b3d2:	d42c      	bmi.n	800b42e <__swsetup_r+0x82>
 800b3d4:	06dd      	lsls	r5, r3, #27
 800b3d6:	d411      	bmi.n	800b3fc <__swsetup_r+0x50>
 800b3d8:	2309      	movs	r3, #9
 800b3da:	6033      	str	r3, [r6, #0]
 800b3dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	e03e      	b.n	800b466 <__swsetup_r+0xba>
 800b3e8:	4b25      	ldr	r3, [pc, #148]	; (800b480 <__swsetup_r+0xd4>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d101      	bne.n	800b3f2 <__swsetup_r+0x46>
 800b3ee:	68ac      	ldr	r4, [r5, #8]
 800b3f0:	e7eb      	b.n	800b3ca <__swsetup_r+0x1e>
 800b3f2:	4b24      	ldr	r3, [pc, #144]	; (800b484 <__swsetup_r+0xd8>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	bf08      	it	eq
 800b3f8:	68ec      	ldreq	r4, [r5, #12]
 800b3fa:	e7e6      	b.n	800b3ca <__swsetup_r+0x1e>
 800b3fc:	0758      	lsls	r0, r3, #29
 800b3fe:	d512      	bpl.n	800b426 <__swsetup_r+0x7a>
 800b400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b402:	b141      	cbz	r1, 800b416 <__swsetup_r+0x6a>
 800b404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b408:	4299      	cmp	r1, r3
 800b40a:	d002      	beq.n	800b412 <__swsetup_r+0x66>
 800b40c:	4630      	mov	r0, r6
 800b40e:	f000 fa59 	bl	800b8c4 <_free_r>
 800b412:	2300      	movs	r3, #0
 800b414:	6363      	str	r3, [r4, #52]	; 0x34
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	2300      	movs	r3, #0
 800b420:	6063      	str	r3, [r4, #4]
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	f043 0308 	orr.w	r3, r3, #8
 800b42c:	81a3      	strh	r3, [r4, #12]
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	b94b      	cbnz	r3, 800b446 <__swsetup_r+0x9a>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b43c:	d003      	beq.n	800b446 <__swsetup_r+0x9a>
 800b43e:	4621      	mov	r1, r4
 800b440:	4630      	mov	r0, r6
 800b442:	f000 f9ff 	bl	800b844 <__smakebuf_r>
 800b446:	89a0      	ldrh	r0, [r4, #12]
 800b448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b44c:	f010 0301 	ands.w	r3, r0, #1
 800b450:	d00a      	beq.n	800b468 <__swsetup_r+0xbc>
 800b452:	2300      	movs	r3, #0
 800b454:	60a3      	str	r3, [r4, #8]
 800b456:	6963      	ldr	r3, [r4, #20]
 800b458:	425b      	negs	r3, r3
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	b943      	cbnz	r3, 800b472 <__swsetup_r+0xc6>
 800b460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b464:	d1ba      	bne.n	800b3dc <__swsetup_r+0x30>
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	0781      	lsls	r1, r0, #30
 800b46a:	bf58      	it	pl
 800b46c:	6963      	ldrpl	r3, [r4, #20]
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	e7f4      	b.n	800b45c <__swsetup_r+0xb0>
 800b472:	2000      	movs	r0, #0
 800b474:	e7f7      	b.n	800b466 <__swsetup_r+0xba>
 800b476:	bf00      	nop
 800b478:	24000010 	.word	0x24000010
 800b47c:	0800c2a4 	.word	0x0800c2a4
 800b480:	0800c2c4 	.word	0x0800c2c4
 800b484:	0800c284 	.word	0x0800c284

0800b488 <__sflush_r>:
 800b488:	898a      	ldrh	r2, [r1, #12]
 800b48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	4605      	mov	r5, r0
 800b490:	0710      	lsls	r0, r2, #28
 800b492:	460c      	mov	r4, r1
 800b494:	d458      	bmi.n	800b548 <__sflush_r+0xc0>
 800b496:	684b      	ldr	r3, [r1, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dc05      	bgt.n	800b4a8 <__sflush_r+0x20>
 800b49c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dc02      	bgt.n	800b4a8 <__sflush_r+0x20>
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4aa:	2e00      	cmp	r6, #0
 800b4ac:	d0f9      	beq.n	800b4a2 <__sflush_r+0x1a>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4b4:	682f      	ldr	r7, [r5, #0]
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	d032      	beq.n	800b520 <__sflush_r+0x98>
 800b4ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	075a      	lsls	r2, r3, #29
 800b4c0:	d505      	bpl.n	800b4ce <__sflush_r+0x46>
 800b4c2:	6863      	ldr	r3, [r4, #4]
 800b4c4:	1ac0      	subs	r0, r0, r3
 800b4c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4c8:	b10b      	cbz	r3, 800b4ce <__sflush_r+0x46>
 800b4ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4cc:	1ac0      	subs	r0, r0, r3
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4d4:	6a21      	ldr	r1, [r4, #32]
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b0      	blx	r6
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	d106      	bne.n	800b4ee <__sflush_r+0x66>
 800b4e0:	6829      	ldr	r1, [r5, #0]
 800b4e2:	291d      	cmp	r1, #29
 800b4e4:	d82c      	bhi.n	800b540 <__sflush_r+0xb8>
 800b4e6:	4a2a      	ldr	r2, [pc, #168]	; (800b590 <__sflush_r+0x108>)
 800b4e8:	40ca      	lsrs	r2, r1
 800b4ea:	07d6      	lsls	r6, r2, #31
 800b4ec:	d528      	bpl.n	800b540 <__sflush_r+0xb8>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	6062      	str	r2, [r4, #4]
 800b4f2:	04d9      	lsls	r1, r3, #19
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	6022      	str	r2, [r4, #0]
 800b4f8:	d504      	bpl.n	800b504 <__sflush_r+0x7c>
 800b4fa:	1c42      	adds	r2, r0, #1
 800b4fc:	d101      	bne.n	800b502 <__sflush_r+0x7a>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	b903      	cbnz	r3, 800b504 <__sflush_r+0x7c>
 800b502:	6560      	str	r0, [r4, #84]	; 0x54
 800b504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b506:	602f      	str	r7, [r5, #0]
 800b508:	2900      	cmp	r1, #0
 800b50a:	d0ca      	beq.n	800b4a2 <__sflush_r+0x1a>
 800b50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b510:	4299      	cmp	r1, r3
 800b512:	d002      	beq.n	800b51a <__sflush_r+0x92>
 800b514:	4628      	mov	r0, r5
 800b516:	f000 f9d5 	bl	800b8c4 <_free_r>
 800b51a:	2000      	movs	r0, #0
 800b51c:	6360      	str	r0, [r4, #52]	; 0x34
 800b51e:	e7c1      	b.n	800b4a4 <__sflush_r+0x1c>
 800b520:	6a21      	ldr	r1, [r4, #32]
 800b522:	2301      	movs	r3, #1
 800b524:	4628      	mov	r0, r5
 800b526:	47b0      	blx	r6
 800b528:	1c41      	adds	r1, r0, #1
 800b52a:	d1c7      	bne.n	800b4bc <__sflush_r+0x34>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0c4      	beq.n	800b4bc <__sflush_r+0x34>
 800b532:	2b1d      	cmp	r3, #29
 800b534:	d001      	beq.n	800b53a <__sflush_r+0xb2>
 800b536:	2b16      	cmp	r3, #22
 800b538:	d101      	bne.n	800b53e <__sflush_r+0xb6>
 800b53a:	602f      	str	r7, [r5, #0]
 800b53c:	e7b1      	b.n	800b4a2 <__sflush_r+0x1a>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b544:	81a3      	strh	r3, [r4, #12]
 800b546:	e7ad      	b.n	800b4a4 <__sflush_r+0x1c>
 800b548:	690f      	ldr	r7, [r1, #16]
 800b54a:	2f00      	cmp	r7, #0
 800b54c:	d0a9      	beq.n	800b4a2 <__sflush_r+0x1a>
 800b54e:	0793      	lsls	r3, r2, #30
 800b550:	680e      	ldr	r6, [r1, #0]
 800b552:	bf08      	it	eq
 800b554:	694b      	ldreq	r3, [r1, #20]
 800b556:	600f      	str	r7, [r1, #0]
 800b558:	bf18      	it	ne
 800b55a:	2300      	movne	r3, #0
 800b55c:	eba6 0807 	sub.w	r8, r6, r7
 800b560:	608b      	str	r3, [r1, #8]
 800b562:	f1b8 0f00 	cmp.w	r8, #0
 800b566:	dd9c      	ble.n	800b4a2 <__sflush_r+0x1a>
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b56c:	4643      	mov	r3, r8
 800b56e:	463a      	mov	r2, r7
 800b570:	4628      	mov	r0, r5
 800b572:	47b0      	blx	r6
 800b574:	2800      	cmp	r0, #0
 800b576:	dc06      	bgt.n	800b586 <__sflush_r+0xfe>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	e78e      	b.n	800b4a4 <__sflush_r+0x1c>
 800b586:	4407      	add	r7, r0
 800b588:	eba8 0800 	sub.w	r8, r8, r0
 800b58c:	e7e9      	b.n	800b562 <__sflush_r+0xda>
 800b58e:	bf00      	nop
 800b590:	20400001 	.word	0x20400001

0800b594 <_fflush_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	690b      	ldr	r3, [r1, #16]
 800b598:	4605      	mov	r5, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b913      	cbnz	r3, 800b5a4 <_fflush_r+0x10>
 800b59e:	2500      	movs	r5, #0
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	b118      	cbz	r0, 800b5ae <_fflush_r+0x1a>
 800b5a6:	6983      	ldr	r3, [r0, #24]
 800b5a8:	b90b      	cbnz	r3, 800b5ae <_fflush_r+0x1a>
 800b5aa:	f000 f887 	bl	800b6bc <__sinit>
 800b5ae:	4b14      	ldr	r3, [pc, #80]	; (800b600 <_fflush_r+0x6c>)
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d11b      	bne.n	800b5ec <_fflush_r+0x58>
 800b5b4:	686c      	ldr	r4, [r5, #4]
 800b5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0ef      	beq.n	800b59e <_fflush_r+0xa>
 800b5be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5c0:	07d0      	lsls	r0, r2, #31
 800b5c2:	d404      	bmi.n	800b5ce <_fflush_r+0x3a>
 800b5c4:	0599      	lsls	r1, r3, #22
 800b5c6:	d402      	bmi.n	800b5ce <_fflush_r+0x3a>
 800b5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ca:	f000 f915 	bl	800b7f8 <__retarget_lock_acquire_recursive>
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	f7ff ff59 	bl	800b488 <__sflush_r>
 800b5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5d8:	07da      	lsls	r2, r3, #31
 800b5da:	4605      	mov	r5, r0
 800b5dc:	d4e0      	bmi.n	800b5a0 <_fflush_r+0xc>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	059b      	lsls	r3, r3, #22
 800b5e2:	d4dd      	bmi.n	800b5a0 <_fflush_r+0xc>
 800b5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e6:	f000 f908 	bl	800b7fa <__retarget_lock_release_recursive>
 800b5ea:	e7d9      	b.n	800b5a0 <_fflush_r+0xc>
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <_fflush_r+0x70>)
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	d101      	bne.n	800b5f6 <_fflush_r+0x62>
 800b5f2:	68ac      	ldr	r4, [r5, #8]
 800b5f4:	e7df      	b.n	800b5b6 <_fflush_r+0x22>
 800b5f6:	4b04      	ldr	r3, [pc, #16]	; (800b608 <_fflush_r+0x74>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	bf08      	it	eq
 800b5fc:	68ec      	ldreq	r4, [r5, #12]
 800b5fe:	e7da      	b.n	800b5b6 <_fflush_r+0x22>
 800b600:	0800c2a4 	.word	0x0800c2a4
 800b604:	0800c2c4 	.word	0x0800c2c4
 800b608:	0800c284 	.word	0x0800c284

0800b60c <std>:
 800b60c:	2300      	movs	r3, #0
 800b60e:	b510      	push	{r4, lr}
 800b610:	4604      	mov	r4, r0
 800b612:	e9c0 3300 	strd	r3, r3, [r0]
 800b616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b61a:	6083      	str	r3, [r0, #8]
 800b61c:	8181      	strh	r1, [r0, #12]
 800b61e:	6643      	str	r3, [r0, #100]	; 0x64
 800b620:	81c2      	strh	r2, [r0, #14]
 800b622:	6183      	str	r3, [r0, #24]
 800b624:	4619      	mov	r1, r3
 800b626:	2208      	movs	r2, #8
 800b628:	305c      	adds	r0, #92	; 0x5c
 800b62a:	f7ff fdd7 	bl	800b1dc <memset>
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <std+0x38>)
 800b630:	6263      	str	r3, [r4, #36]	; 0x24
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <std+0x3c>)
 800b634:	62a3      	str	r3, [r4, #40]	; 0x28
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <std+0x40>)
 800b638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <std+0x44>)
 800b63c:	6224      	str	r4, [r4, #32]
 800b63e:	6323      	str	r3, [r4, #48]	; 0x30
 800b640:	bd10      	pop	{r4, pc}
 800b642:	bf00      	nop
 800b644:	0800c015 	.word	0x0800c015
 800b648:	0800c037 	.word	0x0800c037
 800b64c:	0800c06f 	.word	0x0800c06f
 800b650:	0800c093 	.word	0x0800c093

0800b654 <_cleanup_r>:
 800b654:	4901      	ldr	r1, [pc, #4]	; (800b65c <_cleanup_r+0x8>)
 800b656:	f000 b8af 	b.w	800b7b8 <_fwalk_reent>
 800b65a:	bf00      	nop
 800b65c:	0800b595 	.word	0x0800b595

0800b660 <__sfmoreglue>:
 800b660:	b570      	push	{r4, r5, r6, lr}
 800b662:	1e4a      	subs	r2, r1, #1
 800b664:	2568      	movs	r5, #104	; 0x68
 800b666:	4355      	muls	r5, r2
 800b668:	460e      	mov	r6, r1
 800b66a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b66e:	f000 f979 	bl	800b964 <_malloc_r>
 800b672:	4604      	mov	r4, r0
 800b674:	b140      	cbz	r0, 800b688 <__sfmoreglue+0x28>
 800b676:	2100      	movs	r1, #0
 800b678:	e9c0 1600 	strd	r1, r6, [r0]
 800b67c:	300c      	adds	r0, #12
 800b67e:	60a0      	str	r0, [r4, #8]
 800b680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b684:	f7ff fdaa 	bl	800b1dc <memset>
 800b688:	4620      	mov	r0, r4
 800b68a:	bd70      	pop	{r4, r5, r6, pc}

0800b68c <__sfp_lock_acquire>:
 800b68c:	4801      	ldr	r0, [pc, #4]	; (800b694 <__sfp_lock_acquire+0x8>)
 800b68e:	f000 b8b3 	b.w	800b7f8 <__retarget_lock_acquire_recursive>
 800b692:	bf00      	nop
 800b694:	2400066c 	.word	0x2400066c

0800b698 <__sfp_lock_release>:
 800b698:	4801      	ldr	r0, [pc, #4]	; (800b6a0 <__sfp_lock_release+0x8>)
 800b69a:	f000 b8ae 	b.w	800b7fa <__retarget_lock_release_recursive>
 800b69e:	bf00      	nop
 800b6a0:	2400066c 	.word	0x2400066c

0800b6a4 <__sinit_lock_acquire>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	; (800b6ac <__sinit_lock_acquire+0x8>)
 800b6a6:	f000 b8a7 	b.w	800b7f8 <__retarget_lock_acquire_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	24000667 	.word	0x24000667

0800b6b0 <__sinit_lock_release>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__sinit_lock_release+0x8>)
 800b6b2:	f000 b8a2 	b.w	800b7fa <__retarget_lock_release_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	24000667 	.word	0x24000667

0800b6bc <__sinit>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	4604      	mov	r4, r0
 800b6c0:	f7ff fff0 	bl	800b6a4 <__sinit_lock_acquire>
 800b6c4:	69a3      	ldr	r3, [r4, #24]
 800b6c6:	b11b      	cbz	r3, 800b6d0 <__sinit+0x14>
 800b6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6cc:	f7ff bff0 	b.w	800b6b0 <__sinit_lock_release>
 800b6d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6d4:	6523      	str	r3, [r4, #80]	; 0x50
 800b6d6:	4b13      	ldr	r3, [pc, #76]	; (800b724 <__sinit+0x68>)
 800b6d8:	4a13      	ldr	r2, [pc, #76]	; (800b728 <__sinit+0x6c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	bf04      	itt	eq
 800b6e2:	2301      	moveq	r3, #1
 800b6e4:	61a3      	streq	r3, [r4, #24]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 f820 	bl	800b72c <__sfp>
 800b6ec:	6060      	str	r0, [r4, #4]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 f81c 	bl	800b72c <__sfp>
 800b6f4:	60a0      	str	r0, [r4, #8]
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 f818 	bl	800b72c <__sfp>
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	60e0      	str	r0, [r4, #12]
 800b700:	2104      	movs	r1, #4
 800b702:	6860      	ldr	r0, [r4, #4]
 800b704:	f7ff ff82 	bl	800b60c <std>
 800b708:	68a0      	ldr	r0, [r4, #8]
 800b70a:	2201      	movs	r2, #1
 800b70c:	2109      	movs	r1, #9
 800b70e:	f7ff ff7d 	bl	800b60c <std>
 800b712:	68e0      	ldr	r0, [r4, #12]
 800b714:	2202      	movs	r2, #2
 800b716:	2112      	movs	r1, #18
 800b718:	f7ff ff78 	bl	800b60c <std>
 800b71c:	2301      	movs	r3, #1
 800b71e:	61a3      	str	r3, [r4, #24]
 800b720:	e7d2      	b.n	800b6c8 <__sinit+0xc>
 800b722:	bf00      	nop
 800b724:	0800c280 	.word	0x0800c280
 800b728:	0800b655 	.word	0x0800b655

0800b72c <__sfp>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	4607      	mov	r7, r0
 800b730:	f7ff ffac 	bl	800b68c <__sfp_lock_acquire>
 800b734:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <__sfp+0x84>)
 800b736:	681e      	ldr	r6, [r3, #0]
 800b738:	69b3      	ldr	r3, [r6, #24]
 800b73a:	b913      	cbnz	r3, 800b742 <__sfp+0x16>
 800b73c:	4630      	mov	r0, r6
 800b73e:	f7ff ffbd 	bl	800b6bc <__sinit>
 800b742:	3648      	adds	r6, #72	; 0x48
 800b744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b748:	3b01      	subs	r3, #1
 800b74a:	d503      	bpl.n	800b754 <__sfp+0x28>
 800b74c:	6833      	ldr	r3, [r6, #0]
 800b74e:	b30b      	cbz	r3, 800b794 <__sfp+0x68>
 800b750:	6836      	ldr	r6, [r6, #0]
 800b752:	e7f7      	b.n	800b744 <__sfp+0x18>
 800b754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b758:	b9d5      	cbnz	r5, 800b790 <__sfp+0x64>
 800b75a:	4b16      	ldr	r3, [pc, #88]	; (800b7b4 <__sfp+0x88>)
 800b75c:	60e3      	str	r3, [r4, #12]
 800b75e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b762:	6665      	str	r5, [r4, #100]	; 0x64
 800b764:	f000 f847 	bl	800b7f6 <__retarget_lock_init_recursive>
 800b768:	f7ff ff96 	bl	800b698 <__sfp_lock_release>
 800b76c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b774:	6025      	str	r5, [r4, #0]
 800b776:	61a5      	str	r5, [r4, #24]
 800b778:	2208      	movs	r2, #8
 800b77a:	4629      	mov	r1, r5
 800b77c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b780:	f7ff fd2c 	bl	800b1dc <memset>
 800b784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b78c:	4620      	mov	r0, r4
 800b78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b790:	3468      	adds	r4, #104	; 0x68
 800b792:	e7d9      	b.n	800b748 <__sfp+0x1c>
 800b794:	2104      	movs	r1, #4
 800b796:	4638      	mov	r0, r7
 800b798:	f7ff ff62 	bl	800b660 <__sfmoreglue>
 800b79c:	4604      	mov	r4, r0
 800b79e:	6030      	str	r0, [r6, #0]
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d1d5      	bne.n	800b750 <__sfp+0x24>
 800b7a4:	f7ff ff78 	bl	800b698 <__sfp_lock_release>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	603b      	str	r3, [r7, #0]
 800b7ac:	e7ee      	b.n	800b78c <__sfp+0x60>
 800b7ae:	bf00      	nop
 800b7b0:	0800c280 	.word	0x0800c280
 800b7b4:	ffff0001 	.word	0xffff0001

0800b7b8 <_fwalk_reent>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	4606      	mov	r6, r0
 800b7be:	4688      	mov	r8, r1
 800b7c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7c4:	2700      	movs	r7, #0
 800b7c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b7ce:	d505      	bpl.n	800b7dc <_fwalk_reent+0x24>
 800b7d0:	6824      	ldr	r4, [r4, #0]
 800b7d2:	2c00      	cmp	r4, #0
 800b7d4:	d1f7      	bne.n	800b7c6 <_fwalk_reent+0xe>
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7dc:	89ab      	ldrh	r3, [r5, #12]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d907      	bls.n	800b7f2 <_fwalk_reent+0x3a>
 800b7e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	d003      	beq.n	800b7f2 <_fwalk_reent+0x3a>
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	47c0      	blx	r8
 800b7f0:	4307      	orrs	r7, r0
 800b7f2:	3568      	adds	r5, #104	; 0x68
 800b7f4:	e7e9      	b.n	800b7ca <_fwalk_reent+0x12>

0800b7f6 <__retarget_lock_init_recursive>:
 800b7f6:	4770      	bx	lr

0800b7f8 <__retarget_lock_acquire_recursive>:
 800b7f8:	4770      	bx	lr

0800b7fa <__retarget_lock_release_recursive>:
 800b7fa:	4770      	bx	lr

0800b7fc <__swhatbuf_r>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	460e      	mov	r6, r1
 800b800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b804:	2900      	cmp	r1, #0
 800b806:	b096      	sub	sp, #88	; 0x58
 800b808:	4614      	mov	r4, r2
 800b80a:	461d      	mov	r5, r3
 800b80c:	da07      	bge.n	800b81e <__swhatbuf_r+0x22>
 800b80e:	2300      	movs	r3, #0
 800b810:	602b      	str	r3, [r5, #0]
 800b812:	89b3      	ldrh	r3, [r6, #12]
 800b814:	061a      	lsls	r2, r3, #24
 800b816:	d410      	bmi.n	800b83a <__swhatbuf_r+0x3e>
 800b818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81c:	e00e      	b.n	800b83c <__swhatbuf_r+0x40>
 800b81e:	466a      	mov	r2, sp
 800b820:	f000 fc5e 	bl	800c0e0 <_fstat_r>
 800b824:	2800      	cmp	r0, #0
 800b826:	dbf2      	blt.n	800b80e <__swhatbuf_r+0x12>
 800b828:	9a01      	ldr	r2, [sp, #4]
 800b82a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b82e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b832:	425a      	negs	r2, r3
 800b834:	415a      	adcs	r2, r3
 800b836:	602a      	str	r2, [r5, #0]
 800b838:	e7ee      	b.n	800b818 <__swhatbuf_r+0x1c>
 800b83a:	2340      	movs	r3, #64	; 0x40
 800b83c:	2000      	movs	r0, #0
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	b016      	add	sp, #88	; 0x58
 800b842:	bd70      	pop	{r4, r5, r6, pc}

0800b844 <__smakebuf_r>:
 800b844:	898b      	ldrh	r3, [r1, #12]
 800b846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b848:	079d      	lsls	r5, r3, #30
 800b84a:	4606      	mov	r6, r0
 800b84c:	460c      	mov	r4, r1
 800b84e:	d507      	bpl.n	800b860 <__smakebuf_r+0x1c>
 800b850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	6123      	str	r3, [r4, #16]
 800b858:	2301      	movs	r3, #1
 800b85a:	6163      	str	r3, [r4, #20]
 800b85c:	b002      	add	sp, #8
 800b85e:	bd70      	pop	{r4, r5, r6, pc}
 800b860:	ab01      	add	r3, sp, #4
 800b862:	466a      	mov	r2, sp
 800b864:	f7ff ffca 	bl	800b7fc <__swhatbuf_r>
 800b868:	9900      	ldr	r1, [sp, #0]
 800b86a:	4605      	mov	r5, r0
 800b86c:	4630      	mov	r0, r6
 800b86e:	f000 f879 	bl	800b964 <_malloc_r>
 800b872:	b948      	cbnz	r0, 800b888 <__smakebuf_r+0x44>
 800b874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b878:	059a      	lsls	r2, r3, #22
 800b87a:	d4ef      	bmi.n	800b85c <__smakebuf_r+0x18>
 800b87c:	f023 0303 	bic.w	r3, r3, #3
 800b880:	f043 0302 	orr.w	r3, r3, #2
 800b884:	81a3      	strh	r3, [r4, #12]
 800b886:	e7e3      	b.n	800b850 <__smakebuf_r+0xc>
 800b888:	4b0d      	ldr	r3, [pc, #52]	; (800b8c0 <__smakebuf_r+0x7c>)
 800b88a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	6020      	str	r0, [r4, #0]
 800b890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b894:	81a3      	strh	r3, [r4, #12]
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	6163      	str	r3, [r4, #20]
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	6120      	str	r0, [r4, #16]
 800b89e:	b15b      	cbz	r3, 800b8b8 <__smakebuf_r+0x74>
 800b8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f000 fc2d 	bl	800c104 <_isatty_r>
 800b8aa:	b128      	cbz	r0, 800b8b8 <__smakebuf_r+0x74>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f023 0303 	bic.w	r3, r3, #3
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	89a0      	ldrh	r0, [r4, #12]
 800b8ba:	4305      	orrs	r5, r0
 800b8bc:	81a5      	strh	r5, [r4, #12]
 800b8be:	e7cd      	b.n	800b85c <__smakebuf_r+0x18>
 800b8c0:	0800b655 	.word	0x0800b655

0800b8c4 <_free_r>:
 800b8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	d048      	beq.n	800b95c <_free_r+0x98>
 800b8ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ce:	9001      	str	r0, [sp, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b8d6:	bfb8      	it	lt
 800b8d8:	18e4      	addlt	r4, r4, r3
 800b8da:	f000 fc35 	bl	800c148 <__malloc_lock>
 800b8de:	4a20      	ldr	r2, [pc, #128]	; (800b960 <_free_r+0x9c>)
 800b8e0:	9801      	ldr	r0, [sp, #4]
 800b8e2:	6813      	ldr	r3, [r2, #0]
 800b8e4:	4615      	mov	r5, r2
 800b8e6:	b933      	cbnz	r3, 800b8f6 <_free_r+0x32>
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	6014      	str	r4, [r2, #0]
 800b8ec:	b003      	add	sp, #12
 800b8ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8f2:	f000 bc2f 	b.w	800c154 <__malloc_unlock>
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	d90b      	bls.n	800b912 <_free_r+0x4e>
 800b8fa:	6821      	ldr	r1, [r4, #0]
 800b8fc:	1862      	adds	r2, r4, r1
 800b8fe:	4293      	cmp	r3, r2
 800b900:	bf04      	itt	eq
 800b902:	681a      	ldreq	r2, [r3, #0]
 800b904:	685b      	ldreq	r3, [r3, #4]
 800b906:	6063      	str	r3, [r4, #4]
 800b908:	bf04      	itt	eq
 800b90a:	1852      	addeq	r2, r2, r1
 800b90c:	6022      	streq	r2, [r4, #0]
 800b90e:	602c      	str	r4, [r5, #0]
 800b910:	e7ec      	b.n	800b8ec <_free_r+0x28>
 800b912:	461a      	mov	r2, r3
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	b10b      	cbz	r3, 800b91c <_free_r+0x58>
 800b918:	42a3      	cmp	r3, r4
 800b91a:	d9fa      	bls.n	800b912 <_free_r+0x4e>
 800b91c:	6811      	ldr	r1, [r2, #0]
 800b91e:	1855      	adds	r5, r2, r1
 800b920:	42a5      	cmp	r5, r4
 800b922:	d10b      	bne.n	800b93c <_free_r+0x78>
 800b924:	6824      	ldr	r4, [r4, #0]
 800b926:	4421      	add	r1, r4
 800b928:	1854      	adds	r4, r2, r1
 800b92a:	42a3      	cmp	r3, r4
 800b92c:	6011      	str	r1, [r2, #0]
 800b92e:	d1dd      	bne.n	800b8ec <_free_r+0x28>
 800b930:	681c      	ldr	r4, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	6053      	str	r3, [r2, #4]
 800b936:	4421      	add	r1, r4
 800b938:	6011      	str	r1, [r2, #0]
 800b93a:	e7d7      	b.n	800b8ec <_free_r+0x28>
 800b93c:	d902      	bls.n	800b944 <_free_r+0x80>
 800b93e:	230c      	movs	r3, #12
 800b940:	6003      	str	r3, [r0, #0]
 800b942:	e7d3      	b.n	800b8ec <_free_r+0x28>
 800b944:	6825      	ldr	r5, [r4, #0]
 800b946:	1961      	adds	r1, r4, r5
 800b948:	428b      	cmp	r3, r1
 800b94a:	bf04      	itt	eq
 800b94c:	6819      	ldreq	r1, [r3, #0]
 800b94e:	685b      	ldreq	r3, [r3, #4]
 800b950:	6063      	str	r3, [r4, #4]
 800b952:	bf04      	itt	eq
 800b954:	1949      	addeq	r1, r1, r5
 800b956:	6021      	streq	r1, [r4, #0]
 800b958:	6054      	str	r4, [r2, #4]
 800b95a:	e7c7      	b.n	800b8ec <_free_r+0x28>
 800b95c:	b003      	add	sp, #12
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	240000a0 	.word	0x240000a0

0800b964 <_malloc_r>:
 800b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b966:	1ccd      	adds	r5, r1, #3
 800b968:	f025 0503 	bic.w	r5, r5, #3
 800b96c:	3508      	adds	r5, #8
 800b96e:	2d0c      	cmp	r5, #12
 800b970:	bf38      	it	cc
 800b972:	250c      	movcc	r5, #12
 800b974:	2d00      	cmp	r5, #0
 800b976:	4606      	mov	r6, r0
 800b978:	db01      	blt.n	800b97e <_malloc_r+0x1a>
 800b97a:	42a9      	cmp	r1, r5
 800b97c:	d903      	bls.n	800b986 <_malloc_r+0x22>
 800b97e:	230c      	movs	r3, #12
 800b980:	6033      	str	r3, [r6, #0]
 800b982:	2000      	movs	r0, #0
 800b984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b986:	f000 fbdf 	bl	800c148 <__malloc_lock>
 800b98a:	4921      	ldr	r1, [pc, #132]	; (800ba10 <_malloc_r+0xac>)
 800b98c:	680a      	ldr	r2, [r1, #0]
 800b98e:	4614      	mov	r4, r2
 800b990:	b99c      	cbnz	r4, 800b9ba <_malloc_r+0x56>
 800b992:	4f20      	ldr	r7, [pc, #128]	; (800ba14 <_malloc_r+0xb0>)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	b923      	cbnz	r3, 800b9a2 <_malloc_r+0x3e>
 800b998:	4621      	mov	r1, r4
 800b99a:	4630      	mov	r0, r6
 800b99c:	f000 fb2a 	bl	800bff4 <_sbrk_r>
 800b9a0:	6038      	str	r0, [r7, #0]
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	f000 fb25 	bl	800bff4 <_sbrk_r>
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	d123      	bne.n	800b9f6 <_malloc_r+0x92>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	6033      	str	r3, [r6, #0]
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f000 fbce 	bl	800c154 <__malloc_unlock>
 800b9b8:	e7e3      	b.n	800b982 <_malloc_r+0x1e>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	1b5b      	subs	r3, r3, r5
 800b9be:	d417      	bmi.n	800b9f0 <_malloc_r+0x8c>
 800b9c0:	2b0b      	cmp	r3, #11
 800b9c2:	d903      	bls.n	800b9cc <_malloc_r+0x68>
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	441c      	add	r4, r3
 800b9c8:	6025      	str	r5, [r4, #0]
 800b9ca:	e004      	b.n	800b9d6 <_malloc_r+0x72>
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	42a2      	cmp	r2, r4
 800b9d0:	bf0c      	ite	eq
 800b9d2:	600b      	streq	r3, [r1, #0]
 800b9d4:	6053      	strne	r3, [r2, #4]
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f000 fbbc 	bl	800c154 <__malloc_unlock>
 800b9dc:	f104 000b 	add.w	r0, r4, #11
 800b9e0:	1d23      	adds	r3, r4, #4
 800b9e2:	f020 0007 	bic.w	r0, r0, #7
 800b9e6:	1ac2      	subs	r2, r0, r3
 800b9e8:	d0cc      	beq.n	800b984 <_malloc_r+0x20>
 800b9ea:	1a1b      	subs	r3, r3, r0
 800b9ec:	50a3      	str	r3, [r4, r2]
 800b9ee:	e7c9      	b.n	800b984 <_malloc_r+0x20>
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	6864      	ldr	r4, [r4, #4]
 800b9f4:	e7cc      	b.n	800b990 <_malloc_r+0x2c>
 800b9f6:	1cc4      	adds	r4, r0, #3
 800b9f8:	f024 0403 	bic.w	r4, r4, #3
 800b9fc:	42a0      	cmp	r0, r4
 800b9fe:	d0e3      	beq.n	800b9c8 <_malloc_r+0x64>
 800ba00:	1a21      	subs	r1, r4, r0
 800ba02:	4630      	mov	r0, r6
 800ba04:	f000 faf6 	bl	800bff4 <_sbrk_r>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d1dd      	bne.n	800b9c8 <_malloc_r+0x64>
 800ba0c:	e7cf      	b.n	800b9ae <_malloc_r+0x4a>
 800ba0e:	bf00      	nop
 800ba10:	240000a0 	.word	0x240000a0
 800ba14:	240000a4 	.word	0x240000a4

0800ba18 <__sfputc_r>:
 800ba18:	6893      	ldr	r3, [r2, #8]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	b410      	push	{r4}
 800ba20:	6093      	str	r3, [r2, #8]
 800ba22:	da08      	bge.n	800ba36 <__sfputc_r+0x1e>
 800ba24:	6994      	ldr	r4, [r2, #24]
 800ba26:	42a3      	cmp	r3, r4
 800ba28:	db01      	blt.n	800ba2e <__sfputc_r+0x16>
 800ba2a:	290a      	cmp	r1, #10
 800ba2c:	d103      	bne.n	800ba36 <__sfputc_r+0x1e>
 800ba2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba32:	f7ff bc69 	b.w	800b308 <__swbuf_r>
 800ba36:	6813      	ldr	r3, [r2, #0]
 800ba38:	1c58      	adds	r0, r3, #1
 800ba3a:	6010      	str	r0, [r2, #0]
 800ba3c:	7019      	strb	r1, [r3, #0]
 800ba3e:	4608      	mov	r0, r1
 800ba40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <__sfputs_r>:
 800ba46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba48:	4606      	mov	r6, r0
 800ba4a:	460f      	mov	r7, r1
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	18d5      	adds	r5, r2, r3
 800ba50:	42ac      	cmp	r4, r5
 800ba52:	d101      	bne.n	800ba58 <__sfputs_r+0x12>
 800ba54:	2000      	movs	r0, #0
 800ba56:	e007      	b.n	800ba68 <__sfputs_r+0x22>
 800ba58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5c:	463a      	mov	r2, r7
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f7ff ffda 	bl	800ba18 <__sfputc_r>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d1f3      	bne.n	800ba50 <__sfputs_r+0xa>
 800ba68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba6c <_vfiprintf_r>:
 800ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	460d      	mov	r5, r1
 800ba72:	b09d      	sub	sp, #116	; 0x74
 800ba74:	4614      	mov	r4, r2
 800ba76:	4698      	mov	r8, r3
 800ba78:	4606      	mov	r6, r0
 800ba7a:	b118      	cbz	r0, 800ba84 <_vfiprintf_r+0x18>
 800ba7c:	6983      	ldr	r3, [r0, #24]
 800ba7e:	b90b      	cbnz	r3, 800ba84 <_vfiprintf_r+0x18>
 800ba80:	f7ff fe1c 	bl	800b6bc <__sinit>
 800ba84:	4b89      	ldr	r3, [pc, #548]	; (800bcac <_vfiprintf_r+0x240>)
 800ba86:	429d      	cmp	r5, r3
 800ba88:	d11b      	bne.n	800bac2 <_vfiprintf_r+0x56>
 800ba8a:	6875      	ldr	r5, [r6, #4]
 800ba8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba8e:	07d9      	lsls	r1, r3, #31
 800ba90:	d405      	bmi.n	800ba9e <_vfiprintf_r+0x32>
 800ba92:	89ab      	ldrh	r3, [r5, #12]
 800ba94:	059a      	lsls	r2, r3, #22
 800ba96:	d402      	bmi.n	800ba9e <_vfiprintf_r+0x32>
 800ba98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba9a:	f7ff fead 	bl	800b7f8 <__retarget_lock_acquire_recursive>
 800ba9e:	89ab      	ldrh	r3, [r5, #12]
 800baa0:	071b      	lsls	r3, r3, #28
 800baa2:	d501      	bpl.n	800baa8 <_vfiprintf_r+0x3c>
 800baa4:	692b      	ldr	r3, [r5, #16]
 800baa6:	b9eb      	cbnz	r3, 800bae4 <_vfiprintf_r+0x78>
 800baa8:	4629      	mov	r1, r5
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff fc7e 	bl	800b3ac <__swsetup_r>
 800bab0:	b1c0      	cbz	r0, 800bae4 <_vfiprintf_r+0x78>
 800bab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab4:	07dc      	lsls	r4, r3, #31
 800bab6:	d50e      	bpl.n	800bad6 <_vfiprintf_r+0x6a>
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	b01d      	add	sp, #116	; 0x74
 800babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac2:	4b7b      	ldr	r3, [pc, #492]	; (800bcb0 <_vfiprintf_r+0x244>)
 800bac4:	429d      	cmp	r5, r3
 800bac6:	d101      	bne.n	800bacc <_vfiprintf_r+0x60>
 800bac8:	68b5      	ldr	r5, [r6, #8]
 800baca:	e7df      	b.n	800ba8c <_vfiprintf_r+0x20>
 800bacc:	4b79      	ldr	r3, [pc, #484]	; (800bcb4 <_vfiprintf_r+0x248>)
 800bace:	429d      	cmp	r5, r3
 800bad0:	bf08      	it	eq
 800bad2:	68f5      	ldreq	r5, [r6, #12]
 800bad4:	e7da      	b.n	800ba8c <_vfiprintf_r+0x20>
 800bad6:	89ab      	ldrh	r3, [r5, #12]
 800bad8:	0598      	lsls	r0, r3, #22
 800bada:	d4ed      	bmi.n	800bab8 <_vfiprintf_r+0x4c>
 800badc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bade:	f7ff fe8c 	bl	800b7fa <__retarget_lock_release_recursive>
 800bae2:	e7e9      	b.n	800bab8 <_vfiprintf_r+0x4c>
 800bae4:	2300      	movs	r3, #0
 800bae6:	9309      	str	r3, [sp, #36]	; 0x24
 800bae8:	2320      	movs	r3, #32
 800baea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baee:	f8cd 800c 	str.w	r8, [sp, #12]
 800baf2:	2330      	movs	r3, #48	; 0x30
 800baf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcb8 <_vfiprintf_r+0x24c>
 800baf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bafc:	f04f 0901 	mov.w	r9, #1
 800bb00:	4623      	mov	r3, r4
 800bb02:	469a      	mov	sl, r3
 800bb04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb08:	b10a      	cbz	r2, 800bb0e <_vfiprintf_r+0xa2>
 800bb0a:	2a25      	cmp	r2, #37	; 0x25
 800bb0c:	d1f9      	bne.n	800bb02 <_vfiprintf_r+0x96>
 800bb0e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb12:	d00b      	beq.n	800bb2c <_vfiprintf_r+0xc0>
 800bb14:	465b      	mov	r3, fp
 800bb16:	4622      	mov	r2, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7ff ff93 	bl	800ba46 <__sfputs_r>
 800bb20:	3001      	adds	r0, #1
 800bb22:	f000 80aa 	beq.w	800bc7a <_vfiprintf_r+0x20e>
 800bb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb28:	445a      	add	r2, fp
 800bb2a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 80a2 	beq.w	800bc7a <_vfiprintf_r+0x20e>
 800bb36:	2300      	movs	r3, #0
 800bb38:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb40:	f10a 0a01 	add.w	sl, sl, #1
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	9307      	str	r3, [sp, #28]
 800bb48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb4c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb4e:	4654      	mov	r4, sl
 800bb50:	2205      	movs	r2, #5
 800bb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb56:	4858      	ldr	r0, [pc, #352]	; (800bcb8 <_vfiprintf_r+0x24c>)
 800bb58:	f7f4 fbda 	bl	8000310 <memchr>
 800bb5c:	9a04      	ldr	r2, [sp, #16]
 800bb5e:	b9d8      	cbnz	r0, 800bb98 <_vfiprintf_r+0x12c>
 800bb60:	06d1      	lsls	r1, r2, #27
 800bb62:	bf44      	itt	mi
 800bb64:	2320      	movmi	r3, #32
 800bb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb6a:	0713      	lsls	r3, r2, #28
 800bb6c:	bf44      	itt	mi
 800bb6e:	232b      	movmi	r3, #43	; 0x2b
 800bb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb74:	f89a 3000 	ldrb.w	r3, [sl]
 800bb78:	2b2a      	cmp	r3, #42	; 0x2a
 800bb7a:	d015      	beq.n	800bba8 <_vfiprintf_r+0x13c>
 800bb7c:	9a07      	ldr	r2, [sp, #28]
 800bb7e:	4654      	mov	r4, sl
 800bb80:	2000      	movs	r0, #0
 800bb82:	f04f 0c0a 	mov.w	ip, #10
 800bb86:	4621      	mov	r1, r4
 800bb88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb8c:	3b30      	subs	r3, #48	; 0x30
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	d94e      	bls.n	800bc30 <_vfiprintf_r+0x1c4>
 800bb92:	b1b0      	cbz	r0, 800bbc2 <_vfiprintf_r+0x156>
 800bb94:	9207      	str	r2, [sp, #28]
 800bb96:	e014      	b.n	800bbc2 <_vfiprintf_r+0x156>
 800bb98:	eba0 0308 	sub.w	r3, r0, r8
 800bb9c:	fa09 f303 	lsl.w	r3, r9, r3
 800bba0:	4313      	orrs	r3, r2
 800bba2:	9304      	str	r3, [sp, #16]
 800bba4:	46a2      	mov	sl, r4
 800bba6:	e7d2      	b.n	800bb4e <_vfiprintf_r+0xe2>
 800bba8:	9b03      	ldr	r3, [sp, #12]
 800bbaa:	1d19      	adds	r1, r3, #4
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	9103      	str	r1, [sp, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	bfbb      	ittet	lt
 800bbb4:	425b      	neglt	r3, r3
 800bbb6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbba:	9307      	strge	r3, [sp, #28]
 800bbbc:	9307      	strlt	r3, [sp, #28]
 800bbbe:	bfb8      	it	lt
 800bbc0:	9204      	strlt	r2, [sp, #16]
 800bbc2:	7823      	ldrb	r3, [r4, #0]
 800bbc4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc6:	d10c      	bne.n	800bbe2 <_vfiprintf_r+0x176>
 800bbc8:	7863      	ldrb	r3, [r4, #1]
 800bbca:	2b2a      	cmp	r3, #42	; 0x2a
 800bbcc:	d135      	bne.n	800bc3a <_vfiprintf_r+0x1ce>
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	1d1a      	adds	r2, r3, #4
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	9203      	str	r2, [sp, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bfb8      	it	lt
 800bbda:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbde:	3402      	adds	r4, #2
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcc8 <_vfiprintf_r+0x25c>
 800bbe6:	7821      	ldrb	r1, [r4, #0]
 800bbe8:	2203      	movs	r2, #3
 800bbea:	4650      	mov	r0, sl
 800bbec:	f7f4 fb90 	bl	8000310 <memchr>
 800bbf0:	b140      	cbz	r0, 800bc04 <_vfiprintf_r+0x198>
 800bbf2:	2340      	movs	r3, #64	; 0x40
 800bbf4:	eba0 000a 	sub.w	r0, r0, sl
 800bbf8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbfc:	9b04      	ldr	r3, [sp, #16]
 800bbfe:	4303      	orrs	r3, r0
 800bc00:	3401      	adds	r4, #1
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc08:	482c      	ldr	r0, [pc, #176]	; (800bcbc <_vfiprintf_r+0x250>)
 800bc0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc0e:	2206      	movs	r2, #6
 800bc10:	f7f4 fb7e 	bl	8000310 <memchr>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d03f      	beq.n	800bc98 <_vfiprintf_r+0x22c>
 800bc18:	4b29      	ldr	r3, [pc, #164]	; (800bcc0 <_vfiprintf_r+0x254>)
 800bc1a:	bb1b      	cbnz	r3, 800bc64 <_vfiprintf_r+0x1f8>
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	3307      	adds	r3, #7
 800bc20:	f023 0307 	bic.w	r3, r3, #7
 800bc24:	3308      	adds	r3, #8
 800bc26:	9303      	str	r3, [sp, #12]
 800bc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2a:	443b      	add	r3, r7
 800bc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2e:	e767      	b.n	800bb00 <_vfiprintf_r+0x94>
 800bc30:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc34:	460c      	mov	r4, r1
 800bc36:	2001      	movs	r0, #1
 800bc38:	e7a5      	b.n	800bb86 <_vfiprintf_r+0x11a>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	3401      	adds	r4, #1
 800bc3e:	9305      	str	r3, [sp, #20]
 800bc40:	4619      	mov	r1, r3
 800bc42:	f04f 0c0a 	mov.w	ip, #10
 800bc46:	4620      	mov	r0, r4
 800bc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc4c:	3a30      	subs	r2, #48	; 0x30
 800bc4e:	2a09      	cmp	r2, #9
 800bc50:	d903      	bls.n	800bc5a <_vfiprintf_r+0x1ee>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0c5      	beq.n	800bbe2 <_vfiprintf_r+0x176>
 800bc56:	9105      	str	r1, [sp, #20]
 800bc58:	e7c3      	b.n	800bbe2 <_vfiprintf_r+0x176>
 800bc5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5e:	4604      	mov	r4, r0
 800bc60:	2301      	movs	r3, #1
 800bc62:	e7f0      	b.n	800bc46 <_vfiprintf_r+0x1da>
 800bc64:	ab03      	add	r3, sp, #12
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	462a      	mov	r2, r5
 800bc6a:	4b16      	ldr	r3, [pc, #88]	; (800bcc4 <_vfiprintf_r+0x258>)
 800bc6c:	a904      	add	r1, sp, #16
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f3af 8000 	nop.w
 800bc74:	4607      	mov	r7, r0
 800bc76:	1c78      	adds	r0, r7, #1
 800bc78:	d1d6      	bne.n	800bc28 <_vfiprintf_r+0x1bc>
 800bc7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc7c:	07d9      	lsls	r1, r3, #31
 800bc7e:	d405      	bmi.n	800bc8c <_vfiprintf_r+0x220>
 800bc80:	89ab      	ldrh	r3, [r5, #12]
 800bc82:	059a      	lsls	r2, r3, #22
 800bc84:	d402      	bmi.n	800bc8c <_vfiprintf_r+0x220>
 800bc86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc88:	f7ff fdb7 	bl	800b7fa <__retarget_lock_release_recursive>
 800bc8c:	89ab      	ldrh	r3, [r5, #12]
 800bc8e:	065b      	lsls	r3, r3, #25
 800bc90:	f53f af12 	bmi.w	800bab8 <_vfiprintf_r+0x4c>
 800bc94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc96:	e711      	b.n	800babc <_vfiprintf_r+0x50>
 800bc98:	ab03      	add	r3, sp, #12
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <_vfiprintf_r+0x258>)
 800bca0:	a904      	add	r1, sp, #16
 800bca2:	4630      	mov	r0, r6
 800bca4:	f000 f880 	bl	800bda8 <_printf_i>
 800bca8:	e7e4      	b.n	800bc74 <_vfiprintf_r+0x208>
 800bcaa:	bf00      	nop
 800bcac:	0800c2a4 	.word	0x0800c2a4
 800bcb0:	0800c2c4 	.word	0x0800c2c4
 800bcb4:	0800c284 	.word	0x0800c284
 800bcb8:	0800c2e4 	.word	0x0800c2e4
 800bcbc:	0800c2ee 	.word	0x0800c2ee
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	0800ba47 	.word	0x0800ba47
 800bcc8:	0800c2ea 	.word	0x0800c2ea

0800bccc <_printf_common>:
 800bccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	4699      	mov	r9, r3
 800bcd4:	688a      	ldr	r2, [r1, #8]
 800bcd6:	690b      	ldr	r3, [r1, #16]
 800bcd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	bfb8      	it	lt
 800bce0:	4613      	movlt	r3, r2
 800bce2:	6033      	str	r3, [r6, #0]
 800bce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bce8:	4607      	mov	r7, r0
 800bcea:	460c      	mov	r4, r1
 800bcec:	b10a      	cbz	r2, 800bcf2 <_printf_common+0x26>
 800bcee:	3301      	adds	r3, #1
 800bcf0:	6033      	str	r3, [r6, #0]
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	0699      	lsls	r1, r3, #26
 800bcf6:	bf42      	ittt	mi
 800bcf8:	6833      	ldrmi	r3, [r6, #0]
 800bcfa:	3302      	addmi	r3, #2
 800bcfc:	6033      	strmi	r3, [r6, #0]
 800bcfe:	6825      	ldr	r5, [r4, #0]
 800bd00:	f015 0506 	ands.w	r5, r5, #6
 800bd04:	d106      	bne.n	800bd14 <_printf_common+0x48>
 800bd06:	f104 0a19 	add.w	sl, r4, #25
 800bd0a:	68e3      	ldr	r3, [r4, #12]
 800bd0c:	6832      	ldr	r2, [r6, #0]
 800bd0e:	1a9b      	subs	r3, r3, r2
 800bd10:	42ab      	cmp	r3, r5
 800bd12:	dc26      	bgt.n	800bd62 <_printf_common+0x96>
 800bd14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd18:	1e13      	subs	r3, r2, #0
 800bd1a:	6822      	ldr	r2, [r4, #0]
 800bd1c:	bf18      	it	ne
 800bd1e:	2301      	movne	r3, #1
 800bd20:	0692      	lsls	r2, r2, #26
 800bd22:	d42b      	bmi.n	800bd7c <_printf_common+0xb0>
 800bd24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd28:	4649      	mov	r1, r9
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	47c0      	blx	r8
 800bd2e:	3001      	adds	r0, #1
 800bd30:	d01e      	beq.n	800bd70 <_printf_common+0xa4>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	68e5      	ldr	r5, [r4, #12]
 800bd36:	6832      	ldr	r2, [r6, #0]
 800bd38:	f003 0306 	and.w	r3, r3, #6
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	bf08      	it	eq
 800bd40:	1aad      	subeq	r5, r5, r2
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	6922      	ldr	r2, [r4, #16]
 800bd46:	bf0c      	ite	eq
 800bd48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd4c:	2500      	movne	r5, #0
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	bfc4      	itt	gt
 800bd52:	1a9b      	subgt	r3, r3, r2
 800bd54:	18ed      	addgt	r5, r5, r3
 800bd56:	2600      	movs	r6, #0
 800bd58:	341a      	adds	r4, #26
 800bd5a:	42b5      	cmp	r5, r6
 800bd5c:	d11a      	bne.n	800bd94 <_printf_common+0xc8>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e008      	b.n	800bd74 <_printf_common+0xa8>
 800bd62:	2301      	movs	r3, #1
 800bd64:	4652      	mov	r2, sl
 800bd66:	4649      	mov	r1, r9
 800bd68:	4638      	mov	r0, r7
 800bd6a:	47c0      	blx	r8
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d103      	bne.n	800bd78 <_printf_common+0xac>
 800bd70:	f04f 30ff 	mov.w	r0, #4294967295
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	3501      	adds	r5, #1
 800bd7a:	e7c6      	b.n	800bd0a <_printf_common+0x3e>
 800bd7c:	18e1      	adds	r1, r4, r3
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	2030      	movs	r0, #48	; 0x30
 800bd82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd86:	4422      	add	r2, r4
 800bd88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd90:	3302      	adds	r3, #2
 800bd92:	e7c7      	b.n	800bd24 <_printf_common+0x58>
 800bd94:	2301      	movs	r3, #1
 800bd96:	4622      	mov	r2, r4
 800bd98:	4649      	mov	r1, r9
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	47c0      	blx	r8
 800bd9e:	3001      	adds	r0, #1
 800bda0:	d0e6      	beq.n	800bd70 <_printf_common+0xa4>
 800bda2:	3601      	adds	r6, #1
 800bda4:	e7d9      	b.n	800bd5a <_printf_common+0x8e>
	...

0800bda8 <_printf_i>:
 800bda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	460c      	mov	r4, r1
 800bdae:	4691      	mov	r9, r2
 800bdb0:	7e27      	ldrb	r7, [r4, #24]
 800bdb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdb4:	2f78      	cmp	r7, #120	; 0x78
 800bdb6:	4680      	mov	r8, r0
 800bdb8:	469a      	mov	sl, r3
 800bdba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdbe:	d807      	bhi.n	800bdd0 <_printf_i+0x28>
 800bdc0:	2f62      	cmp	r7, #98	; 0x62
 800bdc2:	d80a      	bhi.n	800bdda <_printf_i+0x32>
 800bdc4:	2f00      	cmp	r7, #0
 800bdc6:	f000 80d8 	beq.w	800bf7a <_printf_i+0x1d2>
 800bdca:	2f58      	cmp	r7, #88	; 0x58
 800bdcc:	f000 80a3 	beq.w	800bf16 <_printf_i+0x16e>
 800bdd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdd8:	e03a      	b.n	800be50 <_printf_i+0xa8>
 800bdda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdde:	2b15      	cmp	r3, #21
 800bde0:	d8f6      	bhi.n	800bdd0 <_printf_i+0x28>
 800bde2:	a001      	add	r0, pc, #4	; (adr r0, 800bde8 <_printf_i+0x40>)
 800bde4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bde8:	0800be41 	.word	0x0800be41
 800bdec:	0800be55 	.word	0x0800be55
 800bdf0:	0800bdd1 	.word	0x0800bdd1
 800bdf4:	0800bdd1 	.word	0x0800bdd1
 800bdf8:	0800bdd1 	.word	0x0800bdd1
 800bdfc:	0800bdd1 	.word	0x0800bdd1
 800be00:	0800be55 	.word	0x0800be55
 800be04:	0800bdd1 	.word	0x0800bdd1
 800be08:	0800bdd1 	.word	0x0800bdd1
 800be0c:	0800bdd1 	.word	0x0800bdd1
 800be10:	0800bdd1 	.word	0x0800bdd1
 800be14:	0800bf61 	.word	0x0800bf61
 800be18:	0800be85 	.word	0x0800be85
 800be1c:	0800bf43 	.word	0x0800bf43
 800be20:	0800bdd1 	.word	0x0800bdd1
 800be24:	0800bdd1 	.word	0x0800bdd1
 800be28:	0800bf83 	.word	0x0800bf83
 800be2c:	0800bdd1 	.word	0x0800bdd1
 800be30:	0800be85 	.word	0x0800be85
 800be34:	0800bdd1 	.word	0x0800bdd1
 800be38:	0800bdd1 	.word	0x0800bdd1
 800be3c:	0800bf4b 	.word	0x0800bf4b
 800be40:	680b      	ldr	r3, [r1, #0]
 800be42:	1d1a      	adds	r2, r3, #4
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	600a      	str	r2, [r1, #0]
 800be48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be50:	2301      	movs	r3, #1
 800be52:	e0a3      	b.n	800bf9c <_printf_i+0x1f4>
 800be54:	6825      	ldr	r5, [r4, #0]
 800be56:	6808      	ldr	r0, [r1, #0]
 800be58:	062e      	lsls	r6, r5, #24
 800be5a:	f100 0304 	add.w	r3, r0, #4
 800be5e:	d50a      	bpl.n	800be76 <_printf_i+0xce>
 800be60:	6805      	ldr	r5, [r0, #0]
 800be62:	600b      	str	r3, [r1, #0]
 800be64:	2d00      	cmp	r5, #0
 800be66:	da03      	bge.n	800be70 <_printf_i+0xc8>
 800be68:	232d      	movs	r3, #45	; 0x2d
 800be6a:	426d      	negs	r5, r5
 800be6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be70:	485e      	ldr	r0, [pc, #376]	; (800bfec <_printf_i+0x244>)
 800be72:	230a      	movs	r3, #10
 800be74:	e019      	b.n	800beaa <_printf_i+0x102>
 800be76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be7a:	6805      	ldr	r5, [r0, #0]
 800be7c:	600b      	str	r3, [r1, #0]
 800be7e:	bf18      	it	ne
 800be80:	b22d      	sxthne	r5, r5
 800be82:	e7ef      	b.n	800be64 <_printf_i+0xbc>
 800be84:	680b      	ldr	r3, [r1, #0]
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	1d18      	adds	r0, r3, #4
 800be8a:	6008      	str	r0, [r1, #0]
 800be8c:	0628      	lsls	r0, r5, #24
 800be8e:	d501      	bpl.n	800be94 <_printf_i+0xec>
 800be90:	681d      	ldr	r5, [r3, #0]
 800be92:	e002      	b.n	800be9a <_printf_i+0xf2>
 800be94:	0669      	lsls	r1, r5, #25
 800be96:	d5fb      	bpl.n	800be90 <_printf_i+0xe8>
 800be98:	881d      	ldrh	r5, [r3, #0]
 800be9a:	4854      	ldr	r0, [pc, #336]	; (800bfec <_printf_i+0x244>)
 800be9c:	2f6f      	cmp	r7, #111	; 0x6f
 800be9e:	bf0c      	ite	eq
 800bea0:	2308      	moveq	r3, #8
 800bea2:	230a      	movne	r3, #10
 800bea4:	2100      	movs	r1, #0
 800bea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beaa:	6866      	ldr	r6, [r4, #4]
 800beac:	60a6      	str	r6, [r4, #8]
 800beae:	2e00      	cmp	r6, #0
 800beb0:	bfa2      	ittt	ge
 800beb2:	6821      	ldrge	r1, [r4, #0]
 800beb4:	f021 0104 	bicge.w	r1, r1, #4
 800beb8:	6021      	strge	r1, [r4, #0]
 800beba:	b90d      	cbnz	r5, 800bec0 <_printf_i+0x118>
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	d04d      	beq.n	800bf5c <_printf_i+0x1b4>
 800bec0:	4616      	mov	r6, r2
 800bec2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bec6:	fb03 5711 	mls	r7, r3, r1, r5
 800beca:	5dc7      	ldrb	r7, [r0, r7]
 800becc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bed0:	462f      	mov	r7, r5
 800bed2:	42bb      	cmp	r3, r7
 800bed4:	460d      	mov	r5, r1
 800bed6:	d9f4      	bls.n	800bec2 <_printf_i+0x11a>
 800bed8:	2b08      	cmp	r3, #8
 800beda:	d10b      	bne.n	800bef4 <_printf_i+0x14c>
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	07df      	lsls	r7, r3, #31
 800bee0:	d508      	bpl.n	800bef4 <_printf_i+0x14c>
 800bee2:	6923      	ldr	r3, [r4, #16]
 800bee4:	6861      	ldr	r1, [r4, #4]
 800bee6:	4299      	cmp	r1, r3
 800bee8:	bfde      	ittt	le
 800beea:	2330      	movle	r3, #48	; 0x30
 800beec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bef4:	1b92      	subs	r2, r2, r6
 800bef6:	6122      	str	r2, [r4, #16]
 800bef8:	f8cd a000 	str.w	sl, [sp]
 800befc:	464b      	mov	r3, r9
 800befe:	aa03      	add	r2, sp, #12
 800bf00:	4621      	mov	r1, r4
 800bf02:	4640      	mov	r0, r8
 800bf04:	f7ff fee2 	bl	800bccc <_printf_common>
 800bf08:	3001      	adds	r0, #1
 800bf0a:	d14c      	bne.n	800bfa6 <_printf_i+0x1fe>
 800bf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf10:	b004      	add	sp, #16
 800bf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf16:	4835      	ldr	r0, [pc, #212]	; (800bfec <_printf_i+0x244>)
 800bf18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	680e      	ldr	r6, [r1, #0]
 800bf20:	061f      	lsls	r7, r3, #24
 800bf22:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf26:	600e      	str	r6, [r1, #0]
 800bf28:	d514      	bpl.n	800bf54 <_printf_i+0x1ac>
 800bf2a:	07d9      	lsls	r1, r3, #31
 800bf2c:	bf44      	itt	mi
 800bf2e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf32:	6023      	strmi	r3, [r4, #0]
 800bf34:	b91d      	cbnz	r5, 800bf3e <_printf_i+0x196>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	f023 0320 	bic.w	r3, r3, #32
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	2310      	movs	r3, #16
 800bf40:	e7b0      	b.n	800bea4 <_printf_i+0xfc>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	f043 0320 	orr.w	r3, r3, #32
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	2378      	movs	r3, #120	; 0x78
 800bf4c:	4828      	ldr	r0, [pc, #160]	; (800bff0 <_printf_i+0x248>)
 800bf4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf52:	e7e3      	b.n	800bf1c <_printf_i+0x174>
 800bf54:	065e      	lsls	r6, r3, #25
 800bf56:	bf48      	it	mi
 800bf58:	b2ad      	uxthmi	r5, r5
 800bf5a:	e7e6      	b.n	800bf2a <_printf_i+0x182>
 800bf5c:	4616      	mov	r6, r2
 800bf5e:	e7bb      	b.n	800bed8 <_printf_i+0x130>
 800bf60:	680b      	ldr	r3, [r1, #0]
 800bf62:	6826      	ldr	r6, [r4, #0]
 800bf64:	6960      	ldr	r0, [r4, #20]
 800bf66:	1d1d      	adds	r5, r3, #4
 800bf68:	600d      	str	r5, [r1, #0]
 800bf6a:	0635      	lsls	r5, r6, #24
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	d501      	bpl.n	800bf74 <_printf_i+0x1cc>
 800bf70:	6018      	str	r0, [r3, #0]
 800bf72:	e002      	b.n	800bf7a <_printf_i+0x1d2>
 800bf74:	0671      	lsls	r1, r6, #25
 800bf76:	d5fb      	bpl.n	800bf70 <_printf_i+0x1c8>
 800bf78:	8018      	strh	r0, [r3, #0]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	4616      	mov	r6, r2
 800bf80:	e7ba      	b.n	800bef8 <_printf_i+0x150>
 800bf82:	680b      	ldr	r3, [r1, #0]
 800bf84:	1d1a      	adds	r2, r3, #4
 800bf86:	600a      	str	r2, [r1, #0]
 800bf88:	681e      	ldr	r6, [r3, #0]
 800bf8a:	6862      	ldr	r2, [r4, #4]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f7f4 f9be 	bl	8000310 <memchr>
 800bf94:	b108      	cbz	r0, 800bf9a <_printf_i+0x1f2>
 800bf96:	1b80      	subs	r0, r0, r6
 800bf98:	6060      	str	r0, [r4, #4]
 800bf9a:	6863      	ldr	r3, [r4, #4]
 800bf9c:	6123      	str	r3, [r4, #16]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa4:	e7a8      	b.n	800bef8 <_printf_i+0x150>
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	4632      	mov	r2, r6
 800bfaa:	4649      	mov	r1, r9
 800bfac:	4640      	mov	r0, r8
 800bfae:	47d0      	blx	sl
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d0ab      	beq.n	800bf0c <_printf_i+0x164>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	079b      	lsls	r3, r3, #30
 800bfb8:	d413      	bmi.n	800bfe2 <_printf_i+0x23a>
 800bfba:	68e0      	ldr	r0, [r4, #12]
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	4298      	cmp	r0, r3
 800bfc0:	bfb8      	it	lt
 800bfc2:	4618      	movlt	r0, r3
 800bfc4:	e7a4      	b.n	800bf10 <_printf_i+0x168>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4632      	mov	r2, r6
 800bfca:	4649      	mov	r1, r9
 800bfcc:	4640      	mov	r0, r8
 800bfce:	47d0      	blx	sl
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d09b      	beq.n	800bf0c <_printf_i+0x164>
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	68e3      	ldr	r3, [r4, #12]
 800bfd8:	9903      	ldr	r1, [sp, #12]
 800bfda:	1a5b      	subs	r3, r3, r1
 800bfdc:	42ab      	cmp	r3, r5
 800bfde:	dcf2      	bgt.n	800bfc6 <_printf_i+0x21e>
 800bfe0:	e7eb      	b.n	800bfba <_printf_i+0x212>
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	f104 0619 	add.w	r6, r4, #25
 800bfe8:	e7f5      	b.n	800bfd6 <_printf_i+0x22e>
 800bfea:	bf00      	nop
 800bfec:	0800c2f5 	.word	0x0800c2f5
 800bff0:	0800c306 	.word	0x0800c306

0800bff4 <_sbrk_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4d06      	ldr	r5, [pc, #24]	; (800c010 <_sbrk_r+0x1c>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f6 fb96 	bl	8002730 <_sbrk>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_sbrk_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_sbrk_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	24000670 	.word	0x24000670

0800c014 <__sread>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	f000 f8a0 	bl	800c160 <_read_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	bfab      	itete	ge
 800c024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c026:	89a3      	ldrhlt	r3, [r4, #12]
 800c028:	181b      	addge	r3, r3, r0
 800c02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c02e:	bfac      	ite	ge
 800c030:	6563      	strge	r3, [r4, #84]	; 0x54
 800c032:	81a3      	strhlt	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__swrite>:
 800c036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	461f      	mov	r7, r3
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	05db      	lsls	r3, r3, #23
 800c040:	4605      	mov	r5, r0
 800c042:	460c      	mov	r4, r1
 800c044:	4616      	mov	r6, r2
 800c046:	d505      	bpl.n	800c054 <__swrite+0x1e>
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	2302      	movs	r3, #2
 800c04e:	2200      	movs	r2, #0
 800c050:	f000 f868 	bl	800c124 <_lseek_r>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	4632      	mov	r2, r6
 800c062:	463b      	mov	r3, r7
 800c064:	4628      	mov	r0, r5
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	f000 b817 	b.w	800c09c <_write_r>

0800c06e <__sseek>:
 800c06e:	b510      	push	{r4, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 f855 	bl	800c124 <_lseek_r>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	bf15      	itete	ne
 800c080:	6560      	strne	r0, [r4, #84]	; 0x54
 800c082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08a:	81a3      	strheq	r3, [r4, #12]
 800c08c:	bf18      	it	ne
 800c08e:	81a3      	strhne	r3, [r4, #12]
 800c090:	bd10      	pop	{r4, pc}

0800c092 <__sclose>:
 800c092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c096:	f000 b813 	b.w	800c0c0 <_close_r>
	...

0800c09c <_write_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_write_r+0x20>)
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	602a      	str	r2, [r5, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f7f6 faef 	bl	800268e <_write>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_write_r+0x1e>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_write_r+0x1e>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	24000670 	.word	0x24000670

0800c0c0 <_close_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	; (800c0dc <_close_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f6 fafb 	bl	80026c6 <_close>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_close_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_close_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	24000670 	.word	0x24000670

0800c0e0 <_fstat_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	; (800c100 <_fstat_r+0x20>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	f7f6 faf6 	bl	80026de <_fstat>
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	d102      	bne.n	800c0fc <_fstat_r+0x1c>
 800c0f6:	682b      	ldr	r3, [r5, #0]
 800c0f8:	b103      	cbz	r3, 800c0fc <_fstat_r+0x1c>
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	bd38      	pop	{r3, r4, r5, pc}
 800c0fe:	bf00      	nop
 800c100:	24000670 	.word	0x24000670

0800c104 <_isatty_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d06      	ldr	r5, [pc, #24]	; (800c120 <_isatty_r+0x1c>)
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	602b      	str	r3, [r5, #0]
 800c110:	f7f6 faf5 	bl	80026fe <_isatty>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d102      	bne.n	800c11e <_isatty_r+0x1a>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b103      	cbz	r3, 800c11e <_isatty_r+0x1a>
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	24000670 	.word	0x24000670

0800c124 <_lseek_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	; (800c144 <_lseek_r+0x20>)
 800c128:	4604      	mov	r4, r0
 800c12a:	4608      	mov	r0, r1
 800c12c:	4611      	mov	r1, r2
 800c12e:	2200      	movs	r2, #0
 800c130:	602a      	str	r2, [r5, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	f7f6 faee 	bl	8002714 <_lseek>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_lseek_r+0x1e>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_lseek_r+0x1e>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	24000670 	.word	0x24000670

0800c148 <__malloc_lock>:
 800c148:	4801      	ldr	r0, [pc, #4]	; (800c150 <__malloc_lock+0x8>)
 800c14a:	f7ff bb55 	b.w	800b7f8 <__retarget_lock_acquire_recursive>
 800c14e:	bf00      	nop
 800c150:	24000668 	.word	0x24000668

0800c154 <__malloc_unlock>:
 800c154:	4801      	ldr	r0, [pc, #4]	; (800c15c <__malloc_unlock+0x8>)
 800c156:	f7ff bb50 	b.w	800b7fa <__retarget_lock_release_recursive>
 800c15a:	bf00      	nop
 800c15c:	24000668 	.word	0x24000668

0800c160 <_read_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d07      	ldr	r5, [pc, #28]	; (800c180 <_read_r+0x20>)
 800c164:	4604      	mov	r4, r0
 800c166:	4608      	mov	r0, r1
 800c168:	4611      	mov	r1, r2
 800c16a:	2200      	movs	r2, #0
 800c16c:	602a      	str	r2, [r5, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	f7f6 fa70 	bl	8002654 <_read>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_read_r+0x1e>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_read_r+0x1e>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	24000670 	.word	0x24000670

0800c184 <_init>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	bf00      	nop
 800c188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18a:	bc08      	pop	{r3}
 800c18c:	469e      	mov	lr, r3
 800c18e:	4770      	bx	lr

0800c190 <_fini>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	bf00      	nop
 800c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c196:	bc08      	pop	{r3}
 800c198:	469e      	mov	lr, r3
 800c19a:	4770      	bx	lr
