
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a584  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b4  24000010  0800a8f4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005c4  0800a8f4  000205c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fd92  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ca1  00000000  00000000  0004fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ba0  00000000  00000000  00053a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a88  00000000  00000000  00055618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037845  00000000  00000000  000570a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020ec3  00000000  00000000  0008e8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174544  00000000  00000000  000af7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00223cec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a98  00000000  00000000  00223d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a838 	.word	0x0800a838

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800a838 	.word	0x0800a838

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Button_2_Pin){
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000614:	d15a      	bne.n	80006cc <HAL_GPIO_EXTI_Callback+0xc8>
		HAL_TIM_Base_Start(&htim13);
 8000616:	482f      	ldr	r0, [pc, #188]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000618:	f007 fd04 	bl	8008024 <HAL_TIM_Base_Start>
		htim13.Instance->CNT = 0;
 800061c:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24

		// 1 step: turn on MN IGBT & Relay
		HAL_GPIO_TogglePin(GPIOC, MN_IGBT_Pin);
 8000624:	2104      	movs	r1, #4
 8000626:	482c      	ldr	r0, [pc, #176]	; (80006d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000628:	f004 fb23 	bl	8004c72 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start(&htim7);
 800062c:	482b      	ldr	r0, [pc, #172]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 800062e:	f007 fcf9 	bl	8008024 <HAL_TIM_Base_Start>
		htim7.Instance->CNT = 0;
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
		// delay btw IGBT & Relay
		while(1){
			if(htim7.Instance->CNT == 30000){
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000640:	f247 5230 	movw	r2, #30000	; 0x7530
 8000644:	4293      	cmp	r3, r2
 8000646:	d1f8      	bne.n	800063a <HAL_GPIO_EXTI_Callback+0x36>
				HAL_GPIO_TogglePin(GPIOC, MN_Relay_Pin);
 8000648:	2108      	movs	r1, #8
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800064c:	f004 fb11 	bl	8004c72 <HAL_GPIO_TogglePin>
				HAL_TIM_Base_Stop(&htim7);
 8000650:	4822      	ldr	r0, [pc, #136]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8000652:	f007 fd65 	bl	8008120 <HAL_TIM_Base_Stop>
			}
		}

		// 2 step: turn on PC IGBT
		while(1){
			if(htim13.Instance->CNT == 8000){
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000660:	d1f9      	bne.n	8000656 <HAL_GPIO_EXTI_Callback+0x52>
				HAL_GPIO_TogglePin(GPIOF, PC_IGBT_Pin);
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	481e      	ldr	r0, [pc, #120]	; (80006e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000666:	f004 fb04 	bl	8004c72 <HAL_GPIO_TogglePin>
			}
		}

		// 3 step: turn on MP IGBT & Relay
		while(1){
			if(htim13.Instance->CNT == 16000){
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000674:	d1f9      	bne.n	800066a <HAL_GPIO_EXTI_Callback+0x66>
				HAL_GPIO_TogglePin(GPIOG, MP_IGBT_Pin);
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	481a      	ldr	r0, [pc, #104]	; (80006e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800067c:	f004 faf9 	bl	8004c72 <HAL_GPIO_TogglePin>
				HAL_TIM_Base_Start(&htim7);
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8000682:	f007 fccf 	bl	8008024 <HAL_TIM_Base_Start>
				htim7.Instance->CNT = 0;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
				// delay btw IGBT & Relay
				while(1){
					if(htim7.Instance->CNT == 30000){
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	f247 5230 	movw	r2, #30000	; 0x7530
 8000698:	4293      	cmp	r3, r2
 800069a:	d1f8      	bne.n	800068e <HAL_GPIO_EXTI_Callback+0x8a>
						HAL_GPIO_TogglePin(GPIOA, MP_Relay_Pin);
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	4811      	ldr	r0, [pc, #68]	; (80006e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80006a2:	f004 fae6 	bl	8004c72 <HAL_GPIO_TogglePin>
						HAL_TIM_Base_Stop(&htim7);
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80006a8:	f007 fd3a 	bl	8008120 <HAL_TIM_Base_Stop>
						break;
 80006ac:	bf00      	nop
			}
		}

		// 4 step: turn off PC IGBT
		while(1){
			if(htim13.Instance->CNT == 24000){
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d1f8      	bne.n	80006ae <HAL_GPIO_EXTI_Callback+0xaa>
			HAL_GPIO_TogglePin(GPIOF, PC_IGBT_Pin);
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 80006c0:	f004 fad7 	bl	8004c72 <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Stop(&htim13);
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006c6:	f007 fd2b 	bl	8008120 <HAL_TIM_Base_Stop>
			break;
 80006ca:	bf00      	nop
			}
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2400030c 	.word	0x2400030c
 80006d8:	58020800 	.word	0x58020800
 80006dc:	240004d4 	.word	0x240004d4
 80006e0:	58021400 	.word	0x58021400
 80006e4:	58021800 	.word	0x58021800
 80006e8:	58020000 	.word	0x58020000

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 fefa 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f836 	bl	8000764 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 f8ac 	bl	8000854 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fdcc 	bl	8001298 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000700:	f000 f8d4 	bl	80008ac <MX_ADC1_Init>
  MX_ADC2_Init();
 8000704:	f000 f94a 	bl	800099c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000708:	f000 f9aa 	bl	8000a60 <MX_ADC3_Init>
  MX_DAC1_Init();
 800070c:	f000 fa1a 	bl	8000b44 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000710:	f000 fa4a 	bl	8000ba8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000714:	f000 faac 	bl	8000c70 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8000718:	f000 fb0e 	bl	8000d38 <MX_I2C4_Init>
  MX_TIM1_Init();
 800071c:	f000 fb4c 	bl	8000db8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000720:	f000 fbd8 	bl	8000ed4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000724:	f000 fc46 	bl	8000fb4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000728:	f000 fd1e 	bl	8001168 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800072c:	f000 fd68 	bl	8001200 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8000730:	f000 fcd2 	bl	80010d8 <MX_TIM13_Init>
  MX_TIM7_Init();
 8000734:	f000 fc98 	bl	8001068 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <main+0x70>)
 800073e:	f004 fa7f 	bl	8004c40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MN_Relay_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2108      	movs	r1, #8
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <main+0x70>)
 8000748:	f004 fa7a 	bl	8004c40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin, SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <main+0x74>)
 8000754:	f004 fa74 	bl	8004c40 <HAL_GPIO_WritePin>
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x6c>
 800075a:	bf00      	nop
 800075c:	58020800 	.word	0x58020800
 8000760:	58021800 	.word	0x58021800

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	; 0x70
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	224c      	movs	r2, #76	; 0x4c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00a f858 	bl	800a828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f00a f852 	bl	800a828 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000784:	2004      	movs	r0, #4
 8000786:	f004 fbd1 	bl	8004f2c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <SystemClock_Config+0xe8>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <SystemClock_Config+0xe8>)
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <SystemClock_Config+0xe8>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a6:	bf00      	nop
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xe8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b4:	d1f8      	bne.n	80007a8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xec>)
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	f023 0303 	bic.w	r3, r3, #3
 80007be:	4a24      	ldr	r2, [pc, #144]	; (8000850 <SystemClock_Config+0xec>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007d8:	2305      	movs	r3, #5
 80007da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80007dc:	236e      	movs	r3, #110	; 0x6e
 80007de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007ec:	2308      	movs	r3, #8
 80007ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fbef 	bl	8004fe0 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000808:	f001 f8d4 	bl	80019b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	233f      	movs	r3, #63	; 0x3f
 800080e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2303      	movs	r3, #3
 8000812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000818:	2308      	movs	r3, #8
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000820:	2340      	movs	r3, #64	; 0x40
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2103      	movs	r1, #3
 8000832:	4618      	mov	r0, r3
 8000834:	f004 ff80 	bl	8005738 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800083e:	f001 f8b9 	bl	80019b4 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3770      	adds	r7, #112	; 0x70
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58024800 	.word	0x58024800
 8000850:	58024400 	.word	0x58024400

08000854 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ae      	sub	sp, #184	; 0xb8
 8000858:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	22b4      	movs	r2, #180	; 0xb4
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f009 ffe1 	bl	800a828 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000866:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800086a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800086c:	2305      	movs	r3, #5
 800086e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000870:	2350      	movs	r3, #80	; 0x50
 8000872:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000874:	2305      	movs	r3, #5
 8000876:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f005 fadb 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80008a0:	f001 f888 	bl	80019b4 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	37b8      	adds	r7, #184	; 0xb8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2224      	movs	r2, #36	; 0x24
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f009 ffaf 	bl	800a828 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008cc:	4a31      	ldr	r2, [pc, #196]	; (8000994 <MX_ADC1_Init+0xe8>)
 80008ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008d6:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_ADC1_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_ADC1_Init+0xe4>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ADC1_Init+0xe4>)
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_ADC1_Init+0xe4>)
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_ADC1_Init+0xe4>)
 8000916:	2200      	movs	r2, #0
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_ADC1_Init+0xe4>)
 800091c:	2200      	movs	r2, #0
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_ADC1_Init+0xe4>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	4819      	ldr	r0, [pc, #100]	; (8000990 <MX_ADC1_Init+0xe4>)
 800092a:	f002 f8ef 	bl	8002b0c <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000934:	f001 f83e 	bl	80019b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4813      	ldr	r0, [pc, #76]	; (8000990 <MX_ADC1_Init+0xe4>)
 8000944:	f003 f928 	bl	8003b98 <HAL_ADCEx_MultiModeConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800094e:	f001 f831 	bl	80019b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0xec>)
 8000954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000956:	2306      	movs	r3, #6
 8000958:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800095e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000964:	2304      	movs	r3, #4
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_ADC1_Init+0xe4>)
 8000978:	f002 fad0 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000982:	f001 f817 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2400022c 	.word	0x2400022c
 8000994:	40022000 	.word	0x40022000
 8000998:	04300002 	.word	0x04300002

0800099c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2224      	movs	r2, #36	; 0x24
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f009 ff3d 	bl	800a828 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009b0:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <MX_ADC2_Init+0xc0>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009da:	2201      	movs	r2, #1
 80009dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_ADC2_Init+0xbc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_ADC2_Init+0xbc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_ADC2_Init+0xbc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_ADC2_Init+0xbc>)
 8000a0e:	f002 f87d 	bl	8002b0c <HAL_ADC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000a18:	f000 ffcc 	bl	80019b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a20:	2306      	movs	r3, #6
 8000a22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a2c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_ADC2_Init+0xbc>)
 8000a42:	f002 fa6b 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000a4c:	f000 ffb2 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	24000170 	.word	0x24000170
 8000a5c:	40022100 	.word	0x40022100

08000a60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2224      	movs	r2, #36	; 0x24
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f009 fedb 	bl	800a828 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a74:	4a32      	ldr	r2, [pc, #200]	; (8000b40 <MX_ADC3_Init+0xe0>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a80:	2208      	movs	r2, #8
 8000a82:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a92:	2204      	movs	r2, #4
 8000a94:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000ae6:	f002 f811 	bl	8002b0c <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000af0:	f000 ff60 	bl	80019b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2306      	movs	r3, #6
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b06:	2304      	movs	r3, #4
 8000b08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000b24:	f002 f9fa 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000b2e:	f000 ff41 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2400029c 	.word	0x2400029c
 8000b40:	58026000 	.word	0x58026000

08000b44 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2224      	movs	r2, #36	; 0x24
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f009 fe69 	bl	800a828 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_DAC1_Init+0x60>)
 8000b5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b5c:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b5e:	f003 fa0c 	bl	8003f7a <HAL_DAC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b68:	f000 ff24 	bl	80019b4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2210      	movs	r2, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b88:	f003 fa1a 	bl	8003fc0 <HAL_DAC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 ff0f 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240000cc 	.word	0x240000cc
 8000ba4:	40007400 	.word	0x40007400

08000ba8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <MX_FDCAN1_Init+0xc4>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_FDCAN1_Init+0xc0>)
 8000c56:	f003 fae3 	bl	8004220 <HAL_FDCAN_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c60:	f000 fea8 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	240003e8 	.word	0x240003e8
 8000c6c:	4000a000 	.word	0x4000a000

08000c70 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c74:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c76:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <MX_FDCAN2_Init+0xc4>)
 8000c78:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000d18:	2204      	movs	r2, #4
 8000d1a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_FDCAN2_Init+0xc0>)
 8000d1e:	f003 fa7f 	bl	8004220 <HAL_FDCAN_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d28:	f000 fe44 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	24000520 	.word	0x24000520
 8000d34:	4000a400 	.word	0x4000a400

08000d38 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_I2C4_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_I2C4_Init+0x7c>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d74:	f003 ffb2 	bl	8004cdc <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d7e:	f000 fe19 	bl	80019b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d86:	f004 f839 	bl	8004dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 fe10 	bl	80019b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d98:	f004 f87b 	bl	8004e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fe07 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000034 	.word	0x24000034
 8000db0:	58001c00 	.word	0x58001c00
 8000db4:	60404e72 	.word	0x60404e72

08000db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b098      	sub	sp, #96	; 0x60
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2234      	movs	r2, #52	; 0x34
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 fd1f 	bl	800a828 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <MX_TIM1_Init+0x118>)
 8000dee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000df0:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e16:	482d      	ldr	r0, [pc, #180]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000e18:	f007 f9a9 	bl	800816e <HAL_TIM_PWM_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 fdc7 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e36:	4619      	mov	r1, r3
 8000e38:	4824      	ldr	r0, [pc, #144]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000e3a:	f008 fa03 	bl	8009244 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e44:	f000 fdb6 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e48:	2360      	movs	r3, #96	; 0x60
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e50:	2300      	movs	r3, #0
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e64:	220c      	movs	r2, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000e6a:	f007 fbf3 	bl	8008654 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000e74:	f000 fd9e 	bl	80019b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000eae:	f008 fa65 	bl	800937c <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000eb8:	f000 fd7c 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM1_Init+0x114>)
 8000ebe:	f001 f8c5 	bl	800204c <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3760      	adds	r7, #96	; 0x60
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000488 	.word	0x24000488
 8000ed0:	40010000 	.word	0x40010000

08000ed4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000efa:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <MX_TIM4_Init+0xdc>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f20:	f007 f925 	bl	800816e <HAL_TIM_PWM_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f2a:	f000 fd43 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481b      	ldr	r0, [pc, #108]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f3e:	f008 f981 	bl	8009244 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f48:	f000 fd34 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f64:	f007 fb76 	bl	8008654 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f6e:	f000 fd21 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	2208      	movs	r2, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f7a:	f007 fb6b 	bl	8008654 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f84:	f000 fd16 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000f90:	f007 fb60 	bl	8008654 <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000f9a:	f000 fd0b 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <MX_TIM4_Init+0xd8>)
 8000fa0:	f001 f854 	bl	800204c <HAL_TIM_MspPostInit>

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24000080 	.word	0x24000080
 8000fb0:	40000800 	.word	0x40000800

08000fb4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM5_Init+0xac>)
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <MX_TIM5_Init+0xb0>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_TIM5_Init+0xac>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM5_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM5_Init+0xac>)
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM5_Init+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_TIM5_Init+0xac>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ffe:	4818      	ldr	r0, [pc, #96]	; (8001060 <MX_TIM5_Init+0xac>)
 8001000:	f007 f8b5 	bl	800816e <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800100a:	f000 fcd3 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4810      	ldr	r0, [pc, #64]	; (8001060 <MX_TIM5_Init+0xac>)
 800101e:	f008 f911 	bl	8009244 <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001028:	f000 fcc4 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM5_Init+0xac>)
 8001044:	f007 fb06 	bl	8008654 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800104e:	f000 fcb1 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM5_Init+0xac>)
 8001054:	f000 fffa 	bl	800204c <HAL_TIM_MspPostInit>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	240001e0 	.word	0x240001e0
 8001064:	40000c00 	.word	0x40000c00

08001068 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_TIM7_Init+0x68>)
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <MX_TIM7_Init+0x6c>)
 800107c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2750-1;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_TIM7_Init+0x68>)
 8001080:	f640 22bd 	movw	r2, #2749	; 0xabd
 8001084:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_TIM7_Init+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_TIM7_Init+0x68>)
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_TIM7_Init+0x68>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_TIM7_Init+0x68>)
 800109c:	f006 ff6a 	bl	8007f74 <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010a6:	f000 fc85 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_TIM7_Init+0x68>)
 80010b8:	f008 f8c4 	bl	8009244 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010c2:	f000 fc77 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240004d4 	.word	0x240004d4
 80010d4:	40001400 	.word	0x40001400

080010d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_TIM13_Init+0x88>)
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <MX_TIM13_Init+0x8c>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 27500 -1;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_TIM13_Init+0x88>)
 80010f2:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80010f6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_TIM13_Init+0x88>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_TIM13_Init+0x88>)
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_TIM13_Init+0x88>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_TIM13_Init+0x88>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001112:	4813      	ldr	r0, [pc, #76]	; (8001160 <MX_TIM13_Init+0x88>)
 8001114:	f006 ff2e 	bl	8007f74 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 fc49 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <MX_TIM13_Init+0x88>)
 8001124:	f007 f87a 	bl	800821c <HAL_TIM_IC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM13_Init+0x5a>
  {
    Error_Handler();
 800112e:	f000 fc41 	bl	80019b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_TIM13_Init+0x88>)
 800114a:	f007 f9e7 	bl	800851c <HAL_TIM_IC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM13_Init+0x80>
  {
    Error_Handler();
 8001154:	f000 fc2e 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2400030c 	.word	0x2400030c
 8001164:	40001c00 	.word	0x40001c00

08001168 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 800116e:	4a23      	ldr	r2, [pc, #140]	; (80011fc <MX_USART1_UART_Init+0x94>)
 8001170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011b2:	f008 f9a1 	bl	80094f8 <HAL_UART_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011bc:	f000 fbfa 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c0:	2100      	movs	r1, #0
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011c4:	f009 fa34 	bl	800a630 <HAL_UARTEx_SetTxFifoThreshold>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011ce:	f000 fbf1 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011d6:	f009 fa69 	bl	800a6ac <HAL_UARTEx_SetRxFifoThreshold>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011e0:	f000 fbe8 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_USART1_UART_Init+0x90>)
 80011e6:	f009 f9ea 	bl	800a5be <HAL_UARTEx_DisableFifoMode>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 fbe0 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	24000358 	.word	0x24000358
 80011fc:	40011000 	.word	0x40011000

08001200 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_USART3_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800124a:	f008 f955 	bl	80094f8 <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001254:	f000 fbae 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800125c:	f009 f9e8 	bl	800a630 <HAL_UARTEx_SetTxFifoThreshold>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001266:	f000 fba5 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800126e:	f009 fa1d 	bl	800a6ac <HAL_UARTEx_SetRxFifoThreshold>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 fb9c 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_USART3_UART_Init+0x90>)
 800127e:	f009 f99e 	bl	800a5be <HAL_UARTEx_DisableFifoMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 fb94 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	240000e0 	.word	0x240000e0
 8001294:	40004800 	.word	0x40004800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4bbf      	ldr	r3, [pc, #764]	; (80015ac <MX_GPIO_Init+0x314>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	4abd      	ldr	r2, [pc, #756]	; (80015ac <MX_GPIO_Init+0x314>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012be:	4bbb      	ldr	r3, [pc, #748]	; (80015ac <MX_GPIO_Init+0x314>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	623b      	str	r3, [r7, #32]
 80012ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012cc:	4bb7      	ldr	r3, [pc, #732]	; (80015ac <MX_GPIO_Init+0x314>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	4ab6      	ldr	r2, [pc, #728]	; (80015ac <MX_GPIO_Init+0x314>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012dc:	4bb3      	ldr	r3, [pc, #716]	; (80015ac <MX_GPIO_Init+0x314>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	4bb0      	ldr	r3, [pc, #704]	; (80015ac <MX_GPIO_Init+0x314>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	4aae      	ldr	r2, [pc, #696]	; (80015ac <MX_GPIO_Init+0x314>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fa:	4bac      	ldr	r3, [pc, #688]	; (80015ac <MX_GPIO_Init+0x314>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4ba8      	ldr	r3, [pc, #672]	; (80015ac <MX_GPIO_Init+0x314>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	4aa7      	ldr	r2, [pc, #668]	; (80015ac <MX_GPIO_Init+0x314>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001318:	4ba4      	ldr	r3, [pc, #656]	; (80015ac <MX_GPIO_Init+0x314>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001326:	4ba1      	ldr	r3, [pc, #644]	; (80015ac <MX_GPIO_Init+0x314>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	4a9f      	ldr	r2, [pc, #636]	; (80015ac <MX_GPIO_Init+0x314>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001336:	4b9d      	ldr	r3, [pc, #628]	; (80015ac <MX_GPIO_Init+0x314>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b99      	ldr	r3, [pc, #612]	; (80015ac <MX_GPIO_Init+0x314>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a98      	ldr	r2, [pc, #608]	; (80015ac <MX_GPIO_Init+0x314>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b95      	ldr	r3, [pc, #596]	; (80015ac <MX_GPIO_Init+0x314>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	4b92      	ldr	r3, [pc, #584]	; (80015ac <MX_GPIO_Init+0x314>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001368:	4a90      	ldr	r2, [pc, #576]	; (80015ac <MX_GPIO_Init+0x314>)
 800136a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001372:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <MX_GPIO_Init+0x314>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001380:	4b8a      	ldr	r3, [pc, #552]	; (80015ac <MX_GPIO_Init+0x314>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	4a89      	ldr	r2, [pc, #548]	; (80015ac <MX_GPIO_Init+0x314>)
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001390:	4b86      	ldr	r3, [pc, #536]	; (80015ac <MX_GPIO_Init+0x314>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f240 4102 	movw	r1, #1026	; 0x402
 80013a4:	4882      	ldr	r0, [pc, #520]	; (80015b0 <MX_GPIO_Init+0x318>)
 80013a6:	f003 fc4b 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 80013b0:	4880      	ldr	r0, [pc, #512]	; (80015b4 <MX_GPIO_Init+0x31c>)
 80013b2:	f003 fc45 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 80013b6:	2200      	movs	r2, #0
 80013b8:	f24a 1138 	movw	r1, #41272	; 0xa138
 80013bc:	487e      	ldr	r0, [pc, #504]	; (80015b8 <MX_GPIO_Init+0x320>)
 80013be:	f003 fc3f 	bl	8004c40 <HAL_GPIO_WritePin>
                          |ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MP_Relay_GPIO_Port, MP_Relay_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c8:	487c      	ldr	r0, [pc, #496]	; (80015bc <MX_GPIO_Init+0x324>)
 80013ca:	f003 fc39 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PC_IGBT_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80013d4:	487a      	ldr	r0, [pc, #488]	; (80015c0 <MX_GPIO_Init+0x328>)
 80013d6:	f003 fc33 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MN_IGBT_Pin|MN_Relay_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	210c      	movs	r1, #12
 80013de:	4879      	ldr	r0, [pc, #484]	; (80015c4 <MX_GPIO_Init+0x32c>)
 80013e0:	f003 fc2e 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2160      	movs	r1, #96	; 0x60
 80013e8:	4877      	ldr	r0, [pc, #476]	; (80015c8 <MX_GPIO_Init+0x330>)
 80013ea:	f003 fc29 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 80013ee:	f240 3303 	movw	r3, #771	; 0x303
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001400:	230e      	movs	r3, #14
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4870      	ldr	r0, [pc, #448]	; (80015cc <MX_GPIO_Init+0x334>)
 800140c:	f003 fa70 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001410:	f640 0303 	movw	r3, #2051	; 0x803
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001422:	2309      	movs	r3, #9
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	4862      	ldr	r0, [pc, #392]	; (80015b8 <MX_GPIO_Init+0x320>)
 800142e:	f003 fa5f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001444:	2309      	movs	r3, #9
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	485a      	ldr	r0, [pc, #360]	; (80015b8 <MX_GPIO_Init+0x320>)
 8001450:	f003 fa4e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001454:	2349      	movs	r3, #73	; 0x49
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001464:	230e      	movs	r3, #14
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4850      	ldr	r0, [pc, #320]	; (80015b0 <MX_GPIO_Init+0x318>)
 8001470:	f003 fa3e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 8001474:	f240 4302 	movw	r3, #1026	; 0x402
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4848      	ldr	r0, [pc, #288]	; (80015b0 <MX_GPIO_Init+0x318>)
 800148e:	f003 fa2f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001492:	2330      	movs	r3, #48	; 0x30
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80014a2:	230a      	movs	r3, #10
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4841      	ldr	r0, [pc, #260]	; (80015b4 <MX_GPIO_Init+0x31c>)
 80014ae:	f003 fa1f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 80014b2:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	483a      	ldr	r0, [pc, #232]	; (80015b4 <MX_GPIO_Init+0x31c>)
 80014cc:	f003 fa10 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 80014d0:	f64b 0303 	movw	r3, #47107	; 0xb803
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014e2:	230e      	movs	r3, #14
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4831      	ldr	r0, [pc, #196]	; (80015b4 <MX_GPIO_Init+0x31c>)
 80014ee:	f003 f9ff 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP_IGBT_Pin LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = MP_IGBT_Pin|LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin
 80014f2:	f24a 1338 	movw	r3, #41272	; 0xa138
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	482b      	ldr	r0, [pc, #172]	; (80015b8 <MX_GPIO_Init+0x320>)
 800150c:	f003 f9f0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001510:	23b0      	movs	r3, #176	; 0xb0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001520:	230a      	movs	r3, #10
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_GPIO_Init+0x318>)
 800152c:	f003 f9e0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001530:	2304      	movs	r3, #4
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001540:	230c      	movs	r3, #12
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4819      	ldr	r0, [pc, #100]	; (80015b0 <MX_GPIO_Init+0x318>)
 800154c:	f003 f9d0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 8001550:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001562:	230c      	movs	r3, #12
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4815      	ldr	r0, [pc, #84]	; (80015c4 <MX_GPIO_Init+0x32c>)
 800156e:	f003 f9bf 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001584:	230d      	movs	r3, #13
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <MX_GPIO_Init+0x324>)
 8001590:	f003 f9ae 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 8001594:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	e011      	b.n	80015d0 <MX_GPIO_Init+0x338>
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020c00 	.word	0x58020c00
 80015b4:	58021000 	.word	0x58021000
 80015b8:	58021800 	.word	0x58021800
 80015bc:	58020000 	.word	0x58020000
 80015c0:	58021400 	.word	0x58021400
 80015c4:	58020800 	.word	0x58020800
 80015c8:	58021c00 	.word	0x58021c00
 80015cc:	58020400 	.word	0x58020400
 80015d0:	4619      	mov	r1, r3
 80015d2:	48bc      	ldr	r0, [pc, #752]	; (80018c4 <MX_GPIO_Init+0x62c>)
 80015d4:	f003 f98c 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	48b6      	ldr	r0, [pc, #728]	; (80018c8 <MX_GPIO_Init+0x630>)
 80015f0:	f003 f97e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 80015f4:	2304      	movs	r3, #4
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001604:	2309      	movs	r3, #9
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	48af      	ldr	r0, [pc, #700]	; (80018cc <MX_GPIO_Init+0x634>)
 8001610:	f003 f96e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001614:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001626:	230e      	movs	r3, #14
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	48a7      	ldr	r0, [pc, #668]	; (80018d0 <MX_GPIO_Init+0x638>)
 8001632:	f003 f95d 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8001636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001648:	2303      	movs	r3, #3
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	489f      	ldr	r0, [pc, #636]	; (80018d0 <MX_GPIO_Init+0x638>)
 8001654:	f003 f94c 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800166a:	230a      	movs	r3, #10
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4893      	ldr	r0, [pc, #588]	; (80018c4 <MX_GPIO_Init+0x62c>)
 8001676:	f003 f93b 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 800167a:	f648 7308 	movw	r3, #36616	; 0x8f08
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800168c:	230e      	movs	r3, #14
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	488f      	ldr	r0, [pc, #572]	; (80018d4 <MX_GPIO_Init+0x63c>)
 8001698:	f003 f92a 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MP_Relay_Pin */
  GPIO_InitStruct.Pin = MP_Relay_Pin;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MP_Relay_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4883      	ldr	r0, [pc, #524]	; (80018c4 <MX_GPIO_Init+0x62c>)
 80016b6:	f003 f91b 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ca:	230e      	movs	r3, #14
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	487c      	ldr	r0, [pc, #496]	; (80018c8 <MX_GPIO_Init+0x630>)
 80016d6:	f003 f90b 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016ea:	2306      	movs	r3, #6
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4875      	ldr	r0, [pc, #468]	; (80018cc <MX_GPIO_Init+0x634>)
 80016f6:	f003 f8fb 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 80016fa:	f241 031f 	movw	r3, #4127	; 0x101f
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800170c:	2309      	movs	r3, #9
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4870      	ldr	r0, [pc, #448]	; (80018d8 <MX_GPIO_Init+0x640>)
 8001718:	f003 f8ea 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 800171c:	2340      	movs	r3, #64	; 0x40
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800172c:	230a      	movs	r3, #10
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4866      	ldr	r0, [pc, #408]	; (80018d0 <MX_GPIO_Init+0x638>)
 8001738:	f003 f8da 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800173c:	2304      	movs	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001740:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	485f      	ldr	r0, [pc, #380]	; (80018d0 <MX_GPIO_Init+0x638>)
 8001752:	f003 f8cd 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_B_Pin SAI1_SCK_B_Pin SAI1_FS_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_FS_B_Pin;
 8001756:	f44f 7350 	mov.w	r3, #832	; 0x340
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001768:	2306      	movs	r3, #6
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4859      	ldr	r0, [pc, #356]	; (80018d8 <MX_GPIO_Init+0x640>)
 8001774:	f003 f8bc 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4852      	ldr	r0, [pc, #328]	; (80018d8 <MX_GPIO_Init+0x640>)
 800178e:	f003 f8af 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO0_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8001792:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017a4:	2309      	movs	r3, #9
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	484b      	ldr	r0, [pc, #300]	; (80018dc <MX_GPIO_Init+0x644>)
 80017b0:	f003 f89e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_IGBT_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = PC_IGBT_Pin|STMOD_20_Pin;
 80017b4:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4842      	ldr	r0, [pc, #264]	; (80018d8 <MX_GPIO_Init+0x640>)
 80017ce:	f003 f88f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80017d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017e4:	2309      	movs	r3, #9
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	483a      	ldr	r0, [pc, #232]	; (80018d8 <MX_GPIO_Init+0x640>)
 80017f0:	f003 f87e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 80017f4:	2332      	movs	r3, #50	; 0x32
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001804:	230b      	movs	r3, #11
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	482e      	ldr	r0, [pc, #184]	; (80018c8 <MX_GPIO_Init+0x630>)
 8001810:	f003 f86e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001814:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001826:	230b      	movs	r3, #11
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	482b      	ldr	r0, [pc, #172]	; (80018e0 <MX_GPIO_Init+0x648>)
 8001832:	f003 f85d 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MN_IGBT_Pin MN_Relay_Pin */
  GPIO_InitStruct.Pin = MN_IGBT_Pin|MN_Relay_Pin;
 8001836:	230c      	movs	r3, #12
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	481e      	ldr	r0, [pc, #120]	; (80018c8 <MX_GPIO_Init+0x630>)
 800184e:	f003 f84f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001862:	2305      	movs	r3, #5
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4819      	ldr	r0, [pc, #100]	; (80018d4 <MX_GPIO_Init+0x63c>)
 800186e:	f003 f83f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin;
 8001872:	2318      	movs	r3, #24
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001882:	230e      	movs	r3, #14
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_GPIO_Init+0x62c>)
 800188e:	f003 f82f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001892:	2386      	movs	r3, #134	; 0x86
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a2:	230b      	movs	r3, #11
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_GPIO_Init+0x62c>)
 80018ae:	f003 f81f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 80018b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	e010      	b.n	80018e4 <MX_GPIO_Init+0x64c>
 80018c2:	bf00      	nop
 80018c4:	58020000 	.word	0x58020000
 80018c8:	58020800 	.word	0x58020800
 80018cc:	58021000 	.word	0x58021000
 80018d0:	58021800 	.word	0x58021800
 80018d4:	58021c00 	.word	0x58021c00
 80018d8:	58021400 	.word	0x58021400
 80018dc:	58020c00 	.word	0x58020c00
 80018e0:	58020400 	.word	0x58020400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80018e8:	2305      	movs	r3, #5
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	482c      	ldr	r0, [pc, #176]	; (80019a4 <MX_GPIO_Init+0x70c>)
 80018f4:	f002 fffc 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	4826      	ldr	r0, [pc, #152]	; (80019a8 <MX_GPIO_Init+0x710>)
 8001910:	f002 ffee 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800191a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	4820      	ldr	r0, [pc, #128]	; (80019ac <MX_GPIO_Init+0x714>)
 800192c:	f002 ffe0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001930:	2310      	movs	r3, #16
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001940:	2309      	movs	r3, #9
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	4818      	ldr	r0, [pc, #96]	; (80019ac <MX_GPIO_Init+0x714>)
 800194c:	f002 ffd0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8001950:	2304      	movs	r3, #4
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001960:	230a      	movs	r3, #10
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_GPIO_Init+0x718>)
 800196c:	f002 ffc0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001970:	2360      	movs	r3, #96	; 0x60
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <MX_GPIO_Init+0x714>)
 8001988:	f002 ffb2 	bl	80048f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f002 fabe 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001996:	2028      	movs	r0, #40	; 0x28
 8001998:	f002 fad5 	bl	8003f46 <HAL_NVIC_EnableIRQ>

}
 800199c:	bf00      	nop
 800199e:	3738      	adds	r7, #56	; 0x38
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	58021400 	.word	0x58021400
 80019a8:	58021000 	.word	0x58021000
 80019ac:	58021c00 	.word	0x58021c00
 80019b0:	58020400 	.word	0x58020400

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_MspInit+0x30>)
 80019c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x30>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x30>)
 80019d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	58024400 	.word	0x58024400

080019f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b090      	sub	sp, #64	; 0x40
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6c      	ldr	r2, [pc, #432]	; (8001bc4 <HAL_ADC_MspInit+0x1d0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d14e      	bne.n	8001ab4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a16:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <HAL_ADC_MspInit+0x1d4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_ADC_MspInit+0x1d4>)
 8001a1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a20:	4b69      	ldr	r3, [pc, #420]	; (8001bc8 <HAL_ADC_MspInit+0x1d4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10e      	bne.n	8001a46 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a2e:	4a67      	ldr	r2, [pc, #412]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a38:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a56:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a74:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001a82:	2301      	movs	r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	484e      	ldr	r0, [pc, #312]	; (8001bd0 <HAL_ADC_MspInit+0x1dc>)
 8001a96:	f002 ff2b 	bl	80048f0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a9e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001aa2:	f000 fdd7 	bl	8002654 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001aa6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001aaa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001aae:	f000 fdd1 	bl	8002654 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ab2:	e082      	b.n	8001bba <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a46      	ldr	r2, [pc, #280]	; (8001bd4 <HAL_ADC_MspInit+0x1e0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d133      	bne.n	8001b26 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_ADC_MspInit+0x1d4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a40      	ldr	r2, [pc, #256]	; (8001bc8 <HAL_ADC_MspInit+0x1d4>)
 8001ac6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_ADC_MspInit+0x1d4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10e      	bne.n	8001aee <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad6:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	4a35      	ldr	r2, [pc, #212]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001b0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b10:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001b14:	f000 fd9e 	bl	8002654 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001b18:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001b1c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001b20:	f000 fd98 	bl	8002654 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b24:	e049      	b.n	8001bba <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <HAL_ADC_MspInit+0x1e4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d144      	bne.n	8001bba <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b30:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_ADC_MspInit+0x1d8>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001b8a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b8e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b92:	f000 fd5f 	bl	8002654 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001b96:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b9a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b9e:	f000 fd59 	bl	8002654 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_ADC_MspInit+0x1e8>)
 8001bb6:	f002 fe9b 	bl	80048f0 <HAL_GPIO_Init>
}
 8001bba:	bf00      	nop
 8001bbc:	3740      	adds	r7, #64	; 0x40
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	2400002c 	.word	0x2400002c
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	58020800 	.word	0x58020800
 8001bd4:	40022100 	.word	0x40022100
 8001bd8:	58026000 	.word	0x58026000
 8001bdc:	58021c00 	.word	0x58021c00

08001be0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_DAC_MspInit+0x80>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d129      	bne.n	8001c56 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_DAC_MspInit+0x84>)
 8001c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c08:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_DAC_MspInit+0x84>)
 8001c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_DAC_MspInit+0x84>)
 8001c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_DAC_MspInit+0x84>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_DAC_MspInit+0x84>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_DAC_MspInit+0x84>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_DAC_MspInit+0x88>)
 8001c52:	f002 fe4d 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40007400 	.word	0x40007400
 8001c64:	58024400 	.word	0x58024400
 8001c68:	58020000 	.word	0x58020000

08001c6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b0b8      	sub	sp, #224	; 0xe0
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	22b4      	movs	r2, #180	; 0xb4
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f008 fdcb 	bl	800a828 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_FDCAN_MspInit+0x17c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d14e      	bne.n	8001d3a <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ca2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001caa:	f107 0318 	add.w	r3, r7, #24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 f8ce 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001cba:	f7ff fe7b 	bl	80019b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001cbe:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_FDCAN_MspInit+0x180>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_FDCAN_MspInit+0x180>)
 8001cc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_FDCAN_MspInit+0x180>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10e      	bne.n	8001cee <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001cd2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001cd6:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001ce0:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001ce2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	4a3e      	ldr	r2, [pc, #248]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001d0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d26:	2309      	movs	r3, #9
 8001d28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d30:	4619      	mov	r1, r3
 8001d32:	4830      	ldr	r0, [pc, #192]	; (8001df4 <HAL_FDCAN_MspInit+0x188>)
 8001d34:	f002 fddc 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001d38:	e051      	b.n	8001dde <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <HAL_FDCAN_MspInit+0x18c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d14c      	bne.n	8001dde <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 f87a 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001d62:	f7ff fe27 	bl	80019b4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_FDCAN_MspInit+0x180>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_FDCAN_MspInit+0x180>)
 8001d6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_FDCAN_MspInit+0x180>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10e      	bne.n	8001d96 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001d7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001d8a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_FDCAN_MspInit+0x184>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001dcc:	2309      	movs	r3, #9
 8001dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <HAL_FDCAN_MspInit+0x190>)
 8001dda:	f002 fd89 	bl	80048f0 <HAL_GPIO_Init>
}
 8001dde:	bf00      	nop
 8001de0:	37e0      	adds	r7, #224	; 0xe0
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	4000a000 	.word	0x4000a000
 8001dec:	24000030 	.word	0x24000030
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58021c00 	.word	0x58021c00
 8001df8:	4000a400 	.word	0x4000a400
 8001dfc:	58020400 	.word	0x58020400

08001e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0b6      	sub	sp, #216	; 0xd8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	22b4      	movs	r2, #180	; 0xb4
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f008 fd01 	bl	800a828 <memset>
  if(hi2c->Instance==I2C4)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <HAL_I2C_MspInit+0xc0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d142      	bne.n	8001eb6 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e30:	2310      	movs	r3, #16
 8001e32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f806 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e4a:	f7ff fdb3 	bl	80019b4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_I2C_MspInit+0xc4>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_I2C_MspInit+0xc4>)
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_I2C_MspInit+0xc4>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001e6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e86:	2304      	movs	r3, #4
 8001e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <HAL_I2C_MspInit+0xc8>)
 8001e94:	f002 fd2c 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_I2C_MspInit+0xc4>)
 8001e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_I2C_MspInit+0xc4>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_I2C_MspInit+0xc4>)
 8001eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	37d8      	adds	r7, #216	; 0xd8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	58001c00 	.word	0x58001c00
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58021400 	.word	0x58021400

08001ecc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_TIM_PWM_MspInit+0x90>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10f      	bne.n	8001efe <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001efc:	e028      	b.n	8001f50 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_TIM_PWM_MspInit+0x98>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d10f      	bne.n	8001f28 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f0e:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
}
 8001f26:	e013      	b.n	8001f50 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_TIM_PWM_MspInit+0x9c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_TIM_PWM_MspInit+0x94>)
 8001f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	58024400 	.word	0x58024400
 8001f64:	40000800 	.word	0x40000800
 8001f68:	40000c00 	.word	0x40000c00

08001f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM7)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	; (800203c <HAL_TIM_Base_MspInit+0xd0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d117      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f94:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001f96:	f043 0320 	orr.w	r3, r3, #32
 8001f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2037      	movs	r0, #55	; 0x37
 8001fb2:	f001 ffae 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fb6:	2037      	movs	r0, #55	; 0x37
 8001fb8:	f001 ffc5 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001fbc:	e03a      	b.n	8002034 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM13)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_TIM_Base_MspInit+0xd8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d135      	bne.n	8002034 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_TIM_Base_MspInit+0xd4>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002004:	2340      	movs	r3, #64	; 0x40
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002014:	2309      	movs	r3, #9
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	480a      	ldr	r0, [pc, #40]	; (8002048 <HAL_TIM_Base_MspInit+0xdc>)
 8002020:	f002 fc66 	bl	80048f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	202c      	movs	r0, #44	; 0x2c
 800202a:	f001 ff72 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800202e:	202c      	movs	r0, #44	; 0x2c
 8002030:	f001 ff89 	bl	8003f46 <HAL_NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	; 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40001400 	.word	0x40001400
 8002040:	58024400 	.word	0x58024400
 8002044:	40001c00 	.word	0x40001c00
 8002048:	58020000 	.word	0x58020000

0800204c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_TIM_MspPostInit+0x140>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d120      	bne.n	80020b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	4b48      	ldr	r3, [pc, #288]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	4a46      	ldr	r2, [pc, #280]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207e:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 800208c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800209e:	2301      	movs	r3, #1
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	483a      	ldr	r0, [pc, #232]	; (8002194 <HAL_TIM_MspPostInit+0x148>)
 80020aa:	f002 fc21 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020ae:	e068      	b.n	8002182 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a38      	ldr	r2, [pc, #224]	; (8002198 <HAL_TIM_MspPostInit+0x14c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d13f      	bne.n	800213a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 80020bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c0:	4a33      	ldr	r2, [pc, #204]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 80020cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002106:	2302      	movs	r3, #2
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4822      	ldr	r0, [pc, #136]	; (800219c <HAL_TIM_MspPostInit+0x150>)
 8002112:	f002 fbed 	bl	80048f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8002116:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002128:	2302      	movs	r3, #2
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	481b      	ldr	r0, [pc, #108]	; (80021a0 <HAL_TIM_MspPostInit+0x154>)
 8002134:	f002 fbdc 	bl	80048f0 <HAL_GPIO_Init>
}
 8002138:	e023      	b.n	8002182 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_TIM_MspPostInit+0x158>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d11e      	bne.n	8002182 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_TIM_MspPostInit+0x144>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002172:	2302      	movs	r3, #2
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <HAL_TIM_MspPostInit+0x15c>)
 800217e:	f002 fbb7 	bl	80048f0 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	; 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40010000 	.word	0x40010000
 8002190:	58024400 	.word	0x58024400
 8002194:	58021000 	.word	0x58021000
 8002198:	40000800 	.word	0x40000800
 800219c:	58020400 	.word	0x58020400
 80021a0:	58020c00 	.word	0x58020c00
 80021a4:	40000c00 	.word	0x40000c00
 80021a8:	58020000 	.word	0x58020000

080021ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0b8      	sub	sp, #224	; 0xe0
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	22b4      	movs	r2, #180	; 0xb4
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f008 fb2b 	bl	800a828 <memset>
  if(huart->Instance==USART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_UART_MspInit+0x150>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d143      	bne.n	8002264 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021dc:	2301      	movs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fe30 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021f6:	f7ff fbdd 	bl	80019b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_UART_MspInit+0x154>)
 80021fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002200:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_UART_MspInit+0x154>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_UART_MspInit+0x154>)
 800220c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_UART_MspInit+0x154>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221e:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_UART_MspInit+0x154>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_UART_MspInit+0x154>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002236:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800223a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002250:	2304      	movs	r3, #4
 8002252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800225a:	4619      	mov	r1, r3
 800225c:	4829      	ldr	r0, [pc, #164]	; (8002304 <HAL_UART_MspInit+0x158>)
 800225e:	f002 fb47 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002262:	e047      	b.n	80022f4 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a27      	ldr	r2, [pc, #156]	; (8002308 <HAL_UART_MspInit+0x15c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d142      	bne.n	80022f4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fde7 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002288:	f7ff fb94 	bl	80019b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_UART_MspInit+0x154>)
 800228e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002292:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_UART_MspInit+0x154>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002298:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_UART_MspInit+0x154>)
 800229e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_UART_MspInit+0x154>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_UART_MspInit+0x154>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_UART_MspInit+0x154>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80022c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e2:	2307      	movs	r3, #7
 80022e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022ec:	4619      	mov	r1, r3
 80022ee:	4807      	ldr	r0, [pc, #28]	; (800230c <HAL_UART_MspInit+0x160>)
 80022f0:	f002 fafe 	bl	80048f0 <HAL_GPIO_Init>
}
 80022f4:	bf00      	nop
 80022f6:	37e0      	adds	r7, #224	; 0xe0
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40011000 	.word	0x40011000
 8002300:	58024400 	.word	0x58024400
 8002304:	58020400 	.word	0x58020400
 8002308:	40004800 	.word	0x40004800
 800230c:	58020c00 	.word	0x58020c00

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235c:	f000 f936 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002368:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800236c:	f002 fc9b 	bl	8004ca6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002370:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002374:	f002 fc97 	bl	8004ca6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002382:	f005 ffac 	bl	80082de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2400030c 	.word	0x2400030c

08002390 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM7_IRQHandler+0x10>)
 8002396:	f005 ffa2 	bl	80082de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	240004d4 	.word	0x240004d4

080023a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <SystemInit+0xd0>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a31      	ldr	r2, [pc, #196]	; (8002474 <SystemInit+0xd0>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <SystemInit+0xd4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d807      	bhi.n	80023d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023c4:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <SystemInit+0xd4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 030f 	bic.w	r3, r3, #15
 80023cc:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <SystemInit+0xd4>)
 80023ce:	f043 0307 	orr.w	r3, r3, #7
 80023d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <SystemInit+0xd8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <SystemInit+0xd8>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <SystemInit+0xd8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <SystemInit+0xd8>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4924      	ldr	r1, [pc, #144]	; (800247c <SystemInit+0xd8>)
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <SystemInit+0xdc>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <SystemInit+0xd4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <SystemInit+0xd4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 030f 	bic.w	r3, r3, #15
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <SystemInit+0xd4>)
 8002408:	f043 0307 	orr.w	r3, r3, #7
 800240c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <SystemInit+0xd8>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <SystemInit+0xd8>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <SystemInit+0xd8>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <SystemInit+0xd8>)
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <SystemInit+0xe0>)
 8002424:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <SystemInit+0xd8>)
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <SystemInit+0xe4>)
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <SystemInit+0xd8>)
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <SystemInit+0xe8>)
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <SystemInit+0xd8>)
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <SystemInit+0xd8>)
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <SystemInit+0xe8>)
 800243c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <SystemInit+0xd8>)
 8002440:	2200      	movs	r2, #0
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <SystemInit+0xd8>)
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <SystemInit+0xe8>)
 8002448:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <SystemInit+0xd8>)
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <SystemInit+0xd8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <SystemInit+0xd8>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <SystemInit+0xd8>)
 800245e:	2200      	movs	r2, #0
 8002460:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <SystemInit+0xec>)
 8002464:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002468:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00
 8002478:	52002000 	.word	0x52002000
 800247c:	58024400 	.word	0x58024400
 8002480:	eaf6ed7f 	.word	0xeaf6ed7f
 8002484:	02020200 	.word	0x02020200
 8002488:	01ff0000 	.word	0x01ff0000
 800248c:	01010280 	.word	0x01010280
 8002490:	52004000 	.word	0x52004000

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002498:	f7ff ff84 	bl	80023a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	; (80024e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f008 f97f 	bl	800a7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c6:	f7fe f911 	bl	80006ec <main>
  bx  lr
 80024ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80024d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024d4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80024d8:	0800a8e4 	.word	0x0800a8e4
  ldr r2, =_sbss
 80024dc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80024e0:	240005c4 	.word	0x240005c4

080024e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC3_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f001 fd04 	bl	8003efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024f4:	f003 fad6 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_Init+0x68>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	4913      	ldr	r1, [pc, #76]	; (8002554 <HAL_Init+0x6c>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_Init+0x68>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_Init+0x6c>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
 8002528:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <HAL_Init+0x70>)
 800252a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_Init+0x74>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f814 	bl	8002560 <HAL_InitTick>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e002      	b.n	8002548 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002542:	f7ff fa3d 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	58024400 	.word	0x58024400
 8002554:	0800a89c 	.word	0x0800a89c
 8002558:	24000004 	.word	0x24000004
 800255c:	24000000 	.word	0x24000000

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_InitTick+0x60>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e021      	b.n	80025b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_InitTick+0x64>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_InitTick+0x60>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fce9 	bl	8003f62 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f001 fcb3 	bl	8003f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x68>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2400000c 	.word	0x2400000c
 80025c4:	24000000 	.word	0x24000000
 80025c8:	24000008 	.word	0x24000008

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2400000c 	.word	0x2400000c
 80025f0:	240005c0 	.word	0x240005c0

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	240005c0 	.word	0x240005c0

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2400000c 	.word	0x2400000c

08002654 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	43db      	mvns	r3, r3
 8002666:	401a      	ands	r2, r3
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58000400 	.word	0x58000400

08002680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3360      	adds	r3, #96	; 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <LL_ADC_SetOffset+0x60>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d10b      	bne.n	8002724 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	4313      	orrs	r3, r2
 800271a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002722:	e00b      	b.n	800273c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	431a      	orrs	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	58026000 	.word	0x58026000

0800274c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3360      	adds	r3, #96	; 0x60
 800275a:	461a      	mov	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3360      	adds	r3, #96	; 0x60
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
  }
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	58026000 	.word	0x58026000

080027f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <LL_ADC_SetOffsetSaturation+0x40>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d10e      	bne.n	8002822 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3360      	adds	r3, #96	; 0x60
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	58026000 	.word	0x58026000

08002834 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <LL_ADC_SetOffsetSign+0x40>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10e      	bne.n	8002866 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	58026000 	.word	0x58026000

08002878 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3360      	adds	r3, #96	; 0x60
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <LL_ADC_SetOffsetState+0x50>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80028aa:	e007      	b.n	80028bc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	58026000 	.word	0x58026000

080028cc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3330      	adds	r3, #48	; 0x30
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	4413      	add	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	211f      	movs	r1, #31
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	401a      	ands	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 011f 	and.w	r1, r3, #31
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3314      	adds	r3, #20
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	0e5b      	lsrs	r3, r3, #25
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	4413      	add	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	0d1b      	lsrs	r3, r3, #20
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	2107      	movs	r1, #7
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	401a      	ands	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	0d1b      	lsrs	r3, r3, #20
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	431a      	orrs	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d115      	bne.n	80029bc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0318 	and.w	r3, r3, #24
 80029a6:	4914      	ldr	r1, [pc, #80]	; (80029f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80029a8:	40d9      	lsrs	r1, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	400b      	ands	r3, r1
 80029ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80029ba:	e014      	b.n	80029e6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0318 	and.w	r3, r3, #24
 80029d2:	4909      	ldr	r1, [pc, #36]	; (80029f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80029d4:	40d9      	lsrs	r1, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	400b      	ands	r3, r1
 80029da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029de:	431a      	orrs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	58026000 	.word	0x58026000
 80029f8:	000fffff 	.word	0x000fffff

080029fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6093      	str	r3, [r2, #8]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	5fffffc0 	.word	0x5fffffc0

08002a20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <LL_ADC_EnableInternalRegulator+0x24>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	6fffffc0 	.word	0x6fffffc0

08002a70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a84:	d101      	bne.n	8002a8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <LL_ADC_IsEnabled+0x18>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <LL_ADC_IsEnabled+0x1a>
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d101      	bne.n	8002ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d101      	bne.n	8002afc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1ee      	b.n	8002f04 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe ff5d 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff67 	bl	8002a20 <LL_ADC_IsDeepPowerDownEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff4d 	bl	80029fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff82 	bl	8002a70 <LL_ADC_IsInternalRegulatorEnabled>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d114      	bne.n	8002b9c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff66 	bl	8002a48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b8e      	ldr	r3, [pc, #568]	; (8002db8 <HAL_ADC_Init+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a8e      	ldr	r2, [pc, #568]	; (8002dbc <HAL_ADC_Init+0x2b0>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b8e:	e002      	b.n	8002b96 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff65 	bl	8002a70 <LL_ADC_IsInternalRegulatorEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb0:	f043 0210 	orr.w	r2, r3, #16
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff76 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002bd2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8188 	bne.w	8002ef2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 8184 	bne.w	8002ef2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff4a 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d136      	bne.n	8002c78 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6c      	ldr	r2, [pc, #432]	; (8002dc0 <HAL_ADC_Init+0x2b4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_Init+0x112>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6a      	ldr	r2, [pc, #424]	; (8002dc4 <HAL_ADC_Init+0x2b8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10e      	bne.n	8002c3c <HAL_ADC_Init+0x130>
 8002c1e:	4868      	ldr	r0, [pc, #416]	; (8002dc0 <HAL_ADC_Init+0x2b4>)
 8002c20:	f7ff ff3a 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c24:	4604      	mov	r4, r0
 8002c26:	4867      	ldr	r0, [pc, #412]	; (8002dc4 <HAL_ADC_Init+0x2b8>)
 8002c28:	f7ff ff36 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4323      	orrs	r3, r4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e008      	b.n	8002c4e <HAL_ADC_Init+0x142>
 8002c3c:	4862      	ldr	r0, [pc, #392]	; (8002dc8 <HAL_ADC_Init+0x2bc>)
 8002c3e:	f7ff ff2b 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5a      	ldr	r2, [pc, #360]	; (8002dc0 <HAL_ADC_Init+0x2b4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_ADC_Init+0x15a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_ADC_Init+0x2b8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_Init+0x15e>
 8002c66:	4a59      	ldr	r2, [pc, #356]	; (8002dcc <HAL_ADC_Init+0x2c0>)
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_Init+0x160>
 8002c6a:	4a59      	ldr	r2, [pc, #356]	; (8002dd0 <HAL_ADC_Init+0x2c4>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7ff fd04 	bl	8002680 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_ADC_Init+0x2bc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d129      	bne.n	8002cd6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7e5b      	ldrb	r3, [r3, #25]
 8002c86:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c8c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002c92:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d013      	beq.n	8002cc4 <HAL_ADC_Init+0x1b8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_ADC_Init+0x1b4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b1c      	cmp	r3, #28
 8002caa:	d007      	beq.n	8002cbc <HAL_ADC_Init+0x1b0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b18      	cmp	r3, #24
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_Init+0x1ac>
 8002cb4:	2318      	movs	r3, #24
 8002cb6:	e006      	b.n	8002cc6 <HAL_ADC_Init+0x1ba>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e004      	b.n	8002cc6 <HAL_ADC_Init+0x1ba>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_Init+0x1ba>
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	e000      	b.n	8002cc6 <HAL_ADC_Init+0x1ba>
 8002cc4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002cc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e00e      	b.n	8002cf4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7e5b      	ldrb	r3, [r3, #25]
 8002cda:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ce0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ce6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d106      	bne.n	8002d0c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	3b01      	subs	r3, #1
 8002d04:	045b      	lsls	r3, r3, #17
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_ADC_Init+0x2bc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d115      	bne.n	8002d5e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_ADC_Init+0x2c8>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	430b      	orrs	r3, r1
 8002d44:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	611a      	str	r2, [r3, #16]
 8002d5c:	e009      	b.n	8002d72 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_ADC_Init+0x2cc>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fea1 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff feae 	bl	8002ae4 <LL_ADC_INJ_IsConversionOngoing>
 8002d88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 808e 	bne.w	8002eae <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 808a 	bne.w	8002eae <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_ADC_Init+0x2bc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d11b      	bne.n	8002ddc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
 8002da8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e018      	b.n	8002dea <HAL_ADC_Init+0x2de>
 8002db8:	24000000 	.word	0x24000000
 8002dbc:	053e2d63 	.word	0x053e2d63
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	40022100 	.word	0x40022100
 8002dc8:	58026000 	.word	0x58026000
 8002dcc:	40022300 	.word	0x40022300
 8002dd0:	58026300 	.word	0x58026300
 8002dd4:	fff04007 	.word	0xfff04007
 8002dd8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
 8002de0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_ADC_Init+0x400>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	69b9      	ldr	r1, [r7, #24]
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d137      	bne.n	8002e78 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <HAL_ADC_Init+0x404>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d116      	bne.n	8002e46 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <HAL_ADC_Init+0x408>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e36:	430a      	orrs	r2, r1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	611a      	str	r2, [r3, #16]
 8002e44:	e020      	b.n	8002e88 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_ADC_Init+0x40c>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e54:	3a01      	subs	r2, #1
 8002e56:	0411      	lsls	r1, r2, #16
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	611a      	str	r2, [r3, #16]
 8002e76:	e007      	b.n	8002e88 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_ADC_Init+0x404>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d002      	beq.n	8002eae <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fd63 	bl	8003974 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f023 010f 	bic.w	r1, r3, #15
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ece:	e007      	b.n	8002ee0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020f 	bic.w	r2, r2, #15
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	f023 0303 	bic.w	r3, r3, #3
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60
 8002ef0:	e007      	b.n	8002f02 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3724      	adds	r7, #36	; 0x24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	ffffbffc 	.word	0xffffbffc
 8002f10:	58026000 	.word	0x58026000
 8002f14:	fc00f81f 	.word	0xfc00f81f
 8002f18:	fc00f81e 	.word	0xfc00f81e

08002f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b0b9      	sub	sp, #228	; 0xe4
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f36:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4ab3      	ldr	r2, [pc, #716]	; (800320c <HAL_ADC_ConfigChannel+0x2f0>)
 8002f3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x34>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f000 bcfa 	b.w	8003944 <HAL_ADC_ConfigChannel+0xa28>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fdae 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 84de 	bne.w	8003926 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4aa8      	ldr	r2, [pc, #672]	; (8003210 <HAL_ADC_ConfigChannel+0x2f4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d033      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x76>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	e01d      	b.n	8002fce <HAL_ADC_ConfigChannel+0xb2>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e004      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2201      	movs	r2, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	69d1      	ldr	r1, [r2, #28]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f7ff fc6f 	bl	80028cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd63 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fd6f 	bl	8002ae4 <LL_ADC_INJ_IsConversionOngoing>
 8003006:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800300a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 8270 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003014:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 826b 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	461a      	mov	r2, r3
 800302c:	f7ff fc7a 	bl	8002924 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a76      	ldr	r2, [pc, #472]	; (8003210 <HAL_ADC_ConfigChannel+0x2f4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10d      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003054:	e032      	b.n	80030bc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003056:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_ADC_ConfigChannel+0x2f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800305e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003062:	d10b      	bne.n	800307c <HAL_ADC_ConfigChannel+0x160>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	e01d      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x19c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x186>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	e00a      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x19c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d048      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6919      	ldr	r1, [r3, #16]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030d4:	f7ff fb08 	bl	80026e8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_ADC_ConfigChannel+0x2f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d119      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f7ff fba0 	bl	8002834 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6919      	ldr	r1, [r3, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1f0>
 8003106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310a:	e000      	b.n	800310e <HAL_ADC_ConfigChannel+0x1f2>
 800310c:	2300      	movs	r3, #0
 800310e:	461a      	mov	r2, r3
 8003110:	f7ff fb6e 	bl	80027f0 <LL_ADC_SetOffsetSaturation>
 8003114:	e1ee      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_ADC_ConfigChannel+0x212>
 8003128:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800312c:	e000      	b.n	8003130 <HAL_ADC_ConfigChannel+0x214>
 800312e:	2300      	movs	r3, #0
 8003130:	461a      	mov	r2, r3
 8003132:	f7ff fb3b 	bl	80027ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	7e1b      	ldrb	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_ADC_ConfigChannel+0x230>
 8003146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314a:	e000      	b.n	800314e <HAL_ADC_ConfigChannel+0x232>
 800314c:	2300      	movs	r3, #0
 800314e:	461a      	mov	r2, r3
 8003150:	f7ff fb12 	bl	8002778 <LL_ADC_SetDataRightShift>
 8003154:	e1ce      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2d      	ldr	r2, [pc, #180]	; (8003210 <HAL_ADC_ConfigChannel+0x2f4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f040 8181 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff faef 	bl	800274c <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_ADC_ConfigChannel+0x272>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fae4 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	0e9b      	lsrs	r3, r3, #26
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	e01e      	b.n	80031cc <HAL_ADC_ConfigChannel+0x2b0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fad9 	bl	800274c <LL_ADC_GetOffsetChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80031ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80031b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80031bc:	2320      	movs	r3, #32
 80031be:	e004      	b.n	80031ca <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80031c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x2c8>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	e01e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x306>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80031f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e00a      	b.n	8003222 <HAL_ADC_ConfigChannel+0x306>
 800320c:	47ff0000 	.word	0x47ff0000
 8003210:	58026000 	.word	0x58026000
 8003214:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003218:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	429a      	cmp	r2, r3
 8003224:	d106      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fb22 	bl	8002878 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fa86 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x344>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fa7b 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 021f 	and.w	r2, r3, #31
 800325e:	e01e      	b.n	800329e <HAL_ADC_ConfigChannel+0x382>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fa70 	bl	800274c <LL_ADC_GetOffsetChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800327e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e004      	b.n	800329c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x39a>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	e018      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x3cc>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80032ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80032d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e004      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80032de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fabf 	bl	8002878 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fa23 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x40a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2102      	movs	r1, #2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fa18 	bl	800274c <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	0e9b      	lsrs	r3, r3, #26
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	e01e      	b.n	8003364 <HAL_ADC_ConfigChannel+0x448>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2102      	movs	r1, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fa0d 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800334c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e004      	b.n	8003362 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003358:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_ADC_ConfigChannel+0x460>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	e014      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x48a>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800338a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003398:	2320      	movs	r3, #32
 800339a:	e004      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800339c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d106      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	2102      	movs	r1, #2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fa60 	bl	8002878 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2103      	movs	r1, #3
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f9c4 	bl	800274c <LL_ADC_GetOffsetChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x4c8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2103      	movs	r1, #3
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f9b9 	bl	800274c <LL_ADC_GetOffsetChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	f003 021f 	and.w	r2, r3, #31
 80033e2:	e017      	b.n	8003414 <HAL_ADC_ConfigChannel+0x4f8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2103      	movs	r1, #3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f9ae 	bl	800274c <LL_ADC_GetOffsetChannel>
 80033f0:	4603      	mov	r3, r0
 80033f2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e003      	b.n	8003412 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800340a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_ADC_ConfigChannel+0x510>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	e011      	b.n	8003450 <HAL_ADC_ConfigChannel+0x534>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800343a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800343e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	429a      	cmp	r2, r3
 8003452:	d14f      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2200      	movs	r2, #0
 800345a:	2103      	movs	r1, #3
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fa0b 	bl	8002878 <LL_ADC_SetOffsetState>
 8003462:	e047      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003486:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	429a      	cmp	r2, r3
 800349a:	d107      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034aa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	069b      	lsls	r3, r3, #26
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034ce:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	069b      	lsls	r3, r3, #26
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff facd 	bl	8002a98 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8219 	bne.w	8003938 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f7ff fa32 	bl	800297c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4aa1      	ldr	r2, [pc, #644]	; (80037a4 <HAL_ADC_ConfigChannel+0x888>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f040 812e 	bne.w	8003780 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADC_ConfigChannel+0x630>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	3301      	adds	r3, #1
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2b09      	cmp	r3, #9
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e019      	b.n	8003580 <HAL_ADC_ConfigChannel+0x664>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800355a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2b09      	cmp	r3, #9
 8003578:	bf94      	ite	ls
 800357a:	2301      	movls	r3, #1
 800357c:	2300      	movhi	r3, #0
 800357e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	2b00      	cmp	r3, #0
 8003582:	d079      	beq.n	8003678 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x684>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359e:	e015      	b.n	80035cc <HAL_ADC_ConfigChannel+0x6b0>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80035b8:	2320      	movs	r3, #32
 80035ba:	e003      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80035bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	069b      	lsls	r3, r3, #26
 80035c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x6d0>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	e017      	b.n	800361c <HAL_ADC_ConfigChannel+0x700>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80035fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x726>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	051b      	lsls	r3, r3, #20
 8003640:	e018      	b.n	8003674 <HAL_ADC_ConfigChannel+0x758>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	430b      	orrs	r3, r1
 8003676:	e07e      	b.n	8003776 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x778>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	069b      	lsls	r3, r3, #26
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003692:	e015      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x7a4>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	069b      	lsls	r3, r3, #26
 80036bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x7c4>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x7f4>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	61bb      	str	r3, [r7, #24]
  return result;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	ea42 0103 	orr.w	r1, r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_ADC_ConfigChannel+0x820>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	3b1e      	subs	r3, #30
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800373a:	e01b      	b.n	8003774 <HAL_ADC_ConfigChannel+0x858>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	60fb      	str	r3, [r7, #12]
  return result;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e003      	b.n	8003760 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f003 021f 	and.w	r2, r3, #31
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	3b1e      	subs	r3, #30
 800376e:	051b      	lsls	r3, r3, #20
 8003770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003774:	430b      	orrs	r3, r1
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	4619      	mov	r1, r3
 800377c:	f7ff f8d2 	bl	8002924 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f280 80d7 	bge.w	8003938 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <HAL_ADC_ConfigChannel+0x88c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_ADC_ConfigChannel+0x882>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_ADC_ConfigChannel+0x890>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10a      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x898>
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_ADC_ConfigChannel+0x894>)
 80037a0:	e009      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x89a>
 80037a2:	bf00      	nop
 80037a4:	47ff0000 	.word	0x47ff0000
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40022100 	.word	0x40022100
 80037b0:	40022300 	.word	0x40022300
 80037b4:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_ADC_ConfigChannel+0xa30>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe ff88 	bl	80026cc <LL_ADC_GetCommonPathInternalCh>
 80037bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a62      	ldr	r2, [pc, #392]	; (8003950 <HAL_ADC_ConfigChannel+0xa34>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_ADC_ConfigChannel+0x8b8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a61      	ldr	r2, [pc, #388]	; (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d10e      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x8d6>
 80037d4:	485e      	ldr	r0, [pc, #376]	; (8003950 <HAL_ADC_ConfigChannel+0xa34>)
 80037d6:	f7ff f95f 	bl	8002a98 <LL_ADC_IsEnabled>
 80037da:	4604      	mov	r4, r0
 80037dc:	485d      	ldr	r0, [pc, #372]	; (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 80037de:	f7ff f95b 	bl	8002a98 <LL_ADC_IsEnabled>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4323      	orrs	r3, r4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e008      	b.n	8003804 <HAL_ADC_ConfigChannel+0x8e8>
 80037f2:	4859      	ldr	r0, [pc, #356]	; (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 80037f4:	f7ff f950 	bl	8002a98 <LL_ADC_IsEnabled>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8084 	beq.w	8003912 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a53      	ldr	r2, [pc, #332]	; (800395c <HAL_ADC_ConfigChannel+0xa40>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d132      	bne.n	800387a <HAL_ADC_ConfigChannel+0x95e>
 8003814:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d12c      	bne.n	800387a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a4c      	ldr	r2, [pc, #304]	; (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f040 8086 	bne.w	8003938 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a47      	ldr	r2, [pc, #284]	; (8003950 <HAL_ADC_ConfigChannel+0xa34>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x924>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a46      	ldr	r2, [pc, #280]	; (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x928>
 8003840:	4a47      	ldr	r2, [pc, #284]	; (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 8003842:	e000      	b.n	8003846 <HAL_ADC_ConfigChannel+0x92a>
 8003844:	4a41      	ldr	r2, [pc, #260]	; (800394c <HAL_ADC_ConfigChannel+0xa30>)
 8003846:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800384a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7fe ff28 	bl	80026a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_ADC_ConfigChannel+0xa48>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	4a42      	ldr	r2, [pc, #264]	; (8003968 <HAL_ADC_ConfigChannel+0xa4c>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	3301      	adds	r3, #1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800386a:	e002      	b.n	8003872 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f9      	bne.n	800386c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003878:	e05e      	b.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3b      	ldr	r2, [pc, #236]	; (800396c <HAL_ADC_ConfigChannel+0xa50>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d120      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x9aa>
 8003884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d11a      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d14e      	bne.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <HAL_ADC_ConfigChannel+0xa34>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x992>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x996>
 80038ae:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 80038b0:	e000      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x998>
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <HAL_ADC_ConfigChannel+0xa30>)
 80038b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7fe fef1 	bl	80026a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c4:	e038      	b.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_ADC_ConfigChannel+0xa54>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d133      	bne.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
 80038d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d12d      	bne.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d128      	bne.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_ADC_ConfigChannel+0xa34>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x9de>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x9e2>
 80038fa:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 80038fc:	e000      	b.n	8003900 <HAL_ADC_ConfigChannel+0x9e4>
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <HAL_ADC_ConfigChannel+0xa30>)
 8003900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f7fe fecb 	bl	80026a6 <LL_ADC_SetCommonPathInternalCh>
 8003910:	e012      	b.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003924:	e008      	b.n	8003938 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003940:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003944:	4618      	mov	r0, r3
 8003946:	37e4      	adds	r7, #228	; 0xe4
 8003948:	46bd      	mov	sp, r7
 800394a:	bd90      	pop	{r4, r7, pc}
 800394c:	58026300 	.word	0x58026300
 8003950:	40022000 	.word	0x40022000
 8003954:	40022100 	.word	0x40022100
 8003958:	58026000 	.word	0x58026000
 800395c:	c7520000 	.word	0xc7520000
 8003960:	40022300 	.word	0x40022300
 8003964:	24000000 	.word	0x24000000
 8003968:	053e2d63 	.word	0x053e2d63
 800396c:	c3210000 	.word	0xc3210000
 8003970:	cb840000 	.word	0xcb840000

08003974 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6b      	ldr	r2, [pc, #428]	; (8003b30 <ADC_ConfigureBoostMode+0x1bc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <ADC_ConfigureBoostMode+0x1c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6a      	ldr	r2, [pc, #424]	; (8003b34 <ADC_ConfigureBoostMode+0x1c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d109      	bne.n	80039a4 <ADC_ConfigureBoostMode+0x30>
 8003990:	4b69      	ldr	r3, [pc, #420]	; (8003b38 <ADC_ConfigureBoostMode+0x1c4>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e008      	b.n	80039b6 <ADC_ConfigureBoostMode+0x42>
 80039a4:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <ADC_ConfigureBoostMode+0x1c8>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01c      	beq.n	80039f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039ba:	f002 f9ed 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 80039be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c8:	d010      	beq.n	80039ec <ADC_ConfigureBoostMode+0x78>
 80039ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ce:	d871      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x140>
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d002      	beq.n	80039dc <ADC_ConfigureBoostMode+0x68>
 80039d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039da:	d16b      	bne.n	8003ab4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	60fb      	str	r3, [r7, #12]
        break;
 80039ea:	e066      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	60fb      	str	r3, [r7, #12]
        break;
 80039f2:	e062      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039f8:	f003 f924 	bl	8006c44 <HAL_RCCEx_GetPeriphCLKFreq>
 80039fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a06:	d051      	beq.n	8003aac <ADC_ConfigureBoostMode+0x138>
 8003a08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a0c:	d854      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a12:	d047      	beq.n	8003aa4 <ADC_ConfigureBoostMode+0x130>
 8003a14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a18:	d84e      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a1e:	d03d      	beq.n	8003a9c <ADC_ConfigureBoostMode+0x128>
 8003a20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a24:	d848      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2a:	d033      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x120>
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a30:	d842      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a36:	d029      	beq.n	8003a8c <ADC_ConfigureBoostMode+0x118>
 8003a38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a3c:	d83c      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a42:	d01a      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x106>
 8003a44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a48:	d836      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a4e:	d014      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x106>
 8003a50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a54:	d830      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d00e      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x106>
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a60:	d82a      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a66:	d008      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x106>
 8003a68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a6c:	d824      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
 8003a6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a72:	d002      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x106>
 8003a74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a78:	d11e      	bne.n	8003ab8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0c9b      	lsrs	r3, r3, #18
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	60fb      	str	r3, [r7, #12]
        break;
 8003a8a:	e016      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
        break;
 8003a92:	e012      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	60fb      	str	r3, [r7, #12]
        break;
 8003a9a:	e00e      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e00a      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	09db      	lsrs	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e006      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	60fb      	str	r3, [r7, #12]
        break;
 8003ab2:	e002      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003ab8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <ADC_ConfigureBoostMode+0x1cc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d808      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ad6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ad8:	e025      	b.n	8003b26 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <ADC_ConfigureBoostMode+0x1d0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d80a      	bhi.n	8003af8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	e016      	b.n	8003b26 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <ADC_ConfigureBoostMode+0x1d4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d80a      	bhi.n	8003b16 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b12:	609a      	str	r2, [r3, #8]
}
 8003b14:	e007      	b.n	8003b26 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40022100 	.word	0x40022100
 8003b38:	40022300 	.word	0x40022300
 8003b3c:	58026300 	.word	0x58026300
 8003b40:	005f5e10 	.word	0x005f5e10
 8003b44:	00bebc20 	.word	0x00bebc20
 8003b48:	017d7840 	.word	0x017d7840

08003b4c <LL_ADC_IsEnabled>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <LL_ADC_IsEnabled+0x18>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <LL_ADC_IsEnabled+0x1a>
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d101      	bne.n	8003b8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b0a3      	sub	sp, #140	; 0x8c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0c1      	b.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5e      	ldr	r2, [pc, #376]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d102      	bne.n	8003bd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bd0:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e001      	b.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0a0      	b.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ffb9 	bl	8003b72 <LL_ADC_REG_IsConversionOngoing>
 8003c00:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ffb2 	bl	8003b72 <LL_ADC_REG_IsConversionOngoing>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8081 	bne.w	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d17c      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a48      	ldr	r2, [pc, #288]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a46      	ldr	r2, [pc, #280]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003c32:	4b46      	ldr	r3, [pc, #280]	; (8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c34:	e000      	b.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c38:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d039      	beq.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3a      	ldr	r2, [pc, #232]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a39      	ldr	r2, [pc, #228]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d10e      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003c68:	4836      	ldr	r0, [pc, #216]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c6a:	f7ff ff6f 	bl	8003b4c <LL_ADC_IsEnabled>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4835      	ldr	r0, [pc, #212]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c72:	f7ff ff6b 	bl	8003b4c <LL_ADC_IsEnabled>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4323      	orrs	r3, r4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e008      	b.n	8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003c86:	4833      	ldr	r0, [pc, #204]	; (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c88:	f7ff ff60 	bl	8003b4c <LL_ADC_IsEnabled>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d047      	beq.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	6811      	ldr	r1, [r2, #0]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	6892      	ldr	r2, [r2, #8]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cb2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb4:	e03a      	b.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003cb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cc0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003cd6:	481b      	ldr	r0, [pc, #108]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cd8:	f7ff ff38 	bl	8003b4c <LL_ADC_IsEnabled>
 8003cdc:	4604      	mov	r4, r0
 8003cde:	481a      	ldr	r0, [pc, #104]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ce0:	f7ff ff34 	bl	8003b4c <LL_ADC_IsEnabled>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4323      	orrs	r3, r4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e008      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003cf4:	4817      	ldr	r0, [pc, #92]	; (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003cf6:	f7ff ff29 	bl	8003b4c <LL_ADC_IsEnabled>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d16:	e009      	b.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003d2a:	e000      	b.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003d36:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	378c      	adds	r7, #140	; 0x8c
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40022100 	.word	0x40022100
 8003d4c:	40022300 	.word	0x40022300
 8003d50:	58026300 	.word	0x58026300
 8003d54:	58026000 	.word	0x58026000
 8003d58:	fffff0e0 	.word	0xfffff0e0

08003d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <__NVIC_SetPriorityGrouping+0x40>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <__NVIC_SetPriorityGrouping+0x40>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	60d3      	str	r3, [r2, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00
 8003da0:	05fa0000 	.word	0x05fa0000

08003da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <__NVIC_GetPriorityGrouping+0x18>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 0307 	and.w	r3, r3, #7
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db0b      	blt.n	8003dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f003 021f 	and.w	r2, r3, #31
 8003dd8:	4907      	ldr	r1, [pc, #28]	; (8003df8 <__NVIC_EnableIRQ+0x38>)
 8003dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2001      	movs	r0, #1
 8003de2:	fa00 f202 	lsl.w	r2, r0, r2
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000e100 	.word	0xe000e100

08003dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	6039      	str	r1, [r7, #0]
 8003e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	db0a      	blt.n	8003e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	490c      	ldr	r1, [pc, #48]	; (8003e48 <__NVIC_SetPriority+0x4c>)
 8003e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	440b      	add	r3, r1
 8003e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e24:	e00a      	b.n	8003e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <__NVIC_SetPriority+0x50>)
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	3b04      	subs	r3, #4
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	440b      	add	r3, r1
 8003e3a:	761a      	strb	r2, [r3, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000e100 	.word	0xe000e100
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f1c3 0307 	rsb	r3, r3, #7
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf28      	it	cs
 8003e6e:	2304      	movcs	r3, #4
 8003e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d902      	bls.n	8003e80 <NVIC_EncodePriority+0x30>
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3b03      	subs	r3, #3
 8003e7e:	e000      	b.n	8003e82 <NVIC_EncodePriority+0x32>
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	f04f 32ff 	mov.w	r2, #4294967295
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	401a      	ands	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e98:	f04f 31ff 	mov.w	r1, #4294967295
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	43d9      	mvns	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	4313      	orrs	r3, r2
         );
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec8:	d301      	bcc.n	8003ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00f      	b.n	8003eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <SysTick_Config+0x40>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed6:	210f      	movs	r1, #15
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	f7ff ff8e 	bl	8003dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <SysTick_Config+0x40>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <SysTick_Config+0x40>)
 8003ee8:	2207      	movs	r2, #7
 8003eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000e010 	.word	0xe000e010

08003efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff29 	bl	8003d5c <__NVIC_SetPriorityGrouping>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f20:	f7ff ff40 	bl	8003da4 <__NVIC_GetPriorityGrouping>
 8003f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff ff90 	bl	8003e50 <NVIC_EncodePriority>
 8003f30:	4602      	mov	r2, r0
 8003f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff5f 	bl	8003dfc <__NVIC_SetPriority>
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff33 	bl	8003dc0 <__NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ffa4 	bl	8003eb8 <SysTick_Config>
 8003f70:	4603      	mov	r3, r0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e014      	b.n	8003fb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	791b      	ldrb	r3, [r3, #4]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fd fe1f 	bl	8001be0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	795b      	ldrb	r3, [r3, #5]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DAC_ConfigChannel+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e11d      	b.n	8004214 <HAL_DAC_ConfigChannel+0x254>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d174      	bne.n	80040d6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003fec:	f7fe fb02 	bl	80025f4 <HAL_GetTick>
 8003ff0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d134      	bne.n	8004062 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ff8:	e011      	b.n	800401e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ffa:	f7fe fafb 	bl	80025f4 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d90a      	bls.n	800401e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f043 0208 	orr.w	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2203      	movs	r2, #3
 8004018:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0fa      	b.n	8004214 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004024:	4b7d      	ldr	r3, [pc, #500]	; (800421c <HAL_DAC_ConfigChannel+0x25c>)
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800402c:	2001      	movs	r0, #1
 800402e:	f7fe faed 	bl	800260c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	6992      	ldr	r2, [r2, #24]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
 800403c:	e01e      	b.n	800407c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800403e:	f7fe fad9 	bl	80025f4 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d90a      	bls.n	8004062 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f043 0208 	orr.w	r2, r3, #8
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2203      	movs	r2, #3
 800405c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0d8      	b.n	8004214 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	2b00      	cmp	r3, #0
 800406a:	dbe8      	blt.n	800403e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800406c:	2001      	movs	r0, #1
 800406e:	f7fe facd 	bl	800260c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	6992      	ldr	r2, [r2, #24]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	ea02 0103 	and.w	r1, r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	409a      	lsls	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	21ff      	movs	r1, #255	; 0xff
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	ea02 0103 	and.w	r1, r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d11d      	bne.n	800411a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	221f      	movs	r2, #31
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4013      	ands	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2207      	movs	r2, #7
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4013      	ands	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e00f      	b.n	8004164 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d102      	bne.n	8004152 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800414c:	2301      	movs	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e008      	b.n	8004164 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e001      	b.n	8004164 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	400a      	ands	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4013      	ands	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	22c0      	movs	r2, #192	; 0xc0
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20008000 	.word	0x20008000

08004220 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b098      	sub	sp, #96	; 0x60
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004228:	4a84      	ldr	r2, [pc, #528]	; (800443c <HAL_FDCAN_Init+0x21c>)
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	4611      	mov	r1, r2
 8004230:	224c      	movs	r2, #76	; 0x4c
 8004232:	4618      	mov	r0, r3
 8004234:	f006 faea 	bl	800a80c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e1ca      	b.n	80045d8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a7e      	ldr	r2, [pc, #504]	; (8004440 <HAL_FDCAN_Init+0x220>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d106      	bne.n	800425a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004254:	461a      	mov	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fcfc 	bl	8001c6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0210 	bic.w	r2, r2, #16
 8004282:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004284:	f7fe f9b6 	bl	80025f4 <HAL_GetTick>
 8004288:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800428a:	e014      	b.n	80042b6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800428c:	f7fe f9b2 	bl	80025f4 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b0a      	cmp	r3, #10
 8004298:	d90d      	bls.n	80042b6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2203      	movs	r2, #3
 80042ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e190      	b.n	80045d8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d0e3      	beq.n	800428c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d4:	f7fe f98e 	bl	80025f4 <HAL_GetTick>
 80042d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80042da:	e014      	b.n	8004306 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80042dc:	f7fe f98a 	bl	80025f4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b0a      	cmp	r3, #10
 80042e8:	d90d      	bls.n	8004306 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2203      	movs	r2, #3
 80042fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e168      	b.n	80045d8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0e3      	beq.n	80042dc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0202 	orr.w	r2, r2, #2
 8004322:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7c1b      	ldrb	r3, [r3, #16]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d108      	bne.n	800433e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433a:	619a      	str	r2, [r3, #24]
 800433c:	e007      	b.n	800434e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7c5b      	ldrb	r3, [r3, #17]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d108      	bne.n	8004368 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004364:	619a      	str	r2, [r3, #24]
 8004366:	e007      	b.n	8004378 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004376:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7c9b      	ldrb	r3, [r3, #18]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d108      	bne.n	8004392 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438e:	619a      	str	r2, [r3, #24]
 8004390:	e007      	b.n	80043a2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043a0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80043c6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0210 	bic.w	r2, r2, #16
 80043d6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d108      	bne.n	80043f2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0204 	orr.w	r2, r2, #4
 80043ee:	619a      	str	r2, [r3, #24]
 80043f0:	e030      	b.n	8004454 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02c      	beq.n	8004454 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d020      	beq.n	8004444 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004410:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0210 	orr.w	r2, r2, #16
 8004420:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d114      	bne.n	8004454 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0220 	orr.w	r2, r2, #32
 8004438:	619a      	str	r2, [r3, #24]
 800443a:	e00b      	b.n	8004454 <HAL_FDCAN_Init+0x234>
 800443c:	0800a850 	.word	0x0800a850
 8004440:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0220 	orr.w	r2, r2, #32
 8004452:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	3b01      	subs	r3, #1
 800445a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	3b01      	subs	r3, #1
 8004462:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004464:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800446c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	3b01      	subs	r3, #1
 8004476:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800447c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800447e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004488:	d115      	bne.n	80044b6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	3b01      	subs	r3, #1
 8004496:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004498:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	3b01      	subs	r3, #1
 80044a0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80044a2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	3b01      	subs	r3, #1
 80044ac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80044b2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80044b4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044dc:	4413      	add	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80044ea:	f023 0107 	bic.w	r1, r3, #7
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044f8:	4413      	add	r3, r2
 80044fa:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004518:	f023 0107 	bic.w	r1, r3, #7
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004526:	4413      	add	r3, r2
 8004528:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d013      	beq.n	8004566 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004546:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004554:	4413      	add	r3, r2
 8004556:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800455a:	011a      	lsls	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	2b00      	cmp	r3, #0
 800456c:	d013      	beq.n	8004596 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004576:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004584:	4413      	add	r3, r2
 8004586:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a11      	ldr	r2, [pc, #68]	; (80045e0 <HAL_FDCAN_Init+0x3c0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d107      	bne.n	80045b0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f022 0203 	bic.w	r2, r2, #3
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f80b 	bl	80045e4 <FDCAN_CalcultateRamBlockAddresses>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80045d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3760      	adds	r7, #96	; 0x60
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	4000a000 	.word	0x4000a000

080045e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80045fa:	4ba7      	ldr	r3, [pc, #668]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0091      	lsls	r1, r2, #2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	430b      	orrs	r3, r1
 8004608:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	041a      	lsls	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	4413      	add	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800463a:	4b97      	ldr	r3, [pc, #604]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800463c:	4013      	ands	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0091      	lsls	r1, r2, #2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	430b      	orrs	r3, r1
 8004648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	041a      	lsls	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800467c:	4b86      	ldr	r3, [pc, #536]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	0091      	lsls	r1, r2, #2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430b      	orrs	r3, r1
 800468a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004696:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	041a      	lsls	r2, r3, #16
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80046c4:	4b74      	ldr	r3, [pc, #464]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	0091      	lsls	r1, r2, #2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046de:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	041a      	lsls	r2, r3, #16
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800470c:	4b62      	ldr	r3, [pc, #392]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	0091      	lsls	r1, r2, #2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	430b      	orrs	r3, r1
 800471a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4413      	add	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004738:	4b57      	ldr	r3, [pc, #348]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800473a:	4013      	ands	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	0091      	lsls	r1, r2, #2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004752:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	041a      	lsls	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4413      	add	r3, r2
 8004770:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800477c:	4013      	ands	r3, r2
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0091      	lsls	r1, r2, #2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	430b      	orrs	r3, r1
 8004788:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004794:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	041a      	lsls	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047b0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b8:	061a      	lsls	r2, r3, #24
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c8:	4b34      	ldr	r3, [pc, #208]	; (800489c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80047ca:	4413      	add	r3, r2
 80047cc:	009a      	lsls	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d915      	bls.n	80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004894:	e006      	b.n	80048a4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004896:	bf00      	nop
 8004898:	ffff0003 	.word	0xffff0003
 800489c:	10002b00 	.word	0x10002b00
 80048a0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2203      	movs	r2, #3
 80048b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e010      	b.n	80048e2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e005      	b.n	80048d4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3304      	adds	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d3f3      	bcc.n	80048c8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048fe:	4b86      	ldr	r3, [pc, #536]	; (8004b18 <HAL_GPIO_Init+0x228>)
 8004900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004902:	e18c      	b.n	8004c1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	fa01 f303 	lsl.w	r3, r1, r3
 8004910:	4013      	ands	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 817e 	beq.w	8004c18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d005      	beq.n	8004934 <HAL_GPIO_Init+0x44>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d130      	bne.n	8004996 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800496a:	2201      	movs	r2, #1
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	f003 0201 	and.w	r2, r3, #1
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d017      	beq.n	80049d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	2203      	movs	r2, #3
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d123      	bne.n	8004a26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	08da      	lsrs	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3208      	adds	r2, #8
 80049e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	220f      	movs	r2, #15
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	08da      	lsrs	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3208      	adds	r2, #8
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	2203      	movs	r2, #3
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0203 	and.w	r2, r3, #3
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80d8 	beq.w	8004c18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a68:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_GPIO_Init+0x22c>)
 8004a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <HAL_GPIO_Init+0x22c>)
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a78:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <HAL_GPIO_Init+0x22c>)
 8004a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a86:	4a26      	ldr	r2, [pc, #152]	; (8004b20 <HAL_GPIO_Init+0x230>)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <HAL_GPIO_Init+0x234>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d04a      	beq.n	8004b48 <HAL_GPIO_Init+0x258>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_GPIO_Init+0x238>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <HAL_GPIO_Init+0x222>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_GPIO_Init+0x23c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d025      	beq.n	8004b0e <HAL_GPIO_Init+0x21e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <HAL_GPIO_Init+0x240>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <HAL_GPIO_Init+0x21a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <HAL_GPIO_Init+0x244>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d019      	beq.n	8004b06 <HAL_GPIO_Init+0x216>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_GPIO_Init+0x248>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_GPIO_Init+0x212>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <HAL_GPIO_Init+0x24c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00d      	beq.n	8004afe <HAL_GPIO_Init+0x20e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_GPIO_Init+0x250>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x20a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_GPIO_Init+0x254>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_GPIO_Init+0x206>
 8004af2:	2309      	movs	r3, #9
 8004af4:	e029      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004af6:	230a      	movs	r3, #10
 8004af8:	e027      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004afa:	2307      	movs	r3, #7
 8004afc:	e025      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004afe:	2306      	movs	r3, #6
 8004b00:	e023      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004b02:	2305      	movs	r3, #5
 8004b04:	e021      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004b06:	2304      	movs	r3, #4
 8004b08:	e01f      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e01d      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e01b      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e019      	b.n	8004b4a <HAL_GPIO_Init+0x25a>
 8004b16:	bf00      	nop
 8004b18:	58000080 	.word	0x58000080
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	58000400 	.word	0x58000400
 8004b24:	58020000 	.word	0x58020000
 8004b28:	58020400 	.word	0x58020400
 8004b2c:	58020800 	.word	0x58020800
 8004b30:	58020c00 	.word	0x58020c00
 8004b34:	58021000 	.word	0x58021000
 8004b38:	58021400 	.word	0x58021400
 8004b3c:	58021800 	.word	0x58021800
 8004b40:	58021c00 	.word	0x58021c00
 8004b44:	58022400 	.word	0x58022400
 8004b48:	2300      	movs	r3, #0
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	f002 0203 	and.w	r2, r2, #3
 8004b50:	0092      	lsls	r2, r2, #2
 8004b52:	4093      	lsls	r3, r2
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b5a:	4938      	ldr	r1, [pc, #224]	; (8004c3c <HAL_GPIO_Init+0x34c>)
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	3302      	adds	r3, #2
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f ae6b 	bne.w	8004904 <HAL_GPIO_Init+0x14>
  }
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	3724      	adds	r7, #36	; 0x24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	58000400 	.word	0x58000400

08004c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c50:	787b      	ldrb	r3, [r7, #1]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c56:	887a      	ldrh	r2, [r7, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c5c:	e003      	b.n	8004c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c5e:	887b      	ldrh	r3, [r7, #2]
 8004c60:	041a      	lsls	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	619a      	str	r2, [r3, #24]
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c84:	887a      	ldrh	r2, [r7, #2]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	041a      	lsls	r2, r3, #16
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	43d9      	mvns	r1, r3
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	400b      	ands	r3, r1
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	619a      	str	r2, [r3, #24]
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fb fc99 	bl	8000604 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07f      	b.n	8004dee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd f87c 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	e006      	b.n	8004d64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d104      	bne.n	8004d76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_I2C_Init+0x11c>)
 8004d82:	430b      	orrs	r3, r1
 8004d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69d9      	ldr	r1, [r3, #28]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	02008000 	.word	0x02008000

08004dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d138      	bne.n	8004e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e032      	b.n	8004e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d139      	bne.n	8004f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e033      	b.n	8004f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2224      	movs	r2, #36	; 0x24
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f34:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d00a      	beq.n	8004f56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f40:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e03f      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e03d      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f56:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f5e:	491f      	ldr	r1, [pc, #124]	; (8004fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f66:	f7fd fb45 	bl	80025f4 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f6c:	e009      	b.n	8004f82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f6e:	f7fd fb41 	bl	80025f4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7c:	d901      	bls.n	8004f82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e027      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f82:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d1ee      	bne.n	8004f6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b1e      	cmp	r3, #30
 8004f94:	d008      	beq.n	8004fa8 <HAL_PWREx_ConfigSupply+0x7c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b2e      	cmp	r3, #46	; 0x2e
 8004f9a:	d005      	beq.n	8004fa8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b1d      	cmp	r3, #29
 8004fa0:	d002      	beq.n	8004fa8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b2d      	cmp	r3, #45	; 0x2d
 8004fa6:	d113      	bne.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004fa8:	f7fd fb24 	bl	80025f4 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fae:	e009      	b.n	8004fc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fb0:	f7fd fb20 	bl	80025f4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fbe:	d901      	bls.n	8004fc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e006      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0311 	and.w	r3, r3, #17
 8004fcc:	2b11      	cmp	r3, #17
 8004fce:	d1ef      	bne.n	8004fb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	58024800 	.word	0x58024800

08004fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e397      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8087 	beq.w	800510e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005000:	4b9e      	ldr	r3, [pc, #632]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800500a:	4b9c      	ldr	r3, [pc, #624]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b10      	cmp	r3, #16
 8005014:	d007      	beq.n	8005026 <HAL_RCC_OscConfig+0x46>
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	2b18      	cmp	r3, #24
 800501a:	d110      	bne.n	800503e <HAL_RCC_OscConfig+0x5e>
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d10b      	bne.n	800503e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005026:	4b95      	ldr	r3, [pc, #596]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d06c      	beq.n	800510c <HAL_RCC_OscConfig+0x12c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d168      	bne.n	800510c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e371      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005046:	d106      	bne.n	8005056 <HAL_RCC_OscConfig+0x76>
 8005048:	4b8c      	ldr	r3, [pc, #560]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a8b      	ldr	r2, [pc, #556]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800504e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	e02e      	b.n	80050b4 <HAL_RCC_OscConfig+0xd4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x98>
 800505e:	4b87      	ldr	r3, [pc, #540]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a86      	ldr	r2, [pc, #536]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b84      	ldr	r3, [pc, #528]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a83      	ldr	r2, [pc, #524]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e01d      	b.n	80050b4 <HAL_RCC_OscConfig+0xd4>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0xbc>
 8005082:	4b7e      	ldr	r3, [pc, #504]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7d      	ldr	r2, [pc, #500]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b7b      	ldr	r3, [pc, #492]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a7a      	ldr	r2, [pc, #488]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0xd4>
 800509c:	4b77      	ldr	r3, [pc, #476]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a76      	ldr	r2, [pc, #472]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b74      	ldr	r3, [pc, #464]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a73      	ldr	r2, [pc, #460]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd fa9a 	bl	80025f4 <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c4:	f7fd fa96 	bl	80025f4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	; 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e325      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050d6:	4b69      	ldr	r3, [pc, #420]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0xe4>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fd fa86 	bl	80025f4 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fd fa82 	bl	80025f4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e311      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050fe:	4b5f      	ldr	r3, [pc, #380]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x10c>
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 808a 	beq.w	8005230 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511c:	4b57      	ldr	r3, [pc, #348]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005124:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005126:	4b55      	ldr	r3, [pc, #340]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_RCC_OscConfig+0x162>
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	2b18      	cmp	r3, #24
 8005136:	d137      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1c8>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d132      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005142:	4b4e      	ldr	r3, [pc, #312]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_RCC_OscConfig+0x17a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e2e3      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800515a:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 0219 	bic.w	r2, r3, #25
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4945      	ldr	r1, [pc, #276]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800516c:	f7fd fa42 	bl	80025f4 <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005174:	f7fd fa3e 	bl	80025f4 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e2cd      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005186:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005192:	4b3a      	ldr	r3, [pc, #232]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	4936      	ldr	r1, [pc, #216]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a6:	e043      	b.n	8005230 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d026      	beq.n	80051fe <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 0219 	bic.w	r2, r3, #25
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	492f      	ldr	r1, [pc, #188]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fd fa17 	bl	80025f4 <HAL_GetTick>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ca:	f7fd fa13 	bl	80025f4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e2a2      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051dc:	4b27      	ldr	r3, [pc, #156]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	4921      	ldr	r1, [pc, #132]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	e018      	b.n	8005230 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fd f9f3 	bl	80025f4 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005212:	f7fd f9ef 	bl	80025f4 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e27e      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d06d      	beq.n	8005318 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005244:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b08      	cmp	r3, #8
 8005250:	d007      	beq.n	8005262 <HAL_RCC_OscConfig+0x282>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b18      	cmp	r3, #24
 8005256:	d11e      	bne.n	8005296 <HAL_RCC_OscConfig+0x2b6>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d119      	bne.n	8005296 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCC_OscConfig+0x29c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_RCC_OscConfig+0x2a0>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	2b80      	cmp	r3, #128	; 0x80
 8005274:	d004      	beq.n	8005280 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e253      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005280:	4ba3      	ldr	r3, [pc, #652]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	49a0      	ldr	r1, [pc, #640]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005290:	4313      	orrs	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005294:	e040      	b.n	8005318 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d023      	beq.n	80052e6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800529e:	4b9c      	ldr	r3, [pc, #624]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a9b      	ldr	r2, [pc, #620]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fd f9a3 	bl	80025f4 <HAL_GetTick>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052b2:	f7fd f99f 	bl	80025f4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e22e      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052c4:	4b92      	ldr	r3, [pc, #584]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052d0:	4b8f      	ldr	r3, [pc, #572]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	498c      	ldr	r1, [pc, #560]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60cb      	str	r3, [r1, #12]
 80052e4:	e018      	b.n	8005318 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052e6:	4b8a      	ldr	r3, [pc, #552]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a89      	ldr	r2, [pc, #548]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80052ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fd f97f 	bl	80025f4 <HAL_GetTick>
 80052f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052fa:	f7fd f97b 	bl	80025f4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e20a      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800530c:	4b80      	ldr	r3, [pc, #512]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d036      	beq.n	8005392 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d019      	beq.n	8005360 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800532c:	4b78      	ldr	r3, [pc, #480]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800532e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005330:	4a77      	ldr	r2, [pc, #476]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd f95c 	bl	80025f4 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005340:	f7fd f958 	bl	80025f4 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1e7      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005352:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x360>
 800535e:	e018      	b.n	8005392 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005360:	4b6b      	ldr	r3, [pc, #428]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005364:	4a6a      	ldr	r2, [pc, #424]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536c:	f7fd f942 	bl	80025f4 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005374:	f7fd f93e 	bl	80025f4 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e1cd      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005386:	4b62      	ldr	r3, [pc, #392]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d036      	beq.n	800540c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d019      	beq.n	80053da <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053a6:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a59      	ldr	r2, [pc, #356]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80053ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053b2:	f7fd f91f 	bl	80025f4 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053ba:	f7fd f91b 	bl	80025f4 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1aa      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053cc:	4b50      	ldr	r3, [pc, #320]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x3da>
 80053d8:	e018      	b.n	800540c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053da:	4b4d      	ldr	r3, [pc, #308]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a4c      	ldr	r2, [pc, #304]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80053e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053e6:	f7fd f905 	bl	80025f4 <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053ee:	f7fd f901 	bl	80025f4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e190      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005400:	4b43      	ldr	r3, [pc, #268]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f0      	bne.n	80053ee <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8085 	beq.w	8005524 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800541a:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <HAL_RCC_OscConfig+0x534>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3d      	ldr	r2, [pc, #244]	; (8005514 <HAL_RCC_OscConfig+0x534>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005426:	f7fd f8e5 	bl	80025f4 <HAL_GetTick>
 800542a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800542e:	f7fd f8e1 	bl	80025f4 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b64      	cmp	r3, #100	; 0x64
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e170      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005440:	4b34      	ldr	r3, [pc, #208]	; (8005514 <HAL_RCC_OscConfig+0x534>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d106      	bne.n	8005462 <HAL_RCC_OscConfig+0x482>
 8005454:	4b2e      	ldr	r3, [pc, #184]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005458:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	6713      	str	r3, [r2, #112]	; 0x70
 8005460:	e02d      	b.n	80054be <HAL_RCC_OscConfig+0x4de>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10c      	bne.n	8005484 <HAL_RCC_OscConfig+0x4a4>
 800546a:	4b29      	ldr	r3, [pc, #164]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	4a28      	ldr	r2, [pc, #160]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	6713      	str	r3, [r2, #112]	; 0x70
 8005476:	4b26      	ldr	r3, [pc, #152]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	4a25      	ldr	r2, [pc, #148]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800547c:	f023 0304 	bic.w	r3, r3, #4
 8005480:	6713      	str	r3, [r2, #112]	; 0x70
 8005482:	e01c      	b.n	80054be <HAL_RCC_OscConfig+0x4de>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b05      	cmp	r3, #5
 800548a:	d10c      	bne.n	80054a6 <HAL_RCC_OscConfig+0x4c6>
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 8005492:	f043 0304 	orr.w	r3, r3, #4
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
 80054a4:	e00b      	b.n	80054be <HAL_RCC_OscConfig+0x4de>
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	6713      	str	r3, [r2, #112]	; 0x70
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4a16      	ldr	r2, [pc, #88]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d015      	beq.n	80054f2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fd f895 	bl	80025f4 <HAL_GetTick>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ce:	f7fd f891 	bl	80025f4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e11e      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <HAL_RCC_OscConfig+0x530>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0ee      	beq.n	80054ce <HAL_RCC_OscConfig+0x4ee>
 80054f0:	e018      	b.n	8005524 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f2:	f7fd f87f 	bl	80025f4 <HAL_GetTick>
 80054f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054f8:	e00e      	b.n	8005518 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fa:	f7fd f87b 	bl	80025f4 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f241 3288 	movw	r2, #5000	; 0x1388
 8005508:	4293      	cmp	r3, r2
 800550a:	d905      	bls.n	8005518 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e108      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
 8005510:	58024400 	.word	0x58024400
 8005514:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005518:	4b84      	ldr	r3, [pc, #528]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ea      	bne.n	80054fa <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80f9 	beq.w	8005720 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800552e:	4b7f      	ldr	r3, [pc, #508]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005536:	2b18      	cmp	r3, #24
 8005538:	f000 80b4 	beq.w	80056a4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b02      	cmp	r3, #2
 8005542:	f040 8095 	bne.w	8005670 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b79      	ldr	r3, [pc, #484]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a78      	ldr	r2, [pc, #480]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800554c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fd f84f 	bl	80025f4 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555a:	f7fd f84b 	bl	80025f4 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0da      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800556c:	4b6f      	ldr	r3, [pc, #444]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005578:	4b6c      	ldr	r3, [pc, #432]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800557a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557c:	4b6c      	ldr	r3, [pc, #432]	; (8005730 <HAL_RCC_OscConfig+0x750>)
 800557e:	4013      	ands	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005588:	0112      	lsls	r2, r2, #4
 800558a:	430a      	orrs	r2, r1
 800558c:	4967      	ldr	r1, [pc, #412]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	628b      	str	r3, [r1, #40]	; 0x28
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	3b01      	subs	r3, #1
 8005598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	3b01      	subs	r3, #1
 80055a2:	025b      	lsls	r3, r3, #9
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	3b01      	subs	r3, #1
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	3b01      	subs	r3, #1
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055c2:	495a      	ldr	r1, [pc, #360]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80055c8:	4b58      	ldr	r3, [pc, #352]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055d4:	4b55      	ldr	r3, [pc, #340]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d8:	4b56      	ldr	r3, [pc, #344]	; (8005734 <HAL_RCC_OscConfig+0x754>)
 80055da:	4013      	ands	r3, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055e0:	00d2      	lsls	r2, r2, #3
 80055e2:	4952      	ldr	r1, [pc, #328]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055e8:	4b50      	ldr	r3, [pc, #320]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	f023 020c 	bic.w	r2, r3, #12
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	494d      	ldr	r1, [pc, #308]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055fa:	4b4c      	ldr	r3, [pc, #304]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	f023 0202 	bic.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	4949      	ldr	r1, [pc, #292]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005608:	4313      	orrs	r3, r2
 800560a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800560c:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a46      	ldr	r2, [pc, #280]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005618:	4b44      	ldr	r3, [pc, #272]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a43      	ldr	r2, [pc, #268]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800561e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005624:	4b41      	ldr	r3, [pc, #260]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	4a40      	ldr	r2, [pc, #256]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800562a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800562e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005630:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	4a3d      	ldr	r2, [pc, #244]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a3a      	ldr	r2, [pc, #232]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc ffd4 	bl	80025f4 <HAL_GetTick>
 800564c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005650:	f7fc ffd0 	bl	80025f4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e05f      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005662:	4b32      	ldr	r3, [pc, #200]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x670>
 800566e:	e057      	b.n	8005720 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005670:	4b2e      	ldr	r3, [pc, #184]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2d      	ldr	r2, [pc, #180]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fc ffba 	bl	80025f4 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005684:	f7fc ffb6 	bl	80025f4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e045      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005696:	4b25      	ldr	r3, [pc, #148]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x6a4>
 80056a2:	e03d      	b.n	8005720 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056a4:	4b21      	ldr	r3, [pc, #132]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056aa:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_RCC_OscConfig+0x74c>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d031      	beq.n	800571c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f003 0203 	and.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d12a      	bne.n	800571c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d122      	bne.n	800571c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d11a      	bne.n	800571c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	0a5b      	lsrs	r3, r3, #9
 80056ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d111      	bne.n	800571c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d108      	bne.n	800571c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	0e1b      	lsrs	r3, r3, #24
 800570e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3730      	adds	r7, #48	; 0x30
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	58024400 	.word	0x58024400
 8005730:	fffffc0c 	.word	0xfffffc0c
 8005734:	ffff0007 	.word	0xffff0007

08005738 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e19c      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800574c:	4b8a      	ldr	r3, [pc, #552]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d910      	bls.n	800577c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575a:	4b87      	ldr	r3, [pc, #540]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 020f 	bic.w	r2, r3, #15
 8005762:	4985      	ldr	r1, [pc, #532]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	4313      	orrs	r3, r2
 8005768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800576a:	4b83      	ldr	r3, [pc, #524]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d001      	beq.n	800577c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e184      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	4b7b      	ldr	r3, [pc, #492]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005794:	429a      	cmp	r2, r3
 8005796:	d908      	bls.n	80057aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005798:	4b78      	ldr	r3, [pc, #480]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4975      	ldr	r1, [pc, #468]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	4b70      	ldr	r3, [pc, #448]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d908      	bls.n	80057d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c6:	4b6d      	ldr	r3, [pc, #436]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	496a      	ldr	r1, [pc, #424]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d908      	bls.n	8005806 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f4:	4b61      	ldr	r3, [pc, #388]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	495e      	ldr	r1, [pc, #376]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	4b59      	ldr	r3, [pc, #356]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800581e:	429a      	cmp	r2, r3
 8005820:	d908      	bls.n	8005834 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005822:	4b56      	ldr	r3, [pc, #344]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4953      	ldr	r1, [pc, #332]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005830:	4313      	orrs	r3, r2
 8005832:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d010      	beq.n	8005862 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	4b4d      	ldr	r3, [pc, #308]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	429a      	cmp	r2, r3
 800584e:	d908      	bls.n	8005862 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005850:	4b4a      	ldr	r3, [pc, #296]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f023 020f 	bic.w	r2, r3, #15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4947      	ldr	r1, [pc, #284]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800585e:	4313      	orrs	r3, r2
 8005860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d055      	beq.n	800591a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800586e:	4b43      	ldr	r3, [pc, #268]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	4940      	ldr	r1, [pc, #256]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800587c:	4313      	orrs	r3, r2
 800587e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d107      	bne.n	8005898 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005888:	4b3c      	ldr	r3, [pc, #240]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d121      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0f6      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d107      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058a0:	4b36      	ldr	r3, [pc, #216]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d115      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e0ea      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058b8:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0de      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058c8:	4b2c      	ldr	r3, [pc, #176]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0d6      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058d8:	4b28      	ldr	r3, [pc, #160]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f023 0207 	bic.w	r2, r3, #7
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4925      	ldr	r1, [pc, #148]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ea:	f7fc fe83 	bl	80025f4 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f0:	e00a      	b.n	8005908 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f2:	f7fc fe7f 	bl	80025f4 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0be      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005908:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	429a      	cmp	r2, r3
 8005918:	d1eb      	bne.n	80058f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d010      	beq.n	8005948 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	429a      	cmp	r2, r3
 8005934:	d208      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f023 020f 	bic.w	r2, r3, #15
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	490e      	ldr	r1, [pc, #56]	; (800597c <HAL_RCC_ClockConfig+0x244>)
 8005944:	4313      	orrs	r3, r2
 8005946:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d214      	bcs.n	8005980 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f023 020f 	bic.w	r2, r3, #15
 800595e:	4906      	ldr	r1, [pc, #24]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b04      	ldr	r3, [pc, #16]	; (8005978 <HAL_RCC_ClockConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d005      	beq.n	8005980 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e086      	b.n	8005a86 <HAL_RCC_ClockConfig+0x34e>
 8005978:	52002000 	.word	0x52002000
 800597c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d010      	beq.n	80059ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005998:	429a      	cmp	r2, r3
 800599a:	d208      	bcs.n	80059ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800599c:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	4939      	ldr	r1, [pc, #228]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d010      	beq.n	80059dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d208      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059ca:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	492e      	ldr	r1, [pc, #184]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d208      	bcs.n	8005a0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	4922      	ldr	r1, [pc, #136]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d010      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69da      	ldr	r2, [r3, #28]
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d208      	bcs.n	8005a38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4917      	ldr	r1, [pc, #92]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a38:	f000 f834 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	4912      	ldr	r1, [pc, #72]	; (8005a94 <HAL_RCC_ClockConfig+0x35c>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
 8005a54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <HAL_RCC_ClockConfig+0x358>)
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <HAL_RCC_ClockConfig+0x35c>)
 8005a60:	5cd3      	ldrb	r3, [r2, r3]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6c:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x360>)
 8005a6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <HAL_RCC_ClockConfig+0x364>)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <HAL_RCC_ClockConfig+0x368>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fc fd70 	bl	8002560 <HAL_InitTick>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	0800a89c 	.word	0x0800a89c
 8005a98:	24000004 	.word	0x24000004
 8005a9c:	24000000 	.word	0x24000000
 8005aa0:	24000008 	.word	0x24000008

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aaa:	4bb3      	ldr	r3, [pc, #716]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ab2:	2b18      	cmp	r3, #24
 8005ab4:	f200 8155 	bhi.w	8005d62 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ab8:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005d63 	.word	0x08005d63
 8005ac8:	08005d63 	.word	0x08005d63
 8005acc:	08005d63 	.word	0x08005d63
 8005ad0:	08005d63 	.word	0x08005d63
 8005ad4:	08005d63 	.word	0x08005d63
 8005ad8:	08005d63 	.word	0x08005d63
 8005adc:	08005d63 	.word	0x08005d63
 8005ae0:	08005b4b 	.word	0x08005b4b
 8005ae4:	08005d63 	.word	0x08005d63
 8005ae8:	08005d63 	.word	0x08005d63
 8005aec:	08005d63 	.word	0x08005d63
 8005af0:	08005d63 	.word	0x08005d63
 8005af4:	08005d63 	.word	0x08005d63
 8005af8:	08005d63 	.word	0x08005d63
 8005afc:	08005d63 	.word	0x08005d63
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005d63 	.word	0x08005d63
 8005b08:	08005d63 	.word	0x08005d63
 8005b0c:	08005d63 	.word	0x08005d63
 8005b10:	08005d63 	.word	0x08005d63
 8005b14:	08005d63 	.word	0x08005d63
 8005b18:	08005d63 	.word	0x08005d63
 8005b1c:	08005d63 	.word	0x08005d63
 8005b20:	08005b57 	.word	0x08005b57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b24:	4b94      	ldr	r3, [pc, #592]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b30:	4b91      	ldr	r3, [pc, #580]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	4a90      	ldr	r2, [pc, #576]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b42:	e111      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b44:	4b8d      	ldr	r3, [pc, #564]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b46:	61bb      	str	r3, [r7, #24]
    break;
 8005b48:	e10e      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b4a:	4b8d      	ldr	r3, [pc, #564]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b4c:	61bb      	str	r3, [r7, #24]
    break;
 8005b4e:	e10b      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005b50:	4b8c      	ldr	r3, [pc, #560]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b52:	61bb      	str	r3, [r7, #24]
    break;
 8005b54:	e108      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b56:	4b88      	ldr	r3, [pc, #544]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005b60:	4b85      	ldr	r3, [pc, #532]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b6c:	4b82      	ldr	r3, [pc, #520]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b76:	4b80      	ldr	r3, [pc, #512]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	08db      	lsrs	r3, r3, #3
 8005b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80e1 	beq.w	8005d5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	f000 8083 	beq.w	8005ca8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	f200 80a1 	bhi.w	8005cec <HAL_RCC_GetSysClockFreq+0x248>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x114>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d056      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bb6:	e099      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb8:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02d      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bc4:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	08db      	lsrs	r3, r3, #3
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	4a6b      	ldr	r2, [pc, #428]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c1e:	e087      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b51      	ldr	r3, [pc, #324]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c62:	e065      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b40      	ldr	r3, [pc, #256]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca6:	e043      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cba:	4b2f      	ldr	r3, [pc, #188]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cea:	e021      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d30:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	0a5b      	lsrs	r3, r3, #9
 8005d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d54:	ee17 3a90 	vmov	r3, s15
 8005d58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d5a:	e005      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61bb      	str	r3, [r7, #24]
    break;
 8005d60:	e002      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d64:	61bb      	str	r3, [r7, #24]
    break;
 8005d66:	bf00      	nop
  }

  return sysclockfreq;
 8005d68:	69bb      	ldr	r3, [r7, #24]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	03d09000 	.word	0x03d09000
 8005d80:	003d0900 	.word	0x003d0900
 8005d84:	017d7840 	.word	0x017d7840
 8005d88:	46000000 	.word	0x46000000
 8005d8c:	4c742400 	.word	0x4c742400
 8005d90:	4a742400 	.word	0x4a742400
 8005d94:	4bbebc20 	.word	0x4bbebc20

08005d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d9e:	f7ff fe81 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	490f      	ldr	r1, [pc, #60]	; (8005dec <HAL_RCC_GetHCLKFreq+0x54>)
 8005db0:	5ccb      	ldrb	r3, [r1, r3]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	4a09      	ldr	r2, [pc, #36]	; (8005dec <HAL_RCC_GetHCLKFreq+0x54>)
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	4a07      	ldr	r2, [pc, #28]	; (8005df0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd6:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	58024400 	.word	0x58024400
 8005dec:	0800a89c 	.word	0x0800a89c
 8005df0:	24000004 	.word	0x24000004
 8005df4:	24000000 	.word	0x24000000

08005df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dfc:	f7ff ffcc 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4904      	ldr	r1, [pc, #16]	; (8005e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	0800a89c 	.word	0x0800a89c

08005e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e28:	f7ff ffb6 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	0a1b      	lsrs	r3, r3, #8
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	4904      	ldr	r1, [pc, #16]	; (8005e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	0800a89c 	.word	0x0800a89c

08005e50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d03f      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e74:	d02a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e7a:	d824      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e80:	d018      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e86:	d81e      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e92:	e018      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4bab      	ldr	r3, [pc, #684]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4aaa      	ldr	r2, [pc, #680]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ea0:	e015      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 feff 	bl	8007cac <RCCEx_PLL2_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005eb2:	e00c      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3324      	adds	r3, #36	; 0x24
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 ffa8 	bl	8007e10 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ed4:	4b9b      	ldr	r3, [pc, #620]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	4998      	ldr	r1, [pc, #608]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ee6:	e001      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d03d      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d826      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f1d 	.word	0x08005f1d
 8005f0c:	08005f2b 	.word	0x08005f2b
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	08005f55 	.word	0x08005f55
 8005f18:	08005f55 	.word	0x08005f55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1c:	4b89      	ldr	r3, [pc, #548]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4a88      	ldr	r2, [pc, #544]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f28:	e015      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 febb 	bl	8007cac <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f3a:	e00c      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3324      	adds	r3, #36	; 0x24
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 ff64 	bl	8007e10 <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f4c:	e003      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
      break;
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f5c:	4b79      	ldr	r3, [pc, #484]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f60:	f023 0207 	bic.w	r2, r3, #7
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	4976      	ldr	r1, [pc, #472]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f6e:	e001      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d051      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f86:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005f8a:	d036      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f8c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005f90:	d830      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f96:	d032      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f9c:	d82a      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005f9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005fa2:	d02e      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005fa4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005fa8:	d824      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fae:	d018      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb4:	d81e      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fbe:	d007      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005fc0:	e018      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc2:	4b60      	ldr	r3, [pc, #384]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	4a5f      	ldr	r2, [pc, #380]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fce:	e019      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 fe68 	bl	8007cac <RCCEx_PLL2_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005fe0:	e010      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3324      	adds	r3, #36	; 0x24
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 ff11 	bl	8007e10 <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ff2:	e007      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	e004      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800600a:	4b4e      	ldr	r3, [pc, #312]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006018:	494a      	ldr	r1, [pc, #296]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800601a:	4313      	orrs	r3, r2
 800601c:	658b      	str	r3, [r1, #88]	; 0x58
 800601e:	e001      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602c:	2b00      	cmp	r3, #0
 800602e:	d051      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006036:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800603a:	d036      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800603c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006040:	d830      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006046:	d032      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800604c:	d82a      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800604e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006052:	d02e      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006054:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006058:	d824      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800605a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800605e:	d018      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006064:	d81e      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800606a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800606e:	d007      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006070:	e018      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4a33      	ldr	r2, [pc, #204]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800607e:	e019      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fe10 	bl	8007cac <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006090:	e010      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f001 feb9 	bl	8007e10 <RCCEx_PLL3_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060a2:	e007      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
      break;
 80060a8:	e004      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80060aa:	bf00      	nop
 80060ac:	e002      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80060ae:	bf00      	nop
 80060b0:	e000      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80060b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060ba:	4b22      	ldr	r3, [pc, #136]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060c8:	491e      	ldr	r1, [pc, #120]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	658b      	str	r3, [r1, #88]	; 0x58
 80060ce:	e001      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d035      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d01c      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060e8:	2b30      	cmp	r3, #48	; 0x30
 80060ea:	d817      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d00c      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d813      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d016      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d10f      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fc:	4b11      	ldr	r3, [pc, #68]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a10      	ldr	r2, [pc, #64]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006108:	e00e      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	2102      	movs	r1, #2
 8006110:	4618      	mov	r0, r3
 8006112:	f001 fdcb 	bl	8007cac <RCCEx_PLL2_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800611a:	e005      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
      break;
 8006120:	e002      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613a:	4902      	ldr	r1, [pc, #8]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800613c:	4313      	orrs	r3, r2
 800613e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006140:	e004      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d047      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006160:	d030      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006166:	d82a      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800616c:	d02c      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800616e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006172:	d824      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006178:	d018      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800617a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617e:	d81e      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d007      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800618a:	e018      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4bac      	ldr	r3, [pc, #688]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4aab      	ldr	r2, [pc, #684]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006198:	e017      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3304      	adds	r3, #4
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fd83 	bl	8007cac <RCCEx_PLL2_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061aa:	e00e      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3324      	adds	r3, #36	; 0x24
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fe2c 	bl	8007e10 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061bc:	e005      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	75fb      	strb	r3, [r7, #23]
      break;
 80061c2:	e002      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80061c4:	bf00      	nop
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80061c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061d0:	4b9b      	ldr	r3, [pc, #620]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061dc:	4998      	ldr	r1, [pc, #608]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	650b      	str	r3, [r1, #80]	; 0x50
 80061e2:	e001      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d049      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061fc:	d02e      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80061fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006202:	d828      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006208:	d02a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800620a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800620e:	d822      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006210:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006214:	d026      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006216:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800621a:	d81c      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800621c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006220:	d010      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006226:	d816      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01d      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d111      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	2101      	movs	r1, #1
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fd37 	bl	8007cac <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006242:	e012      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fde0 	bl	8007e10 <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006254:	e009      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      break;
 800625a:	e006      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800625c:	bf00      	nop
 800625e:	e004      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d109      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006270:	4b73      	ldr	r3, [pc, #460]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006274:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627c:	4970      	ldr	r1, [pc, #448]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800627e:	4313      	orrs	r3, r2
 8006280:	650b      	str	r3, [r1, #80]	; 0x50
 8006282:	e001      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d04b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800629a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629e:	d02e      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80062a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062a4:	d828      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d02a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d822      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80062b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062b6:	d026      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80062b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062bc:	d81c      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80062be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c2:	d010      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80062c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c8:	d816      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01d      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80062ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062d2:	d111      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	2101      	movs	r1, #1
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fce6 	bl	8007cac <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80062e4:	e012      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2101      	movs	r1, #1
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fd8f 	bl	8007e10 <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80062f6:	e009      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800630a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006312:	4b4b      	ldr	r3, [pc, #300]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006320:	4947      	ldr	r1, [pc, #284]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006322:	4313      	orrs	r3, r2
 8006324:	658b      	str	r3, [r1, #88]	; 0x58
 8006326:	e001      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d02f      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800633c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006340:	d00e      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006346:	d814      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800634c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006350:	d10f      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a3a      	ldr	r2, [pc, #232]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800635e:	e00c      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f001 fca0 	bl	8007cac <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006370:	e003      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
      break;
 8006376:	e000      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006380:	4b2f      	ldr	r3, [pc, #188]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006384:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638c:	492c      	ldr	r1, [pc, #176]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800638e:	4313      	orrs	r3, r2
 8006390:	650b      	str	r3, [r1, #80]	; 0x50
 8006392:	e001      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d032      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d81b      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063eb 	.word	0x080063eb
 80063b8:	080063c5 	.word	0x080063c5
 80063bc:	080063d3 	.word	0x080063d3
 80063c0:	080063eb 	.word	0x080063eb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c4:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80063d0:	e00c      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3304      	adds	r3, #4
 80063d6:	2102      	movs	r1, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fc67 	bl	8007cac <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e000      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80063ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	f023 0203 	bic.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	4910      	ldr	r1, [pc, #64]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006400:	4313      	orrs	r3, r2
 8006402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006404:	e001      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 808a 	beq.w	800652c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a09      	ldr	r2, [pc, #36]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800641e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006424:	f7fc f8e6 	bl	80025f4 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800642a:	e00d      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642c:	f7fc f8e2 	bl	80025f4 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	; 0x64
 8006438:	d906      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	75fb      	strb	r3, [r7, #23]
        break;
 800643e:	e009      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006440:	58024400 	.word	0x58024400
 8006444:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006448:	4bb9      	ldr	r3, [pc, #740]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0eb      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d166      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800645a:	4bb6      	ldr	r3, [pc, #728]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800645c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006464:	4053      	eors	r3, r2
 8006466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646a:	2b00      	cmp	r3, #0
 800646c:	d013      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800646e:	4bb1      	ldr	r3, [pc, #708]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006476:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006478:	4bae      	ldr	r3, [pc, #696]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800647a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647c:	4aad      	ldr	r2, [pc, #692]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800647e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006482:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006484:	4bab      	ldr	r3, [pc, #684]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	4aaa      	ldr	r2, [pc, #680]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800648a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006490:	4aa8      	ldr	r2, [pc, #672]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a0:	d115      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fc f8a7 	bl	80025f4 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a8:	e00b      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064aa:	f7fc f8a3 	bl	80025f4 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d902      	bls.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	75fb      	strb	r3, [r7, #23]
            break;
 80064c0:	e005      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064c2:	4b9c      	ldr	r3, [pc, #624]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0ed      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d126      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e2:	d10d      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80064e4:	4b93      	ldr	r3, [pc, #588]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064f2:	0919      	lsrs	r1, r3, #4
 80064f4:	4b90      	ldr	r3, [pc, #576]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064f6:	400b      	ands	r3, r1
 80064f8:	498e      	ldr	r1, [pc, #568]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	610b      	str	r3, [r1, #16]
 80064fe:	e005      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006500:	4b8c      	ldr	r3, [pc, #560]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4a8b      	ldr	r2, [pc, #556]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006506:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800650a:	6113      	str	r3, [r2, #16]
 800650c:	4b89      	ldr	r3, [pc, #548]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800650e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651a:	4986      	ldr	r1, [pc, #536]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800651c:	4313      	orrs	r3, r2
 800651e:	670b      	str	r3, [r1, #112]	; 0x70
 8006520:	e004      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	75bb      	strb	r3, [r7, #22]
 8006526:	e001      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d07e      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653c:	2b28      	cmp	r3, #40	; 0x28
 800653e:	d867      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	08006617 	.word	0x08006617
 800654c:	08006611 	.word	0x08006611
 8006550:	08006611 	.word	0x08006611
 8006554:	08006611 	.word	0x08006611
 8006558:	08006611 	.word	0x08006611
 800655c:	08006611 	.word	0x08006611
 8006560:	08006611 	.word	0x08006611
 8006564:	08006611 	.word	0x08006611
 8006568:	080065ed 	.word	0x080065ed
 800656c:	08006611 	.word	0x08006611
 8006570:	08006611 	.word	0x08006611
 8006574:	08006611 	.word	0x08006611
 8006578:	08006611 	.word	0x08006611
 800657c:	08006611 	.word	0x08006611
 8006580:	08006611 	.word	0x08006611
 8006584:	08006611 	.word	0x08006611
 8006588:	080065ff 	.word	0x080065ff
 800658c:	08006611 	.word	0x08006611
 8006590:	08006611 	.word	0x08006611
 8006594:	08006611 	.word	0x08006611
 8006598:	08006611 	.word	0x08006611
 800659c:	08006611 	.word	0x08006611
 80065a0:	08006611 	.word	0x08006611
 80065a4:	08006611 	.word	0x08006611
 80065a8:	08006617 	.word	0x08006617
 80065ac:	08006611 	.word	0x08006611
 80065b0:	08006611 	.word	0x08006611
 80065b4:	08006611 	.word	0x08006611
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006611 	.word	0x08006611
 80065c0:	08006611 	.word	0x08006611
 80065c4:	08006611 	.word	0x08006611
 80065c8:	08006617 	.word	0x08006617
 80065cc:	08006611 	.word	0x08006611
 80065d0:	08006611 	.word	0x08006611
 80065d4:	08006611 	.word	0x08006611
 80065d8:	08006611 	.word	0x08006611
 80065dc:	08006611 	.word	0x08006611
 80065e0:	08006611 	.word	0x08006611
 80065e4:	08006611 	.word	0x08006611
 80065e8:	08006617 	.word	0x08006617
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fb5a 	bl	8007cac <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80065fc:	e00c      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3324      	adds	r3, #36	; 0x24
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fc03 	bl	8007e10 <RCCEx_PLL3_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800661e:	4b45      	ldr	r3, [pc, #276]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662a:	4942      	ldr	r1, [pc, #264]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800662c:	4313      	orrs	r3, r2
 800662e:	654b      	str	r3, [r1, #84]	; 0x54
 8006630:	e001      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d037      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	2b05      	cmp	r3, #5
 8006648:	d820      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006693 	.word	0x08006693
 8006654:	08006669 	.word	0x08006669
 8006658:	0800667b 	.word	0x0800667b
 800665c:	08006693 	.word	0x08006693
 8006660:	08006693 	.word	0x08006693
 8006664:	08006693 	.word	0x08006693
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	2101      	movs	r1, #1
 800666e:	4618      	mov	r0, r3
 8006670:	f001 fb1c 	bl	8007cac <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006678:	e00c      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3324      	adds	r3, #36	; 0x24
 800667e:	2101      	movs	r1, #1
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fbc5 	bl	8007e10 <RCCEx_PLL3_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800668a:	e003      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
      break;
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800669a:	4b26      	ldr	r3, [pc, #152]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f023 0207 	bic.w	r2, r3, #7
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	4923      	ldr	r1, [pc, #140]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	654b      	str	r3, [r1, #84]	; 0x54
 80066ac:	e001      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d040      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c4:	2b05      	cmp	r3, #5
 80066c6:	d821      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80066c8:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	08006713 	.word	0x08006713
 80066d4:	080066e9 	.word	0x080066e9
 80066d8:	080066fb 	.word	0x080066fb
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006713 	.word	0x08006713
 80066e4:	08006713 	.word	0x08006713
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	2101      	movs	r1, #1
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 fadc 	bl	8007cac <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80066f8:	e00c      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3324      	adds	r3, #36	; 0x24
 80066fe:	2101      	movs	r1, #1
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fb85 	bl	8007e10 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
      break;
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d110      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	f023 0207 	bic.w	r2, r3, #7
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006728:	4902      	ldr	r1, [pc, #8]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800672a:	4313      	orrs	r3, r2
 800672c:	658b      	str	r3, [r1, #88]	; 0x58
 800672e:	e007      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006730:	58024800 	.word	0x58024800
 8006734:	58024400 	.word	0x58024400
 8006738:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d04b      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006756:	d02e      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800675c:	d828      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d02a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d822      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800676a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800676e:	d026      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006770:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006774:	d81c      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677a:	d010      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006780:	d816      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01d      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678a:	d111      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fa8a 	bl	8007cac <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800679c:	e012      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 fb33 	bl	8007e10 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80067ae:	e009      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
      break;
 80067b4:	e006      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80067b6:	bf00      	nop
 80067b8:	e004      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80067ba:	bf00      	nop
 80067bc:	e002      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80067be:	bf00      	nop
 80067c0:	e000      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80067c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ca:	4bb2      	ldr	r3, [pc, #712]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	49ae      	ldr	r1, [pc, #696]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	654b      	str	r3, [r1, #84]	; 0x54
 80067de:	e001      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d04b      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80067fa:	d02e      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80067fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006800:	d828      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d02a      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d822      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800680e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006812:	d026      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006818:	d81c      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800681a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681e:	d010      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006824:	d816      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01d      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800682a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682e:	d111      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3304      	adds	r3, #4
 8006834:	2100      	movs	r1, #0
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fa38 	bl	8007cac <RCCEx_PLL2_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006840:	e012      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3324      	adds	r3, #36	; 0x24
 8006846:	2102      	movs	r1, #2
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fae1 	bl	8007e10 <RCCEx_PLL3_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006852:	e009      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
      break;
 8006858:	e006      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800685a:	bf00      	nop
 800685c:	e004      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800686e:	4b89      	ldr	r3, [pc, #548]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800687c:	4985      	ldr	r1, [pc, #532]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800687e:	4313      	orrs	r3, r2
 8006880:	658b      	str	r3, [r1, #88]	; 0x58
 8006882:	e001      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d04b      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800689a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800689e:	d02e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80068a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068a4:	d828      	bhi.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d02a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80068ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b0:	d822      	bhi.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80068b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068b6:	d026      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80068b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068bc:	d81c      	bhi.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80068be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c2:	d010      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80068c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c8:	d816      	bhi.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01d      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	d111      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3304      	adds	r3, #4
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 f9e6 	bl	8007cac <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80068e4:	e012      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3324      	adds	r3, #36	; 0x24
 80068ea:	2102      	movs	r1, #2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fa8f 	bl	8007e10 <RCCEx_PLL3_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80068f6:	e009      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	75fb      	strb	r3, [r7, #23]
      break;
 80068fc:	e006      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80068fe:	bf00      	nop
 8006900:	e004      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006902:	bf00      	nop
 8006904:	e002      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800690a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006912:	4b60      	ldr	r3, [pc, #384]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006920:	495c      	ldr	r1, [pc, #368]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006922:	4313      	orrs	r3, r2
 8006924:	658b      	str	r3, [r1, #88]	; 0x58
 8006926:	e001      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d018      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006940:	d10a      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3324      	adds	r3, #36	; 0x24
 8006946:	2102      	movs	r1, #2
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fa61 	bl	8007e10 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006958:	4b4e      	ldr	r3, [pc, #312]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006964:	494b      	ldr	r1, [pc, #300]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006966:	4313      	orrs	r3, r2
 8006968:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006980:	d10a      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3324      	adds	r3, #36	; 0x24
 8006986:	2102      	movs	r1, #2
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fa41 	bl	8007e10 <RCCEx_PLL3_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006998:	4b3e      	ldr	r3, [pc, #248]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	493b      	ldr	r1, [pc, #236]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d034      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069c2:	d01d      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80069c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069c8:	d817      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80069ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d2:	d009      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069d4:	e011      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 f965 	bl	8007cac <RCCEx_PLL2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80069e6:	e00c      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3324      	adds	r3, #36	; 0x24
 80069ec:	2102      	movs	r1, #2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 fa0e 	bl	8007e10 <RCCEx_PLL3_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80069f8:	e003      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
      break;
 80069fe:	e000      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a08:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a16:	491f      	ldr	r1, [pc, #124]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	658b      	str	r3, [r1, #88]	; 0x58
 8006a1c:	e001      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d036      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a38:	d01c      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a3e:	d816      	bhi.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a44:	d003      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a4a:	d007      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006a4c:	e00f      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a5a:	e00c      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3324      	adds	r3, #36	; 0x24
 8006a60:	2101      	movs	r1, #1
 8006a62:	4618      	mov	r0, r3
 8006a64:	f001 f9d4 	bl	8007e10 <RCCEx_PLL3_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a6c:	e003      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
      break;
 8006a72:	e000      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10d      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8a:	4902      	ldr	r1, [pc, #8]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a90:	e004      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006a92:	bf00      	nop
 8006a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d029      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d007      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006ab6:	e00f      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab8:	4b61      	ldr	r3, [pc, #388]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a60      	ldr	r2, [pc, #384]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ac4:	e00b      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	2102      	movs	r1, #2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f8ed 	bl	8007cac <RCCEx_PLL2_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ad6:	e002      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ae4:	4b56      	ldr	r3, [pc, #344]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af0:	4953      	ldr	r1, [pc, #332]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006af6:	e001      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3324      	adds	r3, #36	; 0x24
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 f97e 	bl	8007e10 <RCCEx_PLL3_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d030      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b32:	d017      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b38:	d811      	bhi.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3e:	d013      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b44:	d80b      	bhi.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d010      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b50:	4b3b      	ldr	r3, [pc, #236]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a3a      	ldr	r2, [pc, #232]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006b5c:	e007      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
      break;
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006b64:	bf00      	nop
 8006b66:	e002      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b74:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b80:	492f      	ldr	r1, [pc, #188]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	654b      	str	r3, [r1, #84]	; 0x54
 8006b86:	e001      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b98:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba4:	4926      	ldr	r1, [pc, #152]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d008      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc2:	491f      	ldr	r1, [pc, #124]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bde:	6113      	str	r3, [r2, #16]
 8006be0:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bea:	4915      	ldr	r1, [pc, #84]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da08      	bge.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bf8:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	490e      	ldr	r1, [pc, #56]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c24:	4906      	ldr	r1, [pc, #24]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006c2a:	7dbb      	ldrb	r3, [r7, #22]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	58024400 	.word	0x58024400

08006c44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b090      	sub	sp, #64	; 0x40
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	f040 8089 	bne.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006c56:	4b95      	ldr	r3, [pc, #596]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d87d      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c81 	.word	0x08006c81
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006cc9 	.word	0x08006cc9
 8006c78:	08006d5d 	.word	0x08006d5d
 8006c7c:	08006ced 	.word	0x08006ced

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c80:	4b8a      	ldr	r3, [pc, #552]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 feb8 	bl	8007a08 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c9c:	e3ed      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ca2:	e3ea      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca4:	4b81      	ldr	r3, [pc, #516]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb2:	f107 0318 	add.w	r3, r7, #24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fbfe 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cc0:	e3db      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc6:	e3d8      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc8:	4b78      	ldr	r3, [pc, #480]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd4:	d107      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fd40 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ce4:	e3c9      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cea:	e3c6      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cec:	4b6f      	ldr	r3, [pc, #444]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf6:	4b6d      	ldr	r3, [pc, #436]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d08:	4b68      	ldr	r3, [pc, #416]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	08db      	lsrs	r3, r3, #3
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	4a67      	ldr	r2, [pc, #412]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1a:	e01e      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1c:	4b63      	ldr	r3, [pc, #396]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d28:	d106      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d30:	d102      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d32:	4b60      	ldr	r3, [pc, #384]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d36:	e010      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d38:	4b5c      	ldr	r3, [pc, #368]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d44:	d106      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d4e:	4b5a      	ldr	r3, [pc, #360]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d58:	e38f      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006d5a:	e38e      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d5c:	4b57      	ldr	r3, [pc, #348]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d60:	e38b      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d66:	e388      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6e:	f040 80a7 	bne.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006d72:	4b4e      	ldr	r3, [pc, #312]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d82:	d054      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d8a:	f200 808b 	bhi.w	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d94:	f000 8083 	beq.w	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d9e:	f200 8081 	bhi.w	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da8:	d02f      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db0:	d878      	bhi.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dbe:	d012      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8006dc0:	e070      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dc2:	4b3a      	ldr	r3, [pc, #232]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dce:	d107      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fe17 	bl	8007a08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dde:	e34c      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de4:	e349      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de6:	4b31      	ldr	r3, [pc, #196]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df2:	d107      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df4:	f107 0318 	add.w	r3, r7, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fb5d 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e02:	e33a      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e08:	e337      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e0a:	4b28      	ldr	r3, [pc, #160]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e16:	d107      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fc9f 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e26:	e328      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2c:	e325      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e38:	4b1c      	ldr	r3, [pc, #112]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d10c      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	08db      	lsrs	r3, r3, #3
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006e56:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e01e      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e72:	d102      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e78:	e010      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e86:	d106      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8e:	d102      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e90:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e9a:	e2ee      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006e9c:	e2ed      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e9e:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	e2ea      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea8:	e2e7      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006eaa:	bf00      	nop
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	03d09000 	.word	0x03d09000
 8006eb4:	003d0900 	.word	0x003d0900
 8006eb8:	017d7840 	.word	0x017d7840
 8006ebc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec6:	f040 809c 	bne.w	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006eca:	4b9e      	ldr	r3, [pc, #632]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ece:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006ed2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eda:	d054      	beq.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ee2:	f200 808b 	bhi.w	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006eec:	f000 8083 	beq.w	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ef6:	f200 8081 	bhi.w	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f00:	d02f      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f08:	d878      	bhi.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f16:	d012      	beq.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006f18:	e070      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f1a:	4b8a      	ldr	r3, [pc, #552]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f26:	d107      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fd6b 	bl	8007a08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f36:	e2a0      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f3c:	e29d      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f3e:	4b81      	ldr	r3, [pc, #516]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f4a:	d107      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4c:	f107 0318 	add.w	r3, r7, #24
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fab1 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006f5a:	e28e      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f60:	e28b      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f62:	4b78      	ldr	r3, [pc, #480]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6e:	d107      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f70:	f107 030c 	add.w	r3, r7, #12
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fbf3 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f7e:	e27c      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f84:	e279      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f86:	4b6f      	ldr	r3, [pc, #444]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f90:	4b6c      	ldr	r3, [pc, #432]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d10c      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fa2:	4b68      	ldr	r3, [pc, #416]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	4a66      	ldr	r2, [pc, #408]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006fae:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fb4:	e01e      	b.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fb6:	4b63      	ldr	r3, [pc, #396]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc2:	d106      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fca:	d102      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006fcc:	4b5f      	ldr	r3, [pc, #380]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd0:	e010      	b.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fd2:	4b5c      	ldr	r3, [pc, #368]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fde:	d106      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe6:	d102      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006fe8:	4b59      	ldr	r3, [pc, #356]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fec:	e002      	b.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ff2:	e242      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006ff4:	e241      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ff6:	4b57      	ldr	r3, [pc, #348]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffa:	e23e      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007000:	e23b      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	f040 80a6 	bne.w	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800700c:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007010:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007014:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800701c:	d054      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007024:	f200 808b 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800702e:	f000 8083 	beq.w	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007038:	f200 8081 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007042:	d02f      	beq.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704a:	d878      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007058:	d012      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800705a:	e070      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800705c:	4b39      	ldr	r3, [pc, #228]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007068:	d107      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800706a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fcca 	bl	8007a08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007078:	e1ff      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707e:	e1fc      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007080:	4b30      	ldr	r3, [pc, #192]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800708c:	d107      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708e:	f107 0318 	add.w	r3, r7, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fa10 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800709c:	e1ed      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a2:	e1ea      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b0:	d107      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b2:	f107 030c 	add.w	r3, r7, #12
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fb52 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070c0:	e1db      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c6:	e1d8      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070c8:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d10c      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80070de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070e4:	4b17      	ldr	r3, [pc, #92]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	08db      	lsrs	r3, r3, #3
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	4a16      	ldr	r2, [pc, #88]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f6:	e01e      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070f8:	4b12      	ldr	r3, [pc, #72]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007104:	d106      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710c:	d102      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007112:	e010      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007120:	d106      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007128:	d102      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800712e:	e002      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007134:	e1a1      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007136:	e1a0      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713c:	e19d      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007142:	e19a      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007144:	58024400 	.word	0x58024400
 8007148:	03d09000 	.word	0x03d09000
 800714c:	003d0900 	.word	0x003d0900
 8007150:	017d7840 	.word	0x017d7840
 8007154:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800715e:	d173      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007160:	4b9a      	ldr	r3, [pc, #616]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007170:	d02f      	beq.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007178:	d863      	bhi.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007186:	d012      	beq.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007188:	e05b      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800718a:	4b90      	ldr	r3, [pc, #576]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007196:	d107      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007198:	f107 0318 	add.w	r3, r7, #24
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f98b 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071a6:	e168      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ac:	e165      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ae:	4b87      	ldr	r3, [pc, #540]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ba:	d107      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071bc:	f107 030c 	add.w	r3, r7, #12
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 facd 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071ca:	e156      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d0:	e153      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071d2:	4b7e      	ldr	r3, [pc, #504]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071dc:	4b7b      	ldr	r3, [pc, #492]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d10c      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071ee:	4b77      	ldr	r3, [pc, #476]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	08db      	lsrs	r3, r3, #3
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	4a75      	ldr	r2, [pc, #468]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80071fa:	fa22 f303 	lsr.w	r3, r2, r3
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007200:	e01e      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007202:	4b72      	ldr	r3, [pc, #456]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720e:	d106      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007216:	d102      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007218:	4b6e      	ldr	r3, [pc, #440]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721c:	e010      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800721e:	4b6b      	ldr	r3, [pc, #428]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800722a:	d106      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800722c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007232:	d102      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007234:	4b68      	ldr	r3, [pc, #416]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007238:	e002      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800723e:	e11c      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007240:	e11b      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	e118      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724e:	d133      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007250:	4b5e      	ldr	r3, [pc, #376]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007258:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007266:	d012      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007268:	e023      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800726a:	4b58      	ldr	r3, [pc, #352]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007276:	d107      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fbc3 	bl	8007a08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007286:	e0f8      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728c:	e0f5      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800728e:	4b4f      	ldr	r3, [pc, #316]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800729a:	d107      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800729c:	f107 0318 	add.w	r3, r7, #24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f909 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072aa:	e0e6      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b0:	e0e3      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b6:	e0e0      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072be:	f040 808d 	bne.w	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80072c2:	4b42      	ldr	r3, [pc, #264]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80072ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072d2:	d06b      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072da:	d874      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e2:	d056      	beq.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ea:	d86c      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072f2:	d03b      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072fa:	d864      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007302:	d021      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800730a:	d85c      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007318:	d004      	beq.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800731a:	e054      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800731c:	f000 f8b6 	bl	800748c <HAL_RCCEx_GetD3PCLK1Freq>
 8007320:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007322:	e0aa      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007324:	4b29      	ldr	r3, [pc, #164]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007330:	d107      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007332:	f107 0318 	add.w	r3, r7, #24
 8007336:	4618      	mov	r0, r3
 8007338:	f000 f8be 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007340:	e09b      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007346:	e098      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007348:	4b20      	ldr	r3, [pc, #128]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007354:	d107      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007356:	f107 030c 	add.w	r3, r7, #12
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fa00 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007364:	e089      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736a:	e086      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800736c:	4b17      	ldr	r3, [pc, #92]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b04      	cmp	r3, #4
 8007376:	d109      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007378:	4b14      	ldr	r3, [pc, #80]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	08db      	lsrs	r3, r3, #3
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800738a:	e076      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007390:	e073      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007392:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739e:	d102      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073a4:	e069      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073aa:	e066      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b8:	d102      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80073be:	e05c      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073c4:	e059      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ca:	e056      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	003d0900 	.word	0x003d0900
 80073d8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e2:	d148      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80073e4:	4b27      	ldr	r3, [pc, #156]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f4:	d02a      	beq.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073fc:	d838      	bhi.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800740a:	d00d      	beq.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800740c:	e030      	b.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800741a:	d102      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800741c:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007420:	e02b      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007426:	e028      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007434:	d107      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fae4 	bl	8007a08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007444:	e019      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800744a:	e016      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007458:	d107      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745a:	f107 0318 	add.w	r3, r7, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f82a 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007468:	e007      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746e:	e004      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007474:	e001      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800747c:	4618      	mov	r0, r3
 800747e:	3740      	adds	r7, #64	; 0x40
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	58024400 	.word	0x58024400
 8007488:	017d7840 	.word	0x017d7840

0800748c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007490:	f7fe fc82 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8007494:	4602      	mov	r2, r0
 8007496:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	4904      	ldr	r1, [pc, #16]	; (80074b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074a2:	5ccb      	ldrb	r3, [r1, r3]
 80074a4:	f003 031f 	and.w	r3, r3, #31
 80074a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	58024400 	.word	0x58024400
 80074b4:	0800a89c 	.word	0x0800a89c

080074b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074c0:	4ba1      	ldr	r3, [pc, #644]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80074ca:	4b9f      	ldr	r3, [pc, #636]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	0b1b      	lsrs	r3, r3, #12
 80074d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074d6:	4b9c      	ldr	r3, [pc, #624]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80074e2:	4b99      	ldr	r3, [pc, #612]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e6:	08db      	lsrs	r3, r3, #3
 80074e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8111 	beq.w	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b02      	cmp	r3, #2
 800750a:	f000 8083 	beq.w	8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b02      	cmp	r3, #2
 8007512:	f200 80a1 	bhi.w	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d056      	beq.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007522:	e099      	b.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007524:	4b88      	ldr	r3, [pc, #544]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02d      	beq.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007530:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	4a84      	ldr	r2, [pc, #528]	; (800774c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800758a:	e087      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007754 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ce:	e065      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e2:	4b59      	ldr	r3, [pc, #356]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007612:	e043      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800775c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007626:	4b48      	ldr	r3, [pc, #288]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	ed97 6a03 	vldr	s12, [r7, #12]
 800763a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800763e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800764a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007656:	e021      	b.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b37      	ldr	r3, [pc, #220]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a03 	vldr	s12, [r7, #12]
 800767e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800769a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800769c:	4b2a      	ldr	r3, [pc, #168]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	0a5b      	lsrs	r3, r3, #9
 80076a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c2:	ee17 2a90 	vmov	r2, s15
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	0c1b      	lsrs	r3, r3, #16
 80076d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f0:	ee17 2a90 	vmov	r2, s15
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80076f8:	4b13      	ldr	r3, [pc, #76]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800770e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007712:	edd7 6a07 	vldr	s13, [r7, #28]
 8007716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800771a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800771e:	ee17 2a90 	vmov	r2, s15
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007726:	e008      	b.n	800773a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	609a      	str	r2, [r3, #8]
}
 800773a:	bf00      	nop
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	03d09000 	.word	0x03d09000
 8007750:	46000000 	.word	0x46000000
 8007754:	4c742400 	.word	0x4c742400
 8007758:	4a742400 	.word	0x4a742400
 800775c:	4bbebc20 	.word	0x4bbebc20

08007760 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	; 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007768:	4ba1      	ldr	r3, [pc, #644]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007772:	4b9f      	ldr	r3, [pc, #636]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	0d1b      	lsrs	r3, r3, #20
 8007778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800777c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800777e:	4b9c      	ldr	r3, [pc, #624]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	0a1b      	lsrs	r3, r3, #8
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800778a:	4b99      	ldr	r3, [pc, #612]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	08db      	lsrs	r3, r3, #3
 8007790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8111 	beq.w	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	f000 8083 	beq.w	80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	f200 80a1 	bhi.w	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d056      	beq.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077ca:	e099      	b.n	8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077cc:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02d      	beq.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077d8:	4b85      	ldr	r3, [pc, #532]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	08db      	lsrs	r3, r3, #3
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	4a84      	ldr	r2, [pc, #528]	; (80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b7b      	ldr	r3, [pc, #492]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007832:	e087      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b6a      	ldr	r3, [pc, #424]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a03 	vldr	s12, [r7, #12]
 800785a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007876:	e065      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b59      	ldr	r3, [pc, #356]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a03 	vldr	s12, [r7, #12]
 800789e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ba:	e043      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b48      	ldr	r3, [pc, #288]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078fe:	e021      	b.n	8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800790e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007912:	4b37      	ldr	r3, [pc, #220]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007922:	ed97 6a03 	vldr	s12, [r7, #12]
 8007926:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800792a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007942:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007944:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	0a5b      	lsrs	r3, r3, #9
 800794a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800795a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800795e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800796a:	ee17 2a90 	vmov	r2, s15
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	0c1b      	lsrs	r3, r3, #16
 8007978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800798c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007998:	ee17 2a90 	vmov	r2, s15
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80079a0:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	0e1b      	lsrs	r3, r3, #24
 80079a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80079be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c6:	ee17 2a90 	vmov	r2, s15
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079ce:	e008      	b.n	80079e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	609a      	str	r2, [r3, #8]
}
 80079e2:	bf00      	nop
 80079e4:	3724      	adds	r7, #36	; 0x24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	03d09000 	.word	0x03d09000
 80079f8:	46000000 	.word	0x46000000
 80079fc:	4c742400 	.word	0x4c742400
 8007a00:	4a742400 	.word	0x4a742400
 8007a04:	4bbebc20 	.word	0x4bbebc20

08007a08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b089      	sub	sp, #36	; 0x24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a10:	4ba0      	ldr	r3, [pc, #640]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a1a:	4b9e      	ldr	r3, [pc, #632]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a26:	4b9b      	ldr	r3, [pc, #620]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a30:	4b98      	ldr	r3, [pc, #608]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	08db      	lsrs	r3, r3, #3
 8007a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8111 	beq.w	8007c76 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	f000 8083 	beq.w	8007b62 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	f200 80a1 	bhi.w	8007ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d056      	beq.n	8007b1e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007a70:	e099      	b.n	8007ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a72:	4b88      	ldr	r3, [pc, #544]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02d      	beq.n	8007ada <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a7e:	4b85      	ldr	r3, [pc, #532]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	4a83      	ldr	r2, [pc, #524]	; (8007c98 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa8:	4b7a      	ldr	r3, [pc, #488]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007abc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ad8:	e087      	b.n	8007bea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aec:	4b69      	ldr	r3, [pc, #420]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b1c:	e065      	b.n	8007bea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b30:	4b58      	ldr	r3, [pc, #352]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b38:	ee07 3a90 	vmov	s15, r3
 8007b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b40:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b60:	e043      	b.n	8007bea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b74:	4b47      	ldr	r3, [pc, #284]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b84:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ba4:	e021      	b.n	8007bea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb8:	4b36      	ldr	r3, [pc, #216]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc0:	ee07 3a90 	vmov	s15, r3
 8007bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bcc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007be8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007bea:	4b2a      	ldr	r3, [pc, #168]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	0a5b      	lsrs	r3, r3, #9
 8007bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c10:	ee17 2a90 	vmov	r2, s15
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3e:	ee17 2a90 	vmov	r2, s15
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007c46:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	0e1b      	lsrs	r3, r3, #24
 8007c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c6c:	ee17 2a90 	vmov	r2, s15
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c74:	e008      	b.n	8007c88 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	609a      	str	r2, [r3, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	3724      	adds	r7, #36	; 0x24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	58024400 	.word	0x58024400
 8007c98:	03d09000 	.word	0x03d09000
 8007c9c:	46000000 	.word	0x46000000
 8007ca0:	4c742400 	.word	0x4c742400
 8007ca4:	4a742400 	.word	0x4a742400
 8007ca8:	4bbebc20 	.word	0x4bbebc20

08007cac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cba:	4b53      	ldr	r3, [pc, #332]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d101      	bne.n	8007cca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e099      	b.n	8007dfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007cca:	4b4f      	ldr	r3, [pc, #316]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a4e      	ldr	r2, [pc, #312]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cd6:	f7fa fc8d 	bl	80025f4 <HAL_GetTick>
 8007cda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cdc:	e008      	b.n	8007cf0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007cde:	f7fa fc89 	bl	80025f4 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d901      	bls.n	8007cf0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e086      	b.n	8007dfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cf0:	4b45      	ldr	r3, [pc, #276]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1f0      	bne.n	8007cde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007cfc:	4b42      	ldr	r3, [pc, #264]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	031b      	lsls	r3, r3, #12
 8007d0a:	493f      	ldr	r1, [pc, #252]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	025b      	lsls	r3, r3, #9
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	041b      	lsls	r3, r3, #16
 8007d2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	061b      	lsls	r3, r3, #24
 8007d3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d40:	4931      	ldr	r1, [pc, #196]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d46:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	492d      	ldr	r1, [pc, #180]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d58:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	f023 0220 	bic.w	r2, r3, #32
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	4928      	ldr	r1, [pc, #160]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d6a:	4b27      	ldr	r3, [pc, #156]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	4a26      	ldr	r2, [pc, #152]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d70:	f023 0310 	bic.w	r3, r3, #16
 8007d74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d76:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <RCCEx_PLL2_Config+0x160>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	69d2      	ldr	r2, [r2, #28]
 8007d82:	00d2      	lsls	r2, r2, #3
 8007d84:	4920      	ldr	r1, [pc, #128]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d8a:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d90:	f043 0310 	orr.w	r3, r3, #16
 8007d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d9c:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007da8:	e00f      	b.n	8007dca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d106      	bne.n	8007dbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007db0:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dbc:	e005      	b.n	8007dca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a11      	ldr	r2, [pc, #68]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007dca:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a0e      	ldr	r2, [pc, #56]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd6:	f7fa fc0d 	bl	80025f4 <HAL_GetTick>
 8007dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ddc:	e008      	b.n	8007df0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007dde:	f7fa fc09 	bl	80025f4 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d901      	bls.n	8007df0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e006      	b.n	8007dfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <RCCEx_PLL2_Config+0x15c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0f0      	beq.n	8007dde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	58024400 	.word	0x58024400
 8007e0c:	ffff0007 	.word	0xffff0007

08007e10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e1e:	4b53      	ldr	r3, [pc, #332]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d101      	bne.n	8007e2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e099      	b.n	8007f62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e2e:	4b4f      	ldr	r3, [pc, #316]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a4e      	ldr	r2, [pc, #312]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3a:	f7fa fbdb 	bl	80025f4 <HAL_GetTick>
 8007e3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e40:	e008      	b.n	8007e54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e42:	f7fa fbd7 	bl	80025f4 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d901      	bls.n	8007e54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e086      	b.n	8007f62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e54:	4b45      	ldr	r3, [pc, #276]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1f0      	bne.n	8007e42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e60:	4b42      	ldr	r3, [pc, #264]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	051b      	lsls	r3, r3, #20
 8007e6e:	493f      	ldr	r1, [pc, #252]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	628b      	str	r3, [r1, #40]	; 0x28
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	025b      	lsls	r3, r3, #9
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	061b      	lsls	r3, r3, #24
 8007ea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ea4:	4931      	ldr	r1, [pc, #196]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007eaa:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	492d      	ldr	r1, [pc, #180]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ebc:	4b2b      	ldr	r3, [pc, #172]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	4928      	ldr	r1, [pc, #160]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ece:	4b27      	ldr	r3, [pc, #156]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007eda:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ede:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <RCCEx_PLL3_Config+0x160>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	69d2      	ldr	r2, [r2, #28]
 8007ee6:	00d2      	lsls	r2, r2, #3
 8007ee8:	4920      	ldr	r1, [pc, #128]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007eee:	4b1f      	ldr	r3, [pc, #124]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	4a19      	ldr	r2, [pc, #100]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f0c:	e00f      	b.n	8007f2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d106      	bne.n	8007f22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f20:	e005      	b.n	8007f2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	4a11      	ldr	r2, [pc, #68]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a0e      	ldr	r2, [pc, #56]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3a:	f7fa fb5b 	bl	80025f4 <HAL_GetTick>
 8007f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f40:	e008      	b.n	8007f54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f42:	f7fa fb57 	bl	80025f4 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e006      	b.n	8007f62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <RCCEx_PLL3_Config+0x15c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0f0      	beq.n	8007f42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	58024400 	.word	0x58024400
 8007f70:	ffff0007 	.word	0xffff0007

08007f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e049      	b.n	800801a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7f9 ffe6 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f000 fc94 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d001      	beq.n	800803c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e056      	b.n	80080ea <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <HAL_TIM_Base_Start+0xd4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02c      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008056:	d027      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a27      	ldr	r2, [pc, #156]	; (80080fc <HAL_TIM_Base_Start+0xd8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d022      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a26      	ldr	r2, [pc, #152]	; (8008100 <HAL_TIM_Base_Start+0xdc>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01d      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a24      	ldr	r2, [pc, #144]	; (8008104 <HAL_TIM_Base_Start+0xe0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d018      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a23      	ldr	r2, [pc, #140]	; (8008108 <HAL_TIM_Base_Start+0xe4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a21      	ldr	r2, [pc, #132]	; (800810c <HAL_TIM_Base_Start+0xe8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00e      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a20      	ldr	r2, [pc, #128]	; (8008110 <HAL_TIM_Base_Start+0xec>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <HAL_TIM_Base_Start+0xf0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <HAL_TIM_Base_Start+0x84>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <HAL_TIM_Base_Start+0xf4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d115      	bne.n	80080d4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	4b1b      	ldr	r3, [pc, #108]	; (800811c <HAL_TIM_Base_Start+0xf8>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b06      	cmp	r3, #6
 80080b8:	d015      	beq.n	80080e6 <HAL_TIM_Base_Start+0xc2>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c0:	d011      	beq.n	80080e6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 0201 	orr.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d2:	e008      	b.n	80080e6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e000      	b.n	80080e8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40000400 	.word	0x40000400
 8008100:	40000800 	.word	0x40000800
 8008104:	40000c00 	.word	0x40000c00
 8008108:	40010400 	.word	0x40010400
 800810c:	40001800 	.word	0x40001800
 8008110:	40014000 	.word	0x40014000
 8008114:	4000e000 	.word	0x4000e000
 8008118:	4000e400 	.word	0x4000e400
 800811c:	00010007 	.word	0x00010007

08008120 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6a1a      	ldr	r2, [r3, #32]
 800812e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008132:	4013      	ands	r3, r2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10f      	bne.n	8008158 <HAL_TIM_Base_Stop+0x38>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	f240 4344 	movw	r3, #1092	; 0x444
 8008142:	4013      	ands	r3, r2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d107      	bne.n	8008158 <HAL_TIM_Base_Stop+0x38>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0201 	bic.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e049      	b.n	8008214 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7f9 fe99 	bl	8001ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f000 fb97 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e049      	b.n	80082c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f841 	bl	80082ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f000 fb40 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d122      	bne.n	800833a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d11b      	bne.n	800833a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f06f 0202 	mvn.w	r2, #2
 800830a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fabf 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 8008326:	e005      	b.n	8008334 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fab1 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fac2 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b04      	cmp	r3, #4
 8008346:	d122      	bne.n	800838e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b04      	cmp	r3, #4
 8008354:	d11b      	bne.n	800838e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f06f 0204 	mvn.w	r2, #4
 800835e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa95 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 800837a:	e005      	b.n	8008388 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa87 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa98 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b08      	cmp	r3, #8
 800839a:	d122      	bne.n	80083e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d11b      	bne.n	80083e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f06f 0208 	mvn.w	r2, #8
 80083b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2204      	movs	r2, #4
 80083b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa6b 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 80083ce:	e005      	b.n	80083dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fa5d 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa6e 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d122      	bne.n	8008436 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f003 0310 	and.w	r3, r3, #16
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d11b      	bne.n	8008436 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f06f 0210 	mvn.w	r2, #16
 8008406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2208      	movs	r2, #8
 800840c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fa41 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 8008422:	e005      	b.n	8008430 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa33 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa44 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d10e      	bne.n	8008462 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b01      	cmp	r3, #1
 8008450:	d107      	bne.n	8008462 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f06f 0201 	mvn.w	r2, #1
 800845a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa0d 	bl	800887c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d10e      	bne.n	800848e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d107      	bne.n	800848e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 f821 	bl	80094d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849c:	d10e      	bne.n	80084bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a8:	2b80      	cmp	r3, #128	; 0x80
 80084aa:	d107      	bne.n	80084bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f814 	bl	80094e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d10e      	bne.n	80084e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d107      	bne.n	80084e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9f2 	bl	80088cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d10e      	bne.n	8008514 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b20      	cmp	r3, #32
 8008502:	d107      	bne.n	8008514 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f06f 0220 	mvn.w	r2, #32
 800850c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 ffd4 	bl	80094bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008536:	2302      	movs	r3, #2
 8008538:	e088      	b.n	800864c <HAL_TIM_IC_ConfigChannel+0x130>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11b      	bne.n	8008580 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f000 fd3e 	bl	8008fd8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 020c 	bic.w	r2, r2, #12
 800856a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6999      	ldr	r1, [r3, #24]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	619a      	str	r2, [r3, #24]
 800857e:	e060      	b.n	8008642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b04      	cmp	r3, #4
 8008584:	d11c      	bne.n	80085c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6819      	ldr	r1, [r3, #0]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f000 fd9f 	bl	80090d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6999      	ldr	r1, [r3, #24]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	021a      	lsls	r2, r3, #8
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	619a      	str	r2, [r3, #24]
 80085be:	e040      	b.n	8008642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d11b      	bne.n	80085fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6819      	ldr	r1, [r3, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f000 fdbc 	bl	8009152 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 020c 	bic.w	r2, r2, #12
 80085e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69d9      	ldr	r1, [r3, #28]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	61da      	str	r2, [r3, #28]
 80085fc:	e021      	b.n	8008642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b0c      	cmp	r3, #12
 8008602:	d11c      	bne.n	800863e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f000 fdd9 	bl	80091ca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69da      	ldr	r2, [r3, #28]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008626:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69d9      	ldr	r1, [r3, #28]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	021a      	lsls	r2, r3, #8
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	61da      	str	r2, [r3, #28]
 800863c:	e001      	b.n	8008642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800866e:	2302      	movs	r3, #2
 8008670:	e0ff      	b.n	8008872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b14      	cmp	r3, #20
 800867e:	f200 80f0 	bhi.w	8008862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	080086dd 	.word	0x080086dd
 800868c:	08008863 	.word	0x08008863
 8008690:	08008863 	.word	0x08008863
 8008694:	08008863 	.word	0x08008863
 8008698:	0800871d 	.word	0x0800871d
 800869c:	08008863 	.word	0x08008863
 80086a0:	08008863 	.word	0x08008863
 80086a4:	08008863 	.word	0x08008863
 80086a8:	0800875f 	.word	0x0800875f
 80086ac:	08008863 	.word	0x08008863
 80086b0:	08008863 	.word	0x08008863
 80086b4:	08008863 	.word	0x08008863
 80086b8:	0800879f 	.word	0x0800879f
 80086bc:	08008863 	.word	0x08008863
 80086c0:	08008863 	.word	0x08008863
 80086c4:	08008863 	.word	0x08008863
 80086c8:	080087e1 	.word	0x080087e1
 80086cc:	08008863 	.word	0x08008863
 80086d0:	08008863 	.word	0x08008863
 80086d4:	08008863 	.word	0x08008863
 80086d8:	08008821 	.word	0x08008821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f9a2 	bl	8008a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699a      	ldr	r2, [r3, #24]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0208 	orr.w	r2, r2, #8
 80086f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0204 	bic.w	r2, r2, #4
 8008706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6999      	ldr	r1, [r3, #24]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691a      	ldr	r2, [r3, #16]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	619a      	str	r2, [r3, #24]
      break;
 800871a:	e0a5      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fa12 	bl	8008b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6999      	ldr	r1, [r3, #24]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	021a      	lsls	r2, r3, #8
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	619a      	str	r2, [r3, #24]
      break;
 800875c:	e084      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fa7b 	bl	8008c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69da      	ldr	r2, [r3, #28]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0208 	orr.w	r2, r2, #8
 8008778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69da      	ldr	r2, [r3, #28]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0204 	bic.w	r2, r2, #4
 8008788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69d9      	ldr	r1, [r3, #28]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	61da      	str	r2, [r3, #28]
      break;
 800879c:	e064      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 fae3 	bl	8008d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69da      	ldr	r2, [r3, #28]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69d9      	ldr	r1, [r3, #28]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	021a      	lsls	r2, r3, #8
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	61da      	str	r2, [r3, #28]
      break;
 80087de:	e043      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fb2c 	bl	8008e44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0208 	orr.w	r2, r2, #8
 80087fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800881e:	e023      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fb70 	bl	8008f0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800883a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800884a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	021a      	lsls	r2, r3, #8
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008860:	e002      	b.n	8008868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	75fb      	strb	r3, [r7, #23]
      break;
 8008866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop

0800887c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a44      	ldr	r2, [pc, #272]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d013      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fe:	d00f      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a41      	ldr	r2, [pc, #260]	; (8008a08 <TIM_Base_SetConfig+0x128>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00b      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a40      	ldr	r2, [pc, #256]	; (8008a0c <TIM_Base_SetConfig+0x12c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d007      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a3f      	ldr	r2, [pc, #252]	; (8008a10 <TIM_Base_SetConfig+0x130>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a3e      	ldr	r2, [pc, #248]	; (8008a14 <TIM_Base_SetConfig+0x134>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d027      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008940:	d023      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a30      	ldr	r2, [pc, #192]	; (8008a08 <TIM_Base_SetConfig+0x128>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d01f      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a2f      	ldr	r2, [pc, #188]	; (8008a0c <TIM_Base_SetConfig+0x12c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01b      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2e      	ldr	r2, [pc, #184]	; (8008a10 <TIM_Base_SetConfig+0x130>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d017      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <TIM_Base_SetConfig+0x134>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d013      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <TIM_Base_SetConfig+0x138>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00f      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a2b      	ldr	r2, [pc, #172]	; (8008a1c <TIM_Base_SetConfig+0x13c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00b      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2a      	ldr	r2, [pc, #168]	; (8008a20 <TIM_Base_SetConfig+0x140>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d007      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a29      	ldr	r2, [pc, #164]	; (8008a24 <TIM_Base_SetConfig+0x144>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d003      	beq.n	800898a <TIM_Base_SetConfig+0xaa>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a28      	ldr	r2, [pc, #160]	; (8008a28 <TIM_Base_SetConfig+0x148>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d108      	bne.n	800899c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a10      	ldr	r2, [pc, #64]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00f      	beq.n	80089e8 <TIM_Base_SetConfig+0x108>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a12      	ldr	r2, [pc, #72]	; (8008a14 <TIM_Base_SetConfig+0x134>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00b      	beq.n	80089e8 <TIM_Base_SetConfig+0x108>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a11      	ldr	r2, [pc, #68]	; (8008a18 <TIM_Base_SetConfig+0x138>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <TIM_Base_SetConfig+0x108>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a10      	ldr	r2, [pc, #64]	; (8008a1c <TIM_Base_SetConfig+0x13c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_Base_SetConfig+0x108>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <TIM_Base_SetConfig+0x140>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d103      	bne.n	80089f0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	615a      	str	r2, [r3, #20]
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40010000 	.word	0x40010000
 8008a08:	40000400 	.word	0x40000400
 8008a0c:	40000800 	.word	0x40000800
 8008a10:	40000c00 	.word	0x40000c00
 8008a14:	40010400 	.word	0x40010400
 8008a18:	40014000 	.word	0x40014000
 8008a1c:	40014400 	.word	0x40014400
 8008a20:	40014800 	.word	0x40014800
 8008a24:	4000e000 	.word	0x4000e000
 8008a28:	4000e400 	.word	0x4000e400

08008a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f023 0201 	bic.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4b37      	ldr	r3, [pc, #220]	; (8008b34 <TIM_OC1_SetConfig+0x108>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0303 	bic.w	r3, r3, #3
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f023 0302 	bic.w	r3, r3, #2
 8008a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a2d      	ldr	r2, [pc, #180]	; (8008b38 <TIM_OC1_SetConfig+0x10c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00f      	beq.n	8008aa8 <TIM_OC1_SetConfig+0x7c>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a2c      	ldr	r2, [pc, #176]	; (8008b3c <TIM_OC1_SetConfig+0x110>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00b      	beq.n	8008aa8 <TIM_OC1_SetConfig+0x7c>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a2b      	ldr	r2, [pc, #172]	; (8008b40 <TIM_OC1_SetConfig+0x114>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d007      	beq.n	8008aa8 <TIM_OC1_SetConfig+0x7c>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a2a      	ldr	r2, [pc, #168]	; (8008b44 <TIM_OC1_SetConfig+0x118>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d003      	beq.n	8008aa8 <TIM_OC1_SetConfig+0x7c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a29      	ldr	r2, [pc, #164]	; (8008b48 <TIM_OC1_SetConfig+0x11c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d10c      	bne.n	8008ac2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f023 0308 	bic.w	r3, r3, #8
 8008aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f023 0304 	bic.w	r3, r3, #4
 8008ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a1c      	ldr	r2, [pc, #112]	; (8008b38 <TIM_OC1_SetConfig+0x10c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00f      	beq.n	8008aea <TIM_OC1_SetConfig+0xbe>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1b      	ldr	r2, [pc, #108]	; (8008b3c <TIM_OC1_SetConfig+0x110>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00b      	beq.n	8008aea <TIM_OC1_SetConfig+0xbe>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a1a      	ldr	r2, [pc, #104]	; (8008b40 <TIM_OC1_SetConfig+0x114>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d007      	beq.n	8008aea <TIM_OC1_SetConfig+0xbe>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a19      	ldr	r2, [pc, #100]	; (8008b44 <TIM_OC1_SetConfig+0x118>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_OC1_SetConfig+0xbe>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <TIM_OC1_SetConfig+0x11c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d111      	bne.n	8008b0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	621a      	str	r2, [r3, #32]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	fffeff8f 	.word	0xfffeff8f
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400
 8008b40:	40014000 	.word	0x40014000
 8008b44:	40014400 	.word	0x40014400
 8008b48:	40014800 	.word	0x40014800

08008b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	f023 0210 	bic.w	r2, r3, #16
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4b34      	ldr	r3, [pc, #208]	; (8008c48 <TIM_OC2_SetConfig+0xfc>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0320 	bic.w	r3, r3, #32
 8008b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a29      	ldr	r2, [pc, #164]	; (8008c4c <TIM_OC2_SetConfig+0x100>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_OC2_SetConfig+0x68>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a28      	ldr	r2, [pc, #160]	; (8008c50 <TIM_OC2_SetConfig+0x104>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d10d      	bne.n	8008bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a1e      	ldr	r2, [pc, #120]	; (8008c4c <TIM_OC2_SetConfig+0x100>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xac>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <TIM_OC2_SetConfig+0x104>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xac>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1c      	ldr	r2, [pc, #112]	; (8008c54 <TIM_OC2_SetConfig+0x108>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xac>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1b      	ldr	r2, [pc, #108]	; (8008c58 <TIM_OC2_SetConfig+0x10c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xac>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a1a      	ldr	r2, [pc, #104]	; (8008c5c <TIM_OC2_SetConfig+0x110>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d113      	bne.n	8008c20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	feff8fff 	.word	0xfeff8fff
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40010400 	.word	0x40010400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <TIM_OC3_SetConfig+0xf8>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a28      	ldr	r2, [pc, #160]	; (8008d5c <TIM_OC3_SetConfig+0xfc>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d003      	beq.n	8008cc6 <TIM_OC3_SetConfig+0x66>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a27      	ldr	r2, [pc, #156]	; (8008d60 <TIM_OC3_SetConfig+0x100>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d10d      	bne.n	8008ce2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <TIM_OC3_SetConfig+0xfc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00f      	beq.n	8008d0a <TIM_OC3_SetConfig+0xaa>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <TIM_OC3_SetConfig+0x100>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00b      	beq.n	8008d0a <TIM_OC3_SetConfig+0xaa>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <TIM_OC3_SetConfig+0x104>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d007      	beq.n	8008d0a <TIM_OC3_SetConfig+0xaa>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a1a      	ldr	r2, [pc, #104]	; (8008d68 <TIM_OC3_SetConfig+0x108>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d003      	beq.n	8008d0a <TIM_OC3_SetConfig+0xaa>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <TIM_OC3_SetConfig+0x10c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d113      	bne.n	8008d32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	621a      	str	r2, [r3, #32]
}
 8008d4c:	bf00      	nop
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	fffeff8f 	.word	0xfffeff8f
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40010400 	.word	0x40010400
 8008d64:	40014000 	.word	0x40014000
 8008d68:	40014400 	.word	0x40014400
 8008d6c:	40014800 	.word	0x40014800

08008d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <TIM_OC4_SetConfig+0xbc>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	031b      	lsls	r3, r3, #12
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a19      	ldr	r2, [pc, #100]	; (8008e30 <TIM_OC4_SetConfig+0xc0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00f      	beq.n	8008df0 <TIM_OC4_SetConfig+0x80>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <TIM_OC4_SetConfig+0xc4>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_OC4_SetConfig+0x80>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <TIM_OC4_SetConfig+0xc8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_OC4_SetConfig+0x80>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a16      	ldr	r2, [pc, #88]	; (8008e3c <TIM_OC4_SetConfig+0xcc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_OC4_SetConfig+0x80>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <TIM_OC4_SetConfig+0xd0>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d109      	bne.n	8008e04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	019b      	lsls	r3, r3, #6
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	621a      	str	r2, [r3, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	feff8fff 	.word	0xfeff8fff
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40010400 	.word	0x40010400
 8008e38:	40014000 	.word	0x40014000
 8008e3c:	40014400 	.word	0x40014400
 8008e40:	40014800 	.word	0x40014800

08008e44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <TIM_OC5_SetConfig+0xb0>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <TIM_OC5_SetConfig+0xb4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00f      	beq.n	8008eba <TIM_OC5_SetConfig+0x76>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a17      	ldr	r2, [pc, #92]	; (8008efc <TIM_OC5_SetConfig+0xb8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00b      	beq.n	8008eba <TIM_OC5_SetConfig+0x76>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a16      	ldr	r2, [pc, #88]	; (8008f00 <TIM_OC5_SetConfig+0xbc>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d007      	beq.n	8008eba <TIM_OC5_SetConfig+0x76>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <TIM_OC5_SetConfig+0xc0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d003      	beq.n	8008eba <TIM_OC5_SetConfig+0x76>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <TIM_OC5_SetConfig+0xc4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d109      	bne.n	8008ece <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	621a      	str	r2, [r3, #32]
}
 8008ee8:	bf00      	nop
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	fffeff8f 	.word	0xfffeff8f
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800

08008f0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4b22      	ldr	r3, [pc, #136]	; (8008fc0 <TIM_OC6_SetConfig+0xb4>)
 8008f38:	4013      	ands	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	051b      	lsls	r3, r3, #20
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a19      	ldr	r2, [pc, #100]	; (8008fc4 <TIM_OC6_SetConfig+0xb8>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00f      	beq.n	8008f84 <TIM_OC6_SetConfig+0x78>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a18      	ldr	r2, [pc, #96]	; (8008fc8 <TIM_OC6_SetConfig+0xbc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00b      	beq.n	8008f84 <TIM_OC6_SetConfig+0x78>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a17      	ldr	r2, [pc, #92]	; (8008fcc <TIM_OC6_SetConfig+0xc0>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d007      	beq.n	8008f84 <TIM_OC6_SetConfig+0x78>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <TIM_OC6_SetConfig+0xc4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d003      	beq.n	8008f84 <TIM_OC6_SetConfig+0x78>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	; (8008fd4 <TIM_OC6_SetConfig+0xc8>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d109      	bne.n	8008f98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	029b      	lsls	r3, r3, #10
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	feff8fff 	.word	0xfeff8fff
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	40010400 	.word	0x40010400
 8008fcc:	40014000 	.word	0x40014000
 8008fd0:	40014400 	.word	0x40014400
 8008fd4:	40014800 	.word	0x40014800

08008fd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	f023 0201 	bic.w	r2, r3, #1
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4a2c      	ldr	r2, [pc, #176]	; (80090b4 <TIM_TI1_SetConfig+0xdc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d023      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800900c:	d01f      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a29      	ldr	r2, [pc, #164]	; (80090b8 <TIM_TI1_SetConfig+0xe0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d01b      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4a28      	ldr	r2, [pc, #160]	; (80090bc <TIM_TI1_SetConfig+0xe4>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d017      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4a27      	ldr	r2, [pc, #156]	; (80090c0 <TIM_TI1_SetConfig+0xe8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d013      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4a26      	ldr	r2, [pc, #152]	; (80090c4 <TIM_TI1_SetConfig+0xec>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00f      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4a25      	ldr	r2, [pc, #148]	; (80090c8 <TIM_TI1_SetConfig+0xf0>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d00b      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4a24      	ldr	r2, [pc, #144]	; (80090cc <TIM_TI1_SetConfig+0xf4>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d007      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4a23      	ldr	r2, [pc, #140]	; (80090d0 <TIM_TI1_SetConfig+0xf8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d003      	beq.n	800904e <TIM_TI1_SetConfig+0x76>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4a22      	ldr	r2, [pc, #136]	; (80090d4 <TIM_TI1_SetConfig+0xfc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d101      	bne.n	8009052 <TIM_TI1_SetConfig+0x7a>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <TIM_TI1_SetConfig+0x7c>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d008      	beq.n	800906a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4313      	orrs	r3, r2
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	e003      	b.n	8009072 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	b2db      	uxtb	r3, r3
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f023 030a 	bic.w	r3, r3, #10
 800908c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f003 030a 	and.w	r3, r3, #10
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	4313      	orrs	r3, r2
 8009098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	621a      	str	r2, [r3, #32]
}
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40000400 	.word	0x40000400
 80090bc:	40000800 	.word	0x40000800
 80090c0:	40000c00 	.word	0x40000c00
 80090c4:	40010400 	.word	0x40010400
 80090c8:	40001800 	.word	0x40001800
 80090cc:	40014000 	.word	0x40014000
 80090d0:	4000e000 	.word	0x4000e000
 80090d4:	4000e400 	.word	0x4000e400

080090d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f023 0210 	bic.w	r2, r3, #16
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	031b      	lsls	r3, r3, #12
 800911c:	b29b      	uxth	r3, r3
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800912a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	011b      	lsls	r3, r3, #4
 8009130:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4313      	orrs	r3, r2
 8009138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	621a      	str	r2, [r3, #32]
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009152:	b480      	push	{r7}
 8009154:	b087      	sub	sp, #28
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800918e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	b2db      	uxtb	r3, r3
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4313      	orrs	r3, r2
 800919a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80091a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	021b      	lsls	r3, r3, #8
 80091a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	621a      	str	r2, [r3, #32]
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b087      	sub	sp, #28
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	607a      	str	r2, [r7, #4]
 80091d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	021b      	lsls	r3, r3, #8
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009208:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	031b      	lsls	r3, r3, #12
 800920e:	b29b      	uxth	r3, r3
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800921c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	031b      	lsls	r3, r3, #12
 8009222:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	4313      	orrs	r3, r2
 800922a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	621a      	str	r2, [r3, #32]
}
 8009238:	bf00      	nop
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009258:	2302      	movs	r3, #2
 800925a:	e077      	b.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a35      	ldr	r2, [pc, #212]	; (8009358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d004      	beq.n	8009290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a34      	ldr	r2, [pc, #208]	; (800935c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d108      	bne.n	80092a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a25      	ldr	r2, [pc, #148]	; (8009358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d02c      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ce:	d027      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a22      	ldr	r2, [pc, #136]	; (8009360 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d022      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a21      	ldr	r2, [pc, #132]	; (8009364 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d01d      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1f      	ldr	r2, [pc, #124]	; (8009368 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d018      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a1a      	ldr	r2, [pc, #104]	; (800935c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d013      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a1b      	ldr	r2, [pc, #108]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00e      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1a      	ldr	r2, [pc, #104]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d009      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a18      	ldr	r2, [pc, #96]	; (8009374 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d004      	beq.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d10c      	bne.n	800933a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009326:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4313      	orrs	r3, r2
 8009330:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	40010000 	.word	0x40010000
 800935c:	40010400 	.word	0x40010400
 8009360:	40000400 	.word	0x40000400
 8009364:	40000800 	.word	0x40000800
 8009368:	40000c00 	.word	0x40000c00
 800936c:	40001800 	.word	0x40001800
 8009370:	40014000 	.word	0x40014000
 8009374:	4000e000 	.word	0x4000e000
 8009378:	4000e400 	.word	0x4000e400

0800937c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009394:	2302      	movs	r3, #2
 8009396:	e087      	b.n	80094a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	041b      	lsls	r3, r3, #16
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a27      	ldr	r2, [pc, #156]	; (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d004      	beq.n	8009426 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a25      	ldr	r2, [pc, #148]	; (80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d106      	bne.n	8009434 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1e      	ldr	r2, [pc, #120]	; (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d126      	bne.n	8009496 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	051b      	lsls	r3, r3, #20
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	4313      	orrs	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d004      	beq.n	8009488 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a0d      	ldr	r2, [pc, #52]	; (80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d106      	bne.n	8009496 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	40010000 	.word	0x40010000
 80094b8:	40010400 	.word	0x40010400

080094bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e042      	b.n	8009590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7f8 fe45 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2224      	movs	r2, #36	; 0x24
 8009526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0201 	bic.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f82c 	bl	8009598 <UART_SetConfig>
 8009540:	4603      	mov	r3, r0
 8009542:	2b01      	cmp	r3, #1
 8009544:	d101      	bne.n	800954a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e022      	b.n	8009590 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fe7e 	bl	800a254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689a      	ldr	r2, [r3, #8]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 ff05 	bl	800a398 <UART_CheckIdleState>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009598:	b5b0      	push	{r4, r5, r7, lr}
 800959a:	b08e      	sub	sp, #56	; 0x38
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	431a      	orrs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	4bbf      	ldr	r3, [pc, #764]	; (80098c4 <UART_SetConfig+0x32c>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095ce:	430b      	orrs	r3, r1
 80095d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4ab5      	ldr	r2, [pc, #724]	; (80098c8 <UART_SetConfig+0x330>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d004      	beq.n	8009602 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095fe:	4313      	orrs	r3, r2
 8009600:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	4bb0      	ldr	r3, [pc, #704]	; (80098cc <UART_SetConfig+0x334>)
 800960a:	4013      	ands	r3, r2
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6812      	ldr	r2, [r2, #0]
 8009610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009612:	430b      	orrs	r3, r1
 8009614:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	f023 010f 	bic.w	r1, r3, #15
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4aa7      	ldr	r2, [pc, #668]	; (80098d0 <UART_SetConfig+0x338>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d176      	bne.n	8009724 <UART_SetConfig+0x18c>
 8009636:	4ba7      	ldr	r3, [pc, #668]	; (80098d4 <UART_SetConfig+0x33c>)
 8009638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800963e:	2b28      	cmp	r3, #40	; 0x28
 8009640:	d86c      	bhi.n	800971c <UART_SetConfig+0x184>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <UART_SetConfig+0xb0>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	080096ed 	.word	0x080096ed
 800964c:	0800971d 	.word	0x0800971d
 8009650:	0800971d 	.word	0x0800971d
 8009654:	0800971d 	.word	0x0800971d
 8009658:	0800971d 	.word	0x0800971d
 800965c:	0800971d 	.word	0x0800971d
 8009660:	0800971d 	.word	0x0800971d
 8009664:	0800971d 	.word	0x0800971d
 8009668:	080096f5 	.word	0x080096f5
 800966c:	0800971d 	.word	0x0800971d
 8009670:	0800971d 	.word	0x0800971d
 8009674:	0800971d 	.word	0x0800971d
 8009678:	0800971d 	.word	0x0800971d
 800967c:	0800971d 	.word	0x0800971d
 8009680:	0800971d 	.word	0x0800971d
 8009684:	0800971d 	.word	0x0800971d
 8009688:	080096fd 	.word	0x080096fd
 800968c:	0800971d 	.word	0x0800971d
 8009690:	0800971d 	.word	0x0800971d
 8009694:	0800971d 	.word	0x0800971d
 8009698:	0800971d 	.word	0x0800971d
 800969c:	0800971d 	.word	0x0800971d
 80096a0:	0800971d 	.word	0x0800971d
 80096a4:	0800971d 	.word	0x0800971d
 80096a8:	08009705 	.word	0x08009705
 80096ac:	0800971d 	.word	0x0800971d
 80096b0:	0800971d 	.word	0x0800971d
 80096b4:	0800971d 	.word	0x0800971d
 80096b8:	0800971d 	.word	0x0800971d
 80096bc:	0800971d 	.word	0x0800971d
 80096c0:	0800971d 	.word	0x0800971d
 80096c4:	0800971d 	.word	0x0800971d
 80096c8:	0800970d 	.word	0x0800970d
 80096cc:	0800971d 	.word	0x0800971d
 80096d0:	0800971d 	.word	0x0800971d
 80096d4:	0800971d 	.word	0x0800971d
 80096d8:	0800971d 	.word	0x0800971d
 80096dc:	0800971d 	.word	0x0800971d
 80096e0:	0800971d 	.word	0x0800971d
 80096e4:	0800971d 	.word	0x0800971d
 80096e8:	08009715 	.word	0x08009715
 80096ec:	2301      	movs	r3, #1
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e326      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80096f4:	2304      	movs	r3, #4
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e322      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80096fc:	2308      	movs	r3, #8
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e31e      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009704:	2310      	movs	r3, #16
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	e31a      	b.n	8009d42 <UART_SetConfig+0x7aa>
 800970c:	2320      	movs	r3, #32
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009712:	e316      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009714:	2340      	movs	r3, #64	; 0x40
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e312      	b.n	8009d42 <UART_SetConfig+0x7aa>
 800971c:	2380      	movs	r3, #128	; 0x80
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e30e      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a6b      	ldr	r2, [pc, #428]	; (80098d8 <UART_SetConfig+0x340>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d130      	bne.n	8009790 <UART_SetConfig+0x1f8>
 800972e:	4b69      	ldr	r3, [pc, #420]	; (80098d4 <UART_SetConfig+0x33c>)
 8009730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b05      	cmp	r3, #5
 8009738:	d826      	bhi.n	8009788 <UART_SetConfig+0x1f0>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <UART_SetConfig+0x1a8>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009759 	.word	0x08009759
 8009744:	08009761 	.word	0x08009761
 8009748:	08009769 	.word	0x08009769
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	2300      	movs	r3, #0
 800975a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975e:	e2f0      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009766:	e2ec      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976e:	e2e8      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009776:	e2e4      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009778:	2320      	movs	r3, #32
 800977a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977e:	e2e0      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e2dc      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009788:	2380      	movs	r3, #128	; 0x80
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e2d8      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a51      	ldr	r2, [pc, #324]	; (80098dc <UART_SetConfig+0x344>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d130      	bne.n	80097fc <UART_SetConfig+0x264>
 800979a:	4b4e      	ldr	r3, [pc, #312]	; (80098d4 <UART_SetConfig+0x33c>)
 800979c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d826      	bhi.n	80097f4 <UART_SetConfig+0x25c>
 80097a6:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <UART_SetConfig+0x214>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097c5 	.word	0x080097c5
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097d5 	.word	0x080097d5
 80097b8:	080097dd 	.word	0x080097dd
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ca:	e2ba      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097cc:	2304      	movs	r3, #4
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e2b6      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097d4:	2308      	movs	r3, #8
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e2b2      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097dc:	2310      	movs	r3, #16
 80097de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e2:	e2ae      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097e4:	2320      	movs	r3, #32
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	e2aa      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e2a6      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097f4:	2380      	movs	r3, #128	; 0x80
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e2a2      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a37      	ldr	r2, [pc, #220]	; (80098e0 <UART_SetConfig+0x348>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d130      	bne.n	8009868 <UART_SetConfig+0x2d0>
 8009806:	4b33      	ldr	r3, [pc, #204]	; (80098d4 <UART_SetConfig+0x33c>)
 8009808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b05      	cmp	r3, #5
 8009810:	d826      	bhi.n	8009860 <UART_SetConfig+0x2c8>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <UART_SetConfig+0x280>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009831 	.word	0x08009831
 800981c:	08009839 	.word	0x08009839
 8009820:	08009841 	.word	0x08009841
 8009824:	08009849 	.word	0x08009849
 8009828:	08009851 	.word	0x08009851
 800982c:	08009859 	.word	0x08009859
 8009830:	2300      	movs	r3, #0
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e284      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009838:	2304      	movs	r3, #4
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e280      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009840:	2308      	movs	r3, #8
 8009842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009846:	e27c      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009848:	2310      	movs	r3, #16
 800984a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984e:	e278      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009850:	2320      	movs	r3, #32
 8009852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009856:	e274      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009858:	2340      	movs	r3, #64	; 0x40
 800985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985e:	e270      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009860:	2380      	movs	r3, #128	; 0x80
 8009862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009866:	e26c      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a1d      	ldr	r2, [pc, #116]	; (80098e4 <UART_SetConfig+0x34c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d142      	bne.n	80098f8 <UART_SetConfig+0x360>
 8009872:	4b18      	ldr	r3, [pc, #96]	; (80098d4 <UART_SetConfig+0x33c>)
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b05      	cmp	r3, #5
 800987c:	d838      	bhi.n	80098f0 <UART_SetConfig+0x358>
 800987e:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <UART_SetConfig+0x2ec>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	0800989d 	.word	0x0800989d
 8009888:	080098a5 	.word	0x080098a5
 800988c:	080098ad 	.word	0x080098ad
 8009890:	080098b5 	.word	0x080098b5
 8009894:	080098bd 	.word	0x080098bd
 8009898:	080098e9 	.word	0x080098e9
 800989c:	2300      	movs	r3, #0
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e24e      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098a4:	2304      	movs	r3, #4
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e24a      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098ac:	2308      	movs	r3, #8
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	e246      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098b4:	2310      	movs	r3, #16
 80098b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ba:	e242      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098bc:	2320      	movs	r3, #32
 80098be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c2:	e23e      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098c4:	cfff69f3 	.word	0xcfff69f3
 80098c8:	58000c00 	.word	0x58000c00
 80098cc:	11fff4ff 	.word	0x11fff4ff
 80098d0:	40011000 	.word	0x40011000
 80098d4:	58024400 	.word	0x58024400
 80098d8:	40004400 	.word	0x40004400
 80098dc:	40004800 	.word	0x40004800
 80098e0:	40004c00 	.word	0x40004c00
 80098e4:	40005000 	.word	0x40005000
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e228      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098f0:	2380      	movs	r3, #128	; 0x80
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e224      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4ab1      	ldr	r2, [pc, #708]	; (8009bc4 <UART_SetConfig+0x62c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d176      	bne.n	80099f0 <UART_SetConfig+0x458>
 8009902:	4bb1      	ldr	r3, [pc, #708]	; (8009bc8 <UART_SetConfig+0x630>)
 8009904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800990a:	2b28      	cmp	r3, #40	; 0x28
 800990c:	d86c      	bhi.n	80099e8 <UART_SetConfig+0x450>
 800990e:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <UART_SetConfig+0x37c>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	080099b9 	.word	0x080099b9
 8009918:	080099e9 	.word	0x080099e9
 800991c:	080099e9 	.word	0x080099e9
 8009920:	080099e9 	.word	0x080099e9
 8009924:	080099e9 	.word	0x080099e9
 8009928:	080099e9 	.word	0x080099e9
 800992c:	080099e9 	.word	0x080099e9
 8009930:	080099e9 	.word	0x080099e9
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099e9 	.word	0x080099e9
 800993c:	080099e9 	.word	0x080099e9
 8009940:	080099e9 	.word	0x080099e9
 8009944:	080099e9 	.word	0x080099e9
 8009948:	080099e9 	.word	0x080099e9
 800994c:	080099e9 	.word	0x080099e9
 8009950:	080099e9 	.word	0x080099e9
 8009954:	080099c9 	.word	0x080099c9
 8009958:	080099e9 	.word	0x080099e9
 800995c:	080099e9 	.word	0x080099e9
 8009960:	080099e9 	.word	0x080099e9
 8009964:	080099e9 	.word	0x080099e9
 8009968:	080099e9 	.word	0x080099e9
 800996c:	080099e9 	.word	0x080099e9
 8009970:	080099e9 	.word	0x080099e9
 8009974:	080099d1 	.word	0x080099d1
 8009978:	080099e9 	.word	0x080099e9
 800997c:	080099e9 	.word	0x080099e9
 8009980:	080099e9 	.word	0x080099e9
 8009984:	080099e9 	.word	0x080099e9
 8009988:	080099e9 	.word	0x080099e9
 800998c:	080099e9 	.word	0x080099e9
 8009990:	080099e9 	.word	0x080099e9
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099e9 	.word	0x080099e9
 800999c:	080099e9 	.word	0x080099e9
 80099a0:	080099e9 	.word	0x080099e9
 80099a4:	080099e9 	.word	0x080099e9
 80099a8:	080099e9 	.word	0x080099e9
 80099ac:	080099e9 	.word	0x080099e9
 80099b0:	080099e9 	.word	0x080099e9
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	2301      	movs	r3, #1
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e1c0      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e1bc      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e1b8      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e1b4      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e1b0      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	e1ac      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ee:	e1a8      	b.n	8009d42 <UART_SetConfig+0x7aa>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a75      	ldr	r2, [pc, #468]	; (8009bcc <UART_SetConfig+0x634>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d130      	bne.n	8009a5c <UART_SetConfig+0x4c4>
 80099fa:	4b73      	ldr	r3, [pc, #460]	; (8009bc8 <UART_SetConfig+0x630>)
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	d826      	bhi.n	8009a54 <UART_SetConfig+0x4bc>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <UART_SetConfig+0x474>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a25 	.word	0x08009a25
 8009a10:	08009a2d 	.word	0x08009a2d
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e18a      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e186      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a34:	2308      	movs	r3, #8
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	e182      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a42:	e17e      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a44:	2320      	movs	r3, #32
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4a:	e17a      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a4c:	2340      	movs	r3, #64	; 0x40
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e176      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a54:	2380      	movs	r3, #128	; 0x80
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e172      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a5b      	ldr	r2, [pc, #364]	; (8009bd0 <UART_SetConfig+0x638>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d130      	bne.n	8009ac8 <UART_SetConfig+0x530>
 8009a66:	4b58      	ldr	r3, [pc, #352]	; (8009bc8 <UART_SetConfig+0x630>)
 8009a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d826      	bhi.n	8009ac0 <UART_SetConfig+0x528>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x4e0>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a91 	.word	0x08009a91
 8009a7c:	08009a99 	.word	0x08009a99
 8009a80:	08009aa1 	.word	0x08009aa1
 8009a84:	08009aa9 	.word	0x08009aa9
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009ab9 	.word	0x08009ab9
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e154      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e150      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e14c      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aae:	e148      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ab0:	2320      	movs	r3, #32
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e144      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e140      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ac0:	2380      	movs	r3, #128	; 0x80
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e13c      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a41      	ldr	r2, [pc, #260]	; (8009bd4 <UART_SetConfig+0x63c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	f040 8082 	bne.w	8009bd8 <UART_SetConfig+0x640>
 8009ad4:	4b3c      	ldr	r3, [pc, #240]	; (8009bc8 <UART_SetConfig+0x630>)
 8009ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009adc:	2b28      	cmp	r3, #40	; 0x28
 8009ade:	d86d      	bhi.n	8009bbc <UART_SetConfig+0x624>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <UART_SetConfig+0x550>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009b8d 	.word	0x08009b8d
 8009aec:	08009bbd 	.word	0x08009bbd
 8009af0:	08009bbd 	.word	0x08009bbd
 8009af4:	08009bbd 	.word	0x08009bbd
 8009af8:	08009bbd 	.word	0x08009bbd
 8009afc:	08009bbd 	.word	0x08009bbd
 8009b00:	08009bbd 	.word	0x08009bbd
 8009b04:	08009bbd 	.word	0x08009bbd
 8009b08:	08009b95 	.word	0x08009b95
 8009b0c:	08009bbd 	.word	0x08009bbd
 8009b10:	08009bbd 	.word	0x08009bbd
 8009b14:	08009bbd 	.word	0x08009bbd
 8009b18:	08009bbd 	.word	0x08009bbd
 8009b1c:	08009bbd 	.word	0x08009bbd
 8009b20:	08009bbd 	.word	0x08009bbd
 8009b24:	08009bbd 	.word	0x08009bbd
 8009b28:	08009b9d 	.word	0x08009b9d
 8009b2c:	08009bbd 	.word	0x08009bbd
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009bbd 	.word	0x08009bbd
 8009b38:	08009bbd 	.word	0x08009bbd
 8009b3c:	08009bbd 	.word	0x08009bbd
 8009b40:	08009bbd 	.word	0x08009bbd
 8009b44:	08009bbd 	.word	0x08009bbd
 8009b48:	08009ba5 	.word	0x08009ba5
 8009b4c:	08009bbd 	.word	0x08009bbd
 8009b50:	08009bbd 	.word	0x08009bbd
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009bbd 	.word	0x08009bbd
 8009b5c:	08009bbd 	.word	0x08009bbd
 8009b60:	08009bbd 	.word	0x08009bbd
 8009b64:	08009bbd 	.word	0x08009bbd
 8009b68:	08009bad 	.word	0x08009bad
 8009b6c:	08009bbd 	.word	0x08009bbd
 8009b70:	08009bbd 	.word	0x08009bbd
 8009b74:	08009bbd 	.word	0x08009bbd
 8009b78:	08009bbd 	.word	0x08009bbd
 8009b7c:	08009bbd 	.word	0x08009bbd
 8009b80:	08009bbd 	.word	0x08009bbd
 8009b84:	08009bbd 	.word	0x08009bbd
 8009b88:	08009bb5 	.word	0x08009bb5
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e0d6      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009b94:	2304      	movs	r3, #4
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e0d2      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba2:	e0ce      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009baa:	e0ca      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009bac:	2320      	movs	r3, #32
 8009bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb2:	e0c6      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e0c2      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e0be      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009bc4:	40011400 	.word	0x40011400
 8009bc8:	58024400 	.word	0x58024400
 8009bcc:	40007800 	.word	0x40007800
 8009bd0:	40007c00 	.word	0x40007c00
 8009bd4:	40011800 	.word	0x40011800
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4aad      	ldr	r2, [pc, #692]	; (8009e94 <UART_SetConfig+0x8fc>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d176      	bne.n	8009cd0 <UART_SetConfig+0x738>
 8009be2:	4bad      	ldr	r3, [pc, #692]	; (8009e98 <UART_SetConfig+0x900>)
 8009be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bea:	2b28      	cmp	r3, #40	; 0x28
 8009bec:	d86c      	bhi.n	8009cc8 <UART_SetConfig+0x730>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <UART_SetConfig+0x65c>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c99 	.word	0x08009c99
 8009bf8:	08009cc9 	.word	0x08009cc9
 8009bfc:	08009cc9 	.word	0x08009cc9
 8009c00:	08009cc9 	.word	0x08009cc9
 8009c04:	08009cc9 	.word	0x08009cc9
 8009c08:	08009cc9 	.word	0x08009cc9
 8009c0c:	08009cc9 	.word	0x08009cc9
 8009c10:	08009cc9 	.word	0x08009cc9
 8009c14:	08009ca1 	.word	0x08009ca1
 8009c18:	08009cc9 	.word	0x08009cc9
 8009c1c:	08009cc9 	.word	0x08009cc9
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cc9 	.word	0x08009cc9
 8009c28:	08009cc9 	.word	0x08009cc9
 8009c2c:	08009cc9 	.word	0x08009cc9
 8009c30:	08009cc9 	.word	0x08009cc9
 8009c34:	08009ca9 	.word	0x08009ca9
 8009c38:	08009cc9 	.word	0x08009cc9
 8009c3c:	08009cc9 	.word	0x08009cc9
 8009c40:	08009cc9 	.word	0x08009cc9
 8009c44:	08009cc9 	.word	0x08009cc9
 8009c48:	08009cc9 	.word	0x08009cc9
 8009c4c:	08009cc9 	.word	0x08009cc9
 8009c50:	08009cc9 	.word	0x08009cc9
 8009c54:	08009cb1 	.word	0x08009cb1
 8009c58:	08009cc9 	.word	0x08009cc9
 8009c5c:	08009cc9 	.word	0x08009cc9
 8009c60:	08009cc9 	.word	0x08009cc9
 8009c64:	08009cc9 	.word	0x08009cc9
 8009c68:	08009cc9 	.word	0x08009cc9
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cc9 	.word	0x08009cc9
 8009c7c:	08009cc9 	.word	0x08009cc9
 8009c80:	08009cc9 	.word	0x08009cc9
 8009c84:	08009cc9 	.word	0x08009cc9
 8009c88:	08009cc9 	.word	0x08009cc9
 8009c8c:	08009cc9 	.word	0x08009cc9
 8009c90:	08009cc9 	.word	0x08009cc9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e050      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca6:	e04c      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e048      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e044      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009cb8:	2320      	movs	r3, #32
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e040      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e03c      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e038      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a71      	ldr	r2, [pc, #452]	; (8009e9c <UART_SetConfig+0x904>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d130      	bne.n	8009d3c <UART_SetConfig+0x7a4>
 8009cda:	4b6f      	ldr	r3, [pc, #444]	; (8009e98 <UART_SetConfig+0x900>)
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	d826      	bhi.n	8009d34 <UART_SetConfig+0x79c>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <UART_SetConfig+0x754>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009d05 	.word	0x08009d05
 8009cf0:	08009d0d 	.word	0x08009d0d
 8009cf4:	08009d15 	.word	0x08009d15
 8009cf8:	08009d1d 	.word	0x08009d1d
 8009cfc:	08009d25 	.word	0x08009d25
 8009d00:	08009d2d 	.word	0x08009d2d
 8009d04:	2302      	movs	r3, #2
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0a:	e01a      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d12:	e016      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d14:	2308      	movs	r3, #8
 8009d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1a:	e012      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e00e      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d24:	2320      	movs	r3, #32
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e00a      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e006      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d34:	2380      	movs	r3, #128	; 0x80
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e002      	b.n	8009d42 <UART_SetConfig+0x7aa>
 8009d3c:	2380      	movs	r3, #128	; 0x80
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a55      	ldr	r2, [pc, #340]	; (8009e9c <UART_SetConfig+0x904>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	f040 80f0 	bne.w	8009f2e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d52:	2b20      	cmp	r3, #32
 8009d54:	dc46      	bgt.n	8009de4 <UART_SetConfig+0x84c>
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	db75      	blt.n	8009e46 <UART_SetConfig+0x8ae>
 8009d5a:	3b02      	subs	r3, #2
 8009d5c:	2b1e      	cmp	r3, #30
 8009d5e:	d872      	bhi.n	8009e46 <UART_SetConfig+0x8ae>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <UART_SetConfig+0x7d0>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009deb 	.word	0x08009deb
 8009d6c:	08009e47 	.word	0x08009e47
 8009d70:	08009df3 	.word	0x08009df3
 8009d74:	08009e47 	.word	0x08009e47
 8009d78:	08009e47 	.word	0x08009e47
 8009d7c:	08009e47 	.word	0x08009e47
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e47 	.word	0x08009e47
 8009d88:	08009e47 	.word	0x08009e47
 8009d8c:	08009e47 	.word	0x08009e47
 8009d90:	08009e47 	.word	0x08009e47
 8009d94:	08009e47 	.word	0x08009e47
 8009d98:	08009e47 	.word	0x08009e47
 8009d9c:	08009e47 	.word	0x08009e47
 8009da0:	08009e13 	.word	0x08009e13
 8009da4:	08009e47 	.word	0x08009e47
 8009da8:	08009e47 	.word	0x08009e47
 8009dac:	08009e47 	.word	0x08009e47
 8009db0:	08009e47 	.word	0x08009e47
 8009db4:	08009e47 	.word	0x08009e47
 8009db8:	08009e47 	.word	0x08009e47
 8009dbc:	08009e47 	.word	0x08009e47
 8009dc0:	08009e47 	.word	0x08009e47
 8009dc4:	08009e47 	.word	0x08009e47
 8009dc8:	08009e47 	.word	0x08009e47
 8009dcc:	08009e47 	.word	0x08009e47
 8009dd0:	08009e47 	.word	0x08009e47
 8009dd4:	08009e47 	.word	0x08009e47
 8009dd8:	08009e47 	.word	0x08009e47
 8009ddc:	08009e47 	.word	0x08009e47
 8009de0:	08009e39 	.word	0x08009e39
 8009de4:	2b40      	cmp	r3, #64	; 0x40
 8009de6:	d02a      	beq.n	8009e3e <UART_SetConfig+0x8a6>
 8009de8:	e02d      	b.n	8009e46 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009dea:	f7fd fb4f 	bl	800748c <HAL_RCCEx_GetD3PCLK1Freq>
 8009dee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009df0:	e02f      	b.n	8009e52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df2:	f107 0314 	add.w	r3, r7, #20
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd fb5e 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e00:	e027      	b.n	8009e52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fd fcaa 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e10:	e01f      	b.n	8009e52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e12:	4b21      	ldr	r3, [pc, #132]	; (8009e98 <UART_SetConfig+0x900>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e1e:	4b1e      	ldr	r3, [pc, #120]	; (8009e98 <UART_SetConfig+0x900>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	08db      	lsrs	r3, r3, #3
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	4a1d      	ldr	r2, [pc, #116]	; (8009ea0 <UART_SetConfig+0x908>)
 8009e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e30:	e00f      	b.n	8009e52 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8009e32:	4b1b      	ldr	r3, [pc, #108]	; (8009ea0 <UART_SetConfig+0x908>)
 8009e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e36:	e00c      	b.n	8009e52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e38:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <UART_SetConfig+0x90c>)
 8009e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e3c:	e009      	b.n	8009e52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e44:	e005      	b.n	8009e52 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 81e6 	beq.w	800a226 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <UART_SetConfig+0x910>)
 8009e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e64:	461a      	mov	r2, r3
 8009e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e6c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	4613      	mov	r3, r2
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	4413      	add	r3, r2
 8009e78:	6a3a      	ldr	r2, [r7, #32]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d305      	bcc.n	8009e8a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e84:	6a3a      	ldr	r2, [r7, #32]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d910      	bls.n	8009eac <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e90:	e1c9      	b.n	800a226 <UART_SetConfig+0xc8e>
 8009e92:	bf00      	nop
 8009e94:	40011c00 	.word	0x40011c00
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	58000c00 	.word	0x58000c00
 8009ea0:	03d09000 	.word	0x03d09000
 8009ea4:	003d0900 	.word	0x003d0900
 8009ea8:	0800a8ac 	.word	0x0800a8ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f04f 0100 	mov.w	r1, #0
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	4ac1      	ldr	r2, [pc, #772]	; (800a1c0 <UART_SetConfig+0xc28>)
 8009eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	f7f6 fa22 	bl	800030c <__aeabi_uldivmod>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4619      	mov	r1, r3
 8009ed0:	f04f 0200 	mov.w	r2, #0
 8009ed4:	f04f 0300 	mov.w	r3, #0
 8009ed8:	020b      	lsls	r3, r1, #8
 8009eda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ede:	0202      	lsls	r2, r0, #8
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	6849      	ldr	r1, [r1, #4]
 8009ee4:	0849      	lsrs	r1, r1, #1
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	f04f 0100 	mov.w	r1, #0
 8009eec:	1814      	adds	r4, r2, r0
 8009eee:	eb43 0501 	adc.w	r5, r3, r1
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 fa04 	bl	800030c <__aeabi_uldivmod>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4613      	mov	r3, r2
 8009f0a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f12:	d308      	bcc.n	8009f26 <UART_SetConfig+0x98e>
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f1a:	d204      	bcs.n	8009f26 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f22:	60da      	str	r2, [r3, #12]
 8009f24:	e17f      	b.n	800a226 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f2c:	e17b      	b.n	800a226 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f36:	f040 80bd 	bne.w	800a0b4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8009f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	dc48      	bgt.n	8009fd4 <UART_SetConfig+0xa3c>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db7b      	blt.n	800a03e <UART_SetConfig+0xaa6>
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d879      	bhi.n	800a03e <UART_SetConfig+0xaa6>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0x9b8>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009fdb 	.word	0x08009fdb
 8009f54:	08009fe3 	.word	0x08009fe3
 8009f58:	0800a03f 	.word	0x0800a03f
 8009f5c:	0800a03f 	.word	0x0800a03f
 8009f60:	08009feb 	.word	0x08009feb
 8009f64:	0800a03f 	.word	0x0800a03f
 8009f68:	0800a03f 	.word	0x0800a03f
 8009f6c:	0800a03f 	.word	0x0800a03f
 8009f70:	08009ffb 	.word	0x08009ffb
 8009f74:	0800a03f 	.word	0x0800a03f
 8009f78:	0800a03f 	.word	0x0800a03f
 8009f7c:	0800a03f 	.word	0x0800a03f
 8009f80:	0800a03f 	.word	0x0800a03f
 8009f84:	0800a03f 	.word	0x0800a03f
 8009f88:	0800a03f 	.word	0x0800a03f
 8009f8c:	0800a03f 	.word	0x0800a03f
 8009f90:	0800a00b 	.word	0x0800a00b
 8009f94:	0800a03f 	.word	0x0800a03f
 8009f98:	0800a03f 	.word	0x0800a03f
 8009f9c:	0800a03f 	.word	0x0800a03f
 8009fa0:	0800a03f 	.word	0x0800a03f
 8009fa4:	0800a03f 	.word	0x0800a03f
 8009fa8:	0800a03f 	.word	0x0800a03f
 8009fac:	0800a03f 	.word	0x0800a03f
 8009fb0:	0800a03f 	.word	0x0800a03f
 8009fb4:	0800a03f 	.word	0x0800a03f
 8009fb8:	0800a03f 	.word	0x0800a03f
 8009fbc:	0800a03f 	.word	0x0800a03f
 8009fc0:	0800a03f 	.word	0x0800a03f
 8009fc4:	0800a03f 	.word	0x0800a03f
 8009fc8:	0800a03f 	.word	0x0800a03f
 8009fcc:	0800a03f 	.word	0x0800a03f
 8009fd0:	0800a031 	.word	0x0800a031
 8009fd4:	2b40      	cmp	r3, #64	; 0x40
 8009fd6:	d02e      	beq.n	800a036 <UART_SetConfig+0xa9e>
 8009fd8:	e031      	b.n	800a03e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fda:	f7fb ff0d 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 8009fde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fe0:	e033      	b.n	800a04a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fe2:	f7fb ff1f 	bl	8005e24 <HAL_RCC_GetPCLK2Freq>
 8009fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fe8:	e02f      	b.n	800a04a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fea:	f107 0314 	add.w	r3, r7, #20
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fd fa62 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ff8:	e027      	b.n	800a04a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ffa:	f107 0308 	add.w	r3, r7, #8
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fd fbae 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a008:	e01f      	b.n	800a04a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00a:	4b6e      	ldr	r3, [pc, #440]	; (800a1c4 <UART_SetConfig+0xc2c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a016:	4b6b      	ldr	r3, [pc, #428]	; (800a1c4 <UART_SetConfig+0xc2c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	08db      	lsrs	r3, r3, #3
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	4a69      	ldr	r2, [pc, #420]	; (800a1c8 <UART_SetConfig+0xc30>)
 800a022:	fa22 f303 	lsr.w	r3, r2, r3
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a028:	e00f      	b.n	800a04a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a02a:	4b67      	ldr	r3, [pc, #412]	; (800a1c8 <UART_SetConfig+0xc30>)
 800a02c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a02e:	e00c      	b.n	800a04a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a030:	4b66      	ldr	r3, [pc, #408]	; (800a1cc <UART_SetConfig+0xc34>)
 800a032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a034:	e009      	b.n	800a04a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03c:	e005      	b.n	800a04a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 80ea 	beq.w	800a226 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	4a5a      	ldr	r2, [pc, #360]	; (800a1c0 <UART_SetConfig+0xc28>)
 800a058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	fbb3 f3f2 	udiv	r3, r3, r2
 800a064:	005a      	lsls	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	441a      	add	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	fbb2 f3f3 	udiv	r3, r2, r3
 800a076:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d916      	bls.n	800a0ac <UART_SetConfig+0xb14>
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d212      	bcs.n	800a0ac <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	b29b      	uxth	r3, r3
 800a08a:	f023 030f 	bic.w	r3, r3, #15
 800a08e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	b29b      	uxth	r3, r3
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0a8:	60da      	str	r2, [r3, #12]
 800a0aa:	e0bc      	b.n	800a226 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0b2:	e0b8      	b.n	800a226 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	dc4b      	bgt.n	800a154 <UART_SetConfig+0xbbc>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f2c0 8087 	blt.w	800a1d0 <UART_SetConfig+0xc38>
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	f200 8084 	bhi.w	800a1d0 <UART_SetConfig+0xc38>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0xb38>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a15b 	.word	0x0800a15b
 800a0d4:	0800a163 	.word	0x0800a163
 800a0d8:	0800a1d1 	.word	0x0800a1d1
 800a0dc:	0800a1d1 	.word	0x0800a1d1
 800a0e0:	0800a16b 	.word	0x0800a16b
 800a0e4:	0800a1d1 	.word	0x0800a1d1
 800a0e8:	0800a1d1 	.word	0x0800a1d1
 800a0ec:	0800a1d1 	.word	0x0800a1d1
 800a0f0:	0800a17b 	.word	0x0800a17b
 800a0f4:	0800a1d1 	.word	0x0800a1d1
 800a0f8:	0800a1d1 	.word	0x0800a1d1
 800a0fc:	0800a1d1 	.word	0x0800a1d1
 800a100:	0800a1d1 	.word	0x0800a1d1
 800a104:	0800a1d1 	.word	0x0800a1d1
 800a108:	0800a1d1 	.word	0x0800a1d1
 800a10c:	0800a1d1 	.word	0x0800a1d1
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a1d1 	.word	0x0800a1d1
 800a118:	0800a1d1 	.word	0x0800a1d1
 800a11c:	0800a1d1 	.word	0x0800a1d1
 800a120:	0800a1d1 	.word	0x0800a1d1
 800a124:	0800a1d1 	.word	0x0800a1d1
 800a128:	0800a1d1 	.word	0x0800a1d1
 800a12c:	0800a1d1 	.word	0x0800a1d1
 800a130:	0800a1d1 	.word	0x0800a1d1
 800a134:	0800a1d1 	.word	0x0800a1d1
 800a138:	0800a1d1 	.word	0x0800a1d1
 800a13c:	0800a1d1 	.word	0x0800a1d1
 800a140:	0800a1d1 	.word	0x0800a1d1
 800a144:	0800a1d1 	.word	0x0800a1d1
 800a148:	0800a1d1 	.word	0x0800a1d1
 800a14c:	0800a1d1 	.word	0x0800a1d1
 800a150:	0800a1b1 	.word	0x0800a1b1
 800a154:	2b40      	cmp	r3, #64	; 0x40
 800a156:	d02e      	beq.n	800a1b6 <UART_SetConfig+0xc1e>
 800a158:	e03a      	b.n	800a1d0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15a:	f7fb fe4d 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 800a15e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a160:	e03c      	b.n	800a1dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a162:	f7fb fe5f 	bl	8005e24 <HAL_RCC_GetPCLK2Freq>
 800a166:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a168:	e038      	b.n	800a1dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a16a:	f107 0314 	add.w	r3, r7, #20
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fd f9a2 	bl	80074b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a178:	e030      	b.n	800a1dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17a:	f107 0308 	add.w	r3, r7, #8
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd faee 	bl	8007760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a188:	e028      	b.n	800a1dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18a:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <UART_SetConfig+0xc2c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a196:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <UART_SetConfig+0xc2c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	08db      	lsrs	r3, r3, #3
 800a19c:	f003 0303 	and.w	r3, r3, #3
 800a1a0:	4a09      	ldr	r2, [pc, #36]	; (800a1c8 <UART_SetConfig+0xc30>)
 800a1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1a8:	e018      	b.n	800a1dc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a1aa:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <UART_SetConfig+0xc30>)
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1ae:	e015      	b.n	800a1dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <UART_SetConfig+0xc34>)
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1b4:	e012      	b.n	800a1dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1bc:	e00e      	b.n	800a1dc <UART_SetConfig+0xc44>
 800a1be:	bf00      	nop
 800a1c0:	0800a8ac 	.word	0x0800a8ac
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a1da:	bf00      	nop
    }

    if (pclk != 0U)
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d021      	beq.n	800a226 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	4a1a      	ldr	r2, [pc, #104]	; (800a250 <UART_SetConfig+0xcb8>)
 800a1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	085b      	lsrs	r3, r3, #1
 800a1fa:	441a      	add	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	fbb2 f3f3 	udiv	r3, r2, r3
 800a204:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	2b0f      	cmp	r3, #15
 800a20a:	d909      	bls.n	800a220 <UART_SetConfig+0xc88>
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a212:	d205      	bcs.n	800a220 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60da      	str	r2, [r3, #12]
 800a21e:	e002      	b.n	800a226 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a242:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a246:	4618      	mov	r0, r3
 800a248:	3738      	adds	r7, #56	; 0x38
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bdb0      	pop	{r4, r5, r7, pc}
 800a24e:	bf00      	nop
 800a250:	0800a8ac 	.word	0x0800a8ac

0800a254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f003 0310 	and.w	r3, r3, #16
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	430a      	orrs	r2, r1
 800a326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01a      	beq.n	800a36a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a352:	d10a      	bne.n	800a36a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00a      	beq.n	800a38c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	605a      	str	r2, [r3, #4]
  }
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3a8:	f7f8 f924 	bl	80025f4 <HAL_GetTick>
 800a3ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d10e      	bne.n	800a3da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f82f 	bl	800a42e <UART_WaitOnFlagUntilTimeout>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e025      	b.n	800a426 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d10e      	bne.n	800a406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f819 	bl	800a42e <UART_WaitOnFlagUntilTimeout>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e00f      	b.n	800a426 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2220      	movs	r2, #32
 800a412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b09c      	sub	sp, #112	; 0x70
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	4613      	mov	r3, r2
 800a43c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a43e:	e0a9      	b.n	800a594 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	f000 80a5 	beq.w	800a594 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a44a:	f7f8 f8d3 	bl	80025f4 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a456:	429a      	cmp	r2, r3
 800a458:	d302      	bcc.n	800a460 <UART_WaitOnFlagUntilTimeout+0x32>
 800a45a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d140      	bne.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a468:	e853 3f00 	ldrex	r3, [r3]
 800a46c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a474:	667b      	str	r3, [r7, #100]	; 0x64
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a480:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e6      	bne.n	800a460 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3308      	adds	r3, #8
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	f023 0301 	bic.w	r3, r3, #1
 800a4a8:	663b      	str	r3, [r7, #96]	; 0x60
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e5      	bne.n	800a492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e069      	b.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d051      	beq.n	800a594 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4fe:	d149      	bne.n	800a594 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a508:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a51e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	461a      	mov	r2, r3
 800a526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a528:	637b      	str	r3, [r7, #52]	; 0x34
 800a52a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e6      	bne.n	800a50a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3308      	adds	r3, #8
 800a542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	613b      	str	r3, [r7, #16]
   return(result);
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	66bb      	str	r3, [r7, #104]	; 0x68
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3308      	adds	r3, #8
 800a55a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a55c:	623a      	str	r2, [r7, #32]
 800a55e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	69f9      	ldr	r1, [r7, #28]
 800a562:	6a3a      	ldr	r2, [r7, #32]
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	61bb      	str	r3, [r7, #24]
   return(result);
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e5      	bne.n	800a53c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2220      	movs	r2, #32
 800a574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2220      	movs	r2, #32
 800a584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e010      	b.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	69da      	ldr	r2, [r3, #28]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4013      	ands	r3, r2
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2301      	moveq	r3, #1
 800a5a6:	2300      	movne	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	f43f af46 	beq.w	800a440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3770      	adds	r7, #112	; 0x70
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e027      	b.n	800a624 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2224      	movs	r2, #36	; 0x24
 800a5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0201 	bic.w	r2, r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a602:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a644:	2302      	movs	r3, #2
 800a646:	e02d      	b.n	800a6a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2224      	movs	r2, #36	; 0x24
 800a654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0201 	bic.w	r2, r2, #1
 800a66e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f84f 	bl	800a728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2220      	movs	r2, #32
 800a696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d101      	bne.n	800a6c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e02d      	b.n	800a720 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2224      	movs	r2, #36	; 0x24
 800a6d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f022 0201 	bic.w	r2, r2, #1
 800a6ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	430a      	orrs	r2, r1
 800a6fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f811 	bl	800a728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a734:	2b00      	cmp	r3, #0
 800a736:	d108      	bne.n	800a74a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a748:	e031      	b.n	800a7ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a74a:	2310      	movs	r3, #16
 800a74c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a74e:	2310      	movs	r3, #16
 800a750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	0e5b      	lsrs	r3, r3, #25
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	0f5b      	lsrs	r3, r3, #29
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	7b3a      	ldrb	r2, [r7, #12]
 800a776:	4911      	ldr	r1, [pc, #68]	; (800a7bc <UARTEx_SetNbDataToProcess+0x94>)
 800a778:	5c8a      	ldrb	r2, [r1, r2]
 800a77a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a77e:	7b3a      	ldrb	r2, [r7, #12]
 800a780:	490f      	ldr	r1, [pc, #60]	; (800a7c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a784:	fb93 f3f2 	sdiv	r3, r3, r2
 800a788:	b29a      	uxth	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	7b7a      	ldrb	r2, [r7, #13]
 800a794:	4909      	ldr	r1, [pc, #36]	; (800a7bc <UARTEx_SetNbDataToProcess+0x94>)
 800a796:	5c8a      	ldrb	r2, [r1, r2]
 800a798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a79c:	7b7a      	ldrb	r2, [r7, #13]
 800a79e:	4908      	ldr	r1, [pc, #32]	; (800a7c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a7a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7ae:	bf00      	nop
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	0800a8c4 	.word	0x0800a8c4
 800a7c0:	0800a8cc 	.word	0x0800a8cc

0800a7c4 <__libc_init_array>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	4d0d      	ldr	r5, [pc, #52]	; (800a7fc <__libc_init_array+0x38>)
 800a7c8:	4c0d      	ldr	r4, [pc, #52]	; (800a800 <__libc_init_array+0x3c>)
 800a7ca:	1b64      	subs	r4, r4, r5
 800a7cc:	10a4      	asrs	r4, r4, #2
 800a7ce:	2600      	movs	r6, #0
 800a7d0:	42a6      	cmp	r6, r4
 800a7d2:	d109      	bne.n	800a7e8 <__libc_init_array+0x24>
 800a7d4:	4d0b      	ldr	r5, [pc, #44]	; (800a804 <__libc_init_array+0x40>)
 800a7d6:	4c0c      	ldr	r4, [pc, #48]	; (800a808 <__libc_init_array+0x44>)
 800a7d8:	f000 f82e 	bl	800a838 <_init>
 800a7dc:	1b64      	subs	r4, r4, r5
 800a7de:	10a4      	asrs	r4, r4, #2
 800a7e0:	2600      	movs	r6, #0
 800a7e2:	42a6      	cmp	r6, r4
 800a7e4:	d105      	bne.n	800a7f2 <__libc_init_array+0x2e>
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ec:	4798      	blx	r3
 800a7ee:	3601      	adds	r6, #1
 800a7f0:	e7ee      	b.n	800a7d0 <__libc_init_array+0xc>
 800a7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7f6:	4798      	blx	r3
 800a7f8:	3601      	adds	r6, #1
 800a7fa:	e7f2      	b.n	800a7e2 <__libc_init_array+0x1e>
 800a7fc:	0800a8dc 	.word	0x0800a8dc
 800a800:	0800a8dc 	.word	0x0800a8dc
 800a804:	0800a8dc 	.word	0x0800a8dc
 800a808:	0800a8e0 	.word	0x0800a8e0

0800a80c <memcpy>:
 800a80c:	440a      	add	r2, r1
 800a80e:	4291      	cmp	r1, r2
 800a810:	f100 33ff 	add.w	r3, r0, #4294967295
 800a814:	d100      	bne.n	800a818 <memcpy+0xc>
 800a816:	4770      	bx	lr
 800a818:	b510      	push	{r4, lr}
 800a81a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a81e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a822:	4291      	cmp	r1, r2
 800a824:	d1f9      	bne.n	800a81a <memcpy+0xe>
 800a826:	bd10      	pop	{r4, pc}

0800a828 <memset>:
 800a828:	4402      	add	r2, r0
 800a82a:	4603      	mov	r3, r0
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d100      	bne.n	800a832 <memset+0xa>
 800a830:	4770      	bx	lr
 800a832:	f803 1b01 	strb.w	r1, [r3], #1
 800a836:	e7f9      	b.n	800a82c <memset+0x4>

0800a838 <_init>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr

0800a844 <_fini>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	bf00      	nop
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr
